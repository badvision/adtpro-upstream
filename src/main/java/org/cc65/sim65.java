/* This file was generated from sim65 by Mips2Java on Wed Nov 02 05:02:53 UTC 2016 */
package org.cc65;

public final class sim65 extends org.ibex.nestedvm.Runtime {
    /* program counter */
    private int pc = 0;

    /* General Purpose registers */
    private final static int r0 = 0;
    private int      r1,  r2,  r3,  r4,  r5,  r6,  r7,
                r8,  r9,  r10, r11, r12, r13, r14, r15,
                r16, r17, r18, r19, r20, r21, r22, r23,
                r24, r25, r26, r27, r28, r29, r30, r31,
                hi = 0, lo = 0;
    /* FP registers */
    private int f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,
                f8,  f9,  f10, f11, f12, f13, f14, f15,
                f16, f17, f18, f19, f20, f21, f22, f23,
                f24, f25, f26, f27, f28, f29, f30, f31;
    /* FP Control Register */
    private int fcsr = 0;

    private final void run_10000() throws ExecutionException { /* 0x10000 - 0x10200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10010;
                        pc=0x10010;
                        continue;
                    }
                case 0x10010:
                    /* Next insn is delay slot */ 
                    r31=0x10018;
                    pc=0x101ac;
                    continue;
                case 0x10018:
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10020;
                        pc=0x10020;
                        continue;
                    }
                case 0x10020:
                    /* Next insn is delay slot */ 
                    r31=0x10028;
                    pc=0x10e84;
                    run_10e00(); return;
                case 0x10028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10038:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10048;
                        pc=0x10048;
                        continue;
                    }
                case 0x10048:
                    /* Next insn is delay slot */ 
                    r31=0x10050;
                    pc=0x100e4;
                    continue;
                case 0x10050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10060:
                    r4 = 7 << 16;
                    r2 = 7 << 16;
                    r4 = r4 + -30792;
                    r2 = r2 + -30789;
                    r2 = r2 - r4;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x10088;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x10080:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10088:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10080;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x1009c:
                    r4 = 7 << 16;
                    r2 = 7 << 16;
                    r4 = r4 + -30792;
                    r2 = r2 + -30792;
                    r2 = r2 - r4;
                    r2 = r2 >> 2;
                    r3 = r2 >>> 31;
                    r2 = r3 + r2;
                    r5 = r2 >> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x100d0;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x100c8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x100d0:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x100c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x100e4:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = 7 << 16;
                    addr=r19+-30408;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                        pc=0x10190;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = 6 << 16;
                    r17 = 6 << 16;
                    r18 = r18 + 18952;
                    r17 = r17 + 18956;
                    r16 = 7 << 16;
                    r17 = r17 - r18;
                    r2 = readPages[(r16+-30404)>>>12][((r16+-30404)>>>2)&0x3ff];
                    r17 = r17 >> 2;
                    r17 = r17 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10164;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10138:
                    r3 = r2 << 2;
                    r3 = r18 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r16+-30404)>>>12][((r16+-30404)>>>2)&0x3ff] = r2;
                    pc=r3;
                    r31=0x10150;
                    return;
                case 0x10150:
                    r2 = readPages[(r16+-30404)>>>12][((r16+-30404)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10138;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10164:
                    /* Next insn is delay slot */ 
                    r31=0x1016c;
                    pc=0x10060;
                    continue;
                case 0x1016c:
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x1018c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r4 = 6 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 32440;
                    r31=0x10188;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10188:
                    r2 = r0 + 1;
                case 0x1018c:
                    addr=r19+-30408;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x10190:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x101ac:
                    r2 = 0 << 16;
                    r29 = r29 + -24;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                        pc=0x101d4;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = 6 << 16;
                    r5 = 7 << 16;
                    r4 = r4 + 32440;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -30400;
                    r31=0x101d4;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x101d4:
                    r4 = 6 << 16;
                    r2 = readPages[(r4+32444)>>>12][((r4+32444)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 0 << 16;
                        pc=0x101fc;
                        continue;
                    }
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x101fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r4 + 32444;
                    pc=r2;
                    r31=0x101fc;
                    return;
                case 0x101fc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                case 0x10200:
                    pc=0x10200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10200() throws ExecutionException { /* 0x10200 - 0x10400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10200:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=0x1009c;
                    run_10000(); return;
                case 0x10208:
                    r8 = r7 + r0;
                    r3 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r4 + r0;
                        pc=0x10360;
                        continue;
                    }
                    r9 = r4 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x103d8;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 256 << 16;
                        pc=0x10548;
                        run_10400(); return;
                    }
                    r2 = 256 << 16;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r10 = r0 + 8;
                        pc=0x107e0;
                        run_10600(); return;
                    }
                    r10 = r0 + 8;
                    r10 = r0 + r0;
                case 0x10240:
                    r2 = 6 << 16;
                    r10 = r7 >>> (r10&0x1f);
                    r2 = r2 + 24832;
                    r2 = r10 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r2 + r6;
                    r2 = r0 + 32;
                    r2 = r2 - r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r2&0x1f);
                        pc=0x1027c;
                        continue;
                    }
                    r4 = r4 << (r2&0x1f);
                    r6 = r5 >>> (r6&0x1f);
                    r8 = r7 << (r2&0x1f);
                    r9 = r4 | r6;
                    r3 = r5 << (r2&0x1f);
                case 0x1027c:
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x1028c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1028c:
                    r10 = r8 & 65535;
                    r5 = r3 >>> 16;
                    r6 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r5 = r7 | r5;
                    { long hilo = (long)(r6) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102c0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102c0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x102e8;
                        continue;
                    }
                    r5 = r5 + r8;
                    r7 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r6 + -1;
                        pc=0x102e4;
                        continue;
                    }
                    r9 = r6 + -1;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -2;
                        pc=0x10834;
                        run_10800(); return;
                    }
                    r6 = r6 + -2;
                case 0x102e4:
                    r6 = r9 + r0;
                case 0x102e8:
                    r4 = r5 - r4;
                    r9 = r3 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102fc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102fc:
                    r5 = lo;
                    r11 = hi;
                    r3 = r11 << 16;
                    r3 = r3 | r9;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10328;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10328:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10350;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r5 + -1;
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r2 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10350:
                    r3 = r6 << 16;
                    r3 = r5 | r3;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10360:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1052c;
                        run_10400(); return;
                    }
                    r3 = r0 + r0;
                    r2 = 1 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10534;
                        run_10400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 24;
                        pc=0x107ac;
                        run_10600(); return;
                    }
                    r8 = r0 + 24;
                    r8 = r0 + 16;
                    r9 = r0 + 16;
                case 0x10394:
                    r3 = 6 << 16;
                    r8 = r6 >>> (r8&0x1f);
                    r3 = r3 + 24832;
                    r3 = r8 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r9;
                    r9 = r0 + 32;
                    r9 = r9 - r2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 >>> (r2&0x1f);
                        pc=0x10574;
                        run_10400(); return;
                    }
                    r3 = r7 >>> (r2&0x1f);
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                        pc=0x107e8;
                        run_10600(); return;
                    }
                    r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r3 = r7 ^ 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x103d8:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                        pc=0x103fc;
                        continue;
                    }
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x103f0;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x103f0:
                    r8 = lo;
                    r2 = 1 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x103fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10560;
                        run_10400(); return;
                    }
                case 0x10400:
                    pc=0x10400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10400() throws ExecutionException { /* 0x10400 - 0x10600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10400:
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 24;
                        pc=0x107cc;
                        run_10600(); return;
                    }
                    r6 = r0 + 24;
                    r6 = r0 + 16;
                    r9 = r0 + 16;
                case 0x1041c:
                    r2 = 6 << 16;
                    r6 = r8 >>> (r6&0x1f);
                    r2 = r2 + 24832;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + 32;
                    r9 = r2 + r9;
                    r7 = r7 - r9;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r4 >>> (r9&0x1f);
                        pc=0x10680;
                        run_10600(); return;
                    }
                    r11 = r4 >>> (r9&0x1f);
                    r5 = r4 - r8;
                    r6 = r8 >>> 16;
                    r10 = r8 & 65535;
                    r2 = r0 + 1;
                case 0x10454:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10460;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10460:
                    r7 = r3 >>> 16;
                    r9 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r7 = r11 | r7;
                    { long hilo = (long)(r9) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r11 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10490;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10490:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x104b8;
                        continue;
                    }
                    r7 = r7 + r8;
                    r5 = ((r7 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r9 + -1;
                        pc=0x104b4;
                        continue;
                    }
                    r11 = r9 + -1;
                    r5 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r9 + -2;
                        pc=0x1082c;
                        run_10800(); return;
                    }
                    r9 = r9 + -2;
                case 0x104b4:
                    r9 = r11 + r0;
                case 0x104b8:
                    r4 = r7 - r4;
                    r11 = r3 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104cc;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104cc:
                    r5 = lo;
                    r12 = hi;
                    r3 = r12 << 16;
                    r3 = r3 | r11;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104f8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104f8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10520;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r5 + -1;
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r4 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10520:
                    r3 = r9 << 16;
                    /* Next insn is delay slot */ 
                    r3 = r5 | r3;
                    pc=r31;
                    return;
                case 0x1052c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10534:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107b4;
                        run_10600(); return;
                    }
                    r8 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x10394;
                    run_10200(); return;
                case 0x10548:
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107c0;
                        run_10600(); return;
                    }
                    r10 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 16;
                    pc=0x10240;
                    run_10200(); return;
                case 0x10560:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107d4;
                        run_10600(); return;
                    }
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x1041c;
                    continue;
                case 0x10574:
                    r6 = r6 << (r9&0x1f);
                    r6 = r6 | r3;
                    r12 = r4 >>> (r2&0x1f);
                    r8 = r6 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10590;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10590:
                    r14 = r6 & 65535;
                    r2 = r5 >>> (r2&0x1f);
                    r4 = r4 << (r9&0x1f);
                    r4 = r4 | r2;
                    r15 = r4 >>> 16;
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r15;
                    { long hilo = (long)(r13) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x105d0;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x105d0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r7 << (r9&0x1f);
                        pc=0x105ec;
                        continue;
                    }
                    r2 = r7 << (r9&0x1f);
                    r11 = r11 + r6;
                    r3 = ((r11 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r13 + -1;
                        pc=0x10808;
                        run_10800(); return;
                    }
                    r7 = r13 + -1;
                case 0x105e8:
                    r13 = r7 + r0;
                case 0x105ec:
                    r10 = r11 - r10;
                    r4 = r4 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10600;
                        run_10600(); return;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10600:
                    pc=0x10600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10600() throws ExecutionException { /* 0x10600 - 0x10800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10600:
                    r3 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r4 = r7 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1062c;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1062c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10648;
                        continue;
                    }
                    r4 = r4 + r6;
                    r7 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + -1;
                        pc=0x107f4;
                        continue;
                    }
                    r8 = r3 + -1;
                case 0x10644:
                    r3 = r8 + r0;
                case 0x10648:
                    r13 = r13 << 16;
                    r13 = r3 | r13;
                    r4 = r4 - r11;
                    { long hilo = (r13 & 0xffffffffL) * (r2 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r2 = hi;
                    r6 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r3 = lo;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107a0;
                        continue;
                    }
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x10790;
                        continue;
                    }
                case 0x10674:
                    r3 = r13 + r0;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10680:
                    r8 = r8 << (r7&0x1f);
                    r6 = r8 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10694;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10694:
                    r10 = r8 & 65535;
                    r4 = r4 << (r7&0x1f);
                    r9 = r5 >>> (r9&0x1f);
                    r4 = r4 | r9;
                    r9 = r4 >>> 16;
                    r3 = r5 << (r7&0x1f);
                    r13 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r9;
                    { long hilo = (long)(r13) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x106d8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x106d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10704;
                        continue;
                    }
                    r12 = r12 + r8;
                    r2 = ((r12 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r13 + -1;
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r5 = r13 + -1;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r13 = r13 + -2;
                    r12 = r12 + r8;
                case 0x10704:
                    r7 = r12 - r7;
                    r4 = r4 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10718;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10718:
                    r2 = lo;
                    r9 = hi;
                    r9 = r9 << 16;
                    r9 = r9 | r4;
                    { long hilo = (long)(r2) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10744;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10744:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10770;
                        continue;
                    }
                    r9 = r9 + r8;
                    r4 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r2 + -1;
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r7 = r2 + -1;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r2 = r2 + -2;
                    r9 = r9 + r8;
                case 0x10770:
                    r13 = r13 << 16;
                    r5 = r9 - r5;
                    /* Next insn is delay slot */ 
                    r2 = r2 | r13;
                    pc=0x10454;
                    run_10400(); return;
                case 0x10780:
                    /* Next insn is delay slot */ 
                    r5 = r4 + r0;
                    pc=0x10520;
                    run_10400(); return;
                case 0x10788:
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    pc=0x10350;
                    run_10200(); return;
                case 0x10790:
                    r5 = r5 << (r9&0x1f);
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10674;
                        continue;
                    }
                case 0x107a0:
                    r3 = r13 + -1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107ac:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107b4:
                    r8 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107c0:
                    r10 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107cc:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107d4:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107e0:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107e8:
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107f4:
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -2;
                        pc=0x10644;
                        continue;
                    }
                    r3 = r3 + -2;
                case 0x10800:
                    pc=0x10800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10800() throws ExecutionException { /* 0x10800 - 0x10a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10800:
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10648;
                    run_10600(); return;
                case 0x10808:
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r13 + -2;
                        pc=0x105e8;
                        run_10400(); return;
                    }
                    r13 = r13 + -2;
                    /* Next insn is delay slot */ 
                    r11 = r11 + r6;
                    pc=0x105ec;
                    run_10400(); return;
                case 0x1081c:
                    /* Next insn is delay slot */ 
                    r2 = r7 + r0;
                    pc=0x10770;
                    run_10600(); return;
                case 0x10824:
                    /* Next insn is delay slot */ 
                    r13 = r5 + r0;
                    pc=0x10704;
                    run_10600(); return;
                case 0x1082c:
                    /* Next insn is delay slot */ 
                    r7 = r7 + r8;
                    pc=0x104b8;
                    run_10400(); return;
                case 0x10834:
                    /* Next insn is delay slot */ 
                    r5 = r5 + r8;
                    pc=0x102e8;
                    run_10200(); return;
                case 0x1083c:
                    r8 = r7 + r0;
                    r9 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r4 + r0;
                        pc=0x1098c;
                        continue;
                    }
                    r2 = r4 + r0;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 1 << 16;
                        pc=0x10a18;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 256 << 16;
                        pc=0x10b80;
                        run_10a00(); return;
                    }
                    r3 = 256 << 16;
                    r3 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e18;
                        run_10e00(); return;
                    }
                    r10 = r0 + r0;
                case 0x10874:
                    r3 = 6 << 16;
                    r6 = r7 >>> (r6&0x1f);
                    r3 = r3 + 24832;
                    r3 = r6 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r12 = r0 + 32;
                    r10 = r3 + r10;
                    r12 = r12 - r10;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r12&0x1f);
                        pc=0x10cdc;
                        run_10c00(); return;
                    }
                    r4 = r4 << (r12&0x1f);
                    r10 = r5 >>> (r10&0x1f);
                    r8 = r7 << (r12&0x1f);
                    r2 = r4 | r10;
                    r9 = r5 << (r12&0x1f);
                case 0x108ac:
                    r10 = r8 >>> 16;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108bc;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108bc:
                    r13 = r8 & 65535;
                    r11 = r9 >>> 16;
                    r7 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r11 = r3 | r11;
                    { long hilo = (long)(r7) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108f0;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108f0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r11 = r11 + r8;
                    r2 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e5c;
                        run_10e00(); return;
                    }
                case 0x10914:
                    r2 = r11 - r7;
                case 0x10918:
                    r9 = r9 & 65535;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10928;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10928:
                    r3 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r4 = r4 | r9;
                    { long hilo = (long)(r3) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10954;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10954:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                case 0x1097c:
                    r3 = r4 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x1098c:
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b60;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b6c;
                        run_10a00(); return;
                    }
                    r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = 256 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r0 + 24;
                        pc=0x10df0;
                        run_10c00(); return;
                    }
                    r9 = r0 + 24;
                    r9 = r0 + 16;
                    r10 = r0 + 16;
                case 0x109c0:
                    r8 = 6 << 16;
                    r9 = r6 >>> (r9&0x1f);
                    r8 = r8 + 24832;
                    r8 = r9 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 + r10;
                    r10 = r0 + 32;
                    r10 = r10 - r3;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        r13 = r4 >>> (r3&0x1f);
                        pc=0x10bac;
                        run_10a00(); return;
                    }
                    r13 = r4 >>> (r3&0x1f);
                    r3 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r5 - r7;
                        pc=0x10a08;
                        run_10a00(); return;
                    }
                    r3 = r5 - r7;
                    r3 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                case 0x10a00:
                    pc=0x10a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10a00() throws ExecutionException { /* 0x10a00 - 0x10c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10a00:
                    r3 = r5 - r7;
                case 0x10a08:
                    r4 = r4 - r6;
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r5;
                    pc=r31;
                    return;
                case 0x10a18:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x10a38;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x10a30;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a30:
                    r8 = lo;
                    r2 = 1 << 16;
                case 0x10a38:
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b98;
                        continue;
                    }
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 24;
                        pc=0x10e10;
                        run_10e00(); return;
                    }
                    r3 = r0 + 24;
                    r3 = r0 + 16;
                    r6 = r0 + 16;
                case 0x10a5c:
                    r2 = 6 << 16;
                    r3 = r8 >>> (r3&0x1f);
                    r2 = r2 + 24832;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r12 = r0 + 32;
                    r6 = r2 + r6;
                    r12 = r12 - r6;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 >>> (r6&0x1f);
                        pc=0x10ce4;
                        run_10c00(); return;
                    }
                    r10 = r4 >>> (r6&0x1f);
                    r6 = r4 - r8;
                    r2 = r8 >>> 16;
                    r7 = r8 & 65535;
                case 0x10a90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10a9c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a9c:
                    r10 = r9 >>> 16;
                    r4 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r10 = r3 | r10;
                    { long hilo = (long)(r4) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10acc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10acc:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10aec;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10aec;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e54;
                        run_10e00(); return;
                    }
                case 0x10aec:
                    r4 = r10 - r4;
                    r9 = r9 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b00;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b00:
                    r3 = lo;
                    r5 = hi;
                    r5 = r5 << 16;
                    r9 = r5 | r9;
                    { long hilo = (long)(r3) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b2c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b2c:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r9 = r9 + r8;
                    r2 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r2 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e4c;
                        run_10e00(); return;
                    }
                case 0x10b50:
                    r3 = r9 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x10b60:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10b6c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10de4;
                        run_10c00(); return;
                    }
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r10 = r0 + r0;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10b80:
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10df8;
                        run_10c00(); return;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 16;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10b98:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e04;
                        run_10e00(); return;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x10a5c;
                    continue;
                case 0x10bac:
                    r2 = r7 >>> (r3&0x1f);
                    r6 = r6 << (r10&0x1f);
                    r6 = r6 | r2;
                    r9 = r6 >>> 16;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10bc8;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10bc8:
                    r2 = r6 & 65535;
                    r11 = r5 >>> (r3&0x1f);
                    r4 = r4 << (r10&0x1f);
                    r4 = r4 | r11;
                    r15 = r4 >>> 16;
                    r7 = r7 << (r10&0x1f);
                    r14 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r15;
                    { long hilo = (long)(r14) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                case 0x10c00:
                    pc=0x10c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10c00() throws ExecutionException { /* 0x10c00 - 0x10e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10c00:
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c0c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c0c:
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 << (r10&0x1f);
                        pc=0x10c28;
                        continue;
                    }
                    r5 = r5 << (r10&0x1f);
                    r12 = r12 + r6;
                    r8 = ((r12 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r14 + -1;
                        pc=0x10e38;
                        run_10e00(); return;
                    }
                    r13 = r14 + -1;
                case 0x10c24:
                    r14 = r13 + r0;
                case 0x10c28:
                    r11 = r12 - r11;
                    r4 = r4 & 65535;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c3c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c3c:
                    r8 = lo;
                    r13 = hi;
                    { long hilo = (long)(r8) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r13 << 16;
                    r4 = r2 | r4;
                    r12 = lo;
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c70;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c70:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c8c;
                        continue;
                    }
                    r4 = r4 + r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r8 + -1;
                        pc=0x10e24;
                        run_10e00(); return;
                    }
                    r9 = r8 + -1;
                case 0x10c88:
                    r8 = r9 + r0;
                case 0x10c8c:
                    r14 = r14 << 16;
                    r8 = r8 | r14;
                    r4 = r4 - r12;
                    { long hilo = (r8 & 0xffffffffL) * (r7 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r8 = hi;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    r9 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        continue;
                    }
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        r2 = r4 - r8;
                        pc=0x10e6c;
                        run_10e00(); return;
                    }
                    r2 = r4 - r8;
                    r7 = lo;
                case 0x10cbc:
                    r7 = r5 - r7;
                    r5 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r2 - r5;
                    r3 = r2 << (r3&0x1f);
                    r7 = r7 >>> (r10&0x1f);
                    r2 = r2 >>> (r10&0x1f);
                    /* Next insn is delay slot */ 
                    r3 = r3 | r7;
                    pc=r31;
                    return;
                case 0x10cdc:
                    /* Next insn is delay slot */ 
                    r12 = r0 + r0;
                    pc=0x108ac;
                    run_10800(); return;
                case 0x10ce4:
                    r8 = r8 << (r12&0x1f);
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10cf8;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10cf8:
                    r7 = r8 & 65535;
                    r6 = r5 >>> (r6&0x1f);
                    r4 = r4 << (r12&0x1f);
                    r6 = r4 | r6;
                    r3 = r6 >>> 16;
                    r9 = r5 << (r12&0x1f);
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r3;
                    { long hilo = (long)(r13) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d3c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d3c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                    r3 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10d60;
                        continue;
                    }
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                case 0x10d60:
                    r5 = r11 - r5;
                    r3 = r6 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d74;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d74:
                    r6 = lo;
                    r10 = hi;
                    r10 = r10 << 16;
                    r10 = r10 | r3;
                    { long hilo = (long)(r6) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10da0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10da0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10dc4;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                case 0x10dc4:
                    /* Next insn is delay slot */ 
                    r6 = r10 - r6;
                    pc=0x10a90;
                    run_10a00(); return;
                case 0x10dcc:
                    r7 = r9 - r7;
                    r6 = r8 - r6;
                    r2 = ((r9 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=0x10cbc;
                    continue;
                case 0x10de4:
                    r9 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df0:
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df8:
                    r6 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e00:
                    pc=0x10e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10e00() throws ExecutionException { /* 0x10e00 - 0x11000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10e00:
                    r10 = r0 + 24;
                case 0x10e04:
                    r3 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e10:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e18:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e24:
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + -2;
                        pc=0x10c88;
                        run_10c00(); return;
                    }
                    r8 = r8 + -2;
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10c8c;
                    run_10c00(); return;
                case 0x10e38:
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r14 = r14 + -2;
                        pc=0x10c24;
                        run_10c00(); return;
                    }
                    r14 = r14 + -2;
                    /* Next insn is delay slot */ 
                    r12 = r12 + r6;
                    pc=0x10c28;
                    run_10c00(); return;
                case 0x10e4c:
                    /* Next insn is delay slot */ 
                    r9 = r9 + r8;
                    pc=0x10b50;
                    run_10a00(); return;
                case 0x10e54:
                    /* Next insn is delay slot */ 
                    r10 = r10 + r8;
                    pc=0x10aec;
                    run_10a00(); return;
                case 0x10e5c:
                    /* Next insn is delay slot */ 
                    r11 = r11 + r8;
                    pc=0x10914;
                    run_10800(); return;
                case 0x10e64:
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10e6c:
                    r2 = ((r5 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        run_10c00(); return;
                    }
                    r7 = lo;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x10cbc;
                    run_10c00(); return;
                case 0x10e84:
                    r2 = 6 << 16;
                    r2 = readPages[(r2+18944)>>>12][((r2+18944)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x10edc;
                        continue;
                    }
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r16 + 18940;
                    r17 = r0 + -1;
                case 0x10eb4:
                    /* Next insn is delay slot */ 
                    r16 = r16 + -4;
                    pc=r2;
                    r31=0x10ebc;
                    return;
                case 0x10ebc:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x10eb4;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                case 0x10edc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10ee4:
                    r2 = r4 + 1;
                case 0x10ee8:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x10ee8;
                        continue;
                    }
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=r31;
                    return;
                case 0x10f00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x10f28;
                    return;
                case 0x10f28:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    pc = 0x10f30;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f34;
                        return;
                    }
                case 0x10f34:
                    r2 = r0 + 1;
                    r3 = r0 + 1;
                    pc = 0x10f3c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f40;
                        return;
                    }
                case 0x10f40:
                case 0x11000:
                    pc=0x11000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11000() throws ExecutionException { /* 0x11000 - 0x11200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r28 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1107c;
                        continue;
                    }
                case 0x11018:
                    writePages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x11024;
                    pc=0x10000;
                    run_10000(); return;
                case 0x11024:
                    r4 = 1 << 16;
                    r4 = r4 + 56;
                    /* Next insn is delay slot */ 
                    r31=0x11034;
                    pc=0x30200;
                    run_30200(); return;
                case 0x11034:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1108c;
                        continue;
                    }
                    r2 = r16 + 4;
                    r4 = r0 + r0;
                case 0x1104c:
                    r2 = r2 + 4;
                    r6 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1104c;
                        continue;
                    }
                case 0x11060:
                    r6 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11070;
                    pc=0x27c00;
                    run_27c00(); return;
                case 0x11070:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1107c;
                    pc=0x30600;
                    run_30600(); return;
                case 0x1107c:
                    r2 = 7 << 16;
                    r28 = r2 + 1984;
                    /* Next insn is delay slot */ 
                    pc=0x11018;
                    continue;
                case 0x1108c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11060;
                    continue;
                case 0x11200:
                    pc=0x11200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11200() throws ExecutionException { /* 0x11200 - 0x11400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11200:
                    r3 = 7 << 16;
                    r4 = readPages[(r3+-30376)>>>12][((r3+-30376)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r4 = r4 << 1;
                    r5 = r4 & 255;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r3 + -30376;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1126c;
                        continue;
                    }
                    r6 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r7 = r4 & 128;
                    r6 = r6 | 2;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11284;
                        continue;
                    }
                case 0x11238:
                    r4 = r4 & 256;
                    r6 = r6 | 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11298;
                        continue;
                    }
                case 0x11248:
                    writePages[(r3+-30376)>>>12][((r3+-30376)>>>2)&0x3ff] = r5;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r4 = r0 + -2;
                    r4 = r6 & r4;
                    r3 = r3 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r4;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1126c:
                    r7 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r6 = r0 + -3;
                    r6 = r7 & r6;
                    r7 = r4 & 128;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11238;
                        continue;
                    }
                case 0x11284:
                    r7 = r0 + -129;
                    r4 = r4 & 256;
                    r6 = r6 & r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11248;
                        continue;
                    }
                case 0x11298:
                    writePages[(r3+-30376)>>>12][((r3+-30376)>>>2)&0x3ff] = r5;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r4 = r6 | 1;
                    r3 = r3 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r4;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11400:
                    pc=0x11400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11400() throws ExecutionException { /* 0x11400 - 0x11600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11400:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11600:
                    pc=0x11600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11600() throws ExecutionException { /* 0x11600 - 0x11800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11600:
                    r4 = 7 << 16;
                    r2 = r0 + 2;
                    r3 = r4 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r6 = readPages[(r3+16)>>>12][((r3+16)>>>2)&0x3ff];
                    r2 = readPages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff];
                    r5 = r6 & 1;
                    r2 = r2 << 1;
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11630;
                        continue;
                    }
                    r2 = r2 | 1;
                case 0x11630:
                    r5 = r2 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11680;
                        continue;
                    }
                    r7 = r2 & 128;
                    r6 = r6 | 2;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11694;
                        continue;
                    }
                case 0x1164c:
                    r2 = r2 & 65280;
                    r6 = r6 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x116a8;
                        continue;
                    }
                case 0x1165c:
                    r2 = r0 + -2;
                    r6 = r6 & r2;
                    r2 = readPages[(r3+24)>>>12][((r3+24)>>>2)&0x3ff];
                    writePages[(r3+16)>>>12][((r3+16)>>>2)&0x3ff] = r6;
                    r2 = r2 + 1;
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r3+24)>>>12][((r3+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11680:
                    r7 = r0 + -3;
                    r6 = r6 & r7;
                    r7 = r2 & 128;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1164c;
                        continue;
                    }
                case 0x11694:
                    r7 = r0 + -129;
                    r2 = r2 & 65280;
                    r6 = r6 & r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1165c;
                        continue;
                    }
                case 0x116a8:
                    r2 = readPages[(r3+24)>>>12][((r3+24)>>>2)&0x3ff];
                    r6 = r6 | 1;
                    r2 = r2 + 1;
                    writePages[(r3+16)>>>12][((r3+16)>>>2)&0x3ff] = r6;
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r3+24)>>>12][((r3+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11800:
                    pc=0x11800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11800() throws ExecutionException { /* 0x11800 - 0x11a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11800:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 | 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11a00:
                    pc=0x11a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11a00() throws ExecutionException { /* 0x11a00 - 0x11c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11a00:
                    r4 = 7 << 16;
                    r3 = readPages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11a70;
                        continue;
                    }
                    r2 = r4 + -30376;
                    r3 = r3 >>> 1;
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r3;
                    r4 = r3 & 255;
                    r5 = r5 | 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11a94;
                        continue;
                    }
                case 0x11a3c:
                    r3 = r3 & 128;
                    r4 = r5 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11aa8;
                        continue;
                    }
                case 0x11a4c:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11a70:
                    r2 = r4 + -30376;
                    r3 = r3 >>> 1;
                    r6 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r5 = r0 + -2;
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r3;
                    r4 = r3 & 255;
                    r5 = r6 & r5;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11a3c;
                        continue;
                    }
                case 0x11a94:
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11a4c;
                        continue;
                    }
                case 0x11aa8:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11c00:
                    pc=0x11c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11c00() throws ExecutionException { /* 0x11c00 - 0x11e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11c00:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r0 + -5;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11e00:
                    pc=0x11e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11e00() throws ExecutionException { /* 0x11e00 - 0x12000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11e00:
                    r2 = r0 + 2;
                    r4 = 7 << 16;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r4 + -30376;
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r5 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e80;
                        continue;
                    }
                    r3 = readPages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff];
                    r6 = r3 & 1;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e98;
                        continue;
                    }
                case 0x11e38:
                    r3 = r3 >>> 1;
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r3;
                    r4 = r3 & 255;
                    r5 = r5 | 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11eb4;
                        continue;
                    }
                case 0x11e50:
                    r3 = r3 & 128;
                    r5 = r5 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11ec8;
                        continue;
                    }
                case 0x11e60:
                    r3 = r0 + -129;
                    r5 = r5 & r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r5;
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11e80:
                    r3 = readPages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff];
                    r3 = r3 | 256;
                    r6 = r3 & 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e38;
                        continue;
                    }
                case 0x11e98:
                    r3 = r3 >>> 1;
                    r6 = r0 + -2;
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r3;
                    r4 = r3 & 255;
                    r5 = r5 & r6;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e50;
                        continue;
                    }
                case 0x11eb4:
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r5 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e60;
                        continue;
                    }
                case 0x11ec8:
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r5 = r5 | 128;
                    r3 = r3 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r5;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12000:
                    pc=0x12000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12000() throws ExecutionException { /* 0x12000 - 0x12200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12000:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 | 4;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12200:
                    pc=0x12200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12200() throws ExecutionException { /* 0x12200 - 0x12400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12200:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    r4 = r3 & 255;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12264;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1227c;
                        continue;
                    }
                case 0x12240:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12264:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12240;
                        continue;
                    }
                case 0x1227c:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12400:
                    pc=0x12400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12400() throws ExecutionException { /* 0x12400 - 0x12600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12400:
                    r4 = 7 << 16;
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r4 + -30376;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r3;
                    r4 = r3 & 255;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12460;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12478;
                        continue;
                    }
                case 0x1243c:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12460:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1243c;
                        continue;
                    }
                case 0x12478:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12600:
                    pc=0x12600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12600() throws ExecutionException { /* 0x12600 - 0x12800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12600:
                    r4 = 7 << 16;
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r4 + -30376;
                    r3 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r4+-30376)>>>12][((r4+-30376)>>>2)&0x3ff] = r3;
                    r4 = r3 & 255;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12660;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12678;
                        continue;
                    }
                case 0x1263c:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12660:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1263c;
                        continue;
                    }
                case 0x12678:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12800:
                    pc=0x12800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12800() throws ExecutionException { /* 0x12800 - 0x12a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12800:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12a00:
                    pc=0x12a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12a00() throws ExecutionException { /* 0x12a00 - 0x12c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12a00:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r3 = readPages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff];
                    r2 = r2 + -30376;
                    r4 = r3 & 255;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a5c;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a74;
                        continue;
                    }
                case 0x12a38:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12a5c:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a38;
                        continue;
                    }
                case 0x12a74:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12c00:
                    pc=0x12c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12c00() throws ExecutionException { /* 0x12c00 - 0x12e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12c00:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r3 = readPages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff];
                    r2 = r2 + -30376;
                    r4 = r3 & 255;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12c5c;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12c74;
                        continue;
                    }
                case 0x12c38:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12c5c:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12c38;
                        continue;
                    }
                case 0x12c74:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12e00:
                    pc=0x12e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12e00() throws ExecutionException { /* 0x12e00 - 0x13000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12e00:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r0 + -65;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13000:
                    pc=0x13000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13000() throws ExecutionException { /* 0x13000 - 0x13200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13000:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff];
                    r4 = r3 & 255;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13060;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13078;
                        continue;
                    }
                case 0x1303c:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13060:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1303c;
                        continue;
                    }
                case 0x13078:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13200:
                    pc=0x13200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13200() throws ExecutionException { /* 0x13200 - 0x13400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13200:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 & 255;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13264;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1327c;
                        continue;
                    }
                case 0x13240:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13264:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13240;
                        continue;
                    }
                case 0x1327c:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13400:
                    pc=0x13400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13400() throws ExecutionException { /* 0x13400 - 0x13600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13400:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    r4 = r3 & 255;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13464;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1347c;
                        continue;
                    }
                case 0x13440:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13464:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13440;
                        continue;
                    }
                case 0x1347c:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13600:
                    pc=0x13600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13600() throws ExecutionException { /* 0x13600 - 0x13800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13600:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r0 + -9;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13800:
                    pc=0x13800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13800() throws ExecutionException { /* 0x13800 - 0x13a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13800:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 & 255;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13864;
                        continue;
                    }
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 & 128;
                    r4 = r4 | 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1387c;
                        continue;
                    }
                case 0x13840:
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13864:
                    r5 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    r3 = r3 & 128;
                    r4 = r5 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13840;
                        continue;
                    }
                case 0x1387c:
                    r3 = r4 | 128;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13a00:
                    pc=0x13a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13a00() throws ExecutionException { /* 0x13a00 - 0x13c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13a00:
                    r2 = r0 + 2;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13c00:
                    pc=0x13c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13c00() throws ExecutionException { /* 0x13c00 - 0x13e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13c00:
                    r2 = 7 << 16;
                    r2 = r2 + -30376;
                    r3 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r3 = r3 | 8;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13e00:
                    pc=0x13e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13e00() throws ExecutionException { /* 0x13e00 - 0x14000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x13e2c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x13e2c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13e38;
                    pc=0x28400;
                    run_28400(); return;
                case 0x13e38:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14000:
                    pc=0x14000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14000() throws ExecutionException { /* 0x14000 - 0x14200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14030;
                    pc=0x28400;
                    run_28400(); return;
                case 0x14030:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r17+-30373;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14044;
                    pc=0x28000;
                    run_28000(); return;
                case 0x14044:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14200:
                    pc=0x14200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14200() throws ExecutionException { /* 0x14200 - 0x14400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14230;
                    pc=0x28400;
                    run_28400(); return;
                case 0x14230:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    addr=r17+-30373;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x14244;
                    pc=0x28000;
                    run_28000(); return;
                case 0x14244:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14400:
                    pc=0x14400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14400() throws ExecutionException { /* 0x14400 - 0x14600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1442c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1442c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1443c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1443c:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14600:
                    pc=0x14600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14600() throws ExecutionException { /* 0x14600 - 0x14800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14630;
                    pc=0x28400;
                    run_28400(); return;
                case 0x14630:
                    addr=r17+-30373;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14640;
                    pc=0x28000;
                    run_28000(); return;
                case 0x14640:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14800:
                    pc=0x14800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14800() throws ExecutionException { /* 0x14800 - 0x14a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1482c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1482c:
                    addr=r16+11;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1483c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1483c:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14a00:
                    pc=0x14a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14a00() throws ExecutionException { /* 0x14a00 - 0x14c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14a00:
                    r2 = r0 + 3;
                    r29 = r29 + -24;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r2 + -30376;
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r2+-30373;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x14a38;
                    pc=0x28000;
                    run_28000(); return;
                case 0x14a38:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14c00:
                    pc=0x14c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14c00() throws ExecutionException { /* 0x14c00 - 0x14e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r5 = r5 & 239;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14c3c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x14c3c:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14e00:
                    pc=0x14e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14e00() throws ExecutionException { /* 0x14e00 - 0x15000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r5 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r5;
                    r2 = r2 | 16;
                    r5 = r5 >>> 8;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r5 = r5 & 255;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14e54;
                    pc=0x28000;
                    run_28000(); return;
                case 0x14e54:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+27;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14e70;
                    pc=0x28000;
                    run_28000(); return;
                case 0x14e70:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+19;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14e8c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x14e8c:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r0 | 65534;
                    r2 = r2 | 4;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x14ea4;
                    pc=0x28400;
                    run_28400(); return;
                case 0x14ea4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15000:
                    pc=0x15000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15000() throws ExecutionException { /* 0x15000 - 0x15200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15000:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x15034;
                    pc=0x28400;
                    run_28400(); return;
                case 0x15034:
                    r18 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1504c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1504c:
                    r2 = r2 + 1;
                    r17 = r2 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15064;
                    pc=0x28000;
                    run_28000(); return;
                case 0x15064:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x150ac;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x15078:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x150ac:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15078;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15200:
                    pc=0x15200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15200() throws ExecutionException { /* 0x15200 - 0x15400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x15234;
                    pc=0x28400;
                    run_28400(); return;
                case 0x15234:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1525c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x1525c:
                    r4 = r2 + r3;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1526c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1526c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15358;
                        continue;
                    }
                    r7 = r3 & 1;
                    r4 = r18 & 15;
                    r4 = r7 + r4;
                    r5 = r2 & 15;
                    r4 = r4 - r5;
                    r6 = r4 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x152ac;
                        continue;
                    }
                    r6 = r4 + -7;
                    r6 = r6 & 15;
                    r6 = r6 + -16;
                case 0x152ac:
                    r5 = r18 & 240;
                    r8 = r2 & 240;
                    r5 = r5 - r8;
                    r5 = r5 + r6;
                    r4 = r5 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x152cc;
                        continue;
                    }
                    r5 = r5 + -96;
                case 0x152cc:
                    r4 = r7 ^ 1;
                    r4 = r4 - r2;
                    r4 = r4 + r5;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15444;
                        run_15400(); return;
                    }
                    r5 = r0 + -3;
                    r3 = r3 & r5;
                    r5 = r4 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15454;
                        run_15400(); return;
                    }
                case 0x152fc:
                    r5 = r4 < 256 ? 1 : 0;
                    r3 = r3 | 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15468;
                        run_15400(); return;
                    }
                case 0x1530c:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15488;
                        run_15400(); return;
                    }
                case 0x15328:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15358:
                    r5 = 7 << 16;
                    r5 = readPages[(r5+-30376)>>>12][((r5+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 ^ 1;
                    r4 = r5 - r4;
                    r4 = r4 - r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x153f0;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15400;
                        run_15400(); return;
                    }
                case 0x15390:
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15414;
                        run_15400(); return;
                    }
                case 0x153a0:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15434;
                        run_15400(); return;
                    }
                case 0x153bc:
                    r3 = r3 | 64;
                case 0x153c0:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x153f0:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15390;
                        continue;
                    }
                case 0x15400:
                    pc=0x15400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15400() throws ExecutionException { /* 0x15400 - 0x15600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15400:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x153a0;
                        run_15200(); return;
                    }
                case 0x15414:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r6 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r6;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x153bc;
                        run_15200(); return;
                    }
                case 0x15434:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x153c0;
                    run_15200(); return;
                case 0x15444:
                    r5 = r4 & 128;
                    r3 = r3 | 2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x152fc;
                        run_15200(); return;
                    }
                case 0x15454:
                    r5 = r0 + -129;
                    r3 = r3 & r5;
                    r5 = r4 < 256 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1530c;
                        run_15200(); return;
                    }
                case 0x15468:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r5 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15328;
                        run_15200(); return;
                    }
                case 0x15488:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15600:
                    pc=0x15600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15600() throws ExecutionException { /* 0x15600 - 0x15800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x15634;
                    pc=0x28400;
                    run_28400(); return;
                case 0x15634:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1565c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x1565c:
                    r4 = r2 + r3;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1566c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1566c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15758;
                        continue;
                    }
                    r7 = r3 & 1;
                    r4 = r18 & 15;
                    r4 = r7 + r4;
                    r5 = r2 & 15;
                    r4 = r4 - r5;
                    r6 = r4 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x156ac;
                        continue;
                    }
                    r6 = r4 + -7;
                    r6 = r6 & 15;
                    r6 = r6 + -16;
                case 0x156ac:
                    r5 = r18 & 240;
                    r8 = r2 & 240;
                    r5 = r5 - r8;
                    r5 = r5 + r6;
                    r4 = r5 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156cc;
                        continue;
                    }
                    r5 = r5 + -96;
                case 0x156cc:
                    r4 = r7 ^ 1;
                    r4 = r4 - r2;
                    r4 = r4 + r5;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15844;
                        run_15800(); return;
                    }
                    r5 = r0 + -3;
                    r3 = r3 & r5;
                    r5 = r4 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15854;
                        run_15800(); return;
                    }
                case 0x156fc:
                    r5 = r4 < 256 ? 1 : 0;
                    r3 = r3 | 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15868;
                        run_15800(); return;
                    }
                case 0x1570c:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15888;
                        run_15800(); return;
                    }
                case 0x15728:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15758:
                    r5 = 7 << 16;
                    r5 = readPages[(r5+-30376)>>>12][((r5+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 ^ 1;
                    r4 = r5 - r4;
                    r4 = r4 - r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157f0;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15800;
                        run_15800(); return;
                    }
                case 0x15790:
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15814;
                        run_15800(); return;
                    }
                case 0x157a0:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15834;
                        run_15800(); return;
                    }
                case 0x157bc:
                    r3 = r3 | 64;
                case 0x157c0:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x157f0:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15790;
                        continue;
                    }
                case 0x15800:
                    pc=0x15800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15800() throws ExecutionException { /* 0x15800 - 0x15a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15800:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157a0;
                        run_15600(); return;
                    }
                case 0x15814:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r6 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r6;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157bc;
                        run_15600(); return;
                    }
                case 0x15834:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x157c0;
                    run_15600(); return;
                case 0x15844:
                    r5 = r4 & 128;
                    r3 = r3 | 2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156fc;
                        run_15600(); return;
                    }
                case 0x15854:
                    r5 = r0 + -129;
                    r3 = r3 & r5;
                    r5 = r4 < 256 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1570c;
                        run_15600(); return;
                    }
                case 0x15868:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r5 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15728;
                        run_15600(); return;
                    }
                case 0x15888:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15a00:
                    pc=0x15a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15a00() throws ExecutionException { /* 0x15a00 - 0x15c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15a00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x15a34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x15a34:
                    r18 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    r18 = r2 & 255;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15a50;
                    pc=0x28200;
                    run_28200(); return;
                case 0x15a50:
                    r2 = r2 + 1;
                    r17 = r2 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15a68;
                    pc=0x28000;
                    run_28000(); return;
                case 0x15a68:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ab0;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x15a7c:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15ab0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15a7c;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15c00:
                    pc=0x15c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15c00() throws ExecutionException { /* 0x15c00 - 0x15e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15c00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x15c34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x15c34:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x15c4c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x15c4c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d38;
                        continue;
                    }
                    r7 = r3 & 1;
                    r4 = r18 & 15;
                    r4 = r7 + r4;
                    r5 = r2 & 15;
                    r4 = r4 - r5;
                    r6 = r4 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15c8c;
                        continue;
                    }
                    r6 = r4 + -7;
                    r6 = r6 & 15;
                    r6 = r6 + -16;
                case 0x15c8c:
                    r5 = r18 & 240;
                    r8 = r2 & 240;
                    r5 = r5 - r8;
                    r5 = r5 + r6;
                    r4 = r5 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15cac;
                        continue;
                    }
                    r5 = r5 + -96;
                case 0x15cac:
                    r4 = r7 ^ 1;
                    r4 = r4 - r2;
                    r4 = r4 + r5;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e20;
                        run_15e00(); return;
                    }
                    r5 = r0 + -3;
                    r3 = r3 & r5;
                    r5 = r4 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e30;
                        run_15e00(); return;
                    }
                case 0x15cdc:
                    r5 = r4 < 256 ? 1 : 0;
                    r3 = r3 | 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e44;
                        run_15e00(); return;
                    }
                case 0x15cec:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e64;
                        run_15e00(); return;
                    }
                case 0x15d08:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15d38:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 ^ 1;
                    r4 = r5 - r4;
                    r4 = r4 - r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15dcc;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ddc;
                        continue;
                    }
                case 0x15d6c:
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15df0;
                        continue;
                    }
                case 0x15d7c:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e10;
                        run_15e00(); return;
                    }
                case 0x15d98:
                    r3 = r3 | 64;
                case 0x15d9c:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15dcc:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d6c;
                        continue;
                    }
                case 0x15ddc:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d7c;
                        continue;
                    }
                case 0x15df0:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r6 = r0 + -2;
                case 0x15e00:
                    pc=0x15e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15e00() throws ExecutionException { /* 0x15e00 - 0x16000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15e00:
                    r4 = r2 & r18;
                    r3 = r3 & r6;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d98;
                        run_15c00(); return;
                    }
                case 0x15e10:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x15d9c;
                    run_15c00(); return;
                case 0x15e20:
                    r5 = r4 & 128;
                    r3 = r3 | 2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15cdc;
                        run_15c00(); return;
                    }
                case 0x15e30:
                    r5 = r0 + -129;
                    r3 = r3 & r5;
                    r5 = r4 < 256 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15cec;
                        run_15c00(); return;
                    }
                case 0x15e44:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r5 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d08;
                        run_15c00(); return;
                    }
                case 0x15e64:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16000:
                    pc=0x16000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16000() throws ExecutionException { /* 0x16000 - 0x16200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16000:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16034;
                    pc=0x28400;
                    run_28400(); return;
                case 0x16034:
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16044;
                    pc=0x28200;
                    run_28200(); return;
                case 0x16044:
                    r2 = r2 + 1;
                    r17 = r2 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1605c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1605c:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x160a4;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x16070:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x160a4:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16070;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16200:
                    pc=0x16200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16200() throws ExecutionException { /* 0x16200 - 0x16400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16234;
                    pc=0x28400;
                    run_28400(); return;
                case 0x16234:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16244;
                    pc=0x28200;
                    run_28200(); return;
                case 0x16244:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16330;
                        continue;
                    }
                    r7 = r3 & 1;
                    r4 = r18 & 15;
                    r4 = r7 + r4;
                    r5 = r2 & 15;
                    r4 = r4 - r5;
                    r6 = r4 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16284;
                        continue;
                    }
                    r6 = r4 + -7;
                    r6 = r6 & 15;
                    r6 = r6 + -16;
                case 0x16284:
                    r5 = r18 & 240;
                    r8 = r2 & 240;
                    r5 = r5 - r8;
                    r5 = r5 + r6;
                    r4 = r5 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x162a4;
                        continue;
                    }
                    r5 = r5 + -96;
                case 0x162a4:
                    r4 = r7 ^ 1;
                    r4 = r4 - r2;
                    r4 = r4 + r5;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16418;
                        run_16400(); return;
                    }
                    r5 = r0 + -3;
                    r3 = r3 & r5;
                    r5 = r4 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16428;
                        run_16400(); return;
                    }
                case 0x162d4:
                    r5 = r4 < 256 ? 1 : 0;
                    r3 = r3 | 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1643c;
                        run_16400(); return;
                    }
                case 0x162e4:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1645c;
                        run_16400(); return;
                    }
                case 0x16300:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16330:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 ^ 1;
                    r4 = r5 - r4;
                    r4 = r4 - r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x163c4;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x163d4;
                        continue;
                    }
                case 0x16364:
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x163e8;
                        continue;
                    }
                case 0x16374:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16408;
                        run_16400(); return;
                    }
                case 0x16390:
                    r3 = r3 | 64;
                case 0x16394:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x163c4:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16364;
                        continue;
                    }
                case 0x163d4:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16374;
                        continue;
                    }
                case 0x163e8:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r6 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r6;
                case 0x16400:
                    pc=0x16400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16400() throws ExecutionException { /* 0x16400 - 0x16600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16400:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16390;
                        run_16200(); return;
                    }
                case 0x16408:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x16394;
                    run_16200(); return;
                case 0x16418:
                    r5 = r4 & 128;
                    r3 = r3 | 2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x162d4;
                        run_16200(); return;
                    }
                case 0x16428:
                    r5 = r0 + -129;
                    r3 = r3 & r5;
                    r5 = r4 < 256 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x162e4;
                        run_16200(); return;
                    }
                case 0x1643c:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r5 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16300;
                        run_16200(); return;
                    }
                case 0x1645c:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16600:
                    pc=0x16600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16600() throws ExecutionException { /* 0x16600 - 0x16800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16630;
                    pc=0x28400;
                    run_28400(); return;
                case 0x16630:
                    r4 = r2 + r0;
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16640;
                    pc=0x28200;
                    run_28200(); return;
                case 0x16640:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x166a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x166bc;
                        continue;
                    }
                case 0x16664:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x166d0;
                        continue;
                    }
                case 0x16674:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x166a4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16664;
                        continue;
                    }
                case 0x166bc:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16674;
                        continue;
                    }
                case 0x166d0:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16800:
                    pc=0x16800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16800() throws ExecutionException { /* 0x16800 - 0x16a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r4 = r4 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16838;
                    pc=0x28200;
                    run_28200(); return;
                case 0x16838:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16924;
                        continue;
                    }
                    r7 = r3 & 1;
                    r4 = r18 & 15;
                    r4 = r7 + r4;
                    r5 = r2 & 15;
                    r4 = r4 - r5;
                    r6 = r4 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16878;
                        continue;
                    }
                    r6 = r4 + -7;
                    r6 = r6 & 15;
                    r6 = r6 + -16;
                case 0x16878:
                    r5 = r18 & 240;
                    r8 = r2 & 240;
                    r5 = r5 - r8;
                    r5 = r5 + r6;
                    r4 = r5 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16898;
                        continue;
                    }
                    r5 = r5 + -96;
                case 0x16898:
                    r4 = r7 ^ 1;
                    r4 = r4 - r2;
                    r4 = r4 + r5;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16a0c;
                        run_16a00(); return;
                    }
                    r5 = r0 + -3;
                    r3 = r3 & r5;
                    r5 = r4 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16a1c;
                        run_16a00(); return;
                    }
                case 0x168c8:
                    r5 = r4 < 256 ? 1 : 0;
                    r3 = r3 | 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16a30;
                        run_16a00(); return;
                    }
                case 0x168d8:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16a50;
                        run_16a00(); return;
                    }
                case 0x168f4:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16924:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 ^ 1;
                    r4 = r5 - r4;
                    r4 = r4 - r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x169b8;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x169c8;
                        continue;
                    }
                case 0x16958:
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x169dc;
                        continue;
                    }
                case 0x16968:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x169fc;
                        continue;
                    }
                case 0x16984:
                    r3 = r3 | 64;
                case 0x16988:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x169b8:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16958;
                        continue;
                    }
                case 0x169c8:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16968;
                        continue;
                    }
                case 0x169dc:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r6 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r6;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16984;
                        continue;
                    }
                case 0x169fc:
                    r2 = r0 + -65;
                case 0x16a00:
                    pc=0x16a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16a00() throws ExecutionException { /* 0x16a00 - 0x16c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16a00:
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x16988;
                    run_16800(); return;
                case 0x16a0c:
                    r5 = r4 & 128;
                    r3 = r3 | 2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168c8;
                        run_16800(); return;
                    }
                case 0x16a1c:
                    r5 = r0 + -129;
                    r3 = r3 & r5;
                    r5 = r4 < 256 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168d8;
                        run_16800(); return;
                    }
                case 0x16a30:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r5 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168f4;
                        run_16800(); return;
                    }
                case 0x16a50:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16c00:
                    pc=0x16c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16c00() throws ExecutionException { /* 0x16c00 - 0x16e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16c00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16c34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x16c34:
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16c44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x16c44:
                    r2 = r2 + 1;
                    r17 = r2 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16c5c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x16c5c:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ca4;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x16c70:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16ca4:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16c70;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16e00:
                    pc=0x16e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16e00() throws ExecutionException { /* 0x16e00 - 0x17000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16e00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16e34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x16e34:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16e44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x16e44:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f30;
                        continue;
                    }
                    r7 = r3 & 1;
                    r4 = r18 & 15;
                    r4 = r7 + r4;
                    r5 = r2 & 15;
                    r4 = r4 - r5;
                    r6 = r4 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e84;
                        continue;
                    }
                    r6 = r4 + -7;
                    r6 = r6 & 15;
                    r6 = r6 + -16;
                case 0x16e84:
                    r5 = r18 & 240;
                    r8 = r2 & 240;
                    r5 = r5 - r8;
                    r5 = r5 + r6;
                    r4 = r5 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ea4;
                        continue;
                    }
                    r5 = r5 + -96;
                case 0x16ea4:
                    r4 = r7 ^ 1;
                    r4 = r4 - r2;
                    r4 = r4 + r5;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17018;
                        run_17000(); return;
                    }
                    r5 = r0 + -3;
                    r3 = r3 & r5;
                    r5 = r4 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17028;
                        run_17000(); return;
                    }
                case 0x16ed4:
                    r5 = r4 < 256 ? 1 : 0;
                    r3 = r3 | 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1703c;
                        run_17000(); return;
                    }
                case 0x16ee4:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1705c;
                        run_17000(); return;
                    }
                case 0x16f00:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16f30:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 ^ 1;
                    r4 = r5 - r4;
                    r4 = r4 - r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16fc4;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16fd4;
                        continue;
                    }
                case 0x16f64:
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16fe8;
                        continue;
                    }
                case 0x16f74:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17008;
                        run_17000(); return;
                    }
                case 0x16f90:
                    r3 = r3 | 64;
                case 0x16f94:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16fc4:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f64;
                        continue;
                    }
                case 0x16fd4:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f74;
                        continue;
                    }
                case 0x16fe8:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r6 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r6;
                case 0x17000:
                    pc=0x17000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17000() throws ExecutionException { /* 0x17000 - 0x17200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17000:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f90;
                        run_16e00(); return;
                    }
                case 0x17008:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x16f94;
                    run_16e00(); return;
                case 0x17018:
                    r5 = r4 & 128;
                    r3 = r3 | 2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ed4;
                        run_16e00(); return;
                    }
                case 0x17028:
                    r5 = r0 + -129;
                    r3 = r3 & r5;
                    r5 = r4 < 256 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ee4;
                        run_16e00(); return;
                    }
                case 0x1703c:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r5 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f00;
                        run_16e00(); return;
                    }
                case 0x1705c:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17200:
                    pc=0x17200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17200() throws ExecutionException { /* 0x17200 - 0x17400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17230;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17230:
                    r4 = r2 + r0;
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17240;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17240:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x172a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x172bc;
                        continue;
                    }
                case 0x17264:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x172d0;
                        continue;
                    }
                case 0x17274:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x172a4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17264;
                        continue;
                    }
                case 0x172bc:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17274;
                        continue;
                    }
                case 0x172d0:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17400:
                    pc=0x17400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17400() throws ExecutionException { /* 0x17400 - 0x17600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r2 = r0 + 2;
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17434;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17434:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17498;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x174b0;
                        continue;
                    }
                case 0x17458:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x174c4;
                        continue;
                    }
                case 0x17468:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17498:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17458;
                        continue;
                    }
                case 0x174b0:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17468;
                        continue;
                    }
                case 0x174c4:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17600:
                    pc=0x17600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17600() throws ExecutionException { /* 0x17600 - 0x17800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17600:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17634;
                    pc=0x28400;
                    run_28400(); return;
                case 0x17634:
                    r18 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1764c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1764c:
                    r2 = r2 + -1;
                    r17 = r2 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17664;
                    pc=0x28000;
                    run_28000(); return;
                case 0x17664:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x176ac;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x17678:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x176ac:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x17678;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17800:
                    pc=0x17800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17800() throws ExecutionException { /* 0x17800 - 0x17a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17830;
                    pc=0x28400;
                    run_28400(); return;
                case 0x17830:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17858;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x17858:
                    r17 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x17868;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17868:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x178cc;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x178e4;
                        continue;
                    }
                case 0x1788c:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x178f8;
                        continue;
                    }
                case 0x1789c:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x178cc:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1788c;
                        continue;
                    }
                case 0x178e4:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1789c;
                        continue;
                    }
                case 0x178f8:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17a00:
                    pc=0x17a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17a00() throws ExecutionException { /* 0x17a00 - 0x17c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17a30;
                    pc=0x28400;
                    run_28400(); return;
                case 0x17a30:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17a58;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x17a58:
                    r17 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x17a68;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17a68:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17acc;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ae4;
                        continue;
                    }
                case 0x17a8c:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17af8;
                        continue;
                    }
                case 0x17a9c:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17acc:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17a8c;
                        continue;
                    }
                case 0x17ae4:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17a9c;
                        continue;
                    }
                case 0x17af8:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17c00:
                    pc=0x17c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17c00() throws ExecutionException { /* 0x17c00 - 0x17e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17c00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17c34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17c34:
                    r18 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    r18 = r2 & 255;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17c50;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17c50:
                    r2 = r2 + -1;
                    r17 = r2 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17c68;
                    pc=0x28000;
                    run_28000(); return;
                case 0x17c68:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17cb0;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x17c7c:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17cb0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x17c7c;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17e00:
                    pc=0x17e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17e00() throws ExecutionException { /* 0x17e00 - 0x18000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17e30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17e30:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r17 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x17e48;
                    pc=0x28200;
                    run_28200(); return;
                case 0x17e48:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17eac;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ec4;
                        continue;
                    }
                case 0x17e6c:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ed8;
                        continue;
                    }
                case 0x17e7c:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17eac:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e6c;
                        continue;
                    }
                case 0x17ec4:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e7c;
                        continue;
                    }
                case 0x17ed8:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18000:
                    pc=0x18000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18000() throws ExecutionException { /* 0x18000 - 0x18200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18030;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18030:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1803c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1803c:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18064;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x18064:
                    r17 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x18074;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18074:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x180d8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x180f0;
                        continue;
                    }
                case 0x18098:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18104;
                        continue;
                    }
                case 0x180a8:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x180d8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18098;
                        continue;
                    }
                case 0x180f0:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x180a8;
                        continue;
                    }
                case 0x18104:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18200:
                    pc=0x18200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18200() throws ExecutionException { /* 0x18200 - 0x18400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18200:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18234;
                    pc=0x28400;
                    run_28400(); return;
                case 0x18234:
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18244;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18244:
                    r2 = r2 + -1;
                    r17 = r2 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1825c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1825c:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x182a4;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x18270:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x182a4:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x18270;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18400:
                    pc=0x18400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18400() throws ExecutionException { /* 0x18400 - 0x18600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18430;
                    pc=0x28400;
                    run_28400(); return;
                case 0x18430:
                    r4 = r2 + r0;
                    r17 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18440;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18440:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x184a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x184bc;
                        continue;
                    }
                case 0x18464:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x184d0;
                        continue;
                    }
                case 0x18474:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x184a4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18464;
                        continue;
                    }
                case 0x184bc:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18474;
                        continue;
                    }
                case 0x184d0:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18600:
                    pc=0x18600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18600() throws ExecutionException { /* 0x18600 - 0x18800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18630;
                    pc=0x28400;
                    run_28400(); return;
                case 0x18630:
                    r4 = r2 + r0;
                    r17 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18640;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18640:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x186a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x186bc;
                        continue;
                    }
                case 0x18664:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x186d0;
                        continue;
                    }
                case 0x18674:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x186a4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18664;
                        continue;
                    }
                case 0x186bc:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18674;
                        continue;
                    }
                case 0x186d0:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18800:
                    pc=0x18800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18800() throws ExecutionException { /* 0x18800 - 0x18a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r16+-30376)>>>12][((r16+-30376)>>>2)&0x3ff];
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18834;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18834:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18898;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188b0;
                        continue;
                    }
                case 0x18858:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188c4;
                        continue;
                    }
                case 0x18868:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18898:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18858;
                        continue;
                    }
                case 0x188b0:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18868;
                        continue;
                    }
                case 0x188c4:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18a00:
                    pc=0x18a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18a00() throws ExecutionException { /* 0x18a00 - 0x18c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18a00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18a34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18a34:
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18a44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18a44:
                    r2 = r2 + -1;
                    r17 = r2 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18a5c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x18a5c:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18aa4;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x18a70:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18aa4:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a70;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18c00:
                    pc=0x18c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18c00() throws ExecutionException { /* 0x18c00 - 0x18e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18c30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18c30:
                    r4 = r2 + r0;
                    r17 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18c40;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18c40:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ca4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18cbc;
                        continue;
                    }
                case 0x18c64:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18cd0;
                        continue;
                    }
                case 0x18c74:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18ca4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c64;
                        continue;
                    }
                case 0x18cbc:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c74;
                        continue;
                    }
                case 0x18cd0:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18e00:
                    pc=0x18e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18e00() throws ExecutionException { /* 0x18e00 - 0x19000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18e00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18e30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18e30:
                    r4 = r2 + r0;
                    r17 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18e40;
                    pc=0x28200;
                    run_28200(); return;
                case 0x18e40:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ea4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ebc;
                        continue;
                    }
                case 0x18e64:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ed0;
                        continue;
                    }
                case 0x18e74:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18ea4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e64;
                        continue;
                    }
                case 0x18ebc:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e74;
                        continue;
                    }
                case 0x18ed0:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19000:
                    pc=0x19000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19000() throws ExecutionException { /* 0x19000 - 0x19200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r2 = r0 + 2;
                    r17 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19034;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19034:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19098;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x190b0;
                        continue;
                    }
                case 0x19058:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x190c4;
                        continue;
                    }
                case 0x19068:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19098:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19058;
                        continue;
                    }
                case 0x190b0:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19068;
                        continue;
                    }
                case 0x190c4:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19200:
                    pc=0x19200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19200() throws ExecutionException { /* 0x19200 - 0x19400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1922c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1922c:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19254;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x19254:
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x19260;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19260:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x192a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x19278:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x192a4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19278;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19400:
                    pc=0x19400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19400() throws ExecutionException { /* 0x19400 - 0x19600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19430;
                    pc=0x28400;
                    run_28400(); return;
                case 0x19430:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19458;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x19458:
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x19464;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19464:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x194ac;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1947c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x194ac:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1947c;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19600:
                    pc=0x19600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19600() throws ExecutionException { /* 0x19600 - 0x19800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1962c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1962c:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19654;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x19654:
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x19660;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19660:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x196a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x19678:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x196a4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19678;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19800:
                    pc=0x19800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19800() throws ExecutionException { /* 0x19800 - 0x19a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19830;
                    pc=0x28400;
                    run_28400(); return;
                case 0x19830:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19858;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x19858:
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x19864;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19864:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x198ac;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1987c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x198ac:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1987c;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19a00:
                    pc=0x19a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19a00() throws ExecutionException { /* 0x19a00 - 0x19c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19a2c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19a2c:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x19a44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19a44:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a88;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x19a5c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19a88:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a5c;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19c00:
                    pc=0x19c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19c00() throws ExecutionException { /* 0x19c00 - 0x19e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19c30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19c30:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x19c48;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19c48:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c90;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x19c60:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19c90:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c60;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19e00:
                    pc=0x19e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19e00() throws ExecutionException { /* 0x19e00 - 0x1a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19e2c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19e2c:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x19e44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x19e44:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19e88;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x19e5c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19e88:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19e5c;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a000:
                    pc=0x1a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a000() throws ExecutionException { /* 0x1a000 - 0x1a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1a02c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1a02c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a038;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1a038:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a07c;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1a050:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a07c:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a050;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a200:
                    pc=0x1a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a200() throws ExecutionException { /* 0x1a200 - 0x1a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1a230;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1a230:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a23c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1a23c:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a284;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1a254:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a284:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a254;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a400:
                    pc=0x1a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a400() throws ExecutionException { /* 0x1a400 - 0x1a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1a42c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1a42c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a438;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1a438:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a47c;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1a450:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a47c:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a450;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a600:
                    pc=0x1a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a600() throws ExecutionException { /* 0x1a600 - 0x1a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1a630;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1a630:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a678;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1a648:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a678:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a648;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a800:
                    pc=0x1a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a800() throws ExecutionException { /* 0x1a800 - 0x1aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1a82c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1a82c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a838;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1a838:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a87c;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1a850:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a87c:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a850;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1aa00:
                    pc=0x1aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1aa00() throws ExecutionException { /* 0x1aa00 - 0x1ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1aa00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1aa30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1aa30:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aa3c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1aa3c:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa84;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1aa54:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1aa84:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa54;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ac00:
                    pc=0x1ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ac00() throws ExecutionException { /* 0x1ac00 - 0x1ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ac00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ac2c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ac2c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ac38;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ac38:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac7c;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1ac50:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ac7c:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac50;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ae00:
                    pc=0x1ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ae00() throws ExecutionException { /* 0x1ae00 - 0x1b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ae00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ae2c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ae2c:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae70;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1ae44:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ae70:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae44;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b000:
                    pc=0x1b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b000() throws ExecutionException { /* 0x1b000 - 0x1b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b02c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1b02c:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b070;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1b044:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b070:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b044;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b200:
                    pc=0x1b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b200() throws ExecutionException { /* 0x1b200 - 0x1b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b22c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1b22c:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x1b244;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1b244:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b400:
                    pc=0x1b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b400() throws ExecutionException { /* 0x1b400 - 0x1b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b430;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1b430:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r17+-30373;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x1b448;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1b448:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b600:
                    pc=0x1b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b600() throws ExecutionException { /* 0x1b600 - 0x1b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b62c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1b62c:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r16+11;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x1b644;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1b644:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b800:
                    pc=0x1b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b800() throws ExecutionException { /* 0x1b800 - 0x1ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b82c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1b82c:
                    addr=r16+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b83c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1b83c:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ba00:
                    pc=0x1ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ba00() throws ExecutionException { /* 0x1ba00 - 0x1bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ba00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ba30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ba30:
                    addr=r17+-30373;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ba40;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1ba40:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1bc00:
                    pc=0x1bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1bc00() throws ExecutionException { /* 0x1bc00 - 0x1be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1bc00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1bc2c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1bc2c:
                    addr=r16+11;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bc3c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1bc3c:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1be00:
                    pc=0x1be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1be00() throws ExecutionException { /* 0x1be00 - 0x1c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1be00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1be30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1be30:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r17 = r2 + r17;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1be48;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1be48:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be60;
                        continue;
                    }
                    r2 = r2 | 256;
                case 0x1be60:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bedc;
                        continue;
                    }
                    r3 = r3 | 1;
                case 0x1be70:
                    r5 = r2 >>> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bebc;
                        continue;
                    }
                    r3 = r3 | 2;
                case 0x1be80:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                case 0x1be88:
                    r4 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1be98;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1be98:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1bebc:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r5 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be80;
                        continue;
                    }
                    r3 = r3 | 128;
                    /* Next insn is delay slot */ 
                    pc=0x1be88;
                    continue;
                case 0x1bedc:
                    r4 = r0 + -2;
                    r3 = r3 & r4;
                    /* Next insn is delay slot */ 
                    pc=0x1be70;
                    continue;
                case 0x1c000:
                    pc=0x1c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c000() throws ExecutionException { /* 0x1c000 - 0x1c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1c034;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1c034:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c05c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x1c05c:
                    r4 = r2 + r3;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c06c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1c06c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c174;
                        continue;
                    }
                    r6 = r3 & 1;
                    r5 = r18 & 15;
                    r4 = r2 & 15;
                    r5 = r6 + r5;
                    r5 = r5 + r4;
                    r4 = (r5&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c0ac;
                        continue;
                    }
                    r5 = r5 + 6;
                    r5 = r5 & 15;
                    r5 = r5 + 16;
                case 0x1c0ac:
                    r8 = r0 + -16;
                    r7 = r2 & r8;
                    r8 = r18 & r8;
                    r9 = r7 & 255;
                    r4 = r18 & 240;
                    r8 = r8 << 24;
                    r7 = r7 << 24;
                    r18 = r6 + r18;
                    r4 = r9 + r4;
                    r8 = r8 >> 24;
                    r7 = r7 >> 24;
                    r2 = r18 + r2;
                    r4 = r4 + r5;
                    r7 = r8 + r7;
                    r2 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r4;
                    r5 = r7 + r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c264;
                        run_1c200(); return;
                    }
                    r2 = r4 & 128;
                    r3 = r3 | 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c278;
                        run_1c200(); return;
                    }
                case 0x1c108:
                    r3 = r3 | 128;
                case 0x1c10c:
                    r2 = (r4&0xffffffffL) < (160&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c124;
                        continue;
                    }
                    r4 = r4 + 96;
                    r2 = 7 << 16;
                    writePages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff] = r4;
                case 0x1c124:
                    r4 = r4 & 65280;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c2bc;
                        run_1c200(); return;
                    }
                    r3 = r3 | 1;
                case 0x1c134:
                    r5 = r5 + 128;
                    r5 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c288;
                        run_1c200(); return;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c174:
                    r5 = 7 << 16;
                    r5 = readPages[(r5+-30376)>>>12][((r5+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 + r5;
                    r4 = r4 + r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c210;
                        run_1c200(); return;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c220;
                        run_1c200(); return;
                    }
                case 0x1c1a8:
                    r6 = r4 & 65280;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c234;
                        run_1c200(); return;
                    }
                case 0x1c1b8:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r3 = r3 | 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c24c;
                        run_1c200(); return;
                    }
                case 0x1c1cc:
                    r4 = r4 ^ r18;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c24c;
                        run_1c200(); return;
                    }
                    r3 = r3 | 64;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                case 0x1c1e8:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x1c200:
                    pc=0x1c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c200() throws ExecutionException { /* 0x1c200 - 0x1c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c200:
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c210:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c1a8;
                        run_1c000(); return;
                    }
                case 0x1c220:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = r4 & 65280;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c1b8;
                        run_1c000(); return;
                    }
                case 0x1c234:
                    r2 = r2 ^ r18;
                    r6 = r0 + -2;
                    r2 = r2 & 128;
                    r3 = r3 & r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c1cc;
                        run_1c000(); return;
                    }
                case 0x1c24c:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x1c1e8;
                    run_1c000(); return;
                case 0x1c264:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r4 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c108;
                        run_1c000(); return;
                    }
                case 0x1c278:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1c10c;
                    run_1c000(); return;
                case 0x1c288:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c2bc:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1c134;
                    run_1c000(); return;
                case 0x1c400:
                    pc=0x1c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c400() throws ExecutionException { /* 0x1c400 - 0x1c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1c434;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1c434:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c45c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x1c45c:
                    r4 = r2 + r3;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c46c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1c46c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c574;
                        continue;
                    }
                    r6 = r3 & 1;
                    r5 = r18 & 15;
                    r4 = r2 & 15;
                    r5 = r6 + r5;
                    r5 = r5 + r4;
                    r4 = (r5&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c4ac;
                        continue;
                    }
                    r5 = r5 + 6;
                    r5 = r5 & 15;
                    r5 = r5 + 16;
                case 0x1c4ac:
                    r8 = r0 + -16;
                    r7 = r2 & r8;
                    r8 = r18 & r8;
                    r9 = r7 & 255;
                    r4 = r18 & 240;
                    r8 = r8 << 24;
                    r7 = r7 << 24;
                    r18 = r6 + r18;
                    r4 = r9 + r4;
                    r8 = r8 >> 24;
                    r7 = r7 >> 24;
                    r2 = r18 + r2;
                    r4 = r4 + r5;
                    r7 = r8 + r7;
                    r2 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r4;
                    r5 = r7 + r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c664;
                        run_1c600(); return;
                    }
                    r2 = r4 & 128;
                    r3 = r3 | 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c678;
                        run_1c600(); return;
                    }
                case 0x1c508:
                    r3 = r3 | 128;
                case 0x1c50c:
                    r2 = (r4&0xffffffffL) < (160&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c524;
                        continue;
                    }
                    r4 = r4 + 96;
                    r2 = 7 << 16;
                    writePages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff] = r4;
                case 0x1c524:
                    r4 = r4 & 65280;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c6bc;
                        run_1c600(); return;
                    }
                    r3 = r3 | 1;
                case 0x1c534:
                    r5 = r5 + 128;
                    r5 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c688;
                        run_1c600(); return;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c574:
                    r5 = 7 << 16;
                    r5 = readPages[(r5+-30376)>>>12][((r5+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 + r5;
                    r4 = r4 + r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c610;
                        run_1c600(); return;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c620;
                        run_1c600(); return;
                    }
                case 0x1c5a8:
                    r6 = r4 & 65280;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c634;
                        run_1c600(); return;
                    }
                case 0x1c5b8:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r3 = r3 | 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c64c;
                        run_1c600(); return;
                    }
                case 0x1c5cc:
                    r4 = r4 ^ r18;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c64c;
                        run_1c600(); return;
                    }
                    r3 = r3 | 64;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                case 0x1c5e8:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x1c600:
                    pc=0x1c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c600() throws ExecutionException { /* 0x1c600 - 0x1c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c600:
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c610:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c5a8;
                        run_1c400(); return;
                    }
                case 0x1c620:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = r4 & 65280;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c5b8;
                        run_1c400(); return;
                    }
                case 0x1c634:
                    r2 = r2 ^ r18;
                    r6 = r0 + -2;
                    r2 = r2 & 128;
                    r3 = r3 & r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c5cc;
                        run_1c400(); return;
                    }
                case 0x1c64c:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x1c5e8;
                    run_1c400(); return;
                case 0x1c664:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r4 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c508;
                        run_1c400(); return;
                    }
                case 0x1c678:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1c50c;
                    run_1c400(); return;
                case 0x1c688:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c6bc:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1c534;
                    run_1c400(); return;
                case 0x1c800:
                    pc=0x1c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c800() throws ExecutionException { /* 0x1c800 - 0x1ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1c830;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1c830:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    r17 = r2 & 255;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c84c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1c84c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c864;
                        continue;
                    }
                    r2 = r2 | 256;
                case 0x1c864:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c8e0;
                        continue;
                    }
                    r3 = r3 | 1;
                case 0x1c874:
                    r5 = r2 >>> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c8c0;
                        continue;
                    }
                    r3 = r3 | 2;
                case 0x1c884:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                case 0x1c88c:
                    r4 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1c89c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1c89c:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c8c0:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r5 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c884;
                        continue;
                    }
                    r3 = r3 | 128;
                    /* Next insn is delay slot */ 
                    pc=0x1c88c;
                    continue;
                case 0x1c8e0:
                    r4 = r0 + -2;
                    r3 = r3 & r4;
                    /* Next insn is delay slot */ 
                    pc=0x1c874;
                    continue;
                case 0x1ca00:
                    pc=0x1ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ca00() throws ExecutionException { /* 0x1ca00 - 0x1cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ca00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ca34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ca34:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x1ca4c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ca4c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb54;
                        continue;
                    }
                    r6 = r3 & 1;
                    r5 = r18 & 15;
                    r4 = r2 & 15;
                    r5 = r6 + r5;
                    r5 = r5 + r4;
                    r4 = (r5&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca8c;
                        continue;
                    }
                    r5 = r5 + 6;
                    r5 = r5 & 15;
                    r5 = r5 + 16;
                case 0x1ca8c:
                    r8 = r0 + -16;
                    r7 = r2 & r8;
                    r8 = r18 & r8;
                    r9 = r7 & 255;
                    r4 = r18 & 240;
                    r8 = r8 << 24;
                    r7 = r7 << 24;
                    r18 = r6 + r18;
                    r4 = r9 + r4;
                    r8 = r8 >> 24;
                    r7 = r7 >> 24;
                    r2 = r18 + r2;
                    r4 = r4 + r5;
                    r7 = r8 + r7;
                    r2 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r4;
                    r5 = r7 + r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc40;
                        run_1cc00(); return;
                    }
                    r2 = r4 & 128;
                    r3 = r3 | 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc54;
                        run_1cc00(); return;
                    }
                case 0x1cae8:
                    r3 = r3 | 128;
                case 0x1caec:
                    r2 = (r4&0xffffffffL) < (160&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb04;
                        continue;
                    }
                    r4 = r4 + 96;
                    r2 = 7 << 16;
                    writePages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff] = r4;
                case 0x1cb04:
                    r4 = r4 & 65280;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc98;
                        run_1cc00(); return;
                    }
                    r3 = r3 | 1;
                case 0x1cb14:
                    r5 = r5 + 128;
                    r5 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc64;
                        run_1cc00(); return;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1cb54:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 + r5;
                    r4 = r4 + r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cbec;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cbfc;
                        continue;
                    }
                case 0x1cb84:
                    r6 = r4 & 65280;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc10;
                        run_1cc00(); return;
                    }
                case 0x1cb94:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r3 = r3 | 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc28;
                        run_1cc00(); return;
                    }
                case 0x1cba8:
                    r4 = r4 ^ r18;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc28;
                        run_1cc00(); return;
                    }
                    r3 = r3 | 64;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                case 0x1cbc4:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1cbec:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb84;
                        continue;
                    }
                case 0x1cbfc:
                    r6 = r0 + -129;
                case 0x1cc00:
                    pc=0x1cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1cc00() throws ExecutionException { /* 0x1cc00 - 0x1ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1cc00:
                    r3 = r3 & r6;
                    r6 = r4 & 65280;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb94;
                        run_1ca00(); return;
                    }
                case 0x1cc10:
                    r2 = r2 ^ r18;
                    r6 = r0 + -2;
                    r2 = r2 & 128;
                    r3 = r3 & r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cba8;
                        run_1ca00(); return;
                    }
                case 0x1cc28:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x1cbc4;
                    run_1ca00(); return;
                case 0x1cc40:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r4 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cae8;
                        run_1ca00(); return;
                    }
                case 0x1cc54:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1caec;
                    run_1ca00(); return;
                case 0x1cc64:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1cc98:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1cb14;
                    run_1ca00(); return;
                case 0x1ce00:
                    pc=0x1ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ce00() throws ExecutionException { /* 0x1ce00 - 0x1d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ce00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ce30;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1ce30:
                    r4 = r2 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ce40;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ce40:
                    r5 = r2 + r0;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r2 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce5c;
                        continue;
                    }
                    r5 = r5 | 256;
                case 0x1ce5c:
                    r3 = r5 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ced8;
                        continue;
                    }
                    r2 = r2 | 1;
                case 0x1ce6c:
                    r5 = r5 >>> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ceb8;
                        continue;
                    }
                    r2 = r2 | 2;
                case 0x1ce7c:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                case 0x1ce84:
                    r4 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ce94;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1ce94:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ceb8:
                    r3 = r0 + -3;
                    r2 = r2 & r3;
                    r3 = r5 & 128;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce7c;
                        continue;
                    }
                    r2 = r2 | 128;
                    /* Next insn is delay slot */ 
                    pc=0x1ce84;
                    continue;
                case 0x1ced8:
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                    /* Next insn is delay slot */ 
                    pc=0x1ce6c;
                    continue;
                case 0x1d000:
                    pc=0x1d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d000() throws ExecutionException { /* 0x1d000 - 0x1d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1d034;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1d034:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1d044;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1d044:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d14c;
                        continue;
                    }
                    r6 = r3 & 1;
                    r5 = r18 & 15;
                    r4 = r2 & 15;
                    r5 = r6 + r5;
                    r5 = r5 + r4;
                    r4 = (r5&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d084;
                        continue;
                    }
                    r5 = r5 + 6;
                    r5 = r5 & 15;
                    r5 = r5 + 16;
                case 0x1d084:
                    r8 = r0 + -16;
                    r7 = r2 & r8;
                    r8 = r18 & r8;
                    r9 = r7 & 255;
                    r4 = r18 & 240;
                    r8 = r8 << 24;
                    r7 = r7 << 24;
                    r18 = r6 + r18;
                    r4 = r9 + r4;
                    r8 = r8 >> 24;
                    r7 = r7 >> 24;
                    r2 = r18 + r2;
                    r4 = r4 + r5;
                    r7 = r8 + r7;
                    r2 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r4;
                    r5 = r7 + r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d238;
                        run_1d200(); return;
                    }
                    r2 = r4 & 128;
                    r3 = r3 | 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d24c;
                        run_1d200(); return;
                    }
                case 0x1d0e0:
                    r3 = r3 | 128;
                case 0x1d0e4:
                    r2 = (r4&0xffffffffL) < (160&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0fc;
                        continue;
                    }
                    r4 = r4 + 96;
                    r2 = 7 << 16;
                    writePages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff] = r4;
                case 0x1d0fc:
                    r4 = r4 & 65280;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d290;
                        run_1d200(); return;
                    }
                    r3 = r3 | 1;
                case 0x1d10c:
                    r5 = r5 + 128;
                    r5 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d25c;
                        run_1d200(); return;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d14c:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 + r5;
                    r4 = r4 + r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d1e4;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d1f4;
                        continue;
                    }
                case 0x1d17c:
                    r6 = r4 & 65280;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d208;
                        run_1d200(); return;
                    }
                case 0x1d18c:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r3 = r3 | 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d220;
                        run_1d200(); return;
                    }
                case 0x1d1a0:
                    r4 = r4 ^ r18;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d220;
                        run_1d200(); return;
                    }
                    r3 = r3 | 64;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                case 0x1d1bc:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d1e4:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d17c;
                        continue;
                    }
                case 0x1d1f4:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = r4 & 65280;
                case 0x1d200:
                    pc=0x1d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d200() throws ExecutionException { /* 0x1d200 - 0x1d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d200:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d18c;
                        run_1d000(); return;
                    }
                case 0x1d208:
                    r2 = r2 ^ r18;
                    r6 = r0 + -2;
                    r2 = r2 & 128;
                    r3 = r3 & r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d1a0;
                        run_1d000(); return;
                    }
                case 0x1d220:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x1d1bc;
                    run_1d000(); return;
                case 0x1d238:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r4 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0e0;
                        run_1d000(); return;
                    }
                case 0x1d24c:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1d0e4;
                    run_1d000(); return;
                case 0x1d25c:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d290:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1d10c;
                    run_1d000(); return;
                case 0x1d400:
                    pc=0x1d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d400() throws ExecutionException { /* 0x1d400 - 0x1d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r4 = r4 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1d438;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1d438:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d540;
                        continue;
                    }
                    r6 = r3 & 1;
                    r5 = r18 & 15;
                    r4 = r2 & 15;
                    r5 = r6 + r5;
                    r5 = r5 + r4;
                    r4 = (r5&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d478;
                        continue;
                    }
                    r5 = r5 + 6;
                    r5 = r5 & 15;
                    r5 = r5 + 16;
                case 0x1d478:
                    r8 = r0 + -16;
                    r7 = r2 & r8;
                    r8 = r18 & r8;
                    r9 = r7 & 255;
                    r4 = r18 & 240;
                    r8 = r8 << 24;
                    r7 = r7 << 24;
                    r18 = r6 + r18;
                    r4 = r9 + r4;
                    r8 = r8 >> 24;
                    r7 = r7 >> 24;
                    r2 = r18 + r2;
                    r4 = r4 + r5;
                    r7 = r8 + r7;
                    r2 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r4;
                    r5 = r7 + r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d62c;
                        run_1d600(); return;
                    }
                    r2 = r4 & 128;
                    r3 = r3 | 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d640;
                        run_1d600(); return;
                    }
                case 0x1d4d4:
                    r3 = r3 | 128;
                case 0x1d4d8:
                    r2 = (r4&0xffffffffL) < (160&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4f0;
                        continue;
                    }
                    r4 = r4 + 96;
                    r2 = 7 << 16;
                    writePages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff] = r4;
                case 0x1d4f0:
                    r4 = r4 & 65280;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d684;
                        run_1d600(); return;
                    }
                    r3 = r3 | 1;
                case 0x1d500:
                    r5 = r5 + 128;
                    r5 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d650;
                        run_1d600(); return;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d540:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 + r5;
                    r4 = r4 + r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5d8;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5e8;
                        continue;
                    }
                case 0x1d570:
                    r6 = r4 & 65280;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5fc;
                        continue;
                    }
                case 0x1d580:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r3 = r3 | 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d614;
                        run_1d600(); return;
                    }
                case 0x1d594:
                    r4 = r4 ^ r18;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d614;
                        run_1d600(); return;
                    }
                    r3 = r3 | 64;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                case 0x1d5b0:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d5d8:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d570;
                        continue;
                    }
                case 0x1d5e8:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = r4 & 65280;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d580;
                        continue;
                    }
                case 0x1d5fc:
                    r2 = r2 ^ r18;
                case 0x1d600:
                    pc=0x1d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d600() throws ExecutionException { /* 0x1d600 - 0x1d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d600:
                    r6 = r0 + -2;
                    r2 = r2 & 128;
                    r3 = r3 & r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d594;
                        run_1d400(); return;
                    }
                case 0x1d614:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x1d5b0;
                    run_1d400(); return;
                case 0x1d62c:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r4 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4d4;
                        run_1d400(); return;
                    }
                case 0x1d640:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1d4d8;
                    run_1d400(); return;
                case 0x1d650:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d684:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1d500;
                    run_1d400(); return;
                case 0x1d800:
                    pc=0x1d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d800() throws ExecutionException { /* 0x1d800 - 0x1da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r4 + 1;
                    r4 = r4 + 257;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1d838;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1d838:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d880;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1d850:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d880:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d850;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1da00:
                    pc=0x1da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1da00() throws ExecutionException { /* 0x1da00 - 0x1dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1da00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1da30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1da30:
                    r4 = r2 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1da40;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1da40:
                    r5 = r2 + r0;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r2 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da5c;
                        continue;
                    }
                    r5 = r5 | 256;
                case 0x1da5c:
                    r3 = r5 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dad8;
                        continue;
                    }
                    r2 = r2 | 1;
                case 0x1da6c:
                    r5 = r5 >>> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dab8;
                        continue;
                    }
                    r2 = r2 | 2;
                case 0x1da7c:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                case 0x1da84:
                    r4 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1da94;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1da94:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1dab8:
                    r3 = r0 + -3;
                    r2 = r2 & r3;
                    r3 = r5 & 128;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da7c;
                        continue;
                    }
                    r2 = r2 | 128;
                    /* Next insn is delay slot */ 
                    pc=0x1da84;
                    continue;
                case 0x1dad8:
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                    /* Next insn is delay slot */ 
                    pc=0x1da6c;
                    continue;
                case 0x1dc00:
                    pc=0x1dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1dc00() throws ExecutionException { /* 0x1dc00 - 0x1de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1dc00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1dc34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1dc34:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1dc44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1dc44:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd4c;
                        continue;
                    }
                    r6 = r3 & 1;
                    r5 = r18 & 15;
                    r4 = r2 & 15;
                    r5 = r6 + r5;
                    r5 = r5 + r4;
                    r4 = (r5&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dc84;
                        continue;
                    }
                    r5 = r5 + 6;
                    r5 = r5 & 15;
                    r5 = r5 + 16;
                case 0x1dc84:
                    r8 = r0 + -16;
                    r7 = r2 & r8;
                    r8 = r18 & r8;
                    r9 = r7 & 255;
                    r4 = r18 & 240;
                    r8 = r8 << 24;
                    r7 = r7 << 24;
                    r18 = r6 + r18;
                    r4 = r9 + r4;
                    r8 = r8 >> 24;
                    r7 = r7 >> 24;
                    r2 = r18 + r2;
                    r4 = r4 + r5;
                    r7 = r8 + r7;
                    r2 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r4;
                    r5 = r7 + r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de38;
                        run_1de00(); return;
                    }
                    r2 = r4 & 128;
                    r3 = r3 | 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de4c;
                        run_1de00(); return;
                    }
                case 0x1dce0:
                    r3 = r3 | 128;
                case 0x1dce4:
                    r2 = (r4&0xffffffffL) < (160&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcfc;
                        continue;
                    }
                    r4 = r4 + 96;
                    r2 = 7 << 16;
                    writePages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff] = r4;
                case 0x1dcfc:
                    r4 = r4 & 65280;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de90;
                        run_1de00(); return;
                    }
                    r3 = r3 | 1;
                case 0x1dd0c:
                    r5 = r5 + 128;
                    r5 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de5c;
                        run_1de00(); return;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1dd4c:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 + r5;
                    r4 = r4 + r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dde4;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ddf4;
                        continue;
                    }
                case 0x1dd7c:
                    r6 = r4 & 65280;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de08;
                        run_1de00(); return;
                    }
                case 0x1dd8c:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r3 = r3 | 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de20;
                        run_1de00(); return;
                    }
                case 0x1dda0:
                    r4 = r4 ^ r18;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de20;
                        run_1de00(); return;
                    }
                    r3 = r3 | 64;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                case 0x1ddbc:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1dde4:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd7c;
                        continue;
                    }
                case 0x1ddf4:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = r4 & 65280;
                case 0x1de00:
                    pc=0x1de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1de00() throws ExecutionException { /* 0x1de00 - 0x1e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1de00:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd8c;
                        run_1dc00(); return;
                    }
                case 0x1de08:
                    r2 = r2 ^ r18;
                    r6 = r0 + -2;
                    r2 = r2 & 128;
                    r3 = r3 & r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dda0;
                        run_1dc00(); return;
                    }
                case 0x1de20:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x1ddbc;
                    run_1dc00(); return;
                case 0x1de38:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r4 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dce0;
                        run_1dc00(); return;
                    }
                case 0x1de4c:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1dce4;
                    run_1dc00(); return;
                case 0x1de5c:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1de90:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x1dd0c;
                    run_1dc00(); return;
                case 0x1e000:
                    pc=0x1e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e000() throws ExecutionException { /* 0x1e000 - 0x1e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r4 + 1;
                    r4 = r4 + 257;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e038;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1e038:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = r2 + r0;
                    r2 = r4 + 1;
                    r4 = r4 + 257;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e058;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1e058:
                    r2 = r2 << 8;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = r2 | r17;
                    r17 = r17 + 1;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e200:
                    pc=0x1e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e200() throws ExecutionException { /* 0x1e200 - 0x1e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e200:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e234;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1e234:
                    r18 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e24c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1e24c:
                    r3 = r2 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e314;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 1;
                case 0x1e264:
                    r17 = r2 >>> 1;
                    r17 = r17 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1e280;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1e280:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e2c8;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x1e294:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e2c8:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e294;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e314:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r3 = r4 & r3;
                    /* Next insn is delay slot */ 
                    pc=0x1e264;
                    continue;
                case 0x1e400:
                    pc=0x1e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e400() throws ExecutionException { /* 0x1e400 - 0x1e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e434;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1e434:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e45c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x1e45c:
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1e46c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1e46c:
                    r2 = r2 ^ r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4c8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4e0;
                        continue;
                    }
                case 0x1e494:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e4c8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e494;
                        continue;
                    }
                case 0x1e4e0:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e600:
                    pc=0x1e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e600() throws ExecutionException { /* 0x1e600 - 0x1e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e634;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1e634:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e65c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x1e65c:
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1e66c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1e66c:
                    r2 = r2 ^ r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6c8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6e0;
                        continue;
                    }
                case 0x1e694:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e6c8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e694;
                        continue;
                    }
                case 0x1e6e0:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e800:
                    pc=0x1e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e800() throws ExecutionException { /* 0x1e800 - 0x1ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e800:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e834;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1e834:
                    r18 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    r18 = r2 & 255;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e850;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1e850:
                    r3 = r2 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e918;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 1;
                case 0x1e868:
                    r17 = r2 >>> 1;
                    r17 = r17 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1e884;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1e884:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e8cc;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x1e898:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e8cc:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e898;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e918:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r3 = r4 & r3;
                    /* Next insn is delay slot */ 
                    pc=0x1e868;
                    continue;
                case 0x1ea00:
                    pc=0x1ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ea00() throws ExecutionException { /* 0x1ea00 - 0x1ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ea00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ea34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ea34:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x1ea4c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ea4c:
                    r2 = r2 ^ r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eaa8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eac0;
                        continue;
                    }
                case 0x1ea74:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1eaa8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea74;
                        continue;
                    }
                case 0x1eac0:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ec00:
                    pc=0x1ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ec00() throws ExecutionException { /* 0x1ec00 - 0x1ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ec00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ec34;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1ec34:
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ec44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ec44:
                    r3 = r2 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ed0c;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 1;
                case 0x1ec5c:
                    r17 = r2 >>> 1;
                    r17 = r17 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1ec78;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1ec78:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ecc0;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x1ec8c:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ecc0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec8c;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ed0c:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r3 = r4 & r3;
                    /* Next insn is delay slot */ 
                    pc=0x1ec5c;
                    continue;
                case 0x1ee00:
                    pc=0x1ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ee00() throws ExecutionException { /* 0x1ee00 - 0x1f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ee00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ee34;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1ee34:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1ee44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1ee44:
                    r2 = r2 ^ r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eea0;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eeb8;
                        continue;
                    }
                case 0x1ee6c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1eea0:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee6c;
                        continue;
                    }
                case 0x1eeb8:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f000:
                    pc=0x1f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f000() throws ExecutionException { /* 0x1f000 - 0x1f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r2 = r0 + 2;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1f038;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f038:
                    r2 = r2 ^ r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f094;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0ac;
                        continue;
                    }
                case 0x1f060:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f094:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f060;
                        continue;
                    }
                case 0x1f0ac:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f200:
                    pc=0x1f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f200() throws ExecutionException { /* 0x1f200 - 0x1f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f200:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1f234;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f234:
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f244;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f244:
                    r3 = r2 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f30c;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 1;
                case 0x1f25c:
                    r17 = r2 >>> 1;
                    r17 = r17 & 255;
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1f278;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1f278:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f2c0;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 | 2;
                case 0x1f28c:
                    r3 = r0 + -129;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f2c0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r17 << 24;
                    r2 = r0 + -3;
                    r17 = r17 >> 24;
                    r2 = r3 & r2;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f28c;
                        continue;
                    }
                    r2 = r2 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f30c:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r3 = r4 & r3;
                    /* Next insn is delay slot */ 
                    pc=0x1f25c;
                    continue;
                case 0x1f400:
                    pc=0x1f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f400() throws ExecutionException { /* 0x1f400 - 0x1f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1f438;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f438:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f444;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f444:
                    r2 = r2 ^ r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f4a0;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f4b8;
                        continue;
                    }
                case 0x1f46c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f4a0:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f46c;
                        continue;
                    }
                case 0x1f4b8:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f600:
                    pc=0x1f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f600() throws ExecutionException { /* 0x1f600 - 0x1f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r4 + 1;
                    r4 = r4 + 257;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1f638;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f638:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = r4 + 1;
                    r4 = r4 + 257;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1f654;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f654:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = r2 + r0;
                    r2 = r4 + 1;
                    r4 = r4 + 257;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1f674;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f674:
                    r2 = r2 << 8;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = r2 | r17;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f800:
                    pc=0x1f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f800() throws ExecutionException { /* 0x1f800 - 0x1fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1f830;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1f830:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r17 = r2 + r17;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f848;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1f848:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    r4 = r3 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f860;
                        continue;
                    }
                    r2 = r2 | 1;
                case 0x1f860:
                    r5 = r2 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f8c8;
                        continue;
                    }
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f8dc;
                        continue;
                    }
                case 0x1f87c:
                    r2 = r2 & 65280;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f8f0;
                        continue;
                    }
                case 0x1f88c:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                case 0x1f894:
                    r4 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1f8a4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1f8a4:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f8c8:
                    r4 = r0 + -3;
                    r3 = r3 & r4;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f87c;
                        continue;
                    }
                case 0x1f8dc:
                    r4 = r0 + -129;
                    r2 = r2 & 65280;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f88c;
                        continue;
                    }
                case 0x1f8f0:
                    r3 = r3 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x1f894;
                    continue;
                case 0x1fa00:
                    pc=0x1fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fa00() throws ExecutionException { /* 0x1fa00 - 0x1fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fa00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1fa34;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1fa34:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa5c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x1fa5c:
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1fa6c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1fa6c:
                    r2 = r2 & r18;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fabc;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1fa88:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fabc:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa88;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fc00:
                    pc=0x1fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fc00() throws ExecutionException { /* 0x1fc00 - 0x1fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fc00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1fc34;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1fc34:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fc5c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x1fc5c:
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1fc6c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1fc6c:
                    r2 = r2 & r18;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fcbc;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x1fc88:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fcbc:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fc88;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fe00:
                    pc=0x1fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fe00() throws ExecutionException { /* 0x1fe00 - 0x20000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fe00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1fe30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1fe30:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    r17 = r2 & 255;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fe4c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x1fe4c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    r4 = r3 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe64;
                        continue;
                    }
                    r2 = r2 | 1;
                case 0x1fe64:
                    r5 = r2 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fecc;
                        continue;
                    }
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fee0;
                        continue;
                    }
                case 0x1fe80:
                    r2 = r2 & 65280;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fef4;
                        continue;
                    }
                case 0x1fe90:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                case 0x1fe98:
                    r4 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1fea8;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1fea8:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fecc:
                    r4 = r0 + -3;
                    r3 = r3 & r4;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe80;
                        continue;
                    }
                case 0x1fee0:
                    r4 = r0 + -129;
                    r2 = r2 & 65280;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe90;
                        continue;
                    }
                case 0x1fef4:
                    r3 = r3 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x1fe98;
                    continue;
                case 0x20000:
                    pc=0x20000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20000() throws ExecutionException { /* 0x20000 - 0x20200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20034;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20034:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x2004c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2004c:
                    r2 = r2 & r18;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2009c;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x20068:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2009c:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20068;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20200:
                    pc=0x20200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20200() throws ExecutionException { /* 0x20200 - 0x20400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20230;
                    pc=0x28400;
                    run_28400(); return;
                case 0x20230:
                    r4 = r2 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20240;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20240:
                    r3 = r2 << 1;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2025c;
                        continue;
                    }
                    r3 = r3 | 1;
                case 0x2025c:
                    r5 = r3 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202c4;
                        continue;
                    }
                    r4 = r3 & 128;
                    r2 = r2 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202d8;
                        continue;
                    }
                case 0x20278:
                    r3 = r3 & 65280;
                    r2 = r2 | 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202ec;
                        continue;
                    }
                case 0x20288:
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                case 0x20290:
                    r4 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x202a0;
                    pc=0x28000;
                    run_28000(); return;
                case 0x202a0:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x202c4:
                    r4 = r0 + -3;
                    r2 = r2 & r4;
                    r4 = r3 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20278;
                        continue;
                    }
                case 0x202d8:
                    r4 = r0 + -129;
                    r3 = r3 & 65280;
                    r2 = r2 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20288;
                        continue;
                    }
                case 0x202ec:
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x20290;
                    continue;
                case 0x20400:
                    pc=0x20400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20400() throws ExecutionException { /* 0x20400 - 0x20600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20434;
                    pc=0x28400;
                    run_28400(); return;
                case 0x20434:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20444;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20444:
                    r2 = r2 & r18;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20494;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x20460:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20494:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20460;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20600:
                    pc=0x20600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20600() throws ExecutionException { /* 0x20600 - 0x20800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20630;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20630:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2063c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2063c:
                    r3 = r2 << 24;
                    r3 = r3 >> 24;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x206f0;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                case 0x20658:
                    r4 = r2 & 64;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x206a8;
                        continue;
                    }
                    r4 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x206c4;
                        continue;
                    }
                case 0x20678:
                    r2 = r0 + -3;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x206a8:
                    r4 = r0 + -65;
                    r3 = r3 & r4;
                    r4 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r2 = r2 & r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20678;
                        continue;
                    }
                case 0x206c4:
                    r2 = r3 | 2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x206f0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 128;
                    /* Next insn is delay slot */ 
                    pc=0x20658;
                    continue;
                case 0x20800:
                    pc=0x20800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20800() throws ExecutionException { /* 0x20800 - 0x20a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r2 = r0 + 2;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20838;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20838:
                    r2 = r2 & r18;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20888;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x20854:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20888:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20854;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20a00:
                    pc=0x20a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20a00() throws ExecutionException { /* 0x20a00 - 0x20c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = r4 + 1;
                    r4 = r4 + 257;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20a34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20a34:
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20c00:
                    pc=0x20c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20c00() throws ExecutionException { /* 0x20c00 - 0x20e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20c00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20c30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20c30:
                    r4 = r2 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20c40;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20c40:
                    r3 = r2 << 1;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20c5c;
                        continue;
                    }
                    r3 = r3 | 1;
                case 0x20c5c:
                    r5 = r3 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20cc4;
                        continue;
                    }
                    r4 = r3 & 128;
                    r2 = r2 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20cd8;
                        continue;
                    }
                case 0x20c78:
                    r3 = r3 & 65280;
                    r2 = r2 | 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20cec;
                        continue;
                    }
                case 0x20c88:
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                case 0x20c90:
                    r4 = r17 + r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20ca0;
                    pc=0x28000;
                    run_28000(); return;
                case 0x20ca0:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20cc4:
                    r4 = r0 + -3;
                    r2 = r2 & r4;
                    r4 = r3 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20c78;
                        continue;
                    }
                case 0x20cd8:
                    r4 = r0 + -129;
                    r3 = r3 & 65280;
                    r2 = r2 & r4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20c88;
                        continue;
                    }
                case 0x20cec:
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x20c90;
                    continue;
                case 0x20e00:
                    pc=0x20e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20e00() throws ExecutionException { /* 0x20e00 - 0x21000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20e00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20e38;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20e38:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20e44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x20e44:
                    r2 = r2 & r18;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e94;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x20e60:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20e94:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e60;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21000:
                    pc=0x21000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21000() throws ExecutionException { /* 0x21000 - 0x21200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21030;
                    pc=0x28200;
                    run_28200(); return;
                case 0x21030:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2103c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2103c:
                    r3 = r2 << 24;
                    r3 = r3 >> 24;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x210f0;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -129;
                    r3 = r4 & r3;
                case 0x21058:
                    r4 = r2 & 64;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x210a8;
                        continue;
                    }
                    r4 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x210c4;
                        continue;
                    }
                case 0x21078:
                    r2 = r0 + -3;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x210a8:
                    r4 = r0 + -65;
                    r3 = r3 & r4;
                    r4 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r2 = r2 & r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21078;
                        continue;
                    }
                case 0x210c4:
                    r2 = r3 | 2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x210f0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 128;
                    /* Next insn is delay slot */ 
                    pc=0x21058;
                    continue;
                case 0x21200:
                    pc=0x21200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21200() throws ExecutionException { /* 0x21200 - 0x21400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21200:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r4 = r4 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21238;
                    pc=0x28400;
                    run_28400(); return;
                case 0x21238:
                    r19 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r19 = r2 + r19;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21250;
                    pc=0x28200;
                    run_28200(); return;
                case 0x21250:
                    r17 = r2 << 1;
                    r18 = r17 & 255;
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21268;
                    pc=0x28000;
                    run_28000(); return;
                case 0x21268:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x212cc;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r17 & 128;
                    r2 = r2 | 2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x212e4;
                        continue;
                    }
                case 0x21284:
                    r17 = r17 & 256;
                    r2 = r2 | 128;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x212f8;
                        continue;
                    }
                case 0x21294:
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                case 0x2129c:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x212cc:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -3;
                    r2 = r3 & r2;
                    r3 = r17 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21284;
                        continue;
                    }
                case 0x212e4:
                    r3 = r0 + -129;
                    r17 = r17 & 256;
                    r2 = r2 & r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21294;
                        continue;
                    }
                case 0x212f8:
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x2129c;
                    continue;
                case 0x21400:
                    pc=0x21400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21400() throws ExecutionException { /* 0x21400 - 0x21600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21434;
                    pc=0x28400;
                    run_28400(); return;
                case 0x21434:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2145c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x2145c:
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x2146c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2146c:
                    r2 = r2 | r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x214c8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x214e0;
                        continue;
                    }
                case 0x21494:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x214c8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21494;
                        continue;
                    }
                case 0x214e0:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21600:
                    pc=0x21600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21600() throws ExecutionException { /* 0x21600 - 0x21800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21634;
                    pc=0x28400;
                    run_28400(); return;
                case 0x21634:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2165c;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x2165c:
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x2166c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2166c:
                    r2 = r2 | r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x216c8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x216e0;
                        continue;
                    }
                case 0x21694:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x216c8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21694;
                        continue;
                    }
                case 0x216e0:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21800:
                    pc=0x21800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21800() throws ExecutionException { /* 0x21800 - 0x21a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21800:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21838;
                    pc=0x28200;
                    run_28200(); return;
                case 0x21838:
                    r19 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r19;
                    r19 = r2 & 255;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21854;
                    pc=0x28200;
                    run_28200(); return;
                case 0x21854:
                    r17 = r2 << 1;
                    r18 = r17 & 255;
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2186c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x2186c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x218d0;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r17 & 128;
                    r2 = r2 | 2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x218e8;
                        continue;
                    }
                case 0x21888:
                    r17 = r17 & 256;
                    r2 = r2 | 128;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x218fc;
                        continue;
                    }
                case 0x21898:
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                case 0x218a0:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x218d0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -3;
                    r2 = r3 & r2;
                    r3 = r17 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21888;
                        continue;
                    }
                case 0x218e8:
                    r3 = r0 + -129;
                    r17 = r17 & 256;
                    r2 = r2 & r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21898;
                        continue;
                    }
                case 0x218fc:
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x218a0;
                    continue;
                case 0x21a00:
                    pc=0x21a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21a00() throws ExecutionException { /* 0x21a00 - 0x21c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21a00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21a34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x21a34:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x21a4c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x21a4c:
                    r2 = r2 | r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21aa8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21ac0;
                        continue;
                    }
                case 0x21a74:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21aa8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a74;
                        continue;
                    }
                case 0x21ac0:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21c00:
                    pc=0x21c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21c00() throws ExecutionException { /* 0x21c00 - 0x21e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21c00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21c38;
                    pc=0x28400;
                    run_28400(); return;
                case 0x21c38:
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21c48;
                    pc=0x28200;
                    run_28200(); return;
                case 0x21c48:
                    r17 = r2 << 1;
                    r18 = r17 & 255;
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21c60;
                    pc=0x28000;
                    run_28000(); return;
                case 0x21c60:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21cc4;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r17 & 128;
                    r2 = r2 | 2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21cdc;
                        continue;
                    }
                case 0x21c7c:
                    r17 = r17 & 256;
                    r2 = r2 | 128;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21cf0;
                        continue;
                    }
                case 0x21c8c:
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                case 0x21c94:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21cc4:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -3;
                    r2 = r3 & r2;
                    r3 = r17 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c7c;
                        continue;
                    }
                case 0x21cdc:
                    r3 = r0 + -129;
                    r17 = r17 & 256;
                    r2 = r2 & r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c8c;
                        continue;
                    }
                case 0x21cf0:
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x21c94;
                    continue;
                case 0x21e00:
                    pc=0x21e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21e00() throws ExecutionException { /* 0x21e00 - 0x22000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21e00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21e34;
                    pc=0x28400;
                    run_28400(); return;
                case 0x21e34:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x21e44;
                    pc=0x28200;
                    run_28200(); return;
                case 0x21e44:
                    r2 = r2 | r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21ea0;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21eb8;
                        continue;
                    }
                case 0x21e6c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21ea0:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e6c;
                        continue;
                    }
                case 0x21eb8:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22000:
                    pc=0x22000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22000() throws ExecutionException { /* 0x22000 - 0x22200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r2 = r0 + 2;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22038;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22038:
                    r2 = r2 | r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22094;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x220ac;
                        continue;
                    }
                case 0x22060:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22094:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22060;
                        continue;
                    }
                case 0x220ac:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22200:
                    pc=0x22200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22200() throws ExecutionException { /* 0x22200 - 0x22400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22200:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22238;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22238:
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22248;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22248:
                    r17 = r2 << 1;
                    r18 = r17 & 255;
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22260;
                    pc=0x28000;
                    run_28000(); return;
                case 0x22260:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x222c4;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r17 & 128;
                    r2 = r2 | 2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x222dc;
                        continue;
                    }
                case 0x2227c:
                    r17 = r17 & 256;
                    r2 = r2 | 128;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x222f0;
                        continue;
                    }
                case 0x2228c:
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                case 0x22294:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x222c4:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -3;
                    r2 = r3 & r2;
                    r3 = r17 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2227c;
                        continue;
                    }
                case 0x222dc:
                    r3 = r0 + -129;
                    r17 = r17 & 256;
                    r2 = r2 & r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2228c;
                        continue;
                    }
                case 0x222f0:
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x22294;
                    continue;
                case 0x22400:
                    pc=0x22400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22400() throws ExecutionException { /* 0x22400 - 0x22600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22438;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22438:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22444;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22444:
                    r2 = r2 | r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x224a0;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x224b8;
                        continue;
                    }
                case 0x2246c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x224a0:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2246c;
                        continue;
                    }
                case 0x224b8:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22600:
                    pc=0x22600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22600() throws ExecutionException { /* 0x22600 - 0x22800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22634;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22634:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22640;
                    pc=0x28600;
                    run_28600(); return;
                case 0x22640:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22668;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x22668:
                    r4 = r2 + r3;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22678;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22678:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22764;
                        continue;
                    }
                    r7 = r3 & 1;
                    r4 = r18 & 15;
                    r4 = r7 + r4;
                    r5 = r2 & 15;
                    r4 = r4 - r5;
                    r6 = r4 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x226b8;
                        continue;
                    }
                    r6 = r4 + -7;
                    r6 = r6 & 15;
                    r6 = r6 + -16;
                case 0x226b8:
                    r5 = r18 & 240;
                    r8 = r2 & 240;
                    r5 = r5 - r8;
                    r5 = r5 + r6;
                    r4 = r5 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x226d8;
                        continue;
                    }
                    r5 = r5 + -96;
                case 0x226d8:
                    r4 = r7 ^ 1;
                    r4 = r4 - r2;
                    r4 = r4 + r5;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22850;
                        run_22800(); return;
                    }
                    r5 = r0 + -3;
                    r3 = r3 & r5;
                    r5 = r4 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22860;
                        run_22800(); return;
                    }
                case 0x22708:
                    r5 = r4 < 256 ? 1 : 0;
                    r3 = r3 | 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22874;
                        run_22800(); return;
                    }
                case 0x22718:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22894;
                        run_22800(); return;
                    }
                case 0x22734:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22764:
                    r5 = 7 << 16;
                    r5 = readPages[(r5+-30376)>>>12][((r5+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 ^ 1;
                    r4 = r5 - r4;
                    r4 = r4 - r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x227fc;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2280c;
                        run_22800(); return;
                    }
                case 0x2279c:
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22820;
                        run_22800(); return;
                    }
                case 0x227ac:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22840;
                        run_22800(); return;
                    }
                case 0x227c8:
                    r3 = r3 | 64;
                case 0x227cc:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x227fc:
                    r6 = r4 & 128;
                case 0x22800:
                    pc=0x22800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22800() throws ExecutionException { /* 0x22800 - 0x22a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22800:
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2279c;
                        run_22600(); return;
                    }
                case 0x2280c:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x227ac;
                        run_22600(); return;
                    }
                case 0x22820:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r6 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r6;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x227c8;
                        run_22600(); return;
                    }
                case 0x22840:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x227cc;
                    run_22600(); return;
                case 0x22850:
                    r5 = r4 & 128;
                    r3 = r3 | 2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22708;
                        run_22600(); return;
                    }
                case 0x22860:
                    r5 = r0 + -129;
                    r3 = r3 & r5;
                    r5 = r4 < 256 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22718;
                        run_22600(); return;
                    }
                case 0x22874:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r5 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22734;
                        run_22600(); return;
                    }
                case 0x22894:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22a00:
                    pc=0x22a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22a00() throws ExecutionException { /* 0x22a00 - 0x22c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22a00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22a34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22a34:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x22a4c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x22a4c:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22a5c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22a5c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b48;
                        continue;
                    }
                    r7 = r3 & 1;
                    r4 = r18 & 15;
                    r4 = r7 + r4;
                    r5 = r2 & 15;
                    r4 = r4 - r5;
                    r6 = r4 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a9c;
                        continue;
                    }
                    r6 = r4 + -7;
                    r6 = r6 & 15;
                    r6 = r6 + -16;
                case 0x22a9c:
                    r5 = r18 & 240;
                    r8 = r2 & 240;
                    r5 = r5 - r8;
                    r5 = r5 + r6;
                    r4 = r5 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22abc;
                        continue;
                    }
                    r5 = r5 + -96;
                case 0x22abc:
                    r4 = r7 ^ 1;
                    r4 = r4 - r2;
                    r4 = r4 + r5;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c30;
                        run_22c00(); return;
                    }
                    r5 = r0 + -3;
                    r3 = r3 & r5;
                    r5 = r4 & 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c40;
                        run_22c00(); return;
                    }
                case 0x22aec:
                    r5 = r4 < 256 ? 1 : 0;
                    r3 = r3 | 128;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c54;
                        run_22c00(); return;
                    }
                case 0x22afc:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c74;
                        run_22c00(); return;
                    }
                case 0x22b18:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22b48:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 ^ 1;
                    r4 = r5 - r4;
                    r4 = r4 - r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22bdc;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22bec;
                        continue;
                    }
                case 0x22b7c:
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c00;
                        run_22c00(); return;
                    }
                case 0x22b8c:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r4 = r2 & r18;
                    r3 = r3 | 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c20;
                        run_22c00(); return;
                    }
                case 0x22ba8:
                    r3 = r3 | 64;
                case 0x22bac:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22bdc:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b7c;
                        continue;
                    }
                case 0x22bec:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b8c;
                        continue;
                    }
                case 0x22c00:
                    pc=0x22c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22c00() throws ExecutionException { /* 0x22c00 - 0x22e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22c00:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r6 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r6;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ba8;
                        run_22a00(); return;
                    }
                case 0x22c20:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x22bac;
                    run_22a00(); return;
                case 0x22c30:
                    r5 = r4 & 128;
                    r3 = r3 | 2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22aec;
                        run_22a00(); return;
                    }
                case 0x22c40:
                    r5 = r0 + -129;
                    r3 = r3 & r5;
                    r5 = r4 < 256 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22afc;
                        run_22a00(); return;
                    }
                case 0x22c54:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r18 = r4 ^ r18;
                    r5 = r0 + -2;
                    r4 = r2 & r18;
                    r3 = r3 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b18;
                        run_22a00(); return;
                    }
                case 0x22c74:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22e00:
                    pc=0x22e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22e00() throws ExecutionException { /* 0x22e00 - 0x23000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x22e30;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22e30:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x22e48;
                    pc=0x28600;
                    run_28600(); return;
                case 0x22e48:
                    r4 = r2 + r0;
                    r17 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22e58;
                    pc=0x28200;
                    run_28200(); return;
                case 0x22e58:
                    r2 = r17 - r2;
                    r3 = r2 & 255;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ebc;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 & 128;
                    r3 = r3 | 2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ed4;
                        continue;
                    }
                case 0x22e7c:
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 | 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ee8;
                        continue;
                    }
                case 0x22e8c:
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22ebc:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r2 & 128;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e7c;
                        continue;
                    }
                case 0x22ed4:
                    r4 = r0 + -129;
                    r2 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = r3 & r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e8c;
                        continue;
                    }
                case 0x22ee8:
                    r2 = r3 | 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23000:
                    pc=0x23000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23000() throws ExecutionException { /* 0x23000 - 0x23200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23030;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23030:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2303c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x2303c:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23064;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x23064:
                    r4 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x23070;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23070:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230b8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x23088:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x230b8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23088;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23200:
                    pc=0x23200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23200() throws ExecutionException { /* 0x23200 - 0x23400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23230;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23230:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x23248;
                    pc=0x28600;
                    run_28600(); return;
                case 0x23248:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23254;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23254:
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2329c;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x2326c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2329c:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r3 = r4 & r3;
                    r4 = r0 + -128;
                    r2 = r2 & r4;
                    r2 = r2 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2326c;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23400:
                    pc=0x23400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23400() throws ExecutionException { /* 0x23400 - 0x23600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23430;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23430:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2343c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x2343c:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    addr=r17+-30373;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x23450;
                    pc=0x28000;
                    run_28000(); return;
                case 0x23450:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23600:
                    pc=0x23600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23600() throws ExecutionException { /* 0x23600 - 0x23800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23630;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23630:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x23648;
                    pc=0x28600;
                    run_28600(); return;
                case 0x23648:
                    addr=r17+-30373;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23658;
                    pc=0x28000;
                    run_28000(); return;
                case 0x23658:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23800:
                    pc=0x23800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23800() throws ExecutionException { /* 0x23800 - 0x23a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23834;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23834:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23840;
                    pc=0x28600;
                    run_28600(); return;
                case 0x23840:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 & 255;
                    r4 = r4 + r3;
                    r4 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23868;
                        continue;
                    }
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r4;
                case 0x23868:
                    r4 = r2 + r3;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x23878;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23878:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23980;
                        continue;
                    }
                    r6 = r3 & 1;
                    r5 = r18 & 15;
                    r4 = r2 & 15;
                    r5 = r6 + r5;
                    r5 = r5 + r4;
                    r4 = (r5&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x238b8;
                        continue;
                    }
                    r5 = r5 + 6;
                    r5 = r5 & 15;
                    r5 = r5 + 16;
                case 0x238b8:
                    r8 = r0 + -16;
                    r7 = r2 & r8;
                    r8 = r18 & r8;
                    r9 = r7 & 255;
                    r4 = r18 & 240;
                    r8 = r8 << 24;
                    r7 = r7 << 24;
                    r18 = r6 + r18;
                    r4 = r9 + r4;
                    r8 = r8 >> 24;
                    r7 = r7 >> 24;
                    r2 = r18 + r2;
                    r4 = r4 + r5;
                    r7 = r8 + r7;
                    r2 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r4;
                    r5 = r7 + r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a70;
                        run_23a00(); return;
                    }
                    r2 = r4 & 128;
                    r3 = r3 | 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a84;
                        run_23a00(); return;
                    }
                case 0x23914:
                    r3 = r3 | 128;
                case 0x23918:
                    r2 = (r4&0xffffffffL) < (160&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23930;
                        continue;
                    }
                    r4 = r4 + 96;
                    r2 = 7 << 16;
                    writePages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff] = r4;
                case 0x23930:
                    r4 = r4 & 65280;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ac8;
                        run_23a00(); return;
                    }
                    r3 = r3 | 1;
                case 0x23940:
                    r5 = r5 + 128;
                    r5 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a94;
                        run_23a00(); return;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23980:
                    r5 = 7 << 16;
                    r5 = readPages[(r5+-30376)>>>12][((r5+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 + r5;
                    r4 = r4 + r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a1c;
                        run_23a00(); return;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a2c;
                        run_23a00(); return;
                    }
                case 0x239b4:
                    r6 = r4 & 65280;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a40;
                        run_23a00(); return;
                    }
                case 0x239c4:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r3 = r3 | 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a58;
                        run_23a00(); return;
                    }
                case 0x239d8:
                    r4 = r4 ^ r18;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a58;
                        run_23a00(); return;
                    }
                    r3 = r3 | 64;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                case 0x239f4:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                case 0x23a00:
                    pc=0x23a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23a00() throws ExecutionException { /* 0x23a00 - 0x23c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23a00:
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23a1c:
                    r6 = r4 & 128;
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239b4;
                        run_23800(); return;
                    }
                case 0x23a2c:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = r4 & 65280;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239c4;
                        run_23800(); return;
                    }
                case 0x23a40:
                    r2 = r2 ^ r18;
                    r6 = r0 + -2;
                    r2 = r2 & 128;
                    r3 = r3 & r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239d8;
                        run_23800(); return;
                    }
                case 0x23a58:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x239f4;
                    run_23800(); return;
                case 0x23a70:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r4 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23914;
                        run_23800(); return;
                    }
                case 0x23a84:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x23918;
                    run_23800(); return;
                case 0x23a94:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23ac8:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x23940;
                    run_23800(); return;
                case 0x23c00:
                    pc=0x23c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23c00() throws ExecutionException { /* 0x23c00 - 0x23e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23c00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x23c34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23c34:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x23c4c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x23c4c:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x23c5c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x23c5c:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d64;
                        continue;
                    }
                    r6 = r3 & 1;
                    r5 = r18 & 15;
                    r4 = r2 & 15;
                    r5 = r6 + r5;
                    r5 = r5 + r4;
                    r4 = (r5&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c9c;
                        continue;
                    }
                    r5 = r5 + 6;
                    r5 = r5 & 15;
                    r5 = r5 + 16;
                case 0x23c9c:
                    r8 = r0 + -16;
                    r7 = r2 & r8;
                    r8 = r18 & r8;
                    r9 = r7 & 255;
                    r4 = r18 & 240;
                    r8 = r8 << 24;
                    r7 = r7 << 24;
                    r18 = r6 + r18;
                    r4 = r9 + r4;
                    r8 = r8 >> 24;
                    r7 = r7 >> 24;
                    r2 = r18 + r2;
                    r4 = r4 + r5;
                    r7 = r8 + r7;
                    r2 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r4;
                    r5 = r7 + r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e50;
                        run_23e00(); return;
                    }
                    r2 = r4 & 128;
                    r3 = r3 | 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e64;
                        run_23e00(); return;
                    }
                case 0x23cf8:
                    r3 = r3 | 128;
                case 0x23cfc:
                    r2 = (r4&0xffffffffL) < (160&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d14;
                        continue;
                    }
                    r4 = r4 + 96;
                    r2 = 7 << 16;
                    writePages[(r2+-30376)>>>12][((r2+-30376)>>>2)&0x3ff] = r4;
                case 0x23d14:
                    r4 = r4 & 65280;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ea8;
                        run_23e00(); return;
                    }
                    r3 = r3 | 1;
                case 0x23d24:
                    r5 = r5 + 128;
                    r5 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e74;
                        run_23e00(); return;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 | 64;
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23d64:
                    r5 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r3 & 1;
                    r4 = r4 + r5;
                    r4 = r4 + r2;
                    r5 = r4 & 255;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23dfc;
                        continue;
                    }
                    r6 = r0 + -3;
                    r3 = r3 & r6;
                    r6 = r4 & 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e0c;
                        run_23e00(); return;
                    }
                case 0x23d94:
                    r6 = r4 & 65280;
                    r3 = r3 | 128;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e20;
                        run_23e00(); return;
                    }
                case 0x23da4:
                    r2 = r2 ^ r18;
                    r2 = r2 & 128;
                    r3 = r3 | 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e38;
                        run_23e00(); return;
                    }
                case 0x23db8:
                    r4 = r4 ^ r18;
                    r4 = r4 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e38;
                        run_23e00(); return;
                    }
                    r3 = r3 | 64;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                case 0x23dd4:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23dfc:
                    r6 = r4 & 128;
                case 0x23e00:
                    pc=0x23e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23e00() throws ExecutionException { /* 0x23e00 - 0x24000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23e00:
                    r3 = r3 | 2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d94;
                        run_23c00(); return;
                    }
                case 0x23e0c:
                    r6 = r0 + -129;
                    r3 = r3 & r6;
                    r6 = r4 & 65280;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23da4;
                        run_23c00(); return;
                    }
                case 0x23e20:
                    r2 = r2 ^ r18;
                    r6 = r0 + -2;
                    r2 = r2 & 128;
                    r3 = r3 & r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23db8;
                        run_23c00(); return;
                    }
                case 0x23e38:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x23dd4;
                    run_23c00(); return;
                case 0x23e50:
                    r2 = r0 + -3;
                    r3 = r3 & r2;
                    r2 = r4 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23cf8;
                        run_23c00(); return;
                    }
                case 0x23e64:
                    r2 = r0 + -129;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x23cfc;
                    run_23c00(); return;
                case 0x23e74:
                    r2 = r0 + -65;
                    r3 = r3 & r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23ea8:
                    r2 = r0 + -2;
                    r3 = r3 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x23d24;
                    run_23c00(); return;
                case 0x24000:
                    pc=0x24000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24000() throws ExecutionException { /* 0x24000 - 0x24200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24034;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24034:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24040;
                    pc=0x28600;
                    run_28600(); return;
                case 0x24040:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x24054;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24054:
                    r2 = r2 ^ r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x240b0;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x240c8;
                        continue;
                    }
                case 0x2407c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x240b0:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2407c;
                        continue;
                    }
                case 0x240c8:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24200:
                    pc=0x24200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24200() throws ExecutionException { /* 0x24200 - 0x24400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24234;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24234:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x2424c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x2424c:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2425c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2425c:
                    r2 = r2 ^ r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242b8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242d0;
                        continue;
                    }
                case 0x24284:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x242b8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24284;
                        continue;
                    }
                case 0x242d0:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24400:
                    pc=0x24400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24400() throws ExecutionException { /* 0x24400 - 0x24600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24434;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24434:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24440;
                    pc=0x28600;
                    run_28600(); return;
                case 0x24440:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x24454;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24454:
                    r2 = r2 & r18;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x244a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x24470:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x244a4:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24470;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24600:
                    pc=0x24600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24600() throws ExecutionException { /* 0x24600 - 0x24800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24634;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24634:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x2464c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x2464c:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2465c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2465c:
                    r2 = r2 & r18;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x246ac;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r3 | 2;
                case 0x24678:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x246ac:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24678;
                        continue;
                    }
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24800:
                    pc=0x24800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24800() throws ExecutionException { /* 0x24800 - 0x24a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24834;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24834:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24840;
                    pc=0x28600;
                    run_28600(); return;
                case 0x24840:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    /* Next insn is delay slot */ 
                    r31=0x24854;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24854:
                    r2 = r2 | r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x248b0;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x248c8;
                        continue;
                    }
                case 0x2487c:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x248b0:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2487c;
                        continue;
                    }
                case 0x248c8:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24a00:
                    pc=0x24a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24a00() throws ExecutionException { /* 0x24a00 - 0x24c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24a00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r17 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24a34;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24a34:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    r4 = r4 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x24a4c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x24a4c:
                    r4 = r2 + r0;
                    r18 = readPages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x24a5c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x24a5c:
                    r2 = r2 | r18;
                    r3 = r2 & 255;
                    writePages[(r17+-30376)>>>12][((r17+-30376)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24ab8;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 128;
                    r3 = r3 | 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24ad0;
                        continue;
                    }
                case 0x24a84:
                    r2 = r0 + -129;
                    r2 = r3 & r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24ab8:
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r0 + -3;
                    r2 = r2 & 128;
                    r3 = r4 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24a84;
                        continue;
                    }
                case 0x24ad0:
                    r2 = r3 | 128;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24c00:
                    pc=0x24c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24c00() throws ExecutionException { /* 0x24c00 - 0x24e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24c2c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x24c2c:
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x24e00:
                    pc=0x24e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24e00() throws ExecutionException { /* 0x24e00 - 0x25000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24e00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 6;
                    r4 = r4 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24e30;
                    pc=0x28400;
                    run_28400(); return;
                case 0x24e30:
                    r5 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r5;
                    r5 = r5 >>> 8;
                    r17 = r2 + r0;
                    r5 = r5 & 255;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24e60;
                    pc=0x28000;
                    run_28000(); return;
                case 0x24e60:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+27;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x24e7c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x24e7c:
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r17;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x25000:
                    pc=0x25000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25000() throws ExecutionException { /* 0x25000 - 0x25200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x25020;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25020:
                    r4 = 6 << 16;
                    r6 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r4 = r4 + 20480;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25038;
                    pc=0x27000;
                    run_27000(); return;
                case 0x25038:
                case 0x25200:
                    pc=0x25200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25200() throws ExecutionException { /* 0x25200 - 0x25400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25200:
                    r29 = r29 + -48;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = 7 << 16;
                    r17 = r17 + -30376;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    r21 = readPages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r21 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25240;
                    pc=0x28400;
                    run_28400(); return;
                case 0x25240:
                    r16 = r2 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25250;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25250:
                    r19 = r16 + 1;
                    r20 = r2 + r0;
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r2;
                    r18 = r19 & 255;
                    r2 = r16 & 65280;
                    r18 = r18 | r2;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25274;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25274:
                    r2 = r2 << 8;
                    r20 = r2 | r20;
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r20;
                    if(r19 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x252c0;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = 6 << 16;
                    r5 = r21 + r0;
                    r6 = r16 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r4 + 20520;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x252c0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25400:
                    pc=0x25400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25400() throws ExecutionException { /* 0x25400 - 0x25600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r2 = r0 + 2;
                    r16 = r16 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25450;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x2543c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25450:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25468;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25468:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r4 = r3 + 2;
                    r2 = r2 >> 24;
                    r2 = r4 + r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = r3 >>> 8;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r3 = r3 & 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2543c;
                        continue;
                    }
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25600:
                    pc=0x25600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25600() throws ExecutionException { /* 0x25600 - 0x25800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r2 = r0 + 2;
                    r16 = r16 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r2 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25650;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x2563c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25650:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25668;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25668:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r4 = r3 + 2;
                    r2 = r2 >> 24;
                    r2 = r4 + r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = r3 >>> 8;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r3 = r3 & 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2563c;
                        continue;
                    }
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25800:
                    pc=0x25800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25800() throws ExecutionException { /* 0x25800 - 0x25a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r2 = r0 + 2;
                    r16 = r16 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25850;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x2583c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25850:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25868;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25868:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r4 = r3 + 2;
                    r2 = r2 >> 24;
                    r2 = r4 + r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = r3 >>> 8;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r3 = r3 & 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2583c;
                        continue;
                    }
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25a00:
                    pc=0x25a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25a00() throws ExecutionException { /* 0x25a00 - 0x25c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r2 = r0 + 2;
                    r16 = r16 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a50;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x25a3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25a50:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25a68;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25a68:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r4 = r3 + 2;
                    r2 = r2 >> 24;
                    r2 = r4 + r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = r3 >>> 8;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r3 = r3 & 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x25a3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25c00:
                    pc=0x25c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25c00() throws ExecutionException { /* 0x25c00 - 0x25e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r2 = r0 + 2;
                    r16 = r16 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25c50;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x25c3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25c50:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25c68;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25c68:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r4 = r3 + 2;
                    r2 = r2 >> 24;
                    r2 = r4 + r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = r3 >>> 8;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r3 = r3 & 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x25c3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25e00:
                    pc=0x25e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25e00() throws ExecutionException { /* 0x25e00 - 0x26000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r2 = r0 + 2;
                    r16 = r16 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e50;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x25e3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25e50:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x25e68;
                    pc=0x28200;
                    run_28200(); return;
                case 0x25e68:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r4 = r3 + 2;
                    r2 = r2 >> 24;
                    r2 = r4 + r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = r3 >>> 8;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r3 = r3 & 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x25e3c;
                        continue;
                    }
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26000:
                    pc=0x26000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26000() throws ExecutionException { /* 0x26000 - 0x26200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r2 = r0 + 2;
                    r16 = r16 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26050;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x2603c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26050:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x26068;
                    pc=0x28200;
                    run_28200(); return;
                case 0x26068:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r4 = r3 + 2;
                    r2 = r2 >> 24;
                    r2 = r4 + r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = r3 >>> 8;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r3 = r3 & 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2603c;
                        continue;
                    }
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26200:
                    pc=0x26200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26200() throws ExecutionException { /* 0x26200 - 0x26400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r2 = r0 + 2;
                    r16 = r16 + -30376;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r2 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26250;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x2623c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26250:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r4 = r4 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x26268;
                    pc=0x28200;
                    run_28200(); return;
                case 0x26268:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 << 24;
                    r4 = r3 + 2;
                    r2 = r2 >> 24;
                    r2 = r4 + r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = r3 >>> 8;
                    r2 = r2 >>> 8;
                    r2 = r2 & 255;
                    r3 = r3 & 255;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2623c;
                        continue;
                    }
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26400:
                    pc=0x26400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26400() throws ExecutionException { /* 0x26400 - 0x26600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26400:
                    r2 = r0 + 1;
                    writePages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26600:
                    pc=0x26600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26600() throws ExecutionException { /* 0x26600 - 0x26800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26600:
                    r2 = r0 + 1;
                    writePages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26800:
                    pc=0x26800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26800() throws ExecutionException { /* 0x26800 - 0x26a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = r0 | 65532;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x2682c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x2682c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26a00:
                    pc=0x26a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26a00() throws ExecutionException { /* 0x26a00 - 0x26c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26a00:
                    r2 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26a9c;
                        continue;
                    }
                    r2 = readPages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff];
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26a40;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26b40;
                        continue;
                    }
                case 0x26a40:
                    r4 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26a4c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x26a4c:
                    r3 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r4 = r28 + -32764;
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r3 = r3 + r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x26a78;
                    return;
                case 0x26a78:
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff] = r3;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26a9c:
                    r16 = 7 << 16;
                    r16 = r16 + -30376;
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+26;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x26ac4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x26ac4:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+27;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x26ae0;
                    pc=0x28000;
                    run_28000(); return;
                case 0x26ae0:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+19;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x26afc;
                    pc=0x28000;
                    run_28000(); return;
                case 0x26afc:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r0 | 65530;
                    r2 = r2 | 4;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x26b14;
                    pc=0x28400;
                    run_28400(); return;
                case 0x26b14:
                    r3 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r3 = r3 + r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff] = r3;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26b40:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+26;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x26b60;
                    pc=0x28000;
                    run_28000(); return;
                case 0x26b60:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+27;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x26b7c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x26b7c:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    addr=r16+19;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r4 + -1;
                    r4 = r4 + 256;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x26b98;
                    pc=0x28000;
                    run_28000(); return;
                case 0x26b98:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r0 | 65534;
                    r2 = r2 | 4;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x26bb0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x26bb0:
                    r3 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    r3 = r3 + r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff] = r3;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26c00:
                    pc=0x26c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26c00() throws ExecutionException { /* 0x26c00 - 0x26e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26c00:
                    r2 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26e00:
                    pc=0x26e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26e00() throws ExecutionException { /* 0x26e00 - 0x27000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26e00:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + 22628;
                    r5 = r0 + 1;
                    r6 = r0 + 9;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x26e44;
                    pc=0x35600;
                    run_35600(); return;
                case 0x26e44:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x26e5c;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x26e5c:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ec4;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x26eb0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26ec4:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26f28;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x26f28;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26f28:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x26f34;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x26f34:
                    /* Next insn is delay slot */ 
                    pc=0x26eb0;
                    continue;
                case 0x27000:
                    pc=0x27000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27000() throws ExecutionException { /* 0x27000 - 0x27200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27000:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + 22640;
                    r5 = r0 + 1;
                    r6 = r0 + 7;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x27044;
                    pc=0x35600;
                    run_35600(); return;
                case 0x27044:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2705c;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x2705c:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x270bc;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x270b0:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x270bc;
                    pc=0x30600;
                    run_30600(); return;
                case 0x270bc:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27114;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27114;
                        continue;
                    }
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x270b0;
                    continue;
                case 0x27114:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x27120;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x27120:
                    /* Next insn is delay slot */ 
                    pc=0x270b0;
                    continue;
                case 0x27200:
                    pc=0x27200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27200() throws ExecutionException { /* 0x27200 - 0x27400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27200:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + 22648;
                    r5 = r0 + 1;
                    r6 = r0 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x27244;
                    pc=0x35600;
                    run_35600(); return;
                case 0x27244:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2725c;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x2725c:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x272bc;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x272b0:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x272bc;
                    pc=0x30600;
                    run_30600(); return;
                case 0x272bc:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27314;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27314;
                        continue;
                    }
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x272b0;
                    continue;
                case 0x27314:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x27320;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x27320:
                    /* Next insn is delay slot */ 
                    pc=0x272b0;
                    continue;
                case 0x27400:
                    pc=0x27400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27400() throws ExecutionException { /* 0x27400 - 0x27600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27400:
                    addr=r28+-32472;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + 1;
                    addr=r28+-32472;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27600:
                    pc=0x27600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27600() throws ExecutionException { /* 0x27600 - 0x27800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27600:
                    r2 = r0 + 1;
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27800:
                    pc=0x27800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27800() throws ExecutionException { /* 0x27800 - 0x27a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27800:
                    r4 = 6 << 16;
                    r5 = readPages[(r28+-32400)>>>12][((r28+-32400)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r4 = r4 + 22668;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2781c;
                    pc=0x37000;
                    run_37000(); return;
                case 0x2781c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27828;
                    pc=0x30600;
                    run_30600(); return;
                case 0x27828:
                case 0x27a00:
                    pc=0x27a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27a00() throws ExecutionException { /* 0x27a00 - 0x27c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27a00:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32400)>>>12][((r28+-32400)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x27a24;
                    pc=0x2be00;
                    run_2be00(); return;
                case 0x27a24:
                    r5 = 6 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 23072;
                    r6 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27a40;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x27a40:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27a4c;
                    pc=0x30600;
                    run_30600(); return;
                case 0x27a4c:
                case 0x27c00:
                    pc=0x27c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27c00() throws ExecutionException { /* 0x27c00 - 0x27e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27c00:
                    r29 = r29 + -56;
                    r6 = 6 << 16;
                    r6 = r6 + 23080;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r4 = r29 + 56;
                    r5 = r29 + 60;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x27c3c;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x27c3c:
                    r3 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f04;
                        run_27e00(); return;
                    }
                    r2 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27f10;
                        run_27e00(); return;
                    }
                    r5 = 6 << 16;
                    r16 = r0 + 99;
                    r18 = r0 + 1;
                    r17 = r5 + 23332;
                case 0x27c84:
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x27ef8;
                        run_27e00(); return;
                    }
                    r6 = r2 < 100 ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ccc;
                        continue;
                    }
                    r3 = r0 + 63;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27eb4;
                        run_27e00(); return;
                    }
                    r3 = r0 + 86;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27e9c;
                        run_27e00(); return;
                    }
                    r3 = r0 + 45;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27ec0;
                        run_27e00(); return;
                    }
                case 0x27cc4:
                    /* Next insn is delay slot */ 
                    r31=0x27ccc;
                    pc=0x2a200;
                    run_2a200(); return;
                case 0x27ccc:
                    r6 = r0 + 118;
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x27ee0;
                        run_27e00(); return;
                    }
                    r3 = r0 + 120;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27ea8;
                        run_27e00(); return;
                    }
                    r4 = r29 + 24;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x27cf4;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x27cf4:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27d08;
                    pc=0x3a600;
                    run_3a600(); return;
                case 0x27d08:
                    r3 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    writePages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff] = r2;
                case 0x27d10:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d54;
                        continue;
                    }
                    r6 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r4 = r2 << 2;
                    r4 = r6 + r4;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = r0 + 45;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x27c84;
                        continue;
                    }
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r4;
                case 0x27d54:
                    r3 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f34;
                        run_27e00(); return;
                    }
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27d70;
                    pc=0x29800;
                    run_29800(); return;
                case 0x27d70:
                    /* Next insn is delay slot */ 
                    r31=0x27d78;
                    pc=0x28800;
                    run_28800(); return;
                case 0x27d78:
                    r4 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r5 = r5 + 23104;
                    /* Next insn is delay slot */ 
                    r31=0x27d8c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x27d8c:
                    r18 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f44;
                        run_27e00(); return;
                    }
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27da4;
                    pc=0x31600;
                    run_31600(); return;
                case 0x27da4:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27dc0;
                        continue;
                    }
                    r3 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27fa4;
                        run_27e00(); return;
                    }
                    writePages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff] = r2;
                case 0x27dc0:
                    r16 = r0 + 512;
                    r19 = r0 + -1;
                    r20 = r0 | 65280;
                    /* Next insn is delay slot */ 
                    pc=0x27df4;
                    continue;
                case 0x27dd4:
                    if(r16 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x27f20;
                        run_27e00(); return;
                    }
                    r4 = r16 + r0;
                    r17 = r16 + 1;
                    r5 = r2 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x27df0;
                    pc=0x28000;
                    run_28000(); return;
                case 0x27df0:
                    r16 = r17 + r0;
                case 0x27df4:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27e00;
                    pc=0x31600;
                    run_31600(); return;
                case 0x27e00:
                    pc=0x27e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27e00() throws ExecutionException { /* 0x27e00 - 0x28000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27e00:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x27dd4;
                        run_27c00(); return;
                    }
                    addr=r18+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f74;
                        continue;
                    }
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27e28;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x27e28:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r16 = r16 + -1;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = 6 << 16;
                    r7 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r6 = r6 + 23224;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x27e50;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x27e50:
                    /* Next insn is delay slot */ 
                    r31=0x27e58;
                    pc=0x26800;
                    run_26800(); return;
                case 0x27e58:
                    /* Next insn is delay slot */ 
                    r31=0x27e60;
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x27e60:
                    r2 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e58;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x27e78;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27e78:
                    r3 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e58;
                        continue;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + 23252;
                    /* Next insn is delay slot */ 
                    r31=0x27e9c;
                    pc=0x27000;
                    run_27000(); return;
                case 0x27e9c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27ea8;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x27ea8:
                    r3 = r0 + 104;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27cc4;
                        run_27c00(); return;
                    }
                case 0x27eb4:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27ec0;
                    pc=0x27800;
                    run_27800(); return;
                case 0x27ec0:
                    r4 = r29 + 24;
                    r5 = r17 + r0;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x27ed4;
                    pc=0x2ac00;
                    run_2ac00(); return;
                case 0x27ed4:
                    r3 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x27d10;
                    run_27c00(); return;
                case 0x27ee0:
                    addr=r28+-32472;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + 1;
                    addr=r28+-32472;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x27d10;
                    run_27c00(); return;
                case 0x27ef8:
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x27d10;
                    run_27c00(); return;
                case 0x27f04:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x27d54;
                    run_27c00(); return;
                case 0x27f10:
                    r2 = r0 + 1;
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x27d54;
                    run_27c00(); return;
                case 0x27f20:
                    r4 = 6 << 16;
                    r5 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r4 = r4 + 23156;
                    /* Next insn is delay slot */ 
                    r31=0x27f34;
                    pc=0x27000;
                    run_27000(); return;
                case 0x27f34:
                    r4 = 6 << 16;
                    r4 = r4 + 23088;
                    /* Next insn is delay slot */ 
                    r31=0x27f44;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x27f44:
                    r16 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27f50;
                    pc=0x30400;
                    run_30400(); return;
                case 0x27f50:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27f5c;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x27f5c:
                    r4 = 6 << 16;
                    r4 = r4 + 23108;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27f74;
                    pc=0x27000;
                    run_27000(); return;
                case 0x27f74:
                    r16 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27f80;
                    pc=0x30400;
                    run_30400(); return;
                case 0x27f80:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27f8c;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x27f8c:
                    r4 = 6 << 16;
                    r4 = r4 + 23196;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27fa4;
                    pc=0x27000;
                    run_27000(); return;
                case 0x27fa4:
                    r4 = 6 << 16;
                    r5 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r4 = r4 + 23132;
                    /* Next insn is delay slot */ 
                    r31=0x27fb8;
                    pc=0x27000;
                    run_27000(); return;
                case 0x27fb8:
                case 0x28000:
                    pc=0x28000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28000() throws ExecutionException { /* 0x28000 - 0x28200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28000:
                    r2 = 7 << 16;
                    r2 = r2 + -30348;
                    r4 = r2 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28200:
                    pc=0x28200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28200() throws ExecutionException { /* 0x28200 - 0x28400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28200:
                    r2 = 7 << 16;
                    r2 = r2 + -30348;
                    r4 = r2 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28400:
                    pc=0x28400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28400() throws ExecutionException { /* 0x28400 - 0x28600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28400:
                    r2 = 7 << 16;
                    r2 = r2 + -30348;
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 << 8;
                    r2 = r3 | r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28600:
                    pc=0x28600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28600() throws ExecutionException { /* 0x28600 - 0x28800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28600:
                    r4 = r4 & 255;
                    r2 = r4 + 1;
                    r3 = 7 << 16;
                    r3 = r3 + -30348;
                    r2 = r2 & 255;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r4 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 << 8;
                    r2 = r5 | r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28800:
                    pc=0x28800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28800() throws ExecutionException { /* 0x28800 - 0x28a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 7 << 16;
                    r4 = r16 + -30348;
                    r5 = r0 + 255;
                    r6 = 1 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r16 + -30348;
                    /* Next insn is delay slot */ 
                    r31=0x28828;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x28828:
                    r2 = 1 << 16;
                    r16 = r2 + r16;
                    r2 = r0 + 2;
                    addr=r16+-4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+-3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28a00:
                    pc=0x28a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28a00() throws ExecutionException { /* 0x28a00 - 0x28c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r17 << 8;
                    r17 = r17 + r2;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r6 = 6 << 16;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = r17 + r0;
                    r5 = r0 + 2;
                    r6 = r6 + 23380;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x28a44;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x28a44:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28a50;
                    pc=0x3a800;
                    run_3a800(); return;
                case 0x28a50:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r2 & 255;
                    r2 = r2 >>> 8;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28c00:
                    pc=0x28c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28c00() throws ExecutionException { /* 0x28c00 - 0x28e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28c00:
                    r29 = r29 + -32;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r6 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r6 = r6 + 23400;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x28c34;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x28c34:
                    r2 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28c50;
                        continue;
                    }
                case 0x28c44:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x28c50;
                    pc=0x30600;
                    run_30600(); return;
                case 0x28c50:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r17 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x28c64;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x28c64:
                    r6 = 6 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + 23416;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28c80;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x28c80:
                    /* Next insn is delay slot */ 
                    pc=0x28c44;
                    continue;
                case 0x28e00:
                    pc=0x28e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28e00() throws ExecutionException { /* 0x28e00 - 0x29000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28e00:
                    r29 = r29 + -56;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    r16 = r16 << 8;
                    r20 = r4 + r0;
                    r4 = r0 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r16 + r2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x28e40;
                    pc=0x28600;
                    run_28600(); return;
                case 0x28e40:
                    r18 = r2 + r0;
                    r18 = r18 + 2;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28e54;
                    pc=0x28400;
                    run_28400(); return;
                case 0x28e54:
                    r5 = r18 & 255;
                    r4 = r0 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28e68;
                    pc=0x28000;
                    run_28000(); return;
                case 0x28e68:
                    r5 = r18 >>> 8;
                    r5 = r5 & 255;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x28e7c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x28e7c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28e88;
                    pc=0x28600;
                    run_28600(); return;
                case 0x28e88:
                    r19 = r2 + r0;
                    r19 = r19 + 2;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28e9c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x28e9c:
                    r5 = r19 & 255;
                    r4 = r0 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28eb0;
                    pc=0x28000;
                    run_28000(); return;
                case 0x28eb0:
                    r5 = r19 >>> 8;
                    r4 = r0 + 1;
                    r5 = r5 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x28ec4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x28ec4:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    r6 = r6 + 23428;
                    r7 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x28eec;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x28eec:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28ef8;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x28ef8:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28f10;
                    pc=0x3ac00;
                    run_3ac00(); return;
                case 0x28f10:
                    r19 = r2 + r0;
                    r2 = r0 + -1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28f5c;
                        continue;
                    }
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f5c;
                        continue;
                    }
                    r18 = r19 + r17;
                    r4 = r17 + r0;
                    r17 = r21 - r17;
                    /* Next insn is delay slot */ 
                    pc=0x28f40;
                    continue;
                case 0x28f3c:
                    r4 = r16 + r0;
                case 0x28f40:
                    r16 = r4 + 1;
                    r3 = r17 + r16;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x28f54;
                    pc=0x28000;
                    run_28000(); return;
                case 0x28f54:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x28f3c;
                        continue;
                    }
                case 0x28f5c:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28f68;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x28f68:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r19 & 255;
                    r19 = r19 >>> 8;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r19;
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29000:
                    pc=0x29000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29000() throws ExecutionException { /* 0x29000 - 0x29200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29000:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    r19 = r19 << 8;
                    r20 = r4 + r0;
                    r4 = r0 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r19 = r19 + r2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x29044;
                    pc=0x28600;
                    run_28600(); return;
                case 0x29044:
                    r17 = r2 + r0;
                    r17 = r17 + 2;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29058;
                    pc=0x28400;
                    run_28400(); return;
                case 0x29058:
                    r5 = r17 & 255;
                    r4 = r0 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2906c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x2906c:
                    r5 = r17 >>> 8;
                    r5 = r5 & 255;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x29080;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29080:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2908c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x2908c:
                    r17 = r2 + r0;
                    r4 = r2 + r0;
                    r17 = r17 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x290a0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x290a0:
                    r4 = r0 + r0;
                    r5 = r17 & 255;
                    r22 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x290b4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x290b4:
                    r5 = r17 >>> 8;
                    r4 = r0 + 1;
                    r5 = r5 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x290c8;
                    pc=0x28000;
                    run_28000(); return;
                case 0x290c8:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    r6 = r6 + 23460;
                    r7 = r22 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x290f0;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x290f0:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x290fc;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x290fc:
                    r21 = r2 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2913c;
                        continue;
                    }
                    r18 = r16 + r19;
                    r4 = r16 + r0;
                    r17 = r2 - r16;
                    /* Next insn is delay slot */ 
                    pc=0x29120;
                    continue;
                case 0x2911c:
                    r4 = r16 + r0;
                case 0x29120:
                    r16 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x2912c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2912c:
                    r3 = r17 + r16;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2911c;
                        continue;
                    }
                case 0x2913c:
                    r4 = r22 + r0;
                    r5 = r21 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29150;
                    pc=0x3ae00;
                    run_3ae00(); return;
                case 0x29150:
                    r4 = r21 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29160;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x29160:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r16 & 255;
                    r16 = r16 >>> 8;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r16;
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29200:
                    pc=0x29200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29200() throws ExecutionException { /* 0x29200 - 0x29400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29200:
                    r29 = r29 + -48;
                    r2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    r21 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r21 = r21 - r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r20 = r4 + r0;
                    r19 = r19 << 8;
                    r4 = r0 + r0;
                    r18 = r21 + 1;
                    r19 = r19 + r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r18 << 1;
                    /* Next insn is delay slot */ 
                    r31=0x29254;
                    pc=0x28600;
                    run_28600(); return;
                case 0x29254:
                    r18 = r2 - r18;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = r19 + r0;
                    r6 = r6 + 23492;
                    r5 = r0 + 2;
                    r17 = r18 & 255;
                    r16 = r18 >>> 8;
                    /* Next insn is delay slot */ 
                    r31=0x29280;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x29280:
                    r16 = r16 & 255;
                    r4 = r19 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29294;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29294:
                    r4 = r19 + 1;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x292a4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x292a4:
                    r2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    r19 = r18 + r0;
                    r3 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29358;
                        continue;
                    }
                case 0x292bc:
                    r3 = r2 + 1;
                    writePages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x292e4;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x292e4:
                    r2 = ~(r0 | r2);
                    r18 = r18 + r2;
                    r17 = r18 - r16;
                case 0x292f0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r16;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x29304;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29304:
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x292f0;
                        continue;
                    }
                    r17 = r18 & 255;
                    r16 = r18 >>> 8;
                    r4 = r19 + r0;
                    r5 = r17 + r0;
                    r16 = r16 & 255;
                    /* Next insn is delay slot */ 
                    r31=0x29330;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29330:
                    r4 = r19 + 1;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29340;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29340:
                    r2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    r19 = r19 + 2;
                    r3 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x292bc;
                        continue;
                    }
                case 0x29358:
                    r4 = r19 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29368;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29368:
                    r4 = r19 + 1;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29378;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29378:
                    r5 = r17 + r0;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29388;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29388:
                    r5 = r16 + r0;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x29398;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29398:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r21 & 255;
                    r21 = r21 >>> 8;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r21;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29400:
                    pc=0x29400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29400() throws ExecutionException { /* 0x29400 - 0x29600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29400:
                    r29 = r29 + -1072;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r0 + r0;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r31;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    r17 = r17 + -4;
                    /* Next insn is delay slot */ 
                    r31=0x29434;
                    pc=0x28600;
                    run_28600(); return;
                case 0x29434:
                    r17 = r17 & 255;
                    r16 = r2 + r0;
                    r16 = r16 + r17;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2944c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x2944c:
                    r5 = r16 & 255;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2945c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x2945c:
                    r5 = r16 >>> 8;
                    r5 = r5 & 255;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x29470;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29470:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2947c;
                    pc=0x28600;
                    run_28600(); return;
                case 0x2947c:
                    r16 = r2 + r0;
                    r16 = r16 + 2;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29490;
                    pc=0x28400;
                    run_28400(); return;
                case 0x29490:
                    r5 = r16 & 255;
                    r4 = r0 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x294a4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x294a4:
                    r5 = r16 >>> 8;
                    r5 = r5 & 255;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x294b8;
                    pc=0x28000;
                    run_28000(); return;
                case 0x294b8:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x294c4;
                    pc=0x28600;
                    run_28600(); return;
                case 0x294c4:
                    r16 = r2 + r0;
                    r4 = r2 + r0;
                    r16 = r16 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x294d8;
                    pc=0x28400;
                    run_28400(); return;
                case 0x294d8:
                    r4 = r0 + r0;
                    r5 = r16 & 255;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x294ec;
                    pc=0x28000;
                    run_28000(); return;
                case 0x294ec:
                    r5 = r16 >>> 8;
                    r4 = r0 + 1;
                    r5 = r5 & 255;
                    r20 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x29504;
                    pc=0x28000;
                    run_28000(); return;
                case 0x29504:
                    r4 = r17 + r0;
                    r17 = r20 - r17;
                    /* Next insn is delay slot */ 
                    pc=0x29518;
                    continue;
                case 0x29514:
                    r4 = r16 + r0;
                case 0x29518:
                    r16 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x29524;
                    pc=0x28200;
                    run_28200(); return;
                case 0x29524:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    r3 = r17 + r16;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29514;
                        continue;
                    }
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    r6 = r6 + 23508;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29560;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x29560:
                    r2 = r18 & 3;
                    r3 = r0 + 2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x296b0;
                        run_29600(); return;
                    }
                    r3 = r0 + 3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x29668;
                        run_29600(); return;
                    }
                    r24 = r0 + 2048;
                    r17 = r0 + 2056;
                    r16 = r0 + 8;
                    r15 = r0 + 3072;
                    r14 = r0 + 3080;
                    r13 = r0 + 1032;
                    r12 = r0 + 1024;
                    r10 = r0 + 2560;
                    r9 = r0 + 2568;
                    r8 = r0 + 520;
                    r3 = r0 + 3584;
                    r2 = r0 + 3592;
                    r5 = r0 + 1544;
                    r4 = r0 + 1536;
                    r7 = r0 + 512;
                    r11 = r0 + r0;
                case 0x295bc:
                    r6 = r18 & 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x295e8;
                        continue;
                    }
                    r10 = r24 + r0;
                    r9 = r17 + r0;
                    r8 = r16 + r0;
                    r3 = r15 + r0;
                    r2 = r14 + r0;
                    r5 = r13 + r0;
                    r4 = r12 + r0;
                    r7 = r11 + r0;
                case 0x295e8:
                    r6 = r18 & 32;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29604;
                        run_29600(); return;
                    }
                    r3 = r10 + r0;
                    r2 = r9 + r0;
                    r5 = r8 + r0;
                case 0x29600:
                    pc=0x29600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29600() throws ExecutionException { /* 0x29600 - 0x29800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29600:
                    r4 = r7 + r0;
                case 0x29604:
                    r6 = r18 & 64;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29618;
                        continue;
                    }
                    r2 = r3 + r0;
                    r5 = r4 + r0;
                case 0x29618:
                    r18 = r18 & 128;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29628;
                        continue;
                    }
                    r5 = r2 + r0;
                case 0x29628:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29634;
                    pc=0x3aa00;
                    run_3aa00(); return;
                case 0x29634:
                    r31 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r3 = r2 & 255;
                    r2 = r2 >>> 8;
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r3;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r29 = r29 + 1072;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29668:
                    r24 = r0 + 2050;
                    r17 = r0 + 2058;
                    r16 = r0 + 10;
                    r15 = r0 + 3074;
                    r14 = r0 + 3082;
                    r13 = r0 + 1034;
                    r12 = r0 + 1026;
                    r10 = r0 + 2562;
                    r9 = r0 + 2570;
                    r8 = r0 + 522;
                    r3 = r0 + 3586;
                    r2 = r0 + 3594;
                    r5 = r0 + 1546;
                    r4 = r0 + 1538;
                    r7 = r0 + 514;
                    r11 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x295bc;
                    run_29400(); return;
                case 0x296b0:
                    r24 = r0 + 2049;
                    r17 = r0 + 2057;
                    r16 = r0 + 9;
                    r15 = r0 + 3073;
                    r14 = r0 + 3081;
                    r13 = r0 + 1033;
                    r12 = r0 + 1025;
                    r10 = r0 + 2561;
                    r9 = r0 + 2569;
                    r8 = r0 + 521;
                    r3 = r0 + 3585;
                    r2 = r0 + 3593;
                    r5 = r0 + 1545;
                    r4 = r0 + 1537;
                    r7 = r0 + 513;
                    r11 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x295bc;
                    run_29400(); return;
                case 0x29800:
                    pc=0x29800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29800() throws ExecutionException { /* 0x29800 - 0x29a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29800:
                    writePages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29a00:
                    pc=0x29a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29a00() throws ExecutionException { /* 0x29a00 - 0x29c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29a00:
                    r3 = readPages[(r4+24)>>>12][((r4+24)>>>2)&0x3ff];
                    r2 = 65535 << 16;
                    r2 = r2 + 16;
                    r2 = r3 + r2;
                    r29 = r29 + -32;
                    r3 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29a98;
                        continue;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 23532;
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x29a50;
                    return;
                case 0x29a50:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r4 = r4 + 257;
                    /* Next insn is delay slot */ 
                    r31=0x29a6c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x29a6c:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    r2 = r4 + 1;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r4 = r4 + 257;
                    /* Next insn is delay slot */ 
                    r31=0x29a88;
                    pc=0x28200;
                    run_28200(); return;
                case 0x29a88:
                    r2 = r2 << 8;
                    r17 = r17 + r2;
                    r17 = r17 + 1;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r17;
                case 0x29a98:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29c00:
                    pc=0x29c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29c00() throws ExecutionException { /* 0x29c00 - 0x29e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29c00:
                    r29 = r29 + -32;
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32400)>>>12][((r28+-32400)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 23556;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x29c38;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x29c38:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r29 + 36;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x29c54;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x29c54:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x29c68;
                    pc=0x34000;
                    run_34000(); return;
                case 0x29c68:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x29c74;
                    pc=0x30600;
                    run_30600(); return;
                case 0x29c74:
                case 0x29e00:
                    pc=0x29e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29e00() throws ExecutionException { /* 0x29e00 - 0x2a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29e00:
                    r29 = r29 + -296;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r18;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = 6 << 16;
                    r5 = r5 + 25752;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r19;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x29e38;
                    pc=0x33800;
                    run_33800(); return;
                case 0x29e38:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29fd0;
                        continue;
                    }
                case 0x29e44:
                    r4 = r29 + 16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29e58;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x29e58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29f44;
                        continue;
                    }
                case 0x29e60:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x29e6c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x29e6c:
                    r17 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29e8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x29f74;
                    continue;
                case 0x29e80:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29f74;
                        continue;
                    }
                    r17 = r16 + r0;
                case 0x29e8c:
                    r16 = r17 + -1;
                    r2 = r29 + 16;
                    r3 = r2 + r16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x29ea4;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x29ea4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29e80;
                        continue;
                    }
                case 0x29eac:
                    r2 = r29 + 16;
                    r17 = r2 + r17;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29ec8;
                    continue;
                case 0x29ec4:
                    r16 = r16 + 1;
                case 0x29ec8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x29ed4;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x29ed4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ec4;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29e44;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29ef8;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x29ef8:
                    r4 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = r2 + r0;
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29f80;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x29f14:
                    r5 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r5;
                    r4 = r29 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29f3c;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x29f3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29e60;
                        continue;
                    }
                case 0x29f44:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29f50;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x29f50:
                    r31 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r20 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r19 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r18 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r17 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r16 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r29 = r29 + 296;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29f74:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29eac;
                    continue;
                case 0x29f80:
                    r20 = r4 << 1;
                    r4 = r4 << 3;
                    /* Next insn is delay slot */ 
                    r31=0x29f90;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x29f90:
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29fac;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x29fac:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x29fb8;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x29fb8:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r17;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29f14;
                    continue;
                case 0x29fd0:
                    /* Next insn is delay slot */ 
                    r31=0x29fd8;
                    pc=0x30400;
                    run_30400(); return;
                case 0x29fd8:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x29fe4;
                    pc=0x3a000;
                    run_3a000(); return;
                case 0x29fe4:
                    r4 = 6 << 16;
                    r4 = r4 + 23564;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x29ffc;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x29ffc:
                case 0x2a000:
                    pc=0x2a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a000() throws ExecutionException { /* 0x2a000 - 0x2a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a000:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    r20 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a154;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2a048;
                    pc=0x2b400;
                    run_2b400(); return;
                case 0x2a048:
                    writePages[(r28+-32400)>>>12][((r28+-32400)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a154;
                        continue;
                    }
                case 0x2a05c:
                    r2 = r0 + 8;
                    r4 = r0 + 32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a074;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2a074:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a188;
                        continue;
                    }
                    r16 = r0 + r0;
                    r21 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x2a0bc;
                    continue;
                case 0x2a094:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2a098:
                    r4 = r3 + 1;
                    r16 = r16 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    r2 = r6 < r16 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a184;
                        continue;
                    }
                case 0x2a0bc:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0e8;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x2a160;
                        continue;
                    }
                case 0x2a0e8:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a094;
                        continue;
                    }
                    r4 = r2 << 3;
                    r22 = r2 << 1;
                    /* Next insn is delay slot */ 
                    r31=0x2a110;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2a110:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a12c;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x2a12c:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2a138;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x2a138:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a098;
                    continue;
                case 0x2a154:
                    writePages[(r28+-32400)>>>12][((r28+-32400)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2a05c;
                    continue;
                case 0x2a160:
                    r4 = r29 + 16;
                    r5 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x2a170;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x2a170:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = r6 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0bc;
                        continue;
                    }
                case 0x2a184:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2a188:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff] = r2;
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r3;
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a200:
                    pc=0x2a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a200() throws ExecutionException { /* 0x2a200 - 0x2a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a200:
                    r5 = r4 + r0;
                    r4 = 6 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 23588;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2a21c;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2a21c:
                case 0x2a400:
                    pc=0x2a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a400() throws ExecutionException { /* 0x2a400 - 0x2a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a400:
                    r5 = r4 + r0;
                    r4 = 6 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 23608;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2a41c;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2a41c:
                case 0x2a600:
                    pc=0x2a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a600() throws ExecutionException { /* 0x2a600 - 0x2a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a600:
                    r2 = r4 + r0;
                    r4 = 6 << 16;
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r4 = r4 + 23640;
                    r5 = r2 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2a624;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2a624:
                case 0x2a800:
                    pc=0x2a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a800() throws ExecutionException { /* 0x2a800 - 0x2aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a800:
                    r5 = r4 + r0;
                    r4 = 6 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 23672;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2a81c;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2a81c:
                case 0x2aa00:
                    pc=0x2aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2aa00() throws ExecutionException { /* 0x2aa00 - 0x2ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2aa00:
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r3 = r3 + r2;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r7 + r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aa44;
                        continue;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r6 = r6 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aa54;
                        continue;
                    }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r6;
                case 0x2aa44:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aa54:
                    r4 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2aa60;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2aa60:
                case 0x2ac00:
                    pc=0x2ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ac00() throws ExecutionException { /* 0x2ac00 - 0x2ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ac00:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    r21 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r2 = r21 << 2;
                    r19 = r19 + r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r20 = r4 + r0;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    r18 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ace0;
                    continue;
                case 0x2ac50:
                    r17 = r17 + -1;
                    r16 = r16 + 12;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ace0;
                        continue;
                    }
                case 0x2ac60:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ac70;
                    pc=0x39600;
                    run_39600(); return;
                case 0x2ac70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac50;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2accc;
                        continue;
                    }
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r21;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2acec;
                        continue;
                    }
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                case 0x2aca4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x2accc:
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2aca4;
                    continue;
                case 0x2ace0:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2acec;
                    pc=0x2a200;
                    run_2a200(); return;
                case 0x2acec:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2acf8;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2acf8:
                case 0x2ae00:
                    pc=0x2ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ae00() throws ExecutionException { /* 0x2ae00 - 0x2b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ae00:
                    r4 = r4 & 255;
                    r29 = r29 + -24;
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aeb4;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 23820;
                    r4 = r4 << 2;
                    r4 = r2 + r4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x2ae38:
                    r2 = r0 + r0;
                case 0x2ae3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ae4c:
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 ^ 5;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ae68:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ae7c:
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ae38;
                        continue;
                    }
                    r2 = r2 ^ 6;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x2ae3c;
                    continue;
                case 0x2ae9c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aeb4:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 23700;
                    r6 = r6 + 23724;
                    r7 = r0 + 114;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2aed8;
                    return;
                case 0x2aed8:
                case 0x2b000:
                    pc=0x2b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b000() throws ExecutionException { /* 0x2b000 - 0x2b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b000:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    r16 = r16 + 32448;
                    r17 = r0 + r0;
                    r19 = r0 + 10;
                case 0x2b02c:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b03c;
                    pc=0x2bc00;
                    run_2bc00(); return;
                case 0x2b03c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b078;
                        continue;
                    }
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r17 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x2b02c;
                        continue;
                    }
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b078:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b200:
                    pc=0x2b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b200() throws ExecutionException { /* 0x2b200 - 0x2b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b218;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2b218:
                    r3 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2c8;
                        continue;
                    }
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2a4;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 46;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2b4;
                        continue;
                    }
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2c8;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2c8;
                        continue;
                    }
                    r4 = r0 + 46;
                    r5 = r0 + 92;
                    r6 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x2b294;
                    continue;
                case 0x2b274:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2b4;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2c8;
                        continue;
                    }
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2c8;
                        continue;
                    }
                case 0x2b294:
                    r2 = r2 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b274;
                        continue;
                    }
                case 0x2b2a4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 46;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2c8;
                        continue;
                    }
                case 0x2b2b4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b2c8:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b400:
                    pc=0x2b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b400() throws ExecutionException { /* 0x2b400 - 0x2b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b418;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2b418:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b47c;
                        continue;
                    }
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2b47c;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2b47c;
                        continue;
                    }
                    r4 = r0 + 92;
                    r5 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x2b46c;
                    continue;
                case 0x2b450:
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2b47c;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2b47c;
                        continue;
                    }
                case 0x2b46c:
                    r2 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b450;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x2b47c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b600:
                    pc=0x2b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b600() throws ExecutionException { /* 0x2b600 - 0x2b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b600:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b628;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2b628:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b734;
                        continue;
                    }
                    r6 = r17 + -1;
                    r6 = r16 + r6;
                    r2 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6b8;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6c8;
                        continue;
                    }
                    r2 = r0 + 92;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b734;
                        continue;
                    }
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b734;
                        continue;
                    }
                    r7 = r0 + 46;
                    r8 = r0 + 92;
                    r9 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x2b6a8;
                    continue;
                case 0x2b688:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6c8;
                        continue;
                    }
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x2b734;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x2b734;
                        continue;
                    }
                case 0x2b6a8:
                    r6 = r6 + -1;
                    r3 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b688;
                        continue;
                    }
                case 0x2b6b8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b734;
                        continue;
                    }
                case 0x2b6c8:
                    r4 = r18 + r0;
                    r19 = r6 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x2b6d8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2b6d8:
                    r2 = r2 + 1;
                    r4 = r2 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x2b6e8;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2b6e8:
                    r17 = r2 + r0;
                    r5 = r16 + r0;
                    r6 = r19 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b700;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x2b700:
                    r4 = r17 + r19;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b710;
                    pc=0x39800;
                    run_39800(); return;
                case 0x2b710:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b734:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b740;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2b740:
                    r4 = r17 + 1;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x2b750;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2b750:
                    r4 = r2 + r0;
                    r5 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b764;
                    pc=0x39400;
                    run_39400(); return;
                case 0x2b764:
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b774;
                    pc=0x39800;
                    run_39800(); return;
                case 0x2b774:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b800:
                    pc=0x2b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b800() throws ExecutionException { /* 0x2b800 - 0x2ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b800:
                    addr=r28+-32472;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r29 = r29 + -32;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b82c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b82c:
                    r2 = r29 + 44;
                    r5 = r6 + r0;
                    r6 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2b844;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x2b844:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ba00:
                    pc=0x2ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ba00() throws ExecutionException { /* 0x2ba00 - 0x2bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ba00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ba2c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2ba2c:
                    r3 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba6c;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x2ba4c;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x2ba4c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ba6c:
                    r18 = r18 + -1;
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    r18 = r16 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x2ba88;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x2ba88:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2bc00:
                    pc=0x2bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2bc00() throws ExecutionException { /* 0x2bc00 - 0x2be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2bc00:
                    r8 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x2bc4c;
                    continue;
                case 0x2bc10:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r2 = r3 + r0;
                    r9 = r8 + r6;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 3;
                    if(r9 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc8c;
                        continue;
                    }
                case 0x2bc30:
                    r2 = r2 - r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc9c;
                        continue;
                    }
                case 0x2bc3c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc9c;
                        continue;
                    }
                    r4 = r4 + 1;
                    r5 = r5 + 1;
                case 0x2bc4c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r8 + r3;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 3;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc10;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r2 = r3 + -32;
                    r9 = r8 + r6;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 3;
                    if(r9 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc30;
                        continue;
                    }
                case 0x2bc8c:
                    r6 = r6 + -32;
                    r2 = r2 - r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc3c;
                        continue;
                    }
                case 0x2bc9c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2be00:
                    pc=0x2be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2be00() throws ExecutionException { /* 0x2be00 - 0x2c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2be00:
                    r29 = r29 + -32;
                    r2 = r0 + 15;
                    r6 = 6 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = 8 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r16 + -30348;
                    r5 = r0 + 60;
                    r6 = r6 + 23880;
                    r7 = r0 + 2;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2be34;
                    pc=0x2e200;
                    run_2e200(); return;
                case 0x2be34:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + -30348;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c000:
                    pc=0x2c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c000() throws ExecutionException { /* 0x2c000 - 0x2c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c000:
                    r2 = r0 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c200:
                    pc=0x2c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c200() throws ExecutionException { /* 0x2c200 - 0x2c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c23c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2c220;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x2c220:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c254;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c23c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c254:
                    r4 = 6 << 16;
                    r4 = r4 + 23888;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c268;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2c268:
                case 0x2c400:
                    pc=0x2c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c400() throws ExecutionException { /* 0x2c400 - 0x2c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c418;
                    pc=0x37600;
                    run_37600(); return;
                case 0x2c418:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c434;
                        continue;
                    }
                case 0x2c420:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c434:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c420;
                        continue;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + 23932;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c450;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2c450:
                case 0x2c600:
                    pc=0x2c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c600() throws ExecutionException { /* 0x2c600 - 0x2c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c600:
                    /* Next insn is delay slot */ 
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x2c800:
                    pc=0x2c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c800() throws ExecutionException { /* 0x2c800 - 0x2ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c88c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2c824;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2c824:
                    r16 = r2 + 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c868;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c83c;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x2c83c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8a8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x2c868:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x2c88c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c8a8:
                    r4 = 6 << 16;
                    r4 = r4 + 23888;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c8bc;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2c8bc:
                case 0x2ca00:
                    pc=0x2ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ca00() throws ExecutionException { /* 0x2ca00 - 0x2cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ca00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca58;
                        continue;
                    }
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ca2c;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x2ca2c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca7c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x2ca58:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x2ca7c:
                    r4 = 6 << 16;
                    r4 = r4 + 23888;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ca90;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2ca90:
                case 0x2cc00:
                    pc=0x2cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2cc00() throws ExecutionException { /* 0x2cc00 - 0x2ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2cc00:
                    r29 = r29 + -64;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r2 = r4 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r23;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    r18 = r7 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cf84;
                        run_2ce00(); return;
                    }
                    r23 = 6 << 16;
                    r23 = r23 + 23988;
                case 0x2cc4c:
                    r2 = r4 & 128;
                    writePages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff] = r23;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc88;
                        continue;
                    }
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc88;
                        continue;
                    }
                    r18 = r0 - r18;
                    r2 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r17 = r0 - r17;
                    r17 = r17 - r2;
                    r2 = r0 + 45;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2ccac;
                    continue;
                case 0x2cc88:
                    r2 = r4 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cf94;
                        run_2ce00(); return;
                    }
                    r2 = r4 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d0ac;
                        run_2d000(); return;
                    }
                    r2 = r0 + 32;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                case 0x2ccac:
                    r2 = r17 | r18;
                    r22 = r16 + 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d11c;
                        run_2d000(); return;
                    }
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ccd0;
                    continue;
                case 0x2cccc:
                    r23 = readPages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff];
                case 0x2ccd0:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r7 = r20 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2cce8;
                    pc=0x1083c;
                    run_10800(); return;
                case 0x2cce8:
                    r23 = r23 + r3;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r19 = r19 + 1;
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2cd14;
                    pc=0x10208;
                    run_10200(); return;
                case 0x2cd14:
                    r17 = r2 + r0;
                    r2 = r3 | r2;
                    r18 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cccc;
                        continue;
                    }
                    r4 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r19 = r19 - r22;
                case 0x2cd30:
                    r2 = r4 & 64;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d090;
                        run_2d000(); return;
                    }
                    r3 = readPages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff];
                case 0x2cd44:
                    r2 = r4 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd6c;
                        continue;
                    }
                    r2 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r5 = r0 + 16;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d0b8;
                        run_2d000(); return;
                    }
                    r5 = r0 + 8;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d0f4;
                        run_2d000(); return;
                    }
                case 0x2cd6c:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d084;
                        run_2d000(); return;
                    }
                    r3 = r0 + r0;
                case 0x2cd7c:
                    r2 = r4 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cff8;
                        run_2ce00(); return;
                    }
                    r7 = r3 + r21;
                    r19 = r7 + r19;
                    r7 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r2 = r19 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cff8;
                        run_2ce00(); return;
                    }
                    r4 = r4 & 17;
                    r7 = r7 - r19;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cfa8;
                        run_2ce00(); return;
                    }
                case 0x2cdb4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce70;
                        run_2ce00(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cdf0;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2cdf0:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce70;
                        run_2ce00(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x2ce00:
                    pc=0x2ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ce00() throws ExecutionException { /* 0x2ce00 - 0x2d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ce00:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce30;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2ce30:
                    r21 = (r21&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce70;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+18;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce70;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2ce70:
                    r2 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r2 = r2 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ced8;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ced4;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 48;
                case 0x2ce98:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cec8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2cec8:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce98;
                        continue;
                    }
                case 0x2ced4:
                    r7 = r0 + r0;
                case 0x2ced8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cf28;
                        continue;
                    }
                    r3 = r3 + -1;
                    r8 = r0 + 48;
                    r6 = r0 + -1;
                case 0x2ceec:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cf1c;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2cf1c:
                    r3 = r3 + -1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2ceec;
                        continue;
                    }
                case 0x2cf28:
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                case 0x2cf30:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d004;
                        run_2d000(); return;
                    }
                    r2 = r2 + -1;
                    r3 = r16 + r2;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r2;
                    addr=r3+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cf30;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2cf30;
                    continue;
                case 0x2cf84:
                    r23 = 6 << 16;
                    r23 = r23 + 24008;
                    /* Next insn is delay slot */ 
                    pc=0x2cc4c;
                    run_2cc00(); return;
                case 0x2cf94:
                    r2 = r0 + 43;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2ccac;
                    run_2cc00(); return;
                case 0x2cfa8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cff8;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 32;
                case 0x2cfbc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cfec;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2cfec:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2cfbc;
                        continue;
                    }
                case 0x2cff8:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cdb4;
                    run_2cc00(); return;
                case 0x2d000:
                    pc=0x2d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d000() throws ExecutionException { /* 0x2d000 - 0x2d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d000:
                case 0x2d004:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d054;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x2d018:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d048;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2d048:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d018;
                        continue;
                    }
                case 0x2d054:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r23 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d084:
                    r3 = r3 - r19;
                    /* Next insn is delay slot */ 
                    pc=0x2cd7c;
                    run_2cc00(); return;
                case 0x2d090:
                    r4 = r4 | 64;
                    r2 = r0 + 1;
                    writePages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff] = r4;
                    writePages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff] = r2;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2cd44;
                    run_2cc00(); return;
                case 0x2d0ac:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ccac;
                    run_2cc00(); return;
                case 0x2d0b8:
                    r6 = r29 + 16;
                    r5 = r6 + r21;
                    r6 = r0 + 48;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r4 & 256;
                    r2 = r21 + 1;
                    r21 = r21 + 2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d128;
                        continue;
                    }
                    r5 = r0 + 88;
                case 0x2d0e0:
                    r6 = r29 + 16;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2cd6c;
                    run_2cc00(); return;
                case 0x2d0f4:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d084;
                        continue;
                    }
                    r2 = r29 + r21;
                    r3 = r0 + 48;
                    addr=r2+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r21 + 1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd7c;
                    run_2cc00(); return;
                case 0x2d11c:
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cd30;
                    run_2cc00(); return;
                case 0x2d128:
                    r5 = r0 + 120;
                    /* Next insn is delay slot */ 
                    pc=0x2d0e0;
                    continue;
                case 0x2d200:
                    pc=0x2d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d200() throws ExecutionException { /* 0x2d200 - 0x2d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d200:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r2 = r19 & 64;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d394;
                        continue;
                    }
                    r18 = readPages[(r4+292)>>>12][((r4+292)>>>2)&0x3ff];
                    r4 = r5 + r0;
                    r6 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d248;
                    pc=0x36800;
                    run_36800(); return;
                case 0x2d248:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d254;
                        continue;
                    }
                    r18 = r2 - r17;
                case 0x2d254:
                    r2 = r19 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2d4;
                        continue;
                    }
                    r2 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r3 = r18 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2d4;
                        continue;
                    }
                    r19 = r19 & 1;
                    r2 = r2 - r18;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2d8;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2d4;
                        continue;
                    }
                    r3 = r2 + -1;
                    r6 = r0 + 32;
                    r2 = r0 + -1;
                case 0x2d298:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2c8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2d2c8:
                    r3 = r3 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d298;
                        continue;
                    }
                case 0x2d2d4:
                    r2 = r0 + r0;
                case 0x2d2d8:
                    r6 = r17 + r18;
                case 0x2d2dc:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2d324;
                        continue;
                    }
                case 0x2d2e4:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2dc;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r17 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2e4;
                        continue;
                    }
                case 0x2d324:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d374;
                        continue;
                    }
                    r2 = r2 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x2d338:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d368;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2d368:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d338;
                        continue;
                    }
                case 0x2d374:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d394:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d3a0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x2d3a0:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d254;
                    continue;
                case 0x2d400:
                    pc=0x2d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d400() throws ExecutionException { /* 0x2d400 - 0x2d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d400:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d4d8;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 24272;
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x2d42c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d44c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d46c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r3 = r3 & r2;
                    r2 = r3 + 8;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d494:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 >> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d4b8:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d4d8:
                    r29 = r29 + -24;
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 24028;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 24060;
                    r7 = r0 + 179;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2d504;
                    return;
                case 0x2d504:
                case 0x2d600:
                    pc=0x2d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d600() throws ExecutionException { /* 0x2d600 - 0x2d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d600:
                    r29 = r29 + -360;
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r22;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r21;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r20;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r19;
                    writePages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff] = r18;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r17;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r31;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r23;
                    writePages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff] = r16;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r22 = 6 << 16;
                    r18 = 6 << 16;
                    r19 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    r20 = r0 + r0;
                    r22 = r22 + 24300;
                    r18 = r18 + 24556;
                    r21 = 6 << 16;
                    r19 = r19 + 24368;
                    r17 = r6 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6b8;
                        continue;
                    }
                case 0x2d668:
                    r2 = r0 + 37;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d718;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6a4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2d6a4:
                    r6 = r17 + r0;
                case 0x2d6a8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r17 = r6 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d668;
                        continue;
                    }
                case 0x2d6b8:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6e4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x2d6e4:
                    r31 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    r23 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r22 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r21 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    r20 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r19 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r18 = readPages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff];
                    r17 = readPages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff];
                    r16 = readPages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r29 = r29 + 360;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d718:
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2dac4;
                        run_2da00(); return;
                    }
                    r2 = r6 + 3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r17 = r2 + -1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d784;
                        continue;
                    }
                case 0x2d740:
                    r3 = r16 + -32;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (17&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d8e4;
                        run_2d800(); return;
                    }
                    r3 = r3 << 2;
                    r3 = r22 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x2d76c:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 16;
                    r2 = r2 + 1;
                case 0x2d778:
                    r17 = r2 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d740;
                        continue;
                    }
                case 0x2d784:
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r0 + r0;
                case 0x2d78c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d798;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2d798:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db00;
                        run_2da00(); return;
                    }
                    r3 = r0 + 46;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d938;
                        run_2d800(); return;
                    }
                case 0x2d7b0:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r2 | 64;
                    r4 = r0 + 42;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r3;
                    if(r16 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd18;
                        run_2dc00(); return;
                    }
                    r4 = r16 + r0;
                    r23 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x2d7d8;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2d7d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dcd4;
                        run_2dc00(); return;
                    }
                    r16 = r16 + -48;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2d80c;
                    run_2d800(); return;
                case 0x2d7f0:
                    r2 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                case 0x2d800:
                    pc=0x2d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d800() throws ExecutionException { /* 0x2d800 - 0x2da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d800:
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                case 0x2d80c:
                    r23 = r23 + 1;
                    addr=r23+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d824;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2d824:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7f0;
                        run_2d600(); return;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                case 0x2d834:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d954;
                        continue;
                    }
                case 0x2d850:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    r5 = r0 + 2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d990;
                        continue;
                    }
                case 0x2d864:
                    r3 = r0 + -5;
                    r2 = r2 & r3;
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9a0;
                        continue;
                    }
                case 0x2d880:
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2d9a0;
                    continue;
                case 0x2d894:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 1;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2d778;
                    run_2d600(); return;
                case 0x2d8a8:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 2;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2d778;
                    run_2d600(); return;
                case 0x2d8bc:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 8;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2d778;
                    run_2d600(); return;
                case 0x2d8d0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 4;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2d778;
                    run_2d600(); return;
                case 0x2d8e4:
                    r2 = r0 + 42;
                    r3 = r17 + r0;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r16 + r0;
                    if(r16 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d78c;
                        run_2d600(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd4c;
                        run_2dc00(); return;
                    }
                case 0x2d91c:
                    r2 = r5 | 32;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 1;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x2d92c:
                    r3 = r0 + 46;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7b0;
                        run_2d600(); return;
                    }
                case 0x2d938:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d850;
                        continue;
                    }
                case 0x2d954:
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x2d96c:
                    r3 = r0 + 5;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 5;
                case 0x2d980:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d864;
                        continue;
                    }
                case 0x2d990:
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d880;
                        continue;
                    }
                case 0x2d9a0:
                    r3 = r2 & 64;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9b8;
                        continue;
                    }
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x2d9b8:
                    r16 = r16 + -88;
                    r16 = r16 & 255;
                    r3 = (r16&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dcf4;
                        run_2dc00(); return;
                    }
                    r16 = r16 << 2;
                    r16 = r18 + r16;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x2d9e4:
                    r3 = r0 + 6;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x2d980;
                    continue;
                case 0x2da00:
                    pc=0x2da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2da00() throws ExecutionException { /* 0x2da00 - 0x2dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2da00:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 108;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2ddb8;
                        run_2dc00(); return;
                    }
                    r3 = r0 + 3;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x2d980;
                    run_2d800(); return;
                case 0x2da28:
                    r3 = r0 + 4;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x2d980;
                    run_2d800(); return;
                case 0x2da44:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 104;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2ddd4;
                        run_2dc00(); return;
                    }
                    r3 = r0 + 1;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2d980;
                    run_2d800(); return;
                case 0x2da6c:
                    r3 = r0 + 7;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x2d980;
                    run_2d800(); return;
                case 0x2da88:
                    r2 = r2 | 384;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x2da90:
                    r2 = r0 + 16;
                case 0x2da94:
                    r4 = r29 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2daa4;
                    pc=0x2d400;
                    run_2d400(); return;
                case 0x2daa4:
                    r6 = r2 + r0;
                    r4 = r29 + 16;
                    r7 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2dab8;
                    pc=0x2cc00;
                    run_2cc00(); return;
                case 0x2dab8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    run_2d600(); return;
                case 0x2dac4:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r6 + 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6a4;
                        run_2d600(); return;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r3 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    run_2d600(); return;
                case 0x2db00:
                    r23 = r23 + -48;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r23;
                    /* Next insn is delay slot */ 
                    pc=0x2db2c;
                    continue;
                case 0x2db10:
                    r2 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r16;
                case 0x2db2c:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2db44;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2db44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db10;
                        continue;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r2 | 32;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2d92c;
                    run_2d800(); return;
                case 0x2db64:
                    r20 = r0 + 1;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    run_2d600(); return;
                case 0x2db74:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd94;
                        run_2dc00(); return;
                    }
                    r2 = 6 << 16;
                    r5 = r5 << 2;
                    r2 = r2 + 24688;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x2dba0:
                    r2 = r0 + 10;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e01c;
                        run_2e000(); return;
                    }
                    r5 = r5 << 2;
                    r2 = r21 + 24716;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x2dbd0:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x2da94;
                    continue;
                case 0x2dbe4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e040;
                        run_2e000(); return;
                    }
                case 0x2dc00:
                    pc=0x2dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2dc00() throws ExecutionException { /* 0x2dc00 - 0x2de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2dc00:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2dc10;
                    pc=0x2d200;
                    run_2d200(); return;
                case 0x2dc10:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    run_2d600(); return;
                case 0x2dc1c:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dfd8;
                        run_2de00(); return;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e064;
                        run_2e000(); return;
                    }
                    r4 = r2 & 64;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de20;
                        run_2de00(); return;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc6c;
                        continue;
                    }
                case 0x2dc68:
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                case 0x2dc6c:
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2dc7c;
                    pc=0x2d200;
                    run_2d200(); return;
                case 0x2dc7c:
                    r20 = r0 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    run_2d600(); return;
                case 0x2dc8c:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2da94;
                    run_2da00(); return;
                case 0x2dca0:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    r3 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r29 + 316;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    addr=r29+316;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+317;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x2dcc8;
                    pc=0x2d200;
                    run_2d200(); return;
                case 0x2dcc8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    run_2d600(); return;
                case 0x2dcd4:
                    r2 = r0 + 45;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2de34;
                        run_2de00(); return;
                    }
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d834;
                    run_2d800(); return;
                case 0x2dcf4:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 24188;
                    r6 = r6 + 24060;
                    r7 = r0 + 616;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2dd18;
                    return;
                case 0x2dd18:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r4 + 4;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dfc4;
                        run_2de00(); return;
                    }
                    r2 = r3 + r0;
                case 0x2dd3c:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x2d938;
                    run_2d800(); return;
                case 0x2dd4c:
                    r2 = r0 - r2;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    r5 = r5 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x2d91c;
                    run_2d800(); return;
                case 0x2dd60:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x2dd68:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                case 0x2dd7c:
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x2dd94:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 24132;
                    r6 = r6 + 24060;
                    r7 = r0 + 362;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2ddb8;
                    return;
                case 0x2ddb8:
                    r3 = r0 + 3;
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 2;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x2d980;
                    run_2d800(); return;
                case 0x2ddd4:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r0;
                    r17 = r17 + 2;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d980;
                    run_2d800(); return;
                case 0x2ddec:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x2de00:
                    pc=0x2de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2de00() throws ExecutionException { /* 0x2de00 - 0x2e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2de00:
                    r6 = r7 >> 31;
                case 0x2de08:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2de14;
                    pc=0x2cc00;
                    run_2cc00(); return;
                case 0x2de14:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    run_2d600(); return;
                case 0x2de20:
                    r2 = r2 | 64;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2dc68;
                    run_2dc00(); return;
                case 0x2de34:
                    r17 = r17 + 2;
                case 0x2de38:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2de50;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2de50:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de38;
                        continue;
                    }
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r0 + -65;
                    r2 = r3 & r2;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2d938;
                    run_2d800(); return;
                case 0x2de70:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x2de78:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2dd68;
                    run_2dc00(); return;
                case 0x2de98:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2dd7c;
                    run_2dc00(); return;
                case 0x2dea4:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2deac:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2de78;
                    continue;
                case 0x2decc:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2ded4:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2deac;
                    continue;
                case 0x2def4:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2defc:
                    r2 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x2ded4;
                    continue;
                case 0x2df1c:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x2defc;
                    continue;
                case 0x2df40:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2de08;
                    continue;
                case 0x2df68:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2de08;
                    continue;
                case 0x2df84:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x2de08;
                    continue;
                case 0x2dfa4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x2de08;
                    continue;
                case 0x2dfc4:
                    r3 = r0 + -65;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2dd3c;
                    run_2dc00(); return;
                case 0x2dfd8:
                    r2 = r2 | 192;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                    r2 = r0 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                case 0x2e000:
                    pc=0x2e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e000() throws ExecutionException { /* 0x2e000 - 0x2e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e000:
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2e010;
                    pc=0x2cc00;
                    run_2cc00(); return;
                case 0x2e010:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d6a8;
                    run_2d600(); return;
                case 0x2e01c:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 24080;
                    r6 = r6 + 24060;
                    r7 = r0 + 160;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2e040;
                    return;
                case 0x2e040:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 24112;
                    r6 = r6 + 24060;
                    r7 = r0 + 571;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2e064;
                    return;
                case 0x2e064:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 24124;
                    r6 = r6 + 24060;
                    r7 = r0 + 580;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2e088;
                    return;
                case 0x2e088:
                case 0x2e200:
                    pc=0x2e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e200() throws ExecutionException { /* 0x2e200 - 0x2e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e200:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2e21c;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2e21c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e400:
                    pc=0x2e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e400() throws ExecutionException { /* 0x2e400 - 0x2e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e400:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2e424;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2e424:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e450;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e450;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e450:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 24228;
                    r6 = r6 + 24060;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2e474;
                    return;
                case 0x2e474:
                case 0x2e600:
                    pc=0x2e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e600() throws ExecutionException { /* 0x2e600 - 0x2e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e618;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2e618:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e644;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e644;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e644:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32752)>>>12][((r28+-32752)>>>2)&0x3ff];
                    r5 = r5 + 24228;
                    r6 = r6 + 24060;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2e668;
                    return;
                case 0x2e668:
                case 0x2e800:
                    pc=0x2e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e800() throws ExecutionException { /* 0x2e800 - 0x2ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e800:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + -33;
                    r2 = r4 & r2;
                    r2 = r2 + -65;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ea00:
                    pc=0x2ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ea00() throws ExecutionException { /* 0x2ea00 - 0x2ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ea00:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea28;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ea28:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ec00:
                    pc=0x2ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ec00() throws ExecutionException { /* 0x2ec00 - 0x2ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ec00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = ~(r0 | r4);
                    r2 = r2 >>> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ee00:
                    pc=0x2ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ee00() throws ExecutionException { /* 0x2ee00 - 0x2f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ee00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee24;
                        continue;
                    }
                    r4 = r4 ^ 9;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ee24:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f000:
                    pc=0x2f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f000() throws ExecutionException { /* 0x2f000 - 0x2f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f000:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f028;
                        continue;
                    }
                    r2 = r4 + -9;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f028:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f200:
                    pc=0x2f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f200() throws ExecutionException { /* 0x2f200 - 0x2f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f200:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f400:
                    pc=0x2f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f400() throws ExecutionException { /* 0x2f400 - 0x2f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f400:
                    r4 = r4 + -97;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f600:
                    pc=0x2f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f600() throws ExecutionException { /* 0x2f600 - 0x2f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f600:
                    r4 = r4 + -65;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f800:
                    pc=0x2f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f800() throws ExecutionException { /* 0x2f800 - 0x2fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f800:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fa00:
                    pc=0x2fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fa00() throws ExecutionException { /* 0x2fa00 - 0x2fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fa00:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fc00:
                    pc=0x2fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fc00() throws ExecutionException { /* 0x2fc00 - 0x2fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fc00:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fc28;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fc28:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fe00:
                    pc=0x2fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fe00() throws ExecutionException { /* 0x2fe00 - 0x30000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fe00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 34;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fe24;
                        continue;
                    }
                    r4 = r4 ^ 39;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fe24:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30000:
                    pc=0x30000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30000() throws ExecutionException { /* 0x30000 - 0x30200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30000:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + 24744;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x30034;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x30034:
                case 0x30200:
                    pc=0x30200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30200() throws ExecutionException { /* 0x30200 - 0x30400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30200:
                    r5 = r4 + r0;
                    r6 = r0 + r0;
                    r4 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c000;
                    run_4c000(); return;
                case 0x30400:
                    pc=0x30400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30400() throws ExecutionException { /* 0x30400 - 0x30600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30400:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30600:
                    pc=0x30600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30600() throws ExecutionException { /* 0x30600 - 0x30800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30600:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3061c;
                    pc=0x4c200;
                    run_4c200(); return;
                case 0x3061c:
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3063c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3063c;
                    return;
                case 0x3063c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30648;
                    pc=0x3de00;
                    run_3de00(); return;
                case 0x30648:
                case 0x30800:
                    pc=0x30800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30800() throws ExecutionException { /* 0x30800 - 0x30a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30800:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3084c;
                        continue;
                    }
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3083c;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30938;
                        continue;
                    }
                case 0x3083c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3086c;
                        continue;
                    }
                case 0x3084c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3086c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3087c;
                    pc=0x31000;
                    run_31000(); return;
                case 0x3087c:
                    r3 = readPages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x308a4;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x3089c;
                    return;
                case 0x3089c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x30948;
                        continue;
                    }
                case 0x308a4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30954;
                        continue;
                    }
                case 0x308b8:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x308e4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x308e0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x308e0;
                    pc=0x34400;
                    run_34400(); return;
                case 0x308e0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x308e4:
                    r5 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30904;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30900;
                    pc=0x34400;
                    run_34400(); return;
                case 0x30900:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                case 0x30904:
                    /* Next insn is delay slot */ 
                    r31=0x3090c;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x3090c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x30918;
                    pc=0x32c00;
                    run_32c00(); return;
                case 0x30918:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30938:
                    /* Next insn is delay slot */ 
                    r31=0x30940;
                    pc=0x32600;
                    run_32600(); return;
                case 0x30940:
                    /* Next insn is delay slot */ 
                    pc=0x3083c;
                    continue;
                case 0x30948:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x308a4;
                    continue;
                case 0x30954:
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30964;
                    pc=0x34400;
                    run_34400(); return;
                case 0x30964:
                    /* Next insn is delay slot */ 
                    pc=0x308b8;
                    continue;
                case 0x30a00:
                    pc=0x30a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30a00() throws ExecutionException { /* 0x30a00 - 0x30c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30a00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x30c00:
                    pc=0x30c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30c00() throws ExecutionException { /* 0x30c00 - 0x30e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30c00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r17 = r5 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30d40;
                        continue;
                    }
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 | 2048;
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x30df4;
                        continue;
                    }
                case 0x30c44:
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30d1c;
                        continue;
                    }
                    r2 = r2 & 65535;
                    r4 = r2 & 4096;
                    r16 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30e0c;
                        run_30e00(); return;
                    }
                    r6 = readPages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff];
                case 0x30c70:
                    r2 = r2 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30ca4;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r6 = r6 - r2;
                    r2 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30ca4;
                        continue;
                    }
                    r2 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    r6 = r6 - r2;
                case 0x30ca4:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x30cb8;
                    return;
                case 0x30cb8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x30e44;
                        run_30e00(); return;
                    }
                case 0x30cc4:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r4 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r3 = r3 & 63487;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 & 4096;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30ec8;
                        run_30e00(); return;
                    }
                case 0x30cf0:
                    r5 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30d1c;
                        continue;
                    }
                    r2 = r17 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30d18;
                        continue;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30d18;
                    pc=0x34400;
                    run_34400(); return;
                case 0x30d18:
                    writePages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff] = r0;
                case 0x30d1c:
                    r2 = r0 + r0;
                case 0x30d20:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30d40:
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30d1c;
                        continue;
                    }
                    r16 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 & 3;
                    r16 = r16 - r18;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30de8;
                        continue;
                    }
                    r2 = readPages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff];
                case 0x30d70:
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r16 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x30d94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x30d1c;
                    continue;
                case 0x30d84:
                    r16 = r16 - r2;
                    r18 = r18 + r2;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x30d1c;
                        continue;
                    }
                case 0x30d94:
                    r2 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r6 = r18 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x30db0;
                    return;
                case 0x30db0:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x30d84;
                        continue;
                    }
                case 0x30db8:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30de8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30d70;
                    continue;
                case 0x30df4:
                    r3 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x30c44;
                        continue;
                    }
                case 0x30e00:
                    pc=0x30e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30e00() throws ExecutionException { /* 0x30e00 - 0x31000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30e00:
                    /* Next insn is delay slot */ 
                    pc=0x30d1c;
                    run_30c00(); return;
                case 0x30e0c:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r4 = r19 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x30e24;
                    return;
                case 0x30e24:
                    r6 = r2 + r0;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30e90;
                        continue;
                    }
                case 0x30e34:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x30c70;
                    run_30c00(); return;
                case 0x30e44:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30cc4;
                        run_30c00(); return;
                    }
                    r2 = r0 + 29;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30e6c;
                        continue;
                    }
                    r2 = r0 + 22;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30db8;
                        run_30c00(); return;
                    }
                case 0x30e6c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    r2 = r2 & 63487;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x30cf0;
                    run_30c00(); return;
                case 0x30e90:
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30e34;
                        continue;
                    }
                    r3 = r0 + 29;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x30eb8;
                        continue;
                    }
                    r3 = r0 + 22;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x30db8;
                        run_30c00(); return;
                    }
                case 0x30eb8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30d20;
                    run_30c00(); return;
                case 0x30ec8:
                    writePages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x30cf0;
                    run_30c00(); return;
                case 0x31000:
                    pc=0x31000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31000() throws ExecutionException { /* 0x31000 - 0x31200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31028;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31068;
                        continue;
                    }
                case 0x31028:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31050;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31050:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31068:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x31074;
                    pc=0x32600;
                    run_32600(); return;
                case 0x31074:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x31028;
                    continue;
                case 0x31200:
                    pc=0x31200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31200() throws ExecutionException { /* 0x31200 - 0x31400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31200:
                    r5 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31218;
                        continue;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x31000;
                    run_31000(); return;
                case 0x31218:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r5 = r5 + 4096;
                    /* Next insn is delay slot */ 
                    pc=0x35200;
                    run_35200(); return;
                case 0x31400:
                    pc=0x31400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31400() throws ExecutionException { /* 0x31400 - 0x31600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31428;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31464;
                        continue;
                    }
                case 0x31428:
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3147c;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31464:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x31470;
                    pc=0x32600;
                    run_32600(); return;
                case 0x31470:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x31428;
                    continue;
                case 0x3147c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x38600;
                    run_38600(); return;
                case 0x31600:
                    pc=0x31600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31600() throws ExecutionException { /* 0x31600 - 0x31800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3162c;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31668;
                        continue;
                    }
                case 0x3162c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31678;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31668:
                    /* Next insn is delay slot */ 
                    r31=0x31670;
                    pc=0x32600;
                    run_32600(); return;
                case 0x31670:
                    /* Next insn is delay slot */ 
                    pc=0x3162c;
                    continue;
                case 0x31678:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x38600;
                    run_38600(); return;
                case 0x31800:
                    pc=0x31800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31800() throws ExecutionException { /* 0x31800 - 0x31a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31800:
                    r2 = r6 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x319a4;
                        continue;
                    }
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r21 = r4 + r0;
                    r22 = r5 + r0;
                    r17 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31854;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31940;
                        continue;
                    }
                case 0x31854:
                    r18 = r6 + -1;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x318d0;
                    continue;
                case 0x31864:
                    r2 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31878;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x31878:
                    r4 = r20 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3188c;
                    pc=0x36800;
                    run_36800(); return;
                case 0x3188c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31958;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 - r16;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r2 = r2 + r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r6 = r16 + r0;
                    r18 = r18 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x318c4;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x318c4:
                    r19 = r19 + r16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3190c;
                        continue;
                    }
                case 0x318d0:
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31864;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x318f0;
                    pc=0x38200;
                    run_38200(); return;
                case 0x318f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31904;
                        continue;
                    }
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x31864;
                    continue;
                case 0x31904:
                    if(r19 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x31998;
                        continue;
                    }
                case 0x3190c:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                case 0x31914:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31940:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x3194c;
                    pc=0x32600;
                    run_32600(); return;
                case 0x3194c:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x31854;
                    continue;
                case 0x31958:
                    r2 = r2 + 1;
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r16 = r2 - r20;
                    r3 = r3 - r16;
                    r6 = r16 + r0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    r5 = r20 + r0;
                    r16 = r19 + r16;
                    /* Next insn is delay slot */ 
                    r31=0x31988;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x31988:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31914;
                    continue;
                case 0x31998:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31914;
                    continue;
                case 0x319a4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31a00:
                    pc=0x31a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31a00() throws ExecutionException { /* 0x31a00 - 0x31c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x31800;
                    run_31800(); return;
                case 0x31c00:
                    pc=0x31c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31c00() throws ExecutionException { /* 0x31c00 - 0x31e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31c00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31e00:
                    pc=0x31e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31e00() throws ExecutionException { /* 0x31e00 - 0x32000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31e00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32000:
                    pc=0x32000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32000() throws ExecutionException { /* 0x32000 - 0x32200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32000:
                    r5 = 3 << 16;
                    r5 = r5 + 2560;
                    /* Next insn is delay slot */ 
                    pc=0x35000;
                    run_35000(); return;
                case 0x32200:
                    pc=0x32200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32200() throws ExecutionException { /* 0x32200 - 0x32400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32200:
                    r29 = r29 + -32;
                    r2 = r5 << 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r5 << 4;
                    r18 = r18 - r2;
                    r18 = r18 + r5;
                    r18 = r18 << 3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r5 + r0;
                    r5 = r18 + 12;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32238;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x32238:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32264;
                        continue;
                    }
                    r4 = r2 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r5 = r0 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x32264;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x32264:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32400:
                    pc=0x32400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32400() throws ExecutionException { /* 0x32400 - 0x32600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32400:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r5 = r5 + 2560;
                    /* Next insn is delay slot */ 
                    pc=0x35000;
                    run_35000(); return;
                case 0x32600:
                    pc=0x32600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32600() throws ExecutionException { /* 0x32600 - 0x32800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32600:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3277c;
                        continue;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + 8192;
                    writePages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    r16 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r4+740)>>>12][((r4+740)>>>2)&0x3ff] = r2;
                    r2 = r4 + 748;
                    writePages[(r4+744)>>>12][((r4+744)>>>2)&0x3ff] = r2;
                    r22 = r0 + 1;
                    r2 = r0 + 4;
                    r21 = 4 << 16;
                    r20 = 4 << 16;
                    r19 = 4 << 16;
                    r18 = 4 << 16;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r22;
                    writePages[(r4+736)>>>12][((r4+736)>>>2)&0x3ff] = r0;
                    r21 = r21 + -30208;
                    r4 = r16 + 92;
                    r20 = r20 + -29184;
                    r19 = r19 + -28672;
                    r18 = r18 + -28160;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x326bc;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x326bc:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r4 = r16 + 92;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r22&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x32710;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x32710:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r0 + 18;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x32768;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x32768:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                case 0x3277c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32800:
                    pc=0x32800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32800() throws ExecutionException { /* 0x32800 - 0x32a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32800:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32900;
                        continue;
                    }
                case 0x3282c:
                    r18 = r18 + 736;
                    r17 = r0 + -1;
                case 0x32834:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x32860;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x328e4;
                    continue;
                case 0x32850:
                    r2 = r2 + -1;
                    r16 = r16 + 104;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x328e4;
                        continue;
                    }
                case 0x32860:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32850;
                        continue;
                    }
                    r2 = r0 + -1;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x328b0;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x328b0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    writePages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x328c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x328e4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32914;
                        continue;
                    }
                case 0x328f4:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x32834;
                    continue;
                case 0x32900:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3290c;
                    pc=0x32600;
                    run_32600(); return;
                case 0x3290c:
                    /* Next insn is delay slot */ 
                    pc=0x3282c;
                    continue;
                case 0x32914:
                    r4 = r19 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x32924;
                    pc=0x32200;
                    run_32200(); return;
                case 0x32924:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x328f4;
                        continue;
                    }
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x328c4;
                    continue;
                case 0x32a00:
                    pc=0x32a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32a00() throws ExecutionException { /* 0x32a00 - 0x32c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32a00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32c00:
                    pc=0x32c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32c00() throws ExecutionException { /* 0x32c00 - 0x32e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32c00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32e00:
                    pc=0x32e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32e00() throws ExecutionException { /* 0x32e00 - 0x33000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32e00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33000:
                    pc=0x33000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33000() throws ExecutionException { /* 0x33000 - 0x33200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33200:
                    pc=0x33200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33200() throws ExecutionException { /* 0x33200 - 0x33400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33200:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r5 + 7168;
                    /* Next insn is delay slot */ 
                    pc=0x35000;
                    run_35000(); return;
                case 0x33400:
                    pc=0x33400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33400() throws ExecutionException { /* 0x33400 - 0x33600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33400:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r5 + 7680;
                    /* Next insn is delay slot */ 
                    pc=0x35000;
                    run_35000(); return;
                case 0x33600:
                    pc=0x33600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33600() throws ExecutionException { /* 0x33600 - 0x33800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33600:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r19 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33630;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x33630:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x336f4;
                        continue;
                    }
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33648;
                    pc=0x32800;
                    run_32800(); return;
                case 0x33648:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x336f4;
                        continue;
                    }
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    r7 = r0 + 438;
                    /* Next insn is delay slot */ 
                    r31=0x3366c;
                    pc=0x3de20;
                    run_3de00(); return;
                case 0x3366c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x336e0;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 4 << 16;
                    r2 = r2 + -30208;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + -29184;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + -28672;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -28160;
                    r17 = r17 & 256;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33718;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x336e0:
                    /* Next insn is delay slot */ 
                    r31=0x336e8;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x336e8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x336f4;
                    pc=0x32c00;
                    run_32c00(); return;
                case 0x336f4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33718:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x33730;
                    pc=0x34800;
                    run_34800(); return;
                case 0x33730:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33800:
                    pc=0x33800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33800() throws ExecutionException { /* 0x33800 - 0x33a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33600;
                    run_33600(); return;
                case 0x33a00:
                    pc=0x33a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33a00() throws ExecutionException { /* 0x33a00 - 0x33c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33a00:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x33a1c;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x33a1c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33c00:
                    pc=0x33c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33c00() throws ExecutionException { /* 0x33c00 - 0x33e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33c00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r7 = r29 + 40;
                    r5 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x33c30;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x33c30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33e00:
                    pc=0x33e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33e00() throws ExecutionException { /* 0x33e00 - 0x34000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e40;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e40;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x33e38;
                    pc=0x32600;
                    run_32600(); return;
                case 0x33e38:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x33e40:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x37200;
                    run_37200(); return;
                case 0x34000:
                    pc=0x34000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34000() throws ExecutionException { /* 0x34000 - 0x34200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3405c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34044;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x3403c;
                    pc=0x32600;
                    run_32600(); return;
                case 0x3403c:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x34044:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x37200;
                    run_37200(); return;
                case 0x3405c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x37200;
                    run_37200(); return;
                case 0x34200:
                    pc=0x34200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34200() throws ExecutionException { /* 0x34200 - 0x34400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34200:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = 7 << 16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r18 + -31984;
                    /* Next insn is delay slot */ 
                    r31=0x34234;
                    pc=0x3e180;
                    run_3e000(); return;
                case 0x34234:
                    r4 = r17 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34244;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x34244:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    r5 = r19 - r20;
                    r5 = r5 + -17;
                    r5 = r5 + r16;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        if(r16!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                        }
                        pc=0x34270;
                        continue;
                    }
                    if(r16!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x34270:
                    r20 = lo;
                    r20 = r20 + -1;
                    { long hilo = (long)(r20) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r20 = lo;
                    r16 = r20 < r16 ? 1 : 0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x342b4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x342a0;
                    pc=0x3df20;
                    run_3de00(); return;
                case 0x342a0:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x342e8;
                        continue;
                    }
                case 0x342b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x342c0;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x342c0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x342e8:
                    r4 = r17 + r0;
                    r5 = r0 - r20;
                    /* Next insn is delay slot */ 
                    r31=0x342f8;
                    pc=0x3df20;
                    run_3de00(); return;
                case 0x342f8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34358;
                        continue;
                    }
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = r19 - r20;
                    r19 = r19 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    r2 = 8 << 16;
                    r3 = readPages[(r2+-30288)>>>12][((r2+-30288)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = r3 - r20;
                    writePages[(r2+-30288)>>>12][((r2+-30288)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    r31=0x34330;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x34330:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34358:
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34368;
                    pc=0x3df20;
                    run_3de00(); return;
                case 0x34368:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r2 - r3;
                    r5 = r4 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x342b4;
                        continue;
                    }
                    r5 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r4 = r4 | 1;
                    r2 = r2 - r5;
                    r5 = 8 << 16;
                    writePages[(r5+-30288)>>>12][((r5+-30288)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x342b4;
                    continue;
                case 0x34400:
                    pc=0x34400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34400() throws ExecutionException { /* 0x34400 - 0x34600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x345a0;
                        continue;
                    }
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34428;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x34428:
                    r8 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r6 = r16 + -8;
                    r2 = r8 & r2;
                    r3 = r6 + r2;
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = 7 << 16;
                    r4 = r0 + -4;
                    r7 = r7 + -31984;
                    r5 = r5 & r4;
                    r4 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34644;
                        run_34600(); return;
                    }
                    r8 = r8 & 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r5;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34564;
                        continue;
                    }
                    r4 = r0 + r0;
                case 0x34474:
                    r8 = r3 + r5;
                    r8 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    r8 = r8 & 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x344ac;
                        continue;
                    }
                    r2 = r2 + r5;
                    r5 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3460c;
                        run_34600(); return;
                    }
                case 0x3449c:
                    r3 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r5;
                case 0x344ac:
                    r3 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r3 = r6 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34548;
                        continue;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x345b8;
                        continue;
                    }
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x346b8;
                        run_34600(); return;
                    }
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r8 = r4 << 1;
                case 0x344ec:
                    r8 = r8 << 2;
                    r8 = r7 + r8;
                    r3 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x346d4;
                        run_34600(); return;
                    }
                    r4 = r0 + -4;
                case 0x34508:
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r5 = r5 & r4;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34530;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34508;
                        continue;
                    }
                case 0x34530:
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                case 0x34538:
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r2;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r6;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                case 0x34548:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x34564:
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r8 = 7 << 16;
                    r6 = r6 - r4;
                    r2 = r2 + r4;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r8 = r8 + -31976;
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x346ac;
                        run_34600(); return;
                    }
                    r8 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r8;
                    writePages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34474;
                    continue;
                case 0x345a0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x345b8:
                    r2 = r2 >>> 3;
                    r3 = r2 >> 2;
                    r4 = r0 + 1;
                    r3 = r4 << (r3&0x1f);
                    r4 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r3 = r3 | r4;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r3;
                    r7 = r7 + r2;
                    r2 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r7;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r6;
                case 0x34600:
                    pc=0x34600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34600() throws ExecutionException { /* 0x34600 - 0x34800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34600:
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x3460c:
                    r8 = 7 << 16;
                    r8 = r8 + -31976;
                    if(r5 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x3449c;
                        run_34400(); return;
                    }
                    r3 = r2 | 1;
                    writePages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff] = r6;
                    writePages[(r7+16)>>>12][((r7+16)>>>2)&0x3ff] = r6;
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r5;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r5;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r6 = r6 + r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x34548;
                    run_34400(); return;
                case 0x34644:
                    r8 = r8 & 1;
                    r2 = r5 + r2;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34678;
                        continue;
                    }
                    r3 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r6 = r6 - r3;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r3 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x34678:
                    r5 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r3 = r2 | 1;
                    r2 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34548;
                        run_34400(); return;
                    }
                    r5 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x346a4;
                    pc=0x34200;
                    run_34200(); return;
                case 0x346a4:
                    /* Next insn is delay slot */ 
                    pc=0x34548;
                    run_34400(); return;
                case 0x346ac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x34474;
                    run_34400(); return;
                case 0x346b8:
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x346fc;
                        continue;
                    }
                    r4 = r3 + 91;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x344ec;
                    run_34400(); return;
                case 0x346d4:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r2;
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34538;
                    run_34400(); return;
                case 0x346fc:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3471c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x344ec;
                    run_34400(); return;
                case 0x3471c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3473c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x344ec;
                    run_34400(); return;
                case 0x3473c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3475c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x344ec;
                    run_34400(); return;
                case 0x3475c:
                    r8 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x344ec;
                    run_34400(); return;
                case 0x34800:
                    pc=0x34800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34800() throws ExecutionException { /* 0x34800 - 0x34a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34800:
                    r29 = r29 + -120;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r21;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r23;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r20;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    r21 = r6 + r0;
                    r18 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34850;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a30;
                        run_34a00(); return;
                    }
                case 0x34850:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34a4c;
                        run_34a00(); return;
                    }
                case 0x34864:
                    r19 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d88;
                        run_34c00(); return;
                    }
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x349c4;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x348d4;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x348d4;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x3489c:
                    r20 = r0 + -1;
                case 0x348a0:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r23 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r22 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r21 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r20 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 120;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x348d4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r20 = r0 + r0;
                case 0x348e0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d24;
                        run_34c00(); return;
                    }
                case 0x348e8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 2074;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34924;
                        continue;
                    }
                    r2 = r2 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34ab8;
                        run_34a00(); return;
                    }
                    r2 = 4 << 16;
                    r2 = r2 + -28672;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34a64;
                        run_34a00(); return;
                    }
                case 0x3491c:
                    r3 = r3 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x34924:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34934;
                    pc=0x31000;
                    run_31000(); return;
                case 0x34934:
                    r20 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3489c;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x34958;
                    return;
                case 0x34958:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3489c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34990;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3498c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3498c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x3498c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x34990:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r16 + 92;
                    r2 = r2 & 63455;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x349bc;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x349bc:
                    /* Next insn is delay slot */ 
                    pc=0x348a0;
                    continue;
                case 0x349c4:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x349d4;
                    pc=0x31000;
                    run_31000(); return;
                case 0x349d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 4096;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34ce4;
                        run_34c00(); return;
                    }
                    r20 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x349ec:
                    r3 = r2 & 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34ba0;
                        run_34a00(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34bc8;
                        run_34a00(); return;
                    }
                case 0x34a00:
                    pc=0x34a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34a00() throws ExecutionException { /* 0x34a00 - 0x34c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34a00:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a1c;
                        continue;
                    }
                    r3 = r3 - r2;
                    r20 = r20 + r3;
                case 0x34a1c:
                    r21 = r21 + r20;
                    r22 = r0 + 1;
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x348e0;
                    run_34800(); return;
                case 0x34a30:
                    /* Next insn is delay slot */ 
                    r31=0x34a38;
                    pc=0x32600;
                    run_32600(); return;
                case 0x34a38:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34864;
                        run_34800(); return;
                    }
                case 0x34a4c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34a5c;
                    pc=0x31000;
                    run_31000(); return;
                case 0x34a5c:
                    /* Next insn is delay slot */ 
                    pc=0x34864;
                    run_34800(); return;
                case 0x34a64:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3491c;
                        run_34800(); return;
                    }
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x34a84;
                    pc=0x3df60;
                    run_3de00(); return;
                case 0x34a84:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d18;
                        run_34c00(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 | 32768;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34d18;
                        run_34c00(); return;
                    }
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x34ab8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34bd4;
                        continue;
                    }
                    r23 = r21 + r0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c04;
                        run_34c00(); return;
                    }
                case 0x34acc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d3c;
                        run_34c00(); return;
                    }
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x34ae4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r20 = r2 - r3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d68;
                        run_34c00(); return;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r6;
                case 0x34b04:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r20 + r3;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r6 + r2;
                case 0x34b1c:
                    r3 = r23 < r20 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c20;
                        run_34c00(); return;
                    }
                    r3 = r20 + r2;
                    r3 = ((r23 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c20;
                        run_34c00(); return;
                    }
                    r20 = r23 - r20;
                    r4 = r4 + r20;
                    r2 = r2 - r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b70;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34b6c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34b6c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x34b6c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x34b70:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x34b80:
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x34b94;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x34b94:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x348a0;
                    run_34800(); return;
                case 0x34ba0:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r20 = r20 - r2;
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34bc8;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r2;
                case 0x34bc8:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x34a1c;
                    continue;
                case 0x34bd4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x34be8;
                    pc=0x3df60;
                    run_3de00(); return;
                case 0x34be8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34924;
                        run_34800(); return;
                    }
                    r23 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r21 + r23;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34acc;
                        continue;
                    }
                case 0x34c00:
                    pc=0x34c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34c00() throws ExecutionException { /* 0x34c00 - 0x34e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34c00:
                case 0x34c04:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d68;
                        continue;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x34b04;
                    run_34a00(); return;
                case 0x34c20:
                    r20 = readPages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r20 = r0 - r20;
                    r20 = r23 & r20;
                    r4 = r17 + r0;
                    r6 = r20 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x34c44;
                    return;
                case 0x34c44:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34924;
                        run_34800(); return;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c84;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34c80;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34c80;
                    pc=0x34400;
                    run_34400(); return;
                case 0x34c80:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x34c84:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r23 = r23 - r20;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b80;
                        run_34a00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34cac;
                    pc=0x38200;
                    run_38200(); return;
                case 0x34cac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34924;
                        run_34800(); return;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34924;
                        run_34800(); return;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 - r23;
                    r3 = r3 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x34b80;
                    run_34a00(); return;
                case 0x34ce4:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x34cfc;
                    return;
                case 0x34cfc:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3489c;
                        run_34800(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x349ec;
                    run_34800(); return;
                case 0x34d18:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3491c;
                    run_34800(); return;
                case 0x34d24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34d34;
                    pc=0x35800;
                    run_35800(); return;
                case 0x34d34:
                    /* Next insn is delay slot */ 
                    pc=0x348e8;
                    run_34800(); return;
                case 0x34d3c:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x34d54;
                    return;
                case 0x34d54:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34ae4;
                        run_34a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x34924;
                    run_34800(); return;
                case 0x34d68:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x34b1c;
                    run_34a00(); return;
                case 0x34d88:
                    r2 = r0 + 29;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r20 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x348a0;
                    run_34800(); return;
                case 0x34e00:
                    pc=0x34e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34e00() throws ExecutionException { /* 0x34e00 - 0x35000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34800;
                    run_34800(); return;
                case 0x35000:
                    pc=0x35000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35000() throws ExecutionException { /* 0x35000 - 0x35200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35000:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x350cc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r20 = r0 + r0;
                    r18 = r0 + -1;
                case 0x35038:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35090;
                        continue;
                    }
                case 0x3504c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35080;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x35080;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x3507c;
                    return;
                case 0x3507c:
                    r20 = r20 | r2;
                case 0x35080:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x3504c;
                        continue;
                    }
                case 0x35090:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35038;
                        continue;
                    }
                case 0x350a0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x350cc:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x350a0;
                    continue;
                case 0x35200:
                    pc=0x35200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35200() throws ExecutionException { /* 0x35200 - 0x35400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35200:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x352dc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r22 = r0 + r0;
                    r18 = r0 + -1;
                case 0x35240:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3529c;
                        continue;
                    }
                case 0x35254:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3528c;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x3528c;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x35288;
                    return;
                case 0x35288:
                    r22 = r22 | r2;
                case 0x3528c:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x35254;
                        continue;
                    }
                case 0x3529c:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35240;
                        continue;
                    }
                case 0x352ac:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r22 + r0;
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x352dc:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x352ac;
                    continue;
                case 0x35400:
                    pc=0x35400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35400() throws ExecutionException { /* 0x35400 - 0x35600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35400:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -64;
                    r2 = r29 + 28;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = lo;
                    r19 = r6 + r0;
                    r20 = r7 + r0;
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35468;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35514;
                        continue;
                    }
                case 0x35468:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35494;
                        continue;
                    }
                    r3 = r3 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x35494:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x354a8;
                    pc=0x4ea00;
                    run_4ea00(); return;
                case 0x354a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x354ec;
                        continue;
                    }
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = r18 - r2;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        if(r19!=0) {
                        hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                        }
                        pc=0x354c8;
                        continue;
                    }
                    if(r19!=0) {
                    hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x354c8:
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x354ec:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35514:
                    /* Next insn is delay slot */ 
                    r31=0x3551c;
                    pc=0x32600;
                    run_32600(); return;
                case 0x3551c:
                    /* Next insn is delay slot */ 
                    pc=0x35468;
                    continue;
                case 0x35600:
                    pc=0x35600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35600() throws ExecutionException { /* 0x35600 - 0x35800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35600:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35630;
                    pc=0x35400;
                    run_35400(); return;
                case 0x35630:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35800:
                    pc=0x35800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35800() throws ExecutionException { /* 0x35800 - 0x35a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35800:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -104;
                    r3 = r2 & 65535;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r3 & 2;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r31;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35930;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r17 = r4 + r0;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x358f0;
                        continue;
                    }
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x3584c;
                    pc=0x3df60;
                    run_3de00(); return;
                case 0x3584c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x358e4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 | 32768;
                    r2 = r2 & 61440;
                    r19 = r2 ^ 8192;
                    r19 = (r19&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x35970;
                        continue;
                    }
                case 0x35870:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x35880:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35890;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x35890:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35914;
                        continue;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + 8192;
                    writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r3 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r18;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x359a4;
                        continue;
                    }
                case 0x358c4:
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x358e4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                case 0x358f0:
                    r3 = r3 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35964;
                        continue;
                    }
                    r18 = r0 + 1024;
                case 0x35900:
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35880;
                    continue;
                case 0x35914:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 512;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x358c4;
                        continue;
                    }
                    r2 = r2 | 2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x35930:
                    r2 = r16 + 67;
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35964:
                    r18 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x35900;
                    continue;
                case 0x35970:
                    r2 = 4 << 16;
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r2 + -28672;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35870;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x35880;
                    continue;
                case 0x359a4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x359b4;
                    pc=0x4be00;
                    run_4be00(); return;
                case 0x359b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x358c4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x358c4;
                    continue;
                case 0x35a00:
                    pc=0x35a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35a00() throws ExecutionException { /* 0x35a00 - 0x35c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35a00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x35c00:
                    pc=0x35c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35c00() throws ExecutionException { /* 0x35c00 - 0x35e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35c00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x34400;
                    run_34400(); return;
                case 0x35e00:
                    pc=0x35e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35e00() throws ExecutionException { /* 0x35e00 - 0x36000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35e00:
                    r2 = r5 + 11;
                    r29 = r29 + -64;
                    r3 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f04;
                        continue;
                    }
                    r17 = r0 + -8;
                    r17 = r2 & r17;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f14;
                        continue;
                    }
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f14;
                        continue;
                    }
                case 0x35e5c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35e68;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x35e68:
                    r2 = (r17&0xffffffffL) < (504&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f28;
                        continue;
                    }
                    r18 = 7 << 16;
                    r18 = r18 + -31984;
                    r2 = r18 + r17;
                    r16 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = r17 >>> 3;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x364d8;
                        run_36400(); return;
                    }
                case 0x35e90:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r3 & r2;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x35eb0:
                    r2 = r16 + r2;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = r3 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x35ecc;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x35ecc:
                    r2 = r16 + 8;
                case 0x35ed0:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35f04:
                    r17 = r0 + 16;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35e5c;
                        continue;
                    }
                case 0x35f14:
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35ed0;
                    continue;
                case 0x35f28:
                    r2 = r17 >>> 9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3614c;
                        run_36000(); return;
                    }
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x363b8;
                        run_36200(); return;
                    }
                    r8 = r17 >>> 6;
                    r8 = r8 + 56;
                    r6 = r8 << 1;
                case 0x35f4c:
                    r18 = 7 << 16;
                    r6 = r6 << 2;
                    r18 = r18 + -31984;
                    r6 = r18 + r6;
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x35fd0;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 - r17;
                    r2 = r4 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3615c;
                        run_36000(); return;
                    }
                    r7 = r0 + -4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35fc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x36168;
                    run_36000(); return;
                case 0x35f9c:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r7;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3615c;
                        run_36000(); return;
                    }
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x36168;
                        run_36000(); return;
                    }
                case 0x35fc0:
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x35f9c;
                        continue;
                    }
                case 0x35fd0:
                    r7 = r8 + 1;
                case 0x35fd4:
                    r9 = 7 << 16;
                    r16 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r9 = r9 + -31976;
                    if(r16 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x364b0;
                        run_36400(); return;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r3 & r2;
                    r3 = r2 - r17;
                    r4 = r3 < 16 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3646c;
                        run_36400(); return;
                    }
                case 0x36000:
                    pc=0x36000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36000() throws ExecutionException { /* 0x36000 - 0x36200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36000:
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r9;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r9;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35eb0;
                        run_35e00(); return;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x363e4;
                        run_36200(); return;
                    }
                    r3 = r2 >>> 3;
                    r2 = r3 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r2&0x1f);
                    r3 = r3 << 3;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = r18 + r3;
                    r2 = r4 | r2;
                    r4 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r16;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r16;
                case 0x36058:
                    r3 = r7 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r3&0x1f);
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x361a0;
                        continue;
                    }
                    r3 = r2 & r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36098;
                        continue;
                    }
                    r3 = r0 + -4;
                    r7 = r7 & r3;
                case 0x36084:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36084;
                        continue;
                    }
                case 0x36098:
                    r8 = r0 + -4;
                case 0x3609c:
                    r10 = r7 << 3;
                    r10 = r18 + r10;
                    r6 = r10 + r0;
                    r11 = r7 + r0;
                case 0x360ac:
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x360dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x364bc;
                    run_36400(); return;
                case 0x360c4:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x364f4;
                        run_36400(); return;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x364bc;
                        run_36400(); return;
                    }
                case 0x360dc:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r8;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x360c4;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r17;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    r4 = r2 | 1;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r9;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r9;
                    r3 = r3 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36140;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x36140:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x35ed0;
                    run_35e00(); return;
                case 0x3614c:
                    r6 = r0 + 126;
                    r8 = r0 + 63;
                    /* Next insn is delay slot */ 
                    pc=0x35f4c;
                    run_35e00(); return;
                case 0x3615c:
                    r8 = r8 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x35fd0;
                    run_35e00(); return;
                case 0x36168:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r3;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x36194;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x36194:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x35ed0;
                    run_35e00(); return;
                case 0x361a0:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r21 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 & r2;
                    r2 = ((r21 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x361d0;
                        continue;
                    }
                    r2 = r21 - r17;
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36388;
                        run_36200(); return;
                    }
                case 0x361d0:
                    r22 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x361dc;
                    pc=0x3e180;
                    run_3e000(); return;
                case 0x361dc:
                    r3 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r22 = r22 + 16;
                    r23 = r2 + r0;
                    r2 = r0 + -1;
                    r30 = r16 + r21;
                    r22 = r22 + r17;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3620c;
                        run_36200(); return;
                    }
                    r2 = r22 + -1;
                case 0x36200:
                    pc=0x36200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36200() throws ExecutionException { /* 0x36200 - 0x36400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36200:
                    r2 = r2 + r23;
                    r22 = r0 - r23;
                    r22 = r22 & r2;
                case 0x3620c:
                    r4 = r19 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3621c;
                    pc=0x3df20;
                    run_3de00(); return;
                case 0x3621c:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x36358;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36554;
                        run_36400(); return;
                    }
                case 0x36238:
                    r3 = 8 << 16;
                    r2 = readPages[(r3+-30288)>>>12][((r3+-30288)>>>2)&0x3ff];
                    r4 = r23 + -1;
                    r2 = r22 + r2;
                    writePages[(r3+-30288)>>>12][((r3+-30288)>>>2)&0x3ff] = r2;
                    if(r30 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x366ac;
                        run_36600(); return;
                    }
                case 0x36254:
                    r6 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r5 = r0 + -1;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x366d0;
                        run_36600(); return;
                    }
                    r30 = r20 - r30;
                    r2 = r2 + r30;
                    writePages[(r3+-30288)>>>12][((r3+-30288)>>>2)&0x3ff] = r2;
                case 0x36270:
                    r2 = r20 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36610;
                        run_36600(); return;
                    }
                    r5 = r0 + 8;
                    r2 = r5 - r2;
                    r20 = r20 + r2;
                case 0x36288:
                    r22 = r20 + r22;
                    r2 = r2 + r23;
                    r4 = r22 & r4;
                    r22 = r2 - r4;
                    r5 = r22 + r0;
                    r4 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x362ac;
                    pc=0x3df20;
                    run_3de00(); return;
                case 0x362ac:
                    r4 = r0 + -1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x366fc;
                        run_36600(); return;
                    }
                    r2 = r2 - r20;
                    r4 = r22 + r2;
                    r4 = r4 | 1;
                case 0x362c8:
                    r2 = readPages[(r3+-30288)>>>12][((r3+-30288)>>>2)&0x3ff];
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r2 = r22 + r2;
                    writePages[(r3+-30288)>>>12][((r3+-30288)>>>2)&0x3ff] = r2;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r4;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x36328;
                        continue;
                    }
                    r3 = (r21&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36644;
                        run_36600(); return;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -12;
                    r3 = r0 + -8;
                    r3 = r21 & r3;
                    r4 = r4 & 1;
                    r4 = r3 | r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r5 = r0 + 5;
                    r4 = r16 + r3;
                    r3 = (r3&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x366dc;
                        run_36600(); return;
                    }
                case 0x36328:
                    r3 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36340;
                        continue;
                    }
                    writePages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff] = r2;
                case 0x36340:
                    r3 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36358;
                        continue;
                    }
                    writePages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff] = r2;
                case 0x36358:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r2;
                case 0x3636c:
                    r2 = r3 - r17;
                    r3 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x365d8;
                        run_36400(); return;
                    }
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x365d8;
                        run_36400(); return;
                    }
                case 0x36388:
                    r3 = r17 | 1;
                    r2 = r2 | 1;
                    r17 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r17;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x363ac;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x363ac:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x35ed0;
                    run_35e00(); return;
                case 0x363b8:
                    r3 = (r2&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36530;
                        run_36400(); return;
                    }
                    r3 = (r2&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x365f0;
                        run_36400(); return;
                    }
                    r8 = r17 >>> 12;
                    r8 = r8 + 110;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x35f4c;
                    run_35e00(); return;
                case 0x363e4:
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36540;
                        run_36400(); return;
                    }
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3667c;
                        run_36600(); return;
                    }
                case 0x36400:
                    pc=0x36400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36400() throws ExecutionException { /* 0x36400 - 0x36600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36400:
                    r4 = r3 + 91;
                    r5 = r4 << 1;
                case 0x36408:
                    r5 = r5 << 2;
                    r5 = r18 + r5;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3661c;
                        run_36600(); return;
                    }
                    r6 = r0 + -4;
                case 0x36424:
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 & r6;
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3644c;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x36424;
                        continue;
                    }
                case 0x3644c:
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                case 0x36454:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r16;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x36058;
                    run_36000(); return;
                case 0x3646c:
                    r2 = r16 + r17;
                    r4 = r3 | 1;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r9;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r9;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x364a4;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x364a4:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x35ed0;
                    run_35e00(); return;
                case 0x364b0:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36058;
                    run_36000(); return;
                case 0x364bc:
                    r11 = r11 + 1;
                    r2 = r11 & 3;
                    r6 = r6 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x360ac;
                        run_36000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x36578;
                    continue;
                case 0x364d8:
                    r2 = r16 + 8;
                    r16 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r7 = r7 + 2;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x35fd4;
                        run_35e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x35e90;
                    run_35e00(); return;
                case 0x364f4:
                    r3 = r16 + r3;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x36524;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x36524:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x35ed0;
                    run_35e00(); return;
                case 0x36530:
                    r8 = r2 + 91;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x35f4c;
                    run_35e00(); return;
                case 0x36540:
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x36408;
                    continue;
                case 0x36554:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x36358;
                        run_36200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x36238;
                    run_36200(); return;
                case 0x36564:
                    r2 = r10 + -8;
                    r10 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    r7 = r7 + -1;
                    if(r10 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3675c;
                        run_36600(); return;
                    }
                case 0x36578:
                    r2 = r7 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36564;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = ~(r0 | r4);
                    r2 = r3 & r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                case 0x36594:
                    r4 = r4 << 1;
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x361a0;
                        run_36000(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x361a0;
                        run_36000(); return;
                    }
                    r3 = r2 & r4;
                    r7 = r11 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3609c;
                        run_36000(); return;
                    }
                case 0x365bc:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x365bc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3609c;
                    run_36000(); return;
                case 0x365d8:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x365e4;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x365e4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35ed0;
                    run_35e00(); return;
                case 0x365f0:
                    r3 = (r2&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3665c;
                        run_36600(); return;
                    }
                    r8 = r17 >>> 15;
                case 0x36600:
                    pc=0x36600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36600() throws ExecutionException { /* 0x36600 - 0x36800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36600:
                    r8 = r8 + 119;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x35f4c;
                    run_35e00(); return;
                case 0x36610:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36288;
                    run_36200(); return;
                case 0x3661c:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36454;
                    run_36400(); return;
                case 0x36644:
                    r2 = r0 + 1;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r16 = r20 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3636c;
                    run_36200(); return;
                case 0x3665c:
                    r2 = (r2&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3669c;
                        continue;
                    }
                    r8 = r17 >>> 18;
                    r8 = r8 + 124;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x35f4c;
                    run_35e00(); return;
                case 0x3667c:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3670c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x36408;
                    run_36400(); return;
                case 0x3669c:
                    r6 = r0 + 252;
                    r8 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x35f4c;
                    run_35e00(); return;
                case 0x366ac:
                    r5 = r30 & r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36254;
                        run_36200(); return;
                    }
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r22 + r21;
                    r4 = r4 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x36328;
                    run_36200(); return;
                case 0x366d0:
                    writePages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x36270;
                    run_36200(); return;
                case 0x366dc:
                    r4 = r19 + r0;
                    r5 = r16 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x366ec;
                    pc=0x34400;
                    run_34400(); return;
                case 0x366ec:
                    r2 = 8 << 16;
                    r2 = readPages[(r2+-30288)>>>12][((r2+-30288)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36328;
                    run_36200(); return;
                case 0x366fc:
                    r4 = r0 + 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x362c8;
                    run_36200(); return;
                case 0x3670c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3672c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x36408;
                    run_36400(); return;
                case 0x3672c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3674c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x36408;
                    run_36400(); return;
                case 0x3674c:
                    r5 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x36408;
                    run_36400(); return;
                case 0x3675c:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36594;
                    run_36400(); return;
                case 0x36800:
                    pc=0x36800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36800() throws ExecutionException { /* 0x36800 - 0x36a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36800:
                    r2 = r4 & 3;
                    r7 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3685c;
                        continue;
                    }
                    r2 = r6 + -1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36840;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x368b0;
                    continue;
                case 0x36824:
                    r4 = r4 + 1;
                    r3 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36860;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x368b0;
                        continue;
                    }
                    r2 = r2 + -1;
                case 0x36840:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x36824;
                        continue;
                    }
                case 0x36850:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3685c:
                    r2 = r6 + r0;
                case 0x36860:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x368bc;
                        continue;
                    }
                case 0x3686c:
                    r5 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x368b0;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x36850;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x368a4;
                    continue;
                case 0x36894:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x36850;
                        continue;
                    }
                case 0x368a4:
                    r4 = r4 + 1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x36894;
                        continue;
                    }
                case 0x368b0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x368bc:
                    r5 = r5 & 255;
                    r3 = r5 << 8;
                    r3 = r3 | r5;
                    r9 = r3 << 16;
                    r8 = 65278 << 16;
                    r6 = 32896 << 16;
                    r9 = r9 | r3;
                    r8 = r8 | 65279;
                    r6 = r6 | 32896;
                case 0x368e0:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r9 ^ r3;
                    r5 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r5 & r3;
                    r3 = r3 & r6;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3686c;
                        continue;
                    }
                    r2 = r2 + -4;
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x368e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3686c;
                    continue;
                case 0x36a00:
                    pc=0x36a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36a00() throws ExecutionException { /* 0x36a00 - 0x36c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36a00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36c00:
                    pc=0x36c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36c00() throws ExecutionException { /* 0x36c00 - 0x36e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36c00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36e00:
                    pc=0x36e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36e00() throws ExecutionException { /* 0x36e00 - 0x37000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36e00:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x36e28;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x36e28:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37000:
                    pc=0x37000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37000() throws ExecutionException { /* 0x37000 - 0x37200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37000:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r6 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 36;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x37030;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x37030:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37200:
                    pc=0x37200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37200() throws ExecutionException { /* 0x37200 - 0x37400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37228;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x372c8;
                        continue;
                    }
                case 0x37228:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x37274;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                case 0x37254:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37274:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x372e8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37254;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x372c8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x372d8;
                    pc=0x32600;
                    run_32600(); return;
                case 0x372d8:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x37228;
                    continue;
                case 0x372e8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x37400:
                    pc=0x37400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37400() throws ExecutionException { /* 0x37400 - 0x37600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37434;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x374cc;
                        continue;
                    }
                case 0x37434:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x37484;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                case 0x37460:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37484:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x374dc;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37460;
                        continue;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x374e4;
                    continue;
                case 0x374cc:
                    /* Next insn is delay slot */ 
                    r31=0x374d4;
                    pc=0x32600;
                    run_32600(); return;
                case 0x374d4:
                    /* Next insn is delay slot */ 
                    pc=0x37434;
                    continue;
                case 0x374dc:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r17 + r0;
                case 0x374e4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x37600:
                    pc=0x37600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37600() throws ExecutionException { /* 0x37600 - 0x37800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37800;
                    run_37800(); return;
                case 0x37800:
                    pc=0x37800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37800() throws ExecutionException { /* 0x37800 - 0x37a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37800:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    r20 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37b4c;
                        run_37a00(); return;
                    }
                    r21 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37848;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x37848:
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r20 + 11;
                    r17 = r0 + -4;
                    r4 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    r19 = r16 + -8;
                    r17 = r3 & r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3798c;
                        continue;
                    }
                    r4 = r0 + 16;
                    r18 = r0 + 16;
                case 0x37870:
                    r2 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x379a0;
                        continue;
                    }
                    r2 = r17 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x379e0;
                        continue;
                    }
                    r23 = 7 << 16;
                    r23 = r23 + -31984;
                    r5 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r2 = r19 + r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37b84;
                        run_37a00(); return;
                    }
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r0 + -2;
                    r7 = r6 & r7;
                    r7 = r2 + r7;
                    r7 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r7 = r7 & 1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x379b4;
                        continue;
                    }
                    r6 = r0 + r0;
                    r2 = r0 + r0;
                case 0x378cc:
                    r3 = r3 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37aa4;
                        run_37a00(); return;
                    }
                    r22 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r22 = r19 - r22;
                    r7 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r3 = r7 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37c98;
                        run_37c00(); return;
                    }
                    r3 = r3 + r17;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x37ca4;
                        run_37c00(); return;
                    }
                    r23 = r6 + r3;
                    r5 = r23 < r4 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a94;
                        run_37a00(); return;
                    }
                    r3 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x37928:
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37c70;
                        run_37c00(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37be4;
                        run_37a00(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37dc0;
                        run_37c00(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x37be8;
                    run_37a00(); return;
                case 0x3798c:
                    r18 = r0 + -8;
                    r18 = r2 & r18;
                    r4 = r18 + r0;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x37870;
                        continue;
                    }
                case 0x379a0:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37a20;
                    run_37a00(); return;
                case 0x379b4:
                    r7 = r0 + -4;
                    r6 = r6 & r7;
                    r7 = r6 + r17;
                    r8 = r7 < r4 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x378cc;
                        continue;
                    }
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r17 = r7 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                case 0x379e0:
                    r6 = r17 - r18;
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a54;
                        run_37a00(); return;
                    }
                    r3 = r3 & 1;
                    r3 = r3 | r17;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r17 = r19 + r17;
                case 0x37a00:
                    pc=0x37a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37a00() throws ExecutionException { /* 0x37a00 - 0x37c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37a00:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                case 0x37a10:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37a1c;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x37a1c:
                    r2 = r16 + r0;
                case 0x37a20:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37a54:
                    r3 = r3 & 1;
                    r5 = r19 + r18;
                    r2 = r6 | 1;
                    r18 = r3 | r18;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r18;
                    r6 = r5 + r6;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x37a8c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x37a8c:
                    /* Next insn is delay slot */ 
                    pc=0x37a10;
                    continue;
                case 0x37a94:
                    r23 = r3 + r0;
                case 0x37a98:
                    r4 = r23 < r4 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37928;
                        run_37800(); return;
                    }
                case 0x37aa4:
                    r5 = r20 + r0;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37ab4;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x37ab4:
                    r20 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37e8c;
                        run_37e00(); return;
                    }
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r2 + -8;
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    r2 = r19 + r2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37da8;
                        run_37c00(); return;
                    }
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37c58;
                        run_37c00(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37bb0;
                        continue;
                    }
                    r2 = r20 + r0;
                    r3 = r16 + r0;
                case 0x37b00:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                case 0x37b24:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37b34;
                    pc=0x34400;
                    run_34400(); return;
                case 0x37b34:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37b40;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x37b40:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37a20;
                    continue;
                case 0x37b4c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r6 + r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x37b84:
                    r6 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r6 = r6 & r2;
                    r2 = r6 + r17;
                    r7 = r18 + 16;
                    r7 = r2 < r7 ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37c1c;
                        run_37c00(); return;
                    }
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x378cc;
                    run_37800(); return;
                case 0x37bb0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d74;
                        run_37c00(); return;
                    }
                    r2 = r20 + 8;
                    r3 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x37b00;
                    continue;
                case 0x37be4:
                    r3 = r19 + r0;
                case 0x37be8:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x37c00:
                    pc=0x37c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37c00() throws ExecutionException { /* 0x37c00 - 0x37e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37c00:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r16 = r19 + r0;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x379e0;
                    run_37800(); return;
                case 0x37c1c:
                    r2 = r2 - r18;
                    r19 = r19 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r19;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x37c4c;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x37c4c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37a20;
                    run_37a00(); return;
                case 0x37c58:
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37c68;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x37c68:
                    /* Next insn is delay slot */ 
                    pc=0x37b24;
                    run_37a00(); return;
                case 0x37c70:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37c80;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x37c80:
                    r16 = r19 + r0;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x379e0;
                    run_37800(); return;
                case 0x37c98:
                    r23 = r3 + r17;
                    /* Next insn is delay slot */ 
                    pc=0x37a98;
                    run_37a00(); return;
                case 0x37ca4:
                    r30 = r6 + r3;
                    r2 = r18 + 16;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a94;
                        run_37a00(); return;
                    }
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37e40;
                        run_37e00(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37e34;
                        run_37e00(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37e58;
                        run_37e00(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                case 0x37d14:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x37d38:
                    r2 = r30 - r18;
                    r3 = r22 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x37d68;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x37d68:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37a20;
                    run_37a00(); return;
                case 0x37d74:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37df4;
                        continue;
                    }
                    r2 = r20 + 16;
                    r3 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x37b00;
                    run_37a00(); return;
                case 0x37da8:
                    r4 = readPages[(r20+-4)>>>12][((r20+-4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r4 & r2;
                    r17 = r17 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x379e0;
                    run_37800(); return;
                case 0x37dc0:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37e14;
                        run_37e00(); return;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x37be8;
                    run_37a00(); return;
                case 0x37df4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r16 + 24;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                case 0x37e00:
                    pc=0x37e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37e00() throws ExecutionException { /* 0x37e00 - 0x38000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37e00:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r20 + 24;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x37b00;
                    run_37a00(); return;
                case 0x37e14:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x37be8;
                    run_37a00(); return;
                case 0x37e34:
                    r3 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37d14;
                    run_37c00(); return;
                case 0x37e40:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37e50;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x37e50:
                    /* Next insn is delay slot */ 
                    pc=0x37d38;
                    run_37c00(); return;
                case 0x37e58:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37ea4;
                        continue;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x37d14;
                    run_37c00(); return;
                case 0x37e8c:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37e98;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x37e98:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37a20;
                    run_37a00(); return;
                case 0x37ea4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x37d14;
                    run_37c00(); return;
                case 0x38000:
                    pc=0x38000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38000() throws ExecutionException { /* 0x38000 - 0x38200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38000:
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 9;
                    r3 = r3 & 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x38020;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38020:
                    /* Next insn is delay slot */ 
                    pc=0x31200;
                    run_31200(); return;
                case 0x38200:
                    pc=0x38200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38200() throws ExecutionException { /* 0x38200 - 0x38400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38200:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38238;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x383a0;
                        continue;
                    }
                case 0x38238:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3826c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x3826c:
                    r4 = r2 & 32;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3837c;
                        continue;
                    }
                    r4 = r2 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3833c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x382c4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x382b0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x382b0;
                    pc=0x34400;
                    run_34400(); return;
                case 0x382b0:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3846c;
                        run_38400(); return;
                    }
                case 0x382c4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38498;
                        run_38400(); return;
                    }
                case 0x382d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r19 = tmp;
                    r18 = r19 & 65535;
                    r2 = r18 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x383b0;
                        continue;
                    }
                case 0x382ec:
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r6;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3830c;
                    return;
                case 0x3830c:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x38364;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x3831c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3833c:
                    r4 = r2 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x384b0;
                        run_38400(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3842c;
                        run_38400(); return;
                    }
                    r3 = r3 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x382c4;
                    continue;
                case 0x38364:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x383f8;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3837c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x383a0:
                    /* Next insn is delay slot */ 
                    r31=0x383a8;
                    pc=0x32600;
                    run_32600(); return;
                case 0x383a8:
                    /* Next insn is delay slot */ 
                    pc=0x38238;
                    continue;
                case 0x383b0:
                    r2 = r0 + 1;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + -32768;
                    /* Next insn is delay slot */ 
                    r31=0x383cc;
                    pc=0x35000;
                    run_35000(); return;
                case 0x383cc:
                    r18 = r18 & 9;
                    r2 = r0 + 9;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r19&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x382ec;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x383f0;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x383f0:
                    /* Next insn is delay slot */ 
                    pc=0x382ec;
                    continue;
                case 0x383f8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x38400:
                    pc=0x38400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38400() throws ExecutionException { /* 0x38400 - 0x38600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38400:
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3842c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3843c;
                    pc=0x31000;
                    run_31000(); return;
                case 0x3843c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3837c;
                        run_38200(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r3 = r3 & 65527;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    r3 = r3 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x382c4;
                    run_38200(); return;
                case 0x3846c:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38498:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x384a8;
                    pc=0x35800;
                    run_35800(); return;
                case 0x384a8:
                    /* Next insn is delay slot */ 
                    pc=0x382d4;
                    run_38200(); return;
                case 0x384b0:
                    r2 = r0 + 9;
                    r3 = r3 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3831c;
                    run_38200(); return;
                case 0x38600:
                    pc=0x38600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38600() throws ExecutionException { /* 0x38600 - 0x38800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38630;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38684;
                        continue;
                    }
                case 0x38630:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38640;
                    pc=0x38200;
                    run_38200(); return;
                case 0x38640:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38694;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x3866c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38684:
                    /* Next insn is delay slot */ 
                    r31=0x3868c;
                    pc=0x32600;
                    run_32600(); return;
                case 0x3868c:
                    /* Next insn is delay slot */ 
                    pc=0x38630;
                    continue;
                case 0x38694:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3866c;
                    continue;
                case 0x38800:
                    pc=0x38800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38800() throws ExecutionException { /* 0x38800 - 0x38a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x38600;
                    run_38600(); return;
                case 0x38a00:
                    pc=0x38a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38a00() throws ExecutionException { /* 0x38a00 - 0x38c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38a1c;
                    pc=0x3dea0;
                    run_3de00(); return;
                case 0x38a1c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x38a44;
                        continue;
                    }
                    r3 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r3;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38a44:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38c00:
                    pc=0x38c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38c00() throws ExecutionException { /* 0x38c00 - 0x38e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38c00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38e00:
                    pc=0x38e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38e00() throws ExecutionException { /* 0x38e00 - 0x39000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38e00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    r18 = r6 + r0;
                    r17 = r7 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38e50;
                        continue;
                    }
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x38e4c;
                    pc=0x3dfa0;
                    run_3de00(); return;
                case 0x38e4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                case 0x38e50:
                    r3 = r0 + -4097;
                    r2 = r2 & r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r19 + r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3dee0;
                    run_3de00(); return;
                case 0x39000:
                    pc=0x39000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39000() throws ExecutionException { /* 0x39000 - 0x39200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3901c;
                    pc=0x3dfa0;
                    run_3de00(); return;
                case 0x3901c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3904c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 | 4096;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3904c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39200:
                    pc=0x39200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39200() throws ExecutionException { /* 0x39200 - 0x39400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39200:
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3de60;
                    run_3de00(); return;
                case 0x39400:
                    pc=0x39400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39400() throws ExecutionException { /* 0x39400 - 0x39600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39400:
                    r3 = r5 | r4;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x394a4;
                        continue;
                    }
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r7 = 32896 << 16;
                    r4 = r6 & r4;
                    r7 = r7 | 32896;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x394a4;
                        continue;
                    }
                case 0x39440:
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x394a4;
                        continue;
                    }
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39440;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x394a4;
                    continue;
                case 0x394a0:
                    r2 = r4 + r0;
                case 0x394a4:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x394a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39600:
                    pc=0x39600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39600() throws ExecutionException { /* 0x39600 - 0x39800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39600:
                    r2 = r4 | r5;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39668;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x39644;
                    continue;
                case 0x3961c:
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39654;
                        continue;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3968c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3968c;
                        continue;
                    }
                case 0x39644:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3961c;
                        continue;
                    }
                case 0x39654:
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39660:
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39654;
                        continue;
                    }
                case 0x39668:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39660;
                        continue;
                    }
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3968c:
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39800:
                    pc=0x39800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39800() throws ExecutionException { /* 0x39800 - 0x39a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39800:
                    r3 = r4 | r5;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39890;
                        continue;
                    }
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r10 = 65278 << 16;
                    r10 = r10 | 65279;
                    r4 = ~(r0 | r6);
                    r3 = r6 + r10;
                    r9 = 32896 << 16;
                    r3 = r4 & r3;
                    r9 = r9 | 32896;
                    r3 = r3 & r9;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39890;
                        continue;
                    }
                    r3 = r2 + r0;
                case 0x39844:
                    r3 = r3 + 4;
                    r5 = r5 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = ~(r0 | r6);
                    r7 = r6 + r10;
                    r7 = r8 & r7;
                    r7 = r7 & r9;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39844;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39894;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39890:
                    r3 = r2 + r0;
                case 0x39894:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39894;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39a00:
                    pc=0x39a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39a00() throws ExecutionException { /* 0x39a00 - 0x39c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39a00:
                    r29 = r29 + -24;
                    r2 = (r5&0xffffffffL) < (143&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39edc;
                        run_39e00(); return;
                    }
                    r2 = 6 << 16;
                    r3 = r5 << 2;
                    r2 = r2 + 27328;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x39a34:
                    r2 = 6 << 16;
                    r2 = r2 + 25744;
                case 0x39a3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39a4c:
                    r2 = 6 << 16;
                    r2 = r2 + 25736;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39a5c:
                    r2 = 6 << 16;
                    r2 = r2 + 27228;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39a6c:
                    r2 = 6 << 16;
                    r2 = r2 + 27204;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39a7c:
                    r2 = 6 << 16;
                    r2 = r2 + 27184;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39a8c:
                    r2 = 6 << 16;
                    r2 = r2 + 26424;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39a9c:
                    r2 = 6 << 16;
                    r2 = r2 + 27132;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39aac:
                    r2 = 6 << 16;
                    r2 = r2 + 27156;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39abc:
                    r2 = 6 << 16;
                    r2 = r2 + 26736;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39acc:
                    r2 = 6 << 16;
                    r2 = r2 + 27284;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39adc:
                    r2 = 6 << 16;
                    r2 = r2 + 25960;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39aec:
                    r2 = 6 << 16;
                    r2 = r2 + 25904;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39afc:
                    r2 = 6 << 16;
                    r2 = r2 + 26168;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b0c:
                    r2 = 6 << 16;
                    r2 = r2 + 26380;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b1c:
                    r2 = 6 << 16;
                    r2 = r2 + 26152;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b2c:
                    r2 = 6 << 16;
                    r2 = r2 + 27304;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b3c:
                    r2 = 6 << 16;
                    r2 = r2 + 26236;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b4c:
                    r2 = 6 << 16;
                    r2 = r2 + 26604;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b5c:
                    r2 = 6 << 16;
                    r2 = r2 + 27096;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b6c:
                    r2 = 6 << 16;
                    r2 = r2 + 27072;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b7c:
                    r2 = 6 << 16;
                    r2 = r2 + 27052;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b8c:
                    r2 = 6 << 16;
                    r2 = r2 + 27028;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39b9c:
                    r2 = 6 << 16;
                    r2 = r2 + 26996;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39bac:
                    r2 = 6 << 16;
                    r2 = r2 + 26964;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39bbc:
                    r2 = 6 << 16;
                    r2 = r2 + 26916;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39bcc:
                    r2 = 6 << 16;
                    r2 = r2 + 26888;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39bdc:
                    r2 = 6 << 16;
                    r2 = r2 + 27248;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39bec:
                    r2 = 6 << 16;
                    r2 = r2 + 26864;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    continue;
                case 0x39bfc:
                    r2 = 6 << 16;
                case 0x39c00:
                    pc=0x39c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39c00() throws ExecutionException { /* 0x39c00 - 0x39e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39c00:
                    r2 = r2 + 26836;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c0c:
                    r2 = 6 << 16;
                    r2 = r2 + 26816;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c1c:
                    r2 = 6 << 16;
                    r2 = r2 + 26788;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c2c:
                    r2 = 6 << 16;
                    r2 = r2 + 26776;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c3c:
                    r2 = 6 << 16;
                    r2 = r2 + 26756;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c4c:
                    r2 = 6 << 16;
                    r2 = r2 + 26720;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c5c:
                    r2 = 6 << 16;
                    r2 = r2 + 26696;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c6c:
                    r2 = 6 << 16;
                    r2 = r2 + 26676;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c7c:
                    r2 = 6 << 16;
                    r2 = r2 + 26652;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c8c:
                    r2 = 6 << 16;
                    r2 = r2 + 26636;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39c9c:
                    r2 = 6 << 16;
                    r2 = r2 + 26628;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39cac:
                    r2 = 6 << 16;
                    r2 = r2 + 26592;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39cbc:
                    r2 = 6 << 16;
                    r2 = r2 + 26572;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39ccc:
                    r2 = 6 << 16;
                    r2 = r2 + 26544;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39cdc:
                    r2 = 6 << 16;
                    r2 = r2 + 26524;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39cec:
                    r2 = 6 << 16;
                    r2 = r2 + 26508;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39cfc:
                    r2 = 6 << 16;
                    r2 = r2 + 26496;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d0c:
                    r2 = 6 << 16;
                    r2 = r2 + 26480;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d1c:
                    r2 = 6 << 16;
                    r2 = r2 + 26456;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d2c:
                    r2 = 6 << 16;
                    r2 = r2 + 26440;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d3c:
                    r2 = 6 << 16;
                    r2 = r2 + 26400;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d4c:
                    r2 = 6 << 16;
                    r2 = r2 + 26364;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d5c:
                    r2 = 6 << 16;
                    r2 = r2 + 26348;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d6c:
                    r2 = 6 << 16;
                    r2 = r2 + 26324;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d7c:
                    r2 = 6 << 16;
                    r2 = r2 + 26304;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d8c:
                    r2 = 6 << 16;
                    r2 = r2 + 26272;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39d9c:
                    r2 = 6 << 16;
                    r2 = r2 + 26216;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39dac:
                    r2 = 6 << 16;
                    r2 = r2 + 26200;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39dbc:
                    r2 = 6 << 16;
                    r2 = r2 + 26136;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39dcc:
                    r2 = 6 << 16;
                    r2 = r2 + 26120;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39ddc:
                    r2 = 6 << 16;
                    r2 = r2 + 26100;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39dec:
                    r2 = 6 << 16;
                    r2 = r2 + 26088;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39dfc:
                    r2 = 6 << 16;
                case 0x39e00:
                    pc=0x39e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39e00() throws ExecutionException { /* 0x39e00 - 0x3a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39e00:
                    r2 = r2 + 26064;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e0c:
                    r2 = 6 << 16;
                    r2 = r2 + 26052;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e1c:
                    r2 = 6 << 16;
                    r2 = r2 + 26032;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e2c:
                    r2 = 6 << 16;
                    r2 = r2 + 26012;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e3c:
                    r2 = 6 << 16;
                    r2 = r2 + 25992;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e4c:
                    r2 = 6 << 16;
                    r2 = r2 + 25948;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e5c:
                    r2 = 6 << 16;
                    r2 = r2 + 25932;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e6c:
                    r2 = 6 << 16;
                    r2 = r2 + 25884;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e7c:
                    r2 = 6 << 16;
                    r2 = r2 + 25864;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e8c:
                    r2 = 6 << 16;
                    r2 = r2 + 25836;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39e9c:
                    r2 = 6 << 16;
                    r2 = r2 + 25824;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39eac:
                    r2 = 6 << 16;
                    r2 = r2 + 25800;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39ebc:
                    r2 = 6 << 16;
                    r2 = r2 + 25784;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39ecc:
                    r2 = 6 << 16;
                    r2 = r2 + 25756;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39edc:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f10;
                        continue;
                    }
                case 0x39ee4:
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39ef8;
                    pc=0x3b000;
                    run_3b000(); return;
                case 0x39ef8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39a3c;
                        run_39a00(); return;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 23396;
                    /* Next insn is delay slot */ 
                    pc=0x39a3c;
                    run_39a00(); return;
                case 0x39f10:
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39ee4;
                    continue;
                case 0x3a000:
                    pc=0x3a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a000() throws ExecutionException { /* 0x3a000 - 0x3a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39a00;
                    run_39a00(); return;
                case 0x3a200:
                    pc=0x3a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a200() throws ExecutionException { /* 0x3a200 - 0x3a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a200:
                    r12 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a214;
                    continue;
                case 0x3a210:
                    r2 = r3 + r0;
                case 0x3a214:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a210;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x3a3cc;
                        continue;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x3a3e0;
                        continue;
                    }
                    r25 = r0 + r0;
                case 0x3a254:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a37c;
                        continue;
                    }
                    r24 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x3a274;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x3a274:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                case 0x3a280:
                    r10 = r0 + r0;
                    r2 = r0 + r0;
                    r14 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3a2dc;
                    continue;
                case 0x3a294:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a31c;
                        continue;
                    }
                case 0x3a2a4:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a358;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a358;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x3a34c;
                        continue;
                    }
                case 0x3a2c0:
                    { long hilo = (long)(r2) * ((long)r15); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x3a2d0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x3a2dc:
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r11 = r9 & 4;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a294;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a31c;
                        continue;
                    }
                    if(r9 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x3a364;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x3a310:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2a4;
                        continue;
                    }
                case 0x3a31c:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a3b8;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a3ac;
                        continue;
                    }
                case 0x3a32c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a374;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a340;
                        continue;
                    }
                    r5 = r3 + -1;
                case 0x3a340:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a34c:
                    r9 = r24 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2c0;
                        continue;
                    }
                case 0x3a358:
                    r10 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3a2d0;
                    continue;
                case 0x3a364:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x3a310;
                    continue;
                case 0x3a374:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a37c:
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a3f4;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a450;
                        run_3a400(); return;
                    }
                    r13 = 6553 << 16;
                    r24 = r0 + 5;
                    r13 = r13 | 39321;
                    r15 = r0 + 10;
                    r7 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x3a280;
                    continue;
                case 0x3a3ac:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x3a32c;
                    continue;
                case 0x3a3b8:
                    r2 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3a32c;
                    continue;
                case 0x3a3cc:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3a254;
                    continue;
                case 0x3a3e0:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a254;
                    continue;
                case 0x3a3f4:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                case 0x3a400:
                    pc=0x3a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a400() throws ExecutionException { /* 0x3a400 - 0x3a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a400:
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a42c;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a450;
                        continue;
                    }
                    r13 = 8191 << 16;
                    r24 = r0 + 7;
                    r13 = r13 | 65535;
                    r15 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3a280;
                    run_3a200(); return;
                case 0x3a42c:
                    r13 = 4095 << 16;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 15;
                    r3 = r3 + 2;
                    r13 = r13 | 65535;
                    r15 = r0 + 16;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3a280;
                    run_3a200(); return;
                case 0x3a450:
                    r13 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x3a460;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x3a460:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x3a280;
                    run_3a200(); return;
                case 0x3a600:
                    pc=0x3a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a600() throws ExecutionException { /* 0x3a600 - 0x3a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x3a800:
                    pc=0x3a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a800() throws ExecutionException { /* 0x3a800 - 0x3aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3de60;
                    run_3de00(); return;
                case 0x3aa00:
                    pc=0x3aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3aa00() throws ExecutionException { /* 0x3aa00 - 0x3ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3aa00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r29 + 40;
                    r3 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r5 = r2 + r0;
                    r7 = r6 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3aa38;
                    pc=0x3de20;
                    run_3de00(); return;
                case 0x3aa38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ac00:
                    pc=0x3ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ac00() throws ExecutionException { /* 0x3ac00 - 0x3ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ac00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3dea0;
                    run_3de00(); return;
                case 0x3ae00:
                    pc=0x3ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ae00() throws ExecutionException { /* 0x3ae00 - 0x3b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ae00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3dee0;
                    run_3de00(); return;
                case 0x3b000:
                    pc=0x3b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b000() throws ExecutionException { /* 0x3b000 - 0x3b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b000:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b200:
                    pc=0x3b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b200() throws ExecutionException { /* 0x3b200 - 0x3b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b200:
                    r29 = r29 + -1328;
                    writePages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff] = r31;
                    writePages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff] = r22;
                    writePages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff] = r21;
                    r22 = r5 + r0;
                    r21 = r4 + r0;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r6;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r7;
                    writePages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff] = r30;
                    writePages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff] = r23;
                    writePages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff] = r20;
                    writePages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff] = r19;
                    writePages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff] = r18;
                    writePages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff] = r17;
                    writePages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x3b244;
                    pc=0x50400;
                    run_50400(); return;
                case 0x3b244:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3b25c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3b25c:
                    writePages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff] = r2;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b278;
                        continue;
                    }
                    r2 = readPages[(r21+56)>>>12][((r21+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5ec;
                        run_3b400(); return;
                    }
                case 0x3b278:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b2ac;
                        continue;
                    }
                    r4 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x3b2ac:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b458;
                        run_3b400(); return;
                    }
                    r4 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b458;
                        run_3b400(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3b488;
                        run_3b400(); return;
                    }
                case 0x3b2d8:
                    r3 = r29 + 40;
                    r2 = 6 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r3;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r0;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = r0;
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = r0;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r0;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r0;
                    r8 = r3 + r0;
                    r19 = r2 + 28296;
                case 0x3b30c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3baa4;
                        run_3ba00(); return;
                    }
                case 0x3b324:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3b344;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3b3b0;
                    continue;
                case 0x3b33c:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3b358;
                        continue;
                    }
                case 0x3b344:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b33c;
                        continue;
                    }
                case 0x3b358:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b3b0;
                        continue;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b580;
                        run_3b400(); return;
                    }
                    r8 = r8 + 8;
                case 0x3b3a0:
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r3;
                case 0x3b3b0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5a8;
                        run_3b400(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x3b3e0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x3b3e8:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c010;
                        run_3c000(); return;
                    }
                    r4 = 6 << 16;
                    r2 = r2 << 2;
                case 0x3b400:
                    pc=0x3b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b400() throws ExecutionException { /* 0x3b400 - 0x3b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b400:
                    r4 = r4 + 27924;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x3b418:
                    r17 = r17 | 16;
                case 0x3b41c:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3b428:
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c000;
                        run_3c000(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                case 0x3b448:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3b458:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b468;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3b468:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b548;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3b2d8;
                        run_3b200(); return;
                    }
                case 0x3b488:
                    addr=r22+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b2d8;
                        run_3b200(); return;
                    }
                    addr=r29+1078;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+36)>>>12][((r22+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r29 + 40;
                    r6 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r7 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r2;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1064;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r2;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r2;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b4f4;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3b4f4:
                    r16 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b518;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    r31=0x3b510;
                    pc=0x31000;
                    run_31000(); return;
                case 0x3b510:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d578;
                        run_3d400(); return;
                    }
                case 0x3b518:
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b53c;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3b53c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b54c;
                    continue;
                case 0x3b548:
                    r2 = r0 + -1;
                case 0x3b54c:
                    r31 = readPages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff];
                    r30 = readPages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff];
                    r23 = readPages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff];
                    r22 = readPages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff];
                    r21 = readPages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff];
                    r20 = readPages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff];
                    r19 = readPages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff];
                    r18 = readPages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff];
                    r17 = readPages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff];
                    r16 = readPages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff];
                    r29 = r29 + 1328;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b580:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3b594;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3b594:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        continue;
                    }
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3b3a0;
                    run_3b200(); return;
                case 0x3b5a8:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3b5cc;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3b5cc:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b548;
                        continue;
                    }
                    r2 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3b54c;
                    continue;
                case 0x3b5ec:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b5f8;
                    pc=0x32600;
                    run_32600(); return;
                case 0x3b5f8:
                    /* Next insn is delay slot */ 
                    pc=0x3b278;
                    run_3b200(); return;
                case 0x3b600:
                    pc=0x3b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b600() throws ExecutionException { /* 0x3b600 - 0x3b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b600:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3b610:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0a4;
                        run_3d000(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cf84;
                        run_3ce00(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x3b650;
                    pc=0x36800;
                    run_36800(); return;
                case 0x3b650:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d238;
                        run_3d200(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ce7c;
                        run_3ce00(); return;
                    }
                case 0x3b670:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cfa0;
                        run_3ce00(); return;
                    }
                case 0x3b680:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                case 0x3b694:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b6ac;
                        continue;
                    }
                case 0x3b69c:
                    r2 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                case 0x3b6ac:
                    r4 = r17 & 2;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b6cc;
                        continue;
                    }
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                case 0x3b6cc:
                    r2 = r17 & 132;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c064;
                        run_3c000(); return;
                    }
                    r4 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c064;
                        run_3c000(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cfac;
                        run_3ce00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3b72c;
                    continue;
                case 0x3b718:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b788;
                        continue;
                    }
                case 0x3b72c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b718;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3b764;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3b764:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b72c;
                        continue;
                    }
                case 0x3b788:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6e4;
                        run_3c600(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x3b7b8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b7f4;
                        continue;
                    }
                    r3 = r29 + 1206;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c560;
                        run_3c400(); return;
                    }
                    r8 = r8 + 8;
                case 0x3b7f4:
                    r3 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b838;
                        run_3b800(); return;
                    }
                case 0x3b800:
                    pc=0x3b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b800() throws ExecutionException { /* 0x3b800 - 0x3ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b800:
                    r3 = r29 + 1204;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c534;
                        run_3c400(); return;
                    }
                    r8 = r8 + 8;
                case 0x3b838:
                    r4 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3c3cc;
                        run_3c200(); return;
                    }
                case 0x3b848:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b918;
                        continue;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd0c;
                        run_3cc00(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 28280;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3b894;
                    continue;
                case 0x3b880:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b8f0;
                        continue;
                    }
                case 0x3b894:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b880;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3b8cc;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3b8cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b894;
                        continue;
                    }
                case 0x3b8f0:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c508;
                        run_3c400(); return;
                    }
                    r8 = r8 + 8;
                case 0x3b918:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c264;
                        run_3c200(); return;
                    }
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c168;
                        run_3c000(); return;
                    }
                case 0x3b950:
                    r8 = r8 + 8;
                case 0x3b954:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba50;
                        run_3ba00(); return;
                    }
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba50;
                        run_3ba00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0e8;
                        run_3d000(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3b9ac;
                    continue;
                case 0x3b998:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba08;
                        run_3ba00(); return;
                    }
                case 0x3b9ac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r6 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b998;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3b9e4;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3b9e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x3ba00:
                    pc=0x3ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ba00() throws ExecutionException { /* 0x3ba00 - 0x3bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ba00:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b9ac;
                        run_3b800(); return;
                    }
                case 0x3ba08:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba50;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3ba44;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3ba44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                case 0x3ba50:
                    r3 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba6c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x3ba6c:
                    r4 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c194;
                        run_3c000(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                case 0x3ba8c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b324;
                        run_3b200(); return;
                    }
                case 0x3baa4:
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3b3b0;
                    run_3b200(); return;
                case 0x3bab0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b41c;
                        run_3b400(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3bac8:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3bad8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4fc;
                        run_3d400(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb2c;
                        continue;
                    }
                case 0x3bafc:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bafc;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ced8;
                        run_3ce00(); return;
                    }
                case 0x3bb2c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e8;
                    run_3b200(); return;
                case 0x3bb38:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bf8c;
                        run_3be00(); return;
                    }
                case 0x3bb50:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x3bb6c:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb7c;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x3bb7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c1c0;
                        run_3c000(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c1c0;
                        run_3c000(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c5b4;
                        run_3c400(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c5b4;
                        run_3c400(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r16 = r29 + 1103;
                case 0x3bbb4:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bbcc;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x3bbcc:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b694;
                    run_3b600(); return;
                case 0x3bbdc:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bfd0;
                        run_3be00(); return;
                    }
                case 0x3bbf4:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x3bc00:
                    pc=0x3bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3bc00() throws ExecutionException { /* 0x3bc00 - 0x3be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3bc00:
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3bc18:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x3bc20:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bc20;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3b3e8;
                    run_3b200(); return;
                case 0x3bc50:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bebc;
                        run_3be00(); return;
                    }
                case 0x3bc68:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x3bc7c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca34;
                        run_3ca00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3bc94:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3bca4:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3bcb4:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r3 = 6 << 16;
                    r3 = r3 + 24008;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3bd08:
                    r2 = r17 & 8;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc68;
                        run_3cc00(); return;
                    }
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x3bd2c:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3bd64;
                    pc=0x53400;
                    run_53400(); return;
                case 0x3bd64:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca50;
                        run_3ca00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3d144;
                        run_3d000(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x3bd9c:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cec8;
                        run_3ce00(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 27900;
                case 0x3bdb0:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b694;
                    run_3b600(); return;
                case 0x3bdd8:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3bde8:
                    r2 = 6 << 16;
                    r2 = r2 + 23988;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                case 0x3be00:
                    pc=0x3be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3be00() throws ExecutionException { /* 0x3be00 - 0x3c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3be00:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bf04;
                        continue;
                    }
                case 0x3be0c:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x3be20:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c5c4;
                        run_3c400(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c5c4;
                        run_3c400(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3be58:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x3be78:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=0x3b6ac;
                    run_3b600(); return;
                case 0x3bea0:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bc68;
                        run_3bc00(); return;
                    }
                case 0x3bebc:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc9c;
                        run_3cc00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3bc7c;
                    run_3bc00(); return;
                case 0x3bee0:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = 6 << 16;
                    r3 = r3 + 24008;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3be0c;
                        continue;
                    }
                case 0x3bf04:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc54;
                        run_3cc00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3be20;
                    continue;
                case 0x3bf28:
                    r2 = r17 & 16;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c034;
                        run_3c000(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c034;
                        run_3c000(); return;
                    }
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3b30c;
                    run_3b200(); return;
                case 0x3bf78:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bb50;
                        run_3ba00(); return;
                    }
                case 0x3bf8c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc7c;
                        run_3cc00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3bfbc:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bbf4;
                        run_3ba00(); return;
                    }
                case 0x3bfd0:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ccb0;
                        run_3cc00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3c000:
                    pc=0x3c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c000() throws ExecutionException { /* 0x3c000 - 0x3c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c000:
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3c010:
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5a8;
                        run_3b400(); return;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3be78;
                    run_3be00(); return;
                case 0x3c034:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3b30c;
                    run_3b200(); return;
                case 0x3c064:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3b7b8;
                    run_3b600(); return;
                case 0x3c070:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c4b0;
                        run_3c400(); return;
                    }
                case 0x3c094:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c98c;
                        run_3c800(); return;
                    }
                    r8 = r8 + 8;
                case 0x3c0b4:
                    r4 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c9bc;
                        run_3c800(); return;
                    }
                    r8 = r8 + 8;
                case 0x3c0e4:
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c714;
                        run_3c600(); return;
                    }
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x3c120:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c4d8;
                        run_3c400(); return;
                    }
                case 0x3c138:
                    r8 = r8 + 8;
                case 0x3c13c:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r29 + 1188;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x3c150:
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b950;
                        run_3b800(); return;
                    }
                case 0x3c168:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c17c;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c17c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3b954;
                    run_3b800(); return;
                case 0x3c194:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c1a8;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c1a8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3ba8c;
                    run_3ba00(); return;
                case 0x3c1c0:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3c58c;
                        run_3c400(); return;
                    }
                    r6 = r29 + 1104;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3c214;
                        run_3c200(); return;
                    }
                    r5 = readPages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff];
                case 0x3c1e4:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c1e4;
                        continue;
                    }
                case 0x3c200:
                    pc=0x3c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c200() throws ExecutionException { /* 0x3c200 - 0x3c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c200:
                case 0x3c204:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x3bbb4;
                    run_3ba00(); return;
                case 0x3c214:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c214;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c204;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3c204;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x3bbb4;
                    run_3ba00(); return;
                case 0x3c264:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c070;
                        run_3c000(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c5d8;
                        run_3c400(); return;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 24120;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd20;
                        run_3cc00(); return;
                    }
                    r8 = r8 + 8;
                case 0x3c2cc:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c2f0;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b954;
                        run_3b800(); return;
                    }
                case 0x3c2f0:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cf18;
                        run_3ce00(); return;
                    }
                    r8 = r8 + 8;
                case 0x3c32c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b954;
                        run_3b800(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7b0;
                        run_3c600(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 28280;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3c378;
                    continue;
                case 0x3c364:
                    r8 = r8 + 8;
                case 0x3c368:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7bc;
                        run_3c600(); return;
                    }
                case 0x3c378:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c364;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c3b0;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c3b0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c368;
                    continue;
                case 0x3c3cc:
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b848;
                        run_3b800(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d1b8;
                        run_3d000(); return;
                    }
                    r4 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 28280;
                    r7 = r0 + 16;
                case 0x3c400:
                    pc=0x3c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c400() throws ExecutionException { /* 0x3c400 - 0x3c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c400:
                    /* Next insn is delay slot */ 
                    pc=0x3c41c;
                    continue;
                case 0x3c408:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c480;
                        continue;
                    }
                case 0x3c41c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c408;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3c458;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c458:
                    r7 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c41c;
                        continue;
                    }
                case 0x3c480:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca08;
                        run_3ca00(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3b848;
                    run_3b800(); return;
                case 0x3c4b0:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c094;
                        run_3c000(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c138;
                        run_3c000(); return;
                    }
                case 0x3c4d8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c4ec;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c4ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c13c;
                    run_3c000(); return;
                case 0x3c508:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c51c;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c51c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3b918;
                    run_3b800(); return;
                case 0x3c534:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c548;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c548:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3b838;
                    run_3b800(); return;
                case 0x3c560:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c574;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c574:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3b7f4;
                    run_3b600(); return;
                case 0x3c58c:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7d0;
                        run_3c600(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r16 = r29 + 1103;
                    /* Next insn is delay slot */ 
                    pc=0x3bbb4;
                    run_3ba00(); return;
                case 0x3c5b4:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=0x3bbb4;
                    run_3ba00(); return;
                case 0x3c5c4:
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3c5d8:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd4c;
                        run_3cc00(); return;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c608;
                        run_3c600(); return;
                    }
                case 0x3c600:
                    pc=0x3c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c600() throws ExecutionException { /* 0x3c600 - 0x3c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c600:
                    r20 = r4 + r0;
                case 0x3c608:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c63c;
                        continue;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cfcc;
                        run_3ce00(); return;
                    }
                    r8 = r8 + 8;
                case 0x3c63c:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cfc0;
                        run_3ce00(); return;
                    }
                case 0x3c644:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c838;
                        run_3c800(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ccd0;
                        run_3cc00(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 28280;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3c690;
                    continue;
                case 0x3c67c:
                    r8 = r8 + 8;
                case 0x3c680:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ccdc;
                        run_3cc00(); return;
                    }
                case 0x3c690:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c67c;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c6c8;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c6c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c680;
                    continue;
                case 0x3c6e4:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c6f8;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c6f8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3b7b8;
                    run_3b600(); return;
                case 0x3c714:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c13c;
                        run_3c000(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c9ec;
                        run_3c800(); return;
                    }
                    r4 = 6 << 16;
                    r23 = r4 + 28280;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3c75c;
                    continue;
                case 0x3c748:
                    r8 = r8 + 8;
                case 0x3c74c:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c9f4;
                        run_3c800(); return;
                    }
                case 0x3c75c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c748;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c794;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c794:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c74c;
                    continue;
                case 0x3c7b0:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 28280;
                case 0x3c7bc:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x3c150;
                    run_3c000(); return;
                case 0x3c7d0:
                    r6 = r29 + 1104;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x3c7dc:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x3c7e8;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x3c7e8:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7dc;
                        continue;
                    }
                case 0x3c800:
                    pc=0x3c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c800() throws ExecutionException { /* 0x3c800 - 0x3ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c800:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x3bbb4;
                    run_3ba00(); return;
                case 0x3c814:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c828;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c828:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x3c838:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c864;
                        continue;
                    }
                    r4 = r17 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c898;
                        continue;
                    }
                case 0x3c864:
                    r4 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r5 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cff8;
                        run_3ce00(); return;
                    }
                    r8 = r8 + 8;
                case 0x3c898:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c8b8;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x3c8b8:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c8ec;
                        continue;
                    }
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d06c;
                        run_3d000(); return;
                    }
                    r8 = r8 + 8;
                case 0x3c8ec:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d060;
                        run_3d000(); return;
                    }
                case 0x3c8f4:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b954;
                        run_3b800(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7b0;
                        run_3c600(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 28280;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3c938;
                    continue;
                case 0x3c924:
                    r8 = r8 + 8;
                case 0x3c928:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7bc;
                        run_3c600(); return;
                    }
                case 0x3c938:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c924;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c970;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c970:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c928;
                    continue;
                case 0x3c98c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c9a0;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c9a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c0b4;
                    run_3c000(); return;
                case 0x3c9bc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3c9d0;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3c9d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c0e4;
                    run_3c000(); return;
                case 0x3c9ec:
                    r5 = 6 << 16;
                    r23 = r5 + 28280;
                case 0x3c9f4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                case 0x3ca00:
                    pc=0x3ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ca00() throws ExecutionException { /* 0x3ca00 - 0x3cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ca00:
                    /* Next insn is delay slot */ 
                    pc=0x3c120;
                    run_3c000(); return;
                case 0x3ca08:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3ca1c;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3ca1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3b848;
                    run_3b800(); return;
                case 0x3ca34:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3ca50:
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3ca64;
                    pc=0x53400;
                    run_53400(); return;
                case 0x3ca64:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ce88;
                        run_3ce00(); return;
                    }
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d3f4;
                        run_3d200(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d314;
                        run_3d200(); return;
                    }
                case 0x3ca90:
                    r2 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d368;
                        run_3d200(); return;
                    }
                    f0 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = f0;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = f1;
                case 0x3cab8:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d168;
                        run_3d000(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d168;
                        run_3d000(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d35c;
                        run_3d200(); return;
                    }
                    r5 = r30 + r0;
                case 0x3cae0:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r5;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x3cb20;
                    pc=0x4ca00;
                    run_4ca00(); return;
                case 0x3cb20:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3cb44;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3cb50;
                        continue;
                    }
                case 0x3cb44:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d400;
                        run_3d400(); return;
                    }
                case 0x3cb50:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d1d8;
                        run_3d000(); return;
                    }
                case 0x3cb60:
                    f0 = r0;
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3d1cc;
                        run_3d000(); return;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cbbc;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x3cb9c:
                    r3 = r2 + 1;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cb9c;
                        continue;
                    }
                case 0x3cbbc:
                    r2 = r2 - r16;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d118;
                        run_3d000(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d5a0;
                        run_3d400(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d40c;
                        run_3d400(); return;
                    }
                case 0x3cbf0:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                case 0x3cc00:
                    pc=0x3cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3cc00() throws ExecutionException { /* 0x3cc00 - 0x3ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3cc00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d390;
                        run_3d200(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d3c8;
                        run_3d200(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d5bc;
                        run_3d400(); return;
                    }
                case 0x3cc20:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                case 0x3cc2c:
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0f8;
                        run_3d000(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b694;
                    run_3b600(); return;
                case 0x3cc54:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3be20;
                    run_3be00(); return;
                case 0x3cc68:
                    r2 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x3bd2c;
                    run_3bc00(); return;
                case 0x3cc7c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3cc9c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3bc7c;
                    run_3bc00(); return;
                case 0x3ccb0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bb6c;
                    run_3ba00(); return;
                case 0x3ccd0:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 28280;
                case 0x3ccdc:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c814;
                        run_3c800(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3c838;
                    run_3c800(); return;
                case 0x3cd0c:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 28280;
                    /* Next insn is delay slot */ 
                    pc=0x3b8f0;
                    run_3b800(); return;
                case 0x3cd20:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3cd34;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3cd34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c2cc;
                    run_3c200(); return;
                case 0x3cd4c:
                    r4 = 6 << 16;
                    r4 = r4 + 24120;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cee8;
                        run_3ce00(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x3cd88:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cdac;
                        continue;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cdac;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b954;
                        run_3b800(); return;
                    }
                case 0x3cdac:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d328;
                        run_3d200(); return;
                    }
                    r8 = r8 + 8;
                case 0x3cde8:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cf6c;
                        run_3ce00(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d028;
                        run_3d000(); return;
                    }
                case 0x3ce00:
                    pc=0x3ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ce00() throws ExecutionException { /* 0x3ce00 - 0x3d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ce00:
                    r5 = 6 << 16;
                    r23 = r5 + 28280;
                    r20 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3ce28;
                    continue;
                case 0x3ce14:
                    r8 = r8 + 8;
                case 0x3ce18:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d030;
                        run_3d000(); return;
                    }
                case 0x3ce28:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ce14;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3ce60;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3ce60:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3ce18;
                    continue;
                case 0x3ce7c:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x3b670;
                    run_3b600(); return;
                case 0x3ce88:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d158;
                        run_3d000(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 27908;
                case 0x3ce9c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b694;
                    run_3b600(); return;
                case 0x3cec8:
                    r16 = 6 << 16;
                    r16 = r16 + 27904;
                    /* Next insn is delay slot */ 
                    pc=0x3bdb0;
                    run_3bc00(); return;
                case 0x3ced8:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e8;
                    run_3b200(); return;
                case 0x3cee8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3cefc;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3cefc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3cd88;
                    run_3cc00(); return;
                case 0x3cf18:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3cf2c;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3cf2c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c32c;
                    run_3c200(); return;
                case 0x3cf44:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3cf58;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3cf58:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x3cf6c:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3c150;
                    run_3c000(); return;
                case 0x3cf84:
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x3cf90;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3cf90:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b680;
                        run_3b600(); return;
                    }
                case 0x3cfa0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b680;
                    run_3b600(); return;
                case 0x3cfac:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x3b788;
                    run_3b600(); return;
                case 0x3cfc0:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c644;
                    run_3c600(); return;
                case 0x3cfcc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3cfe0;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3cfe0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c63c;
                    run_3c600(); return;
                case 0x3cff8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                case 0x3d000:
                    pc=0x3d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d000() throws ExecutionException { /* 0x3d000 - 0x3d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d000:
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3d00c;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3d00c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c898;
                    run_3c800(); return;
                case 0x3d028:
                    r4 = 6 << 16;
                    r23 = r4 + 28280;
                case 0x3d030:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cf44;
                        run_3ce00(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3cf6c;
                    run_3ce00(); return;
                case 0x3d060:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c8f4;
                    run_3c800(); return;
                case 0x3d06c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3d080;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3d080:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3c8ec;
                    run_3c800(); return;
                case 0x3d0a4:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0b8;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x3d0b8:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4f0;
                        run_3d400(); return;
                    }
                case 0x3d0c4:
                    r16 = 6 << 16;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r16 + 27916;
                    /* Next insn is delay slot */ 
                    pc=0x3b6ac;
                    run_3b600(); return;
                case 0x3d0e8:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x3ba08;
                    run_3ba00(); return;
                case 0x3d0f8:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b69c;
                    run_3b600(); return;
                case 0x3d118:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d258;
                        run_3d200(); return;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d258;
                        run_3d200(); return;
                    }
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3cbf0;
                    run_3ca00(); return;
                case 0x3d144:
                    r2 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x3bd9c;
                    run_3bc00(); return;
                case 0x3d158:
                    r16 = 6 << 16;
                    r16 = r16 + 27912;
                    /* Next insn is delay slot */ 
                    pc=0x3ce9c;
                    run_3ce00(); return;
                case 0x3d168:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x3d1a4;
                    pc=0x4ca00;
                    run_4ca00(); return;
                case 0x3d1a4:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3cb50;
                    run_3ca00(); return;
                case 0x3d1b8:
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 28280;
                    /* Next insn is delay slot */ 
                    pc=0x3c480;
                    run_3c400(); return;
                case 0x3d1cc:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3cbbc;
                    run_3ca00(); return;
                case 0x3d1d8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d1fc;
                        continue;
                    }
                case 0x3d1e8:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3cb60;
                    run_3ca00(); return;
                case 0x3d1fc:
                    f0 = r0;
                case 0x3d200:
                    pc=0x3d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d200() throws ExecutionException { /* 0x3d200 - 0x3d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d200:
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3d1e8;
                        run_3d000(); return;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3cb60;
                    run_3ca00(); return;
                case 0x3d238:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r30;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b694;
                    run_3b600(); return;
                case 0x3d258:
                    r18 = r18 + -2;
                case 0x3d25c:
                    r2 = r2 + -1;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    addr=r29+1188;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d53c;
                        run_3d400(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3d278:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d438;
                        run_3d400(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+1191;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1190;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 1192;
                    r4 = r29 + 1188;
                case 0x3d29c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2e8;
                        continue;
                    }
                case 0x3d2c0:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d304;
                        continue;
                    }
                case 0x3d2dc:
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3cc2c;
                    run_3cc00(); return;
                case 0x3d2e8:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2c0;
                        continue;
                    }
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2dc;
                        continue;
                    }
                case 0x3d304:
                    r2 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3cc2c;
                    run_3cc00(); return;
                case 0x3d314:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca90;
                        run_3ca00(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3ca90;
                    run_3ca00(); return;
                case 0x3d328:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3d33c;
                    pc=0x59400;
                    run_59400(); return;
                case 0x3d33c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5cc;
                        run_3b400(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3cde8;
                    run_3cc00(); return;
                case 0x3d35c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3cae0;
                    run_3ca00(); return;
                case 0x3d368:
                    r3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = r2;
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = r4;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x3cab8;
                    run_3ca00(); return;
                case 0x3d390:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d52c;
                        run_3d400(); return;
                    }
                    r2 = r0 + 1;
                case 0x3d3a4:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d3e4;
                        continue;
                    }
                case 0x3d3bc:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x3cc2c;
                    run_3cc00(); return;
                case 0x3d3c8:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d3bc;
                        continue;
                    }
                case 0x3d3e4:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x3cc2c;
                    run_3cc00(); return;
                case 0x3d3f4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x3ca90;
                    run_3ca00(); return;
                case 0x3d400:
                    pc=0x3d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d400() throws ExecutionException { /* 0x3d400 - 0x3d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d400:
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3cbbc;
                    run_3ca00(); return;
                case 0x3d40c:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d550;
                        continue;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4cc;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4cc;
                        continue;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3cc2c;
                    run_3cc00(); return;
                case 0x3d438:
                    r6 = r29 + 1187;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x3d444:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x3d450;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x3d450:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d444;
                        continue;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d5ac;
                        continue;
                    }
                    r2 = r29 + 1190;
                    /* Next insn is delay slot */ 
                    pc=0x3d4a0;
                    continue;
                case 0x3d49c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x3d4a0:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3d49c;
                        continue;
                    }
                    r4 = r29 + 1188;
                    r2 = r4 - r3;
                    r3 = r29 + 1190;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3d29c;
                    run_3d200(); return;
                case 0x3d4cc:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc2c;
                        run_3cc00(); return;
                    }
                case 0x3d4e4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3cc2c;
                    run_3cc00(); return;
                case 0x3d4f0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3d0c4;
                    run_3d000(); return;
                case 0x3d4fc:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c000;
                        run_3c000(); return;
                    }
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3e0;
                    run_3b200(); return;
                case 0x3d52c:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x3d3a4;
                    run_3d200(); return;
                case 0x3d53c:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3d278;
                    run_3d200(); return;
                case 0x3d550:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d584;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d584;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3cc2c;
                    run_3cc00(); return;
                case 0x3d578:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3b518;
                    run_3b400(); return;
                case 0x3d584:
                    r30 = r30 + 2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc2c;
                        run_3cc00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d4e4;
                    continue;
                case 0x3d5a0:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3d25c;
                    run_3d200(); return;
                case 0x3d5ac:
                    r2 = r29 + 1190;
                    r4 = r29 + 1188;
                    /* Next insn is delay slot */ 
                    pc=0x3d29c;
                    run_3d200(); return;
                case 0x3d5bc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3cc20;
                    run_3cc00(); return;
                case 0x3d600:
                    pc=0x3d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d600() throws ExecutionException { /* 0x3d600 - 0x3d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3d800:
                    pc=0x3d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d800() throws ExecutionException { /* 0x3d800 - 0x3da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d838;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d9e4;
                        continue;
                    }
                case 0x3d838:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d9b8;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d9b8;
                        continue;
                    }
                case 0x3d86c:
                    r3 = r3 & 8192;
                    r18 = r18 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d8f4;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d924;
                        continue;
                    }
                case 0x3d894:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3d968;
                        continue;
                    }
                case 0x3d8c0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d98c;
                        continue;
                    }
                case 0x3d8d4:
                    r2 = r18 + r0;
                case 0x3d8d8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d8f4:
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d894;
                        continue;
                    }
                case 0x3d924:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3d934;
                    pc=0x31000;
                    run_31000(); return;
                case 0x3d934:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d980;
                        continue;
                    }
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3d8c0;
                        continue;
                    }
                case 0x3d968:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3d978;
                    pc=0x31000;
                    run_31000(); return;
                case 0x3d978:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d8d4;
                        continue;
                    }
                case 0x3d980:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3d8d8;
                    continue;
                case 0x3d98c:
                    r2 = r0 + 10;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d8d4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3d9a8;
                    pc=0x31000;
                    run_31000(); return;
                case 0x3d9a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d8d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d980;
                    continue;
                case 0x3d9b8:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3d9c8;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3d9c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d980;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r2 & 65535;
                    /* Next insn is delay slot */ 
                    pc=0x3d86c;
                    continue;
                case 0x3d9e4:
                    /* Next insn is delay slot */ 
                    r31=0x3d9ec;
                    pc=0x32600;
                    run_32600(); return;
                case 0x3d9ec:
                    /* Next insn is delay slot */ 
                    pc=0x3d838;
                    continue;
                case 0x3da00:
                    pc=0x3da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3da00() throws ExecutionException { /* 0x3da00 - 0x3dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3da00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3dc00:
                    pc=0x3dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3dc00() throws ExecutionException { /* 0x3dc00 - 0x3de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3dc00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc34;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd44;
                        continue;
                    }
                case 0x3dc34:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                    r2 = r6 & 65535;
                    r3 = r2 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dca4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dcd4;
                        continue;
                    }
                case 0x3dc5c:
                    r4 = r2 & 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd04;
                        continue;
                    }
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd54;
                        continue;
                    }
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                case 0x3dc80:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd1c;
                        continue;
                    }
                case 0x3dc88:
                    r2 = r0 + r0;
                case 0x3dc8c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3dca4:
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ddb0;
                        continue;
                    }
                    r2 = r2 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd64;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x3dcc0:
                    r2 = r6 | 8;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 65535;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc5c;
                        continue;
                    }
                case 0x3dcd4:
                    r5 = r2 & 640;
                    r4 = r0 + 512;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc5c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3dcf4;
                    pc=0x35800;
                    run_35800(); return;
                case 0x3dcf4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3dc5c;
                    continue;
                case 0x3dd04:
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r0 - r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc88;
                        continue;
                    }
                case 0x3dd1c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + r0;
                    r4 = r3 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc8c;
                        continue;
                    }
                    r3 = r3 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3dc8c;
                    continue;
                case 0x3dd44:
                    /* Next insn is delay slot */ 
                    r31=0x3dd4c;
                    pc=0x32600;
                    run_32600(); return;
                case 0x3dd4c:
                    /* Next insn is delay slot */ 
                    pc=0x3dc34;
                    continue;
                case 0x3dd54:
                    r2 = r0 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3dc80;
                    continue;
                case 0x3dd64:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd94;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd90;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3dd8c;
                    pc=0x34400;
                    run_34400(); return;
                case 0x3dd8c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                case 0x3dd90:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x3dd94:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -37;
                    r6 = r6 & r2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3dcc0;
                    continue;
                case 0x3ddb0:
                    r2 = r0 + 9;
                    r6 = r6 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r6&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3dc8c;
                    continue;
                case 0x3de00:
                    pc=0x3de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3de00() throws ExecutionException { /* 0x3de00 - 0x3e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3de00:
                    r2 = r0 + 1;
                    pc = 0x3de04;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3de08;
                        return;
                    }
                case 0x3de08:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3de10:
                    r2 = r0 + 2;
                    pc = 0x3de14;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3de18;
                        return;
                    }
                case 0x3de18:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3de20:
                    r2 = r0 + 3;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3de34;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3de38;
                        return;
                    }
                case 0x3de38:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3de50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3de50:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3de60:
                    r2 = r0 + 4;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3de74;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3de78;
                        return;
                    }
                case 0x3de78:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3de90;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3de90:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3dea0:
                    r2 = r0 + 5;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3deb4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3deb8;
                        return;
                    }
                case 0x3deb8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ded0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ded0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3dee0:
                    r2 = r0 + 6;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3def4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3def8;
                        return;
                    }
                case 0x3def8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3df10;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3df10:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3df20:
                    r2 = r0 + 7;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3df34;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3df38;
                        return;
                    }
                case 0x3df38:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3df50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3df50:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3df60:
                    r2 = r0 + 8;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3df74;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3df78;
                        return;
                    }
                case 0x3df78:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3df90;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3df90:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3dfa0:
                    r2 = r0 + 10;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3dfb4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3dfb8;
                        return;
                    }
                case 0x3dfb8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dfd0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3dfd0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3dfe0:
                    r2 = r0 + 11;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3dff4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3dff8;
                        return;
                    }
                case 0x3dff8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                case 0x3e000:
                    pc=0x3e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e000() throws ExecutionException { /* 0x3e000 - 0x3e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e000:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e010;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e010:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e020:
                    r2 = r0 + 12;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e034;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e038;
                        return;
                    }
                case 0x3e038:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e050;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e050:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e060:
                    r2 = r0 + 13;
                    pc = 0x3e064;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e068;
                        return;
                    }
                case 0x3e068:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e070:
                    r2 = r0 + 14;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e084;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e088;
                        return;
                    }
                case 0x3e088:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e0a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e0a0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e0b0:
                    r2 = r0 + 15;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e0c4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e0c8;
                        return;
                    }
                case 0x3e0c8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e0e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e0e0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e0f0:
                    r2 = r0 + 16;
                    pc = 0x3e0f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e0f8;
                        return;
                    }
                case 0x3e0f8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e100:
                    r2 = r0 + 17;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e114;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e118;
                        return;
                    }
                case 0x3e118:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e130;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e130:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e140:
                    r2 = r0 + 18;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e154;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e158;
                        return;
                    }
                case 0x3e158:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e170;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e170:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e180:
                    r2 = r0 + 19;
                    pc = 0x3e184;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e188;
                        return;
                    }
                case 0x3e188:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e190:
                    r2 = r0 + 20;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e1a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e1a8;
                        return;
                    }
                case 0x3e1a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e1c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e1c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e1d0:
                    r2 = r0 + 21;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e1e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e1e8;
                        return;
                    }
                case 0x3e1e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e200;
                        run_3e200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e200:
                    pc=0x3e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e200() throws ExecutionException { /* 0x3e200 - 0x3e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e200:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e210:
                    r2 = r0 + 22;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e224;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e228;
                        return;
                    }
                case 0x3e228:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e240;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e240:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e250:
                    r2 = r0 + 23;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e264;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e268;
                        return;
                    }
                case 0x3e268:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e280;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e280:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e290:
                    r2 = r0 + 24;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e2a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e2a8;
                        return;
                    }
                case 0x3e2a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e2c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e2d0:
                    r2 = r0 + 25;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e2e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e2e8;
                        return;
                    }
                case 0x3e2e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e300;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e300:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e310:
                    r2 = r0 + 26;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e324;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e328;
                        return;
                    }
                case 0x3e328:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e340;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e340:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e350:
                    r2 = r0 + 27;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e364;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e368;
                        return;
                    }
                case 0x3e368:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e380;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e380:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e390:
                    r2 = r0 + 28;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e3a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e3a8;
                        return;
                    }
                case 0x3e3a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e3c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e3c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e3d0:
                    r2 = r0 + 29;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e3e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e3e8;
                        return;
                    }
                case 0x3e3e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e400;
                        run_3e400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e400:
                    pc=0x3e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e400() throws ExecutionException { /* 0x3e400 - 0x3e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e400:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e410:
                    r2 = r0 + 30;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e424;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e428;
                        return;
                    }
                case 0x3e428:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e440;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e440:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e450:
                    r2 = r0 + 31;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e464;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e468;
                        return;
                    }
                case 0x3e468:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e480;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e480:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e490:
                    r2 = r0 + 32;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e4a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e4a8;
                        return;
                    }
                case 0x3e4a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e4c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e4c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e4d0:
                    r2 = r0 + 33;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e4e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e4e8;
                        return;
                    }
                case 0x3e4e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e500;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e500:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e510:
                    r2 = r0 + 34;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e524;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e528;
                        return;
                    }
                case 0x3e528:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e540;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e540:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e550:
                    r2 = r0 + 35;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e564;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e568;
                        return;
                    }
                case 0x3e568:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e580;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e580:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e590:
                    r2 = r0 + 36;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x3e5b0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e5b4;
                        return;
                    }
                case 0x3e5b4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e5cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e5cc:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e5dc:
                    r2 = r0 + 37;
                    pc = 0x3e5e0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e5e4;
                        return;
                    }
                case 0x3e5e4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e5ec:
                    r2 = r0 + 38;
                    pc = 0x3e5f0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e5f4;
                        return;
                    }
                case 0x3e5f4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e5fc:
                    r2 = r0 + 39;
                case 0x3e600:
                    pc=0x3e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e600() throws ExecutionException { /* 0x3e600 - 0x3e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e600:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e610;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e614;
                        return;
                    }
                case 0x3e614:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e62c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e62c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e63c:
                    r2 = r0 + 40;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e650;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e654;
                        return;
                    }
                case 0x3e654:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e66c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e66c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e67c:
                    r2 = r0 + 41;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e690;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e694;
                        return;
                    }
                case 0x3e694:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e6ac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e6bc:
                    r2 = r0 + 42;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e6d0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e6d4;
                        return;
                    }
                case 0x3e6d4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e6ec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e6fc:
                    r2 = r0 + 43;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e710;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e714;
                        return;
                    }
                case 0x3e714:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e72c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e72c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e73c:
                    r2 = r0 + 44;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e750;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e754;
                        return;
                    }
                case 0x3e754:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e76c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e76c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e77c:
                    r2 = r0 + 45;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e790;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e794;
                        return;
                    }
                case 0x3e794:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e7ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e7ac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e7bc:
                    r2 = r0 + 46;
                    pc = 0x3e7c0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e7c4;
                        return;
                    }
                case 0x3e7c4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e7cc:
                    r2 = r0 + 47;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e7e0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e7e4;
                        return;
                    }
                case 0x3e7e4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e7fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e7fc:
                    r4 = r10 + r0;
                case 0x3e800:
                    pc=0x3e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e800() throws ExecutionException { /* 0x3e800 - 0x3ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e800:
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e80c:
                    r2 = r0 + 51;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e820;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e824;
                        return;
                    }
                case 0x3e824:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e83c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e83c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e84c:
                    r2 = r0 + 52;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e860;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e864;
                        return;
                    }
                case 0x3e864:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e87c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e87c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e88c:
                    r2 = r0 + 53;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x3e8ac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e8b0;
                        return;
                    }
                case 0x3e8b0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e8c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e8c8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e8d8:
                    r2 = r0 + 55;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e8ec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e8f0;
                        return;
                    }
                case 0x3e8f0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e908;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e908:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e918:
                    r2 = r0 + 54;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e92c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e930;
                        return;
                    }
                case 0x3e930:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e948;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e948:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e958:
                    r2 = r0 + 56;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e96c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e970;
                        return;
                    }
                case 0x3e970:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e988;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e988:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e998:
                    r2 = r0 + 57;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e9ac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e9b0;
                        return;
                    }
                case 0x3e9b0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e9c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e9c8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3e9d8:
                    r2 = r0 + 58;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3e9ec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3e9f0;
                        return;
                    }
                case 0x3e9f0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea08;
                        run_3ea00(); return;
                    }
                case 0x3ea00:
                    pc=0x3ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ea00() throws ExecutionException { /* 0x3ea00 - 0x3ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ea00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ea08:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ea18:
                    r2 = r0 + 59;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3ea2c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ea30;
                        return;
                    }
                case 0x3ea30:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea48;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ea48:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ea58:
                    r2 = r0 + 60;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x3ea78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ea7c;
                        return;
                    }
                case 0x3ea7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ea94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3eaa4:
                    r2 = r0 + 61;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x3eac4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3eac8;
                        return;
                    }
                case 0x3eac8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eae0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3eae0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3eaf0:
                    r2 = r0 + 62;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3eb04;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3eb08;
                        return;
                    }
                case 0x3eb08:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb20;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3eb20:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3eb30:
                    r2 = r0 + 63;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3eb44;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3eb48;
                        return;
                    }
                case 0x3eb48:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3eb60:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3eb70:
                    r2 = r0 + 64;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3eb84;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3eb88;
                        return;
                    }
                case 0x3eb88:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eba0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3eba0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ebb0:
                    r2 = r0 + 65;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x3ebd0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ebd4;
                        return;
                    }
                case 0x3ebd4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ebec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ebec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ebfc:
                    r2 = r0 + 66;
                case 0x3ec00:
                    pc=0x3ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ec00() throws ExecutionException { /* 0x3ec00 - 0x3ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ec00:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x3ec1c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ec20;
                        return;
                    }
                case 0x3ec20:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ec38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ec38:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ec48:
                    r2 = r0 + 67;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x3ec68;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ec6c;
                        return;
                    }
                case 0x3ec6c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ec84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ec84:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ec94:
                    r2 = r0 + 73;
                    pc = 0x3ec98;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ec9c;
                        return;
                    }
                case 0x3ec9c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3eca4:
                    r2 = r0 + 68;
                    pc = 0x3eca8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ecac;
                        return;
                    }
                case 0x3ecac:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ecb4:
                    r2 = r0 + 70;
                    pc = 0x3ecb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ecbc;
                        return;
                    }
                case 0x3ecbc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ecc4:
                    r2 = r0 + 69;
                    pc = 0x3ecc8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3eccc;
                        return;
                    }
                case 0x3eccc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ecd4:
                    r2 = r0 + 71;
                    pc = 0x3ecd8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ecdc;
                        return;
                    }
                case 0x3ecdc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ece4:
                    r2 = r0 + 82;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3ecf8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ecfc;
                        return;
                    }
                case 0x3ecfc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ed14:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ed24:
                    r2 = r0 + 83;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3ed38;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ed3c;
                        return;
                    }
                case 0x3ed3c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ed54:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ed64:
                    r2 = r0 + 84;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3ed78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ed7c;
                        return;
                    }
                case 0x3ed7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ed94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3eda4:
                    r2 = r0 + 85;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3edb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3edbc;
                        return;
                    }
                case 0x3edbc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3edd4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3edd4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ede4:
                    r2 = r0 + 80;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3edf8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3edfc;
                        return;
                    }
                case 0x3edfc:
                    r11 = r2 + 255;
                case 0x3ee00:
                    pc=0x3ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ee00() throws ExecutionException { /* 0x3ee00 - 0x3f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ee00:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ee14:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ee24:
                    r2 = r0 + 86;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3ee38;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ee3c;
                        return;
                    }
                case 0x3ee3c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ee54:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ee64:
                    r2 = r0 + 81;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3ee78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ee7c;
                        return;
                    }
                case 0x3ee7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ee94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3eea4:
                    r2 = r0 + 87;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3eeb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3eebc;
                        return;
                    }
                case 0x3eebc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eed4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3eed4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3eee4:
                    r2 = r0 + 88;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3eef8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3eefc;
                        return;
                    }
                case 0x3eefc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ef14:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ef24:
                    r2 = r0 + 78;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3ef38;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ef3c;
                        return;
                    }
                case 0x3ef3c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ef54:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3ef64:
                    r2 = r0 + 76;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3ef78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3ef7c;
                        return;
                    }
                case 0x3ef7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ef94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3efa4:
                    r2 = r0 + 77;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3efb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3efbc;
                        return;
                    }
                case 0x3efbc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3efd4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3efd4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3efe4:
                    r2 = r0 + 74;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3eff8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3effc;
                        return;
                    }
                case 0x3effc:
                    r11 = r2 + 255;
                case 0x3f000:
                    pc=0x3f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f000() throws ExecutionException { /* 0x3f000 - 0x3f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f000:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f014;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f014:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3f024:
                    r2 = r0 + 75;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3f038;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3f03c;
                        return;
                    }
                case 0x3f03c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f054;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f054:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3f064:
                    r2 = r0 + 79;
                    pc = 0x3f068;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3f06c;
                        return;
                    }
                case 0x3f06c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f074:
                    r2 = r0 + 72;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3f088;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3f08c;
                        return;
                    }
                case 0x3f08c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f0a4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3f0b4:
                    r2 = r0 + 90;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3f0c8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3f0cc;
                        return;
                    }
                case 0x3f0cc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0e4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f0e4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3f0f4:
                    r2 = r0 + 89;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3f108;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3f10c;
                        return;
                    }
                case 0x3f10c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f124;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f124:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3f134:
                    r2 = r0 + 91;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3f148;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3f14c;
                        return;
                    }
                case 0x3f14c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f164;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f164:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x3f200:
                    pc=0x3f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f200() throws ExecutionException { /* 0x3f200 - 0x3f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f200:
                    r5 = r0 - r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f400:
                    pc=0x3f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f400() throws ExecutionException { /* 0x3f400 - 0x3f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e140;
                    run_3e000(); return;
                case 0x3f600:
                    pc=0x3f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f600() throws ExecutionException { /* 0x3f600 - 0x3f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ef24;
                    run_3ee00(); return;
                case 0x3f800:
                    pc=0x3f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f800() throws ExecutionException { /* 0x3f800 - 0x3fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e410;
                    run_3e400(); return;
                case 0x3fa00:
                    pc=0x3fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fa00() throws ExecutionException { /* 0x3fa00 - 0x3fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fa00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e450;
                    run_3e400(); return;
                case 0x3fc00:
                    pc=0x3fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fc00() throws ExecutionException { /* 0x3fc00 - 0x3fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fc00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e210;
                    run_3e200(); return;
                case 0x3fe00:
                    pc=0x3fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fe00() throws ExecutionException { /* 0x3fe00 - 0x40000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fe00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e1d0;
                    run_3e000(); return;
                case 0x40000:
                    pc=0x40000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40000() throws ExecutionException { /* 0x40000 - 0x40200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e250;
                    run_3e200(); return;
                case 0x40200:
                    pc=0x40200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40200() throws ExecutionException { /* 0x40200 - 0x40400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e290;
                    run_3e200(); return;
                case 0x40400:
                    pc=0x40400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40400() throws ExecutionException { /* 0x40400 - 0x40600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e310;
                    run_3e200(); return;
                case 0x40600:
                    pc=0x40600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40600() throws ExecutionException { /* 0x40600 - 0x40800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40600:
                    r29 = r29 + -40;
                    r2 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40670;
                        continue;
                    }
                    r6 = r5 + r0;
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40640;
                    pc=0x3e350;
                    run_3e200(); return;
                case 0x40640:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x406c4;
                        continue;
                    }
                case 0x4064c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40670:
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x4067c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40688;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x40688:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x406a0;
                    pc=0x3e350;
                    run_3e200(); return;
                case 0x406a0:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x4064c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x406b4;
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x406b4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x4067c;
                        continue;
                    }
                case 0x406c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40800:
                    pc=0x40800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40800() throws ExecutionException { /* 0x40800 - 0x40a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e350;
                    run_3e200(); return;
                case 0x40a00:
                    pc=0x40a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40a00() throws ExecutionException { /* 0x40a00 - 0x40c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e510;
                    run_3e400(); return;
                case 0x40c00:
                    pc=0x40c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40c00() throws ExecutionException { /* 0x40c00 - 0x40e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40c00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e490;
                    run_3e400(); return;
                case 0x40e00:
                    pc=0x40e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40e00() throws ExecutionException { /* 0x40e00 - 0x41000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40e00:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ef64;
                    run_3ee00(); return;
                case 0x41000:
                    pc=0x41000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41000() throws ExecutionException { /* 0x41000 - 0x41200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41000:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3efa4;
                    run_3ee00(); return;
                case 0x41200:
                    pc=0x41200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41200() throws ExecutionException { /* 0x41200 - 0x41400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41200:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e6fc;
                    run_3e600(); return;
                case 0x41400:
                    pc=0x41400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41400() throws ExecutionException { /* 0x41400 - 0x41600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3efe4;
                    run_3ee00(); return;
                case 0x41600:
                    pc=0x41600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41600() throws ExecutionException { /* 0x41600 - 0x41800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f024;
                    run_3f000(); return;
                case 0x41800:
                    pc=0x41800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41800() throws ExecutionException { /* 0x41800 - 0x41a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e4d0;
                    run_3e400(); return;
                case 0x41a00:
                    pc=0x41a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41a00() throws ExecutionException { /* 0x41a00 - 0x41c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41a00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x41a30;
                    pc=0x3e590;
                    run_3e400(); return;
                case 0x41a30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41c00:
                    pc=0x41c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41c00() throws ExecutionException { /* 0x41c00 - 0x41e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41c00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e5fc;
                    run_3e400(); return;
                case 0x41e00:
                    pc=0x41e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41e00() throws ExecutionException { /* 0x41e00 - 0x42000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r5 = r5 + 28312;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x41e28;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x41e28:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42000:
                    pc=0x42000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42000() throws ExecutionException { /* 0x42000 - 0x42200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42000:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e63c;
                    run_3e600(); return;
                case 0x42200:
                    pc=0x42200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42200() throws ExecutionException { /* 0x42200 - 0x42400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e67c;
                    run_3e600(); return;
                case 0x42400:
                    pc=0x42400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42400() throws ExecutionException { /* 0x42400 - 0x42600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r7 = r6 << 16;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r7 >> 16;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e6bc;
                    run_3e600(); return;
                case 0x42600:
                    pc=0x42600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42600() throws ExecutionException { /* 0x42600 - 0x42800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e73c;
                    run_3e600(); return;
                case 0x42800:
                    pc=0x42800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42800() throws ExecutionException { /* 0x42800 - 0x42a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e77c;
                    run_3e600(); return;
                case 0x42a00:
                    pc=0x42a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42a00() throws ExecutionException { /* 0x42a00 - 0x42c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e7cc;
                    run_3e600(); return;
                case 0x42c00:
                    pc=0x42c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42c00() throws ExecutionException { /* 0x42c00 - 0x42e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42c00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e80c;
                    run_3e800(); return;
                case 0x42e00:
                    pc=0x42e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42e00() throws ExecutionException { /* 0x42e00 - 0x43000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e84c;
                    run_3e800(); return;
                case 0x43000:
                    pc=0x43000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43000() throws ExecutionException { /* 0x43000 - 0x43200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43000:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x43040;
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x43040:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43200:
                    pc=0x43200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43200() throws ExecutionException { /* 0x43200 - 0x43400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43200:
                    r2 = r4 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = r0 + 8;
                    r8 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r16 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x43264;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x432a8;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x432c8;
                        continue;
                    }
                case 0x43244:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43264:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r9 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r8 + r0;
                    r7 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43294;
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x43294:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x432a8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x432c8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 28352;
                    /* Next insn is delay slot */ 
                    r31=0x432e0;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x432e0:
                    /* Next insn is delay slot */ 
                    pc=0x43244;
                    continue;
                case 0x43400:
                    pc=0x43400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43400() throws ExecutionException { /* 0x43400 - 0x43600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e8d8;
                    run_3e800(); return;
                case 0x43600:
                    pc=0x43600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43600() throws ExecutionException { /* 0x43600 - 0x43800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e918;
                    run_3e800(); return;
                case 0x43800:
                    pc=0x43800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43800() throws ExecutionException { /* 0x43800 - 0x43a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e998;
                    run_3e800(); return;
                case 0x43a00:
                    pc=0x43a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43a00() throws ExecutionException { /* 0x43a00 - 0x43c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e958;
                    run_3e800(); return;
                case 0x43c00:
                    pc=0x43c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43c00() throws ExecutionException { /* 0x43c00 - 0x43e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43c00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e9d8;
                    run_3e800(); return;
                case 0x43e00:
                    pc=0x43e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43e00() throws ExecutionException { /* 0x43e00 - 0x44000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f0f4;
                    run_3f000(); return;
                case 0x44000:
                    pc=0x44000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44000() throws ExecutionException { /* 0x44000 - 0x44200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ea18;
                    run_3ea00(); return;
                case 0x44200:
                    pc=0x44200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44200() throws ExecutionException { /* 0x44200 - 0x44400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44200:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x44238;
                    pc=0x3eaa4;
                    run_3ea00(); return;
                case 0x44238:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44400:
                    pc=0x44400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44400() throws ExecutionException { /* 0x44400 - 0x44600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44400:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x44438;
                    pc=0x3ea58;
                    run_3ea00(); return;
                case 0x44438:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44600:
                    pc=0x44600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44600() throws ExecutionException { /* 0x44600 - 0x44800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3eb30;
                    run_3ea00(); return;
                case 0x44800:
                    pc=0x44800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44800() throws ExecutionException { /* 0x44800 - 0x44a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3eaf0;
                    run_3ea00(); return;
                case 0x44a00:
                    pc=0x44a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44a00() throws ExecutionException { /* 0x44a00 - 0x44c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3eb70;
                    run_3ea00(); return;
                case 0x44c00:
                    pc=0x44c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44c00() throws ExecutionException { /* 0x44c00 - 0x44e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44c00:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x44c40;
                    pc=0x3ebb0;
                    run_3ea00(); return;
                case 0x44c40:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44e00:
                    pc=0x44e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44e00() throws ExecutionException { /* 0x44e00 - 0x45000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44e00:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x44e40;
                    pc=0x3ebfc;
                    run_3ea00(); return;
                case 0x44e40:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45000:
                    pc=0x45000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45000() throws ExecutionException { /* 0x45000 - 0x45200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45000:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x45038;
                    pc=0x3ec48;
                    run_3ec00(); return;
                case 0x45038:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45200:
                    pc=0x45200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45200() throws ExecutionException { /* 0x45200 - 0x45400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45200:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x45230;
                    pc=0x3ece4;
                    run_3ec00(); return;
                case 0x45230:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45400:
                    pc=0x45400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45400() throws ExecutionException { /* 0x45400 - 0x45600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45400:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x45430;
                    pc=0x3ed24;
                    run_3ec00(); return;
                case 0x45430:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45600:
                    pc=0x45600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45600() throws ExecutionException { /* 0x45600 - 0x45800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f074;
                    run_3f000(); return;
                case 0x45800:
                    pc=0x45800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45800() throws ExecutionException { /* 0x45800 - 0x45a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ed64;
                    run_3ec00(); return;
                case 0x45a00:
                    pc=0x45a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45a00() throws ExecutionException { /* 0x45a00 - 0x45c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3eda4;
                    run_3ec00(); return;
                case 0x45c00:
                    pc=0x45c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45c00() throws ExecutionException { /* 0x45c00 - 0x45e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45c00:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3ede4;
                    run_3ec00(); return;
                case 0x45e00:
                    pc=0x45e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45e00() throws ExecutionException { /* 0x45e00 - 0x46000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45e00:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3ee24;
                    run_3ee00(); return;
                case 0x46000:
                    pc=0x46000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46000() throws ExecutionException { /* 0x46000 - 0x46200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46000:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3ee64;
                    run_3ee00(); return;
                case 0x46200:
                    pc=0x46200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46200() throws ExecutionException { /* 0x46200 - 0x46400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46200:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3eea4;
                    run_3ee00(); return;
                case 0x46400:
                    pc=0x46400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46400() throws ExecutionException { /* 0x46400 - 0x46600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3eee4;
                    run_3ee00(); return;
                case 0x46600:
                    pc=0x46600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46600() throws ExecutionException { /* 0x46600 - 0x46800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46600:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3f0b4;
                    run_3f000(); return;
                case 0x46800:
                    pc=0x46800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46800() throws ExecutionException { /* 0x46800 - 0x46a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3f134;
                    run_3f000(); return;
                case 0x46a00:
                    pc=0x46a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46a00() throws ExecutionException { /* 0x46a00 - 0x46c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e390;
                    run_3e200(); return;
                case 0x46c00:
                    pc=0x46c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46c00() throws ExecutionException { /* 0x46c00 - 0x46e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46c00:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46c5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x46c2c;
                    pc=0x3e350;
                    run_3e200(); return;
                case 0x46c2c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x46cb4;
                        continue;
                    }
                case 0x46c38:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46c5c:
                    r18 = r4 + r0;
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x46c6c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46c78;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x46c78:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46c90;
                    pc=0x3e350;
                    run_3e200(); return;
                case 0x46c90:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x46c38;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46ca4;
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x46ca4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x46c6c;
                        continue;
                    }
                case 0x46cb4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46e00:
                    pc=0x46e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46e00() throws ExecutionException { /* 0x46e00 - 0x47000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46e00:
                    r6 = r5 + r0;
                    r7 = r0 + r0;
                    r5 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3e310;
                    run_3e200(); return;
                case 0x47000:
                    pc=0x47000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47000() throws ExecutionException { /* 0x47000 - 0x47200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47000:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r5 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 28312;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x47028;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x47028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47200:
                    pc=0x47200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47200() throws ExecutionException { /* 0x47200 - 0x47400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47200:
                    r8 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r3 = r0 + 8;
                    r2 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4725c;
                        continue;
                    }
                    r16 = r4 + r0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47274;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r6 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x47294;
                        continue;
                    }
                case 0x4723c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4725c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x47274:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47294:
                    r3 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 28352;
                    /* Next insn is delay slot */ 
                    r31=0x472b0;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x472b0:
                    /* Next insn is delay slot */ 
                    pc=0x4723c;
                    continue;
                case 0x47400:
                    pc=0x47400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47400() throws ExecutionException { /* 0x47400 - 0x47600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47400:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47600:
                    pc=0x47600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47600() throws ExecutionException { /* 0x47600 - 0x47800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47600:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x47610;
                    pc=0x4f800;
                    run_4f800(); return;
                case 0x47610:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47630;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 6 << 16;
                    r2 = r2 + 28388;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47630:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47800:
                    pc=0x47800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47800() throws ExecutionException { /* 0x47800 - 0x47a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47800:
                    r29 = r29 + -32;
                    r2 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478b8;
                        continue;
                    }
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47888;
                        continue;
                    }
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x47888;
                        continue;
                    }
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x47850;
                    pc=0x54000;
                    run_54000(); return;
                case 0x47850:
                    r17 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47868;
                        continue;
                    }
                case 0x4785c:
                    r2 = r0 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                case 0x47868:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47888:
                    /* Next insn is delay slot */ 
                    r31=0x47890;
                    pc=0x30400;
                    run_30400(); return;
                case 0x47890:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 22;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x478b8:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47868;
                        continue;
                    }
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x478cc;
                    pc=0x54000;
                    run_54000(); return;
                case 0x478cc:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x478e0;
                    pc=0x54000;
                    run_54000(); return;
                case 0x478e0:
                    /* Next insn is delay slot */ 
                    pc=0x4785c;
                    continue;
                case 0x47a00:
                    pc=0x47a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47a00() throws ExecutionException { /* 0x47a00 - 0x47c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47a00:
                    r29 = r29 + -96;
                    r5 = r0 + r0;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x47a1c;
                    pc=0x3aa00;
                    run_3aa00(); return;
                case 0x47a1c:
                    r17 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47aec;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x47a38;
                    pc=0x59000;
                    run_59000(); return;
                case 0x47a38:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ab4;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 16384;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47ab4;
                        continue;
                    }
                    r4 = r0 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x47a60;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x47a60:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47af8;
                        continue;
                    }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r4 = r0 + 4096;
                    /* Next insn is delay slot */ 
                    r31=0x47a7c;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x47a7c:
                    r3 = r0 + 4096;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b20;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x47a9c:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47ab4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47ac0;
                    pc=0x3a800;
                    run_3a800(); return;
                case 0x47ac0:
                    /* Next insn is delay slot */ 
                    r31=0x47ac8;
                    pc=0x30400;
                    run_30400(); return;
                case 0x47ac8:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r0 + 20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47aec:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47a9c;
                    continue;
                case 0x47af8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47b04;
                    pc=0x3a800;
                    run_3a800(); return;
                case 0x47b04:
                    /* Next insn is delay slot */ 
                    r31=0x47b0c;
                    pc=0x30400;
                    run_30400(); return;
                case 0x47b0c:
                    r3 = r0 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47a9c;
                    continue;
                case 0x47b20:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47b2c;
                    pc=0x3a800;
                    run_3a800(); return;
                case 0x47b2c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47b38;
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x47b38:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47a9c;
                    continue;
                case 0x47c00:
                    pc=0x47c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47c00() throws ExecutionException { /* 0x47c00 - 0x47e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x47c18;
                    pc=0x30400;
                    run_30400(); return;
                case 0x47c18:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c84;
                        continue;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x47c84;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x47c3c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r6;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47cc4;
                        continue;
                    }
                    r3 = r5 - r3;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47cc4;
                        continue;
                    }
                    r4 = r6 + r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                case 0x47c70:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47c84:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x47ca0;
                    pc=0x3e590;
                    run_3e400(); return;
                case 0x47ca0:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47cdc;
                        continue;
                    }
                    r5 = r2 + r0;
                    r6 = r0 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47c3c;
                    continue;
                case 0x47cc4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47cdc:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47c70;
                    continue;
                case 0x47e00:
                    pc=0x47e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47e00() throws ExecutionException { /* 0x47e00 - 0x48000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x47e24;
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x47e24:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47e30;
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x47e30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3a800;
                    run_3a800(); return;
                case 0x48000:
                    pc=0x48000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48000() throws ExecutionException { /* 0x48000 - 0x48200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48000:
                    r2 = r4 >>> 16;
                    r29 = r29 + -40;
                    r2 = r2 & 255;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r4 >>> 8;
                    r2 = r2 & 255;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r16 = 8 << 16;
                    r2 = r4 & 255;
                    r7 = r4 + r0;
                    r6 = 6 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r4 = r16 + -24828;
                    r5 = r0 + 18;
                    r6 = r6 + 28404;
                    r7 = r7 >>> 24;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x48050;
                    pc=0x54800;
                    run_54800(); return;
                case 0x48050:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + -24828;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48200:
                    pc=0x48200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48200() throws ExecutionException { /* 0x48200 - 0x48400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48200:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48400:
                    pc=0x48400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48400() throws ExecutionException { /* 0x48400 - 0x48600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48400:
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48428;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 28652;
                    r4 = r4 << 2;
                    r4 = r4 + r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48428:
                    r2 = 6 << 16;
                    r2 = r2 + 28416;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48600:
                    pc=0x48600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48600() throws ExecutionException { /* 0x48600 - 0x48800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48600:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48644;
                        continue;
                    }
                    r3 = 6 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 28652;
                    r2 = r2 + r3;
                    r5 = 6 << 16;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r5 + 28432;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x48644:
                    r7 = 6 << 16;
                    r5 = 6 << 16;
                    r7 = r7 + 28416;
                    r5 = r5 + 28432;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x48800:
                    pc=0x48800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48800() throws ExecutionException { /* 0x48800 - 0x48a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48800:
                    r29 = r29 + -40;
                    r2 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x488d4;
                        continue;
                    }
                    r2 = r0 + 4;
                    r17 = r5 + r0;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x488d4;
                        continue;
                    }
                    r18 = r4 + r0;
                    r5 = r18 + r0;
                    r4 = r29 + 16;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x4884c;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x4884c:
                    r5 = r18 + r0;
                    r4 = r28 + -32440;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x48860;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x48860:
                    r18 = 8 << 16;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r18 + -24956;
                    r7 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x4887c;
                    pc=0x3f0f4;
                    run_3f000(); return;
                case 0x4887c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x488f4;
                        continue;
                    }
                    r2 = 8 << 16;
                    r18 = r18 + -24956;
                    writePages[(r2+-24976)>>>12][((r2+-24976)>>>2)&0x3ff] = r18;
                    r3 = r28 + -32444;
                    r2 = r2 + -24976;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r28 + -32448;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r28 + -32440;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32444)>>>12][((r28+-32444)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32448)>>>12][((r28+-32448)>>>2)&0x3ff] = r3;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x488d4:
                    r2 = r0 + r0;
                case 0x488d8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x488f4:
                    writePages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x488d8;
                    continue;
                case 0x48a00:
                    pc=0x48a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48a00() throws ExecutionException { /* 0x48a00 - 0x48c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48a00:
                    r29 = r29 + -1064;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = r0 + 1024;
                    r5 = r18 + r0;
                    r6 = r29 + 16;
                    r7 = r29 + 1040;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r31;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x48a38;
                    pc=0x3e9d8;
                    run_3e800(); return;
                case 0x48a38:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48b1c;
                        continue;
                    }
                    r17 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r9 = 8 << 16;
                    r9 = r9 + -26000;
                    r4 = r9 + r0;
                    r5 = r29 + 16;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48a60;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x48a60:
                    r9 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48b40;
                        continue;
                    }
                    r16 = 8 << 16;
                    r3 = r0 + r0;
                    r7 = r0 + r0;
                    r2 = r0 + r0;
                    r16 = r16 + -27028;
                    /* Next insn is delay slot */ 
                    pc=0x48a8c;
                    continue;
                case 0x48a88:
                    r3 = r2 + r0;
                case 0x48a8c:
                    r8 = r16 + r3;
                    r2 = r9 + r2;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    r2 = r3 + 4;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r7 = r7 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48a88;
                        continue;
                    }
                case 0x48aac:
                    r2 = r7 << 2;
                    r17 = 8 << 16;
                    r2 = r16 + r2;
                    r4 = r17 + -27156;
                    r5 = r18 + r0;
                    r6 = r0 + 128;
                    r17 = r17 + -27156;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x48ad4;
                    pc=0x55000;
                    run_55000(); return;
                case 0x48ad4:
                    r2 = 8 << 16;
                    writePages[(r2+-27176)>>>12][((r2+-27176)>>>2)&0x3ff] = r17;
                    r3 = r28 + -32452;
                    r2 = r2 + -27176;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r3 = r0 + 4;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff] = r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48b1c:
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48b40:
                    r16 = 8 << 16;
                    r7 = r0 + r0;
                    r16 = r16 + -27028;
                    /* Next insn is delay slot */ 
                    pc=0x48aac;
                    continue;
                case 0x48c00:
                    pc=0x48c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48c00() throws ExecutionException { /* 0x48c00 - 0x48e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48c00:
                    r29 = r29 + -1088;
                    r5 = 6 << 16;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    r30 = r4 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + 28440;
                    r5 = r5 + 25752;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x48c48;
                    pc=0x33800;
                    run_33800(); return;
                case 0x48c48:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48d28;
                        continue;
                    }
                    r21 = 8 << 16;
                    r22 = 6 << 16;
                    r21 = r21 + -23784;
                    r23 = 8 << 16;
                    r22 = r22 + 28452;
                    r18 = 8 << 16;
                    r20 = 8 << 16;
                    r19 = r21 + r0;
                case 0x48c74:
                    r16 = r0 + 35;
                case 0x48c78:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48c8c;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x48c8c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48d1c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x48c78;
                        continue;
                    }
                    r2 = r23 + -17632;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + -24808;
                    /* Next insn is delay slot */ 
                    r31=0x48cc4;
                    pc=0x54a00;
                    run_54a00(); return;
                case 0x48cc4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48d1c;
                        continue;
                    }
                    r16 = r20 + -17640;
                    r2 = r18 + -24808;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r4 = r30 + r0;
                    r2 = r28 + -32436;
                    r5 = r19 + r0;
                    writePages[(r20+-17640)>>>12][((r20+-17640)>>>2)&0x3ff] = r19;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x48cfc;
                    pc=0x39600;
                    run_39600(); return;
                case 0x48cfc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48c74;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48d10;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x48d10:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48d2c;
                    continue;
                case 0x48d1c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48d28;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x48d28:
                    r2 = r0 + r0;
                case 0x48d2c:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48e00:
                    pc=0x48e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48e00() throws ExecutionException { /* 0x48e00 - 0x49000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48e00:
                    r29 = r29 + -1088;
                    r5 = 6 << 16;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    r23 = r4 & 65535;
                    r4 = 6 << 16;
                    r4 = r4 + 28440;
                    r5 = r5 + 25752;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x48e48;
                    pc=0x33800;
                    run_33800(); return;
                case 0x48e48:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f1c;
                        continue;
                    }
                    r20 = 8 << 16;
                    r21 = 6 << 16;
                    r20 = r20 + -23784;
                    r22 = 8 << 16;
                    r21 = r21 + 28452;
                    r18 = 8 << 16;
                    r19 = 8 << 16;
                    r30 = r20 + r0;
                case 0x48e74:
                    r16 = r0 + 35;
                case 0x48e78:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48e8c;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x48e8c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f10;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x48e78;
                        continue;
                    }
                    r2 = r22 + -17632;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r21 + r0;
                    r6 = r20 + r0;
                    r7 = r18 + -24808;
                    /* Next insn is delay slot */ 
                    r31=0x48ec4;
                    pc=0x54a00;
                    run_54a00(); return;
                case 0x48ec4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f10;
                        continue;
                    }
                    r16 = r19 + -17640;
                    r2 = r18 + -24808;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r28 + -32436;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r19+-17640)>>>12][((r19+-17640)>>>2)&0x3ff] = r30;
                    writePages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff] = r0;
                    if(r2 != r23) {
                        /* Next insn is delay slot */ 
                        pc=0x48e74;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48f04;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x48f04:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48f20;
                    continue;
                case 0x48f10:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48f1c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x48f1c:
                    r2 = r0 + r0;
                case 0x48f20:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49000:
                    pc=0x49000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49000() throws ExecutionException { /* 0x49000 - 0x49200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49000:
                    r6 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    r29 = r29 + -2088;
                    writePages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff] = r31;
                    writePages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff] = r17;
                    writePages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4910c;
                        continue;
                    }
                    r4 = r29 + 1048;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x4902c;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x4902c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4910c;
                        continue;
                    }
                    addr=r29+1048;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x490bc;
                        continue;
                    }
                    r2 = 8 << 16;
                    r2 = r2 + -17632;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 1048;
                case 0x49054:
                    r5 = 6 << 16;
                    r17 = 8 << 16;
                    r16 = 8 << 16;
                    r5 = r5 + 28452;
                    r6 = r17 + -23784;
                    r7 = r16 + -24808;
                    /* Next insn is delay slot */ 
                    r31=0x49074;
                    pc=0x54a00;
                    run_54a00(); return;
                case 0x49074:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4910c;
                        continue;
                    }
                    r2 = 8 << 16;
                    r17 = r17 + -23784;
                    writePages[(r2+-17640)>>>12][((r2+-17640)>>>2)&0x3ff] = r17;
                    r16 = r16 + -24808;
                    r2 = r2 + -17640;
                    r3 = r28 + -32436;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff] = r0;
                case 0x490a4:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x490bc:
                    r6 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4910c;
                        continue;
                    }
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x490dc;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x490dc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4910c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x49128;
                        continue;
                    }
                    r2 = 8 << 16;
                    r2 = r2 + -17632;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x49054;
                    continue;
                case 0x4910c:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49128:
                    /* Next insn is delay slot */ 
                    r31=0x49130;
                    pc=0x49000;
                    continue;
                case 0x49130:
                    /* Next insn is delay slot */ 
                    pc=0x490a4;
                    continue;
                case 0x49200:
                    pc=0x49200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49200() throws ExecutionException { /* 0x49200 - 0x49400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49200:
                    r4 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4921c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4921c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x4921c:
                    r4 = 6 << 16;
                    r5 = 6 << 16;
                    r4 = r4 + 28440;
                    r5 = r5 + 25752;
                    /* Next insn is delay slot */ 
                    r31=0x49234;
                    pc=0x33800;
                    run_33800(); return;
                case 0x49234:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49400:
                    pc=0x49400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49400() throws ExecutionException { /* 0x49400 - 0x49600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49400:
                    r4 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4941c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4941c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x4941c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49600:
                    pc=0x49600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49600() throws ExecutionException { /* 0x49600 - 0x49800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49600:
                    r29 = r29 + -1104;
                    r5 = 6 << 16;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r4 = r4 + 28468;
                    r5 = r5 + 25752;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r31;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r30;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r23;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r22;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x49648;
                    pc=0x33800;
                    run_33800(); return;
                case 0x49648:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49760;
                        continue;
                    }
                    r20 = 8 << 16;
                    r20 = r20 + -18664;
                    r19 = 8 << 16;
                    r18 = r20 + r0;
                case 0x49664:
                    r16 = r0 + 35;
                case 0x49668:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4967c;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x4967c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49754;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x49668;
                        continue;
                    }
                    r3 = 8 << 16;
                    r2 = r3 + -17616;
                    r3 = 8 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r22 = r3 + -20712;
                    r8 = 8 << 16;
                    r3 = 8 << 16;
                    r2 = 8 << 16;
                    r2 = r2 + -17614;
                    r21 = r8 + -21736;
                    r30 = r3 + -22760;
                    r5 = 6 << 16;
                    r23 = 8 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 28480;
                    r6 = r20 + r0;
                    r7 = r23 + -19688;
                    /* Next insn is delay slot */ 
                    r31=0x496f0;
                    pc=0x54a00;
                    run_54a00(); return;
                case 0x496f0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49754;
                        continue;
                    }
                    r2 = 6 << 16;
                    r4 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r16 = r19 + -17624;
                    r10 = r23 + -19688;
                    r2 = r2 + 23396;
                    r5 = r18 + r0;
                    writePages[(r19+-17624)>>>12][((r19+-17624)>>>2)&0x3ff] = r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r22;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r21;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x49734;
                    pc=0x39600;
                    run_39600(); return;
                case 0x49734:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49664;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49748;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x49748:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49764;
                    continue;
                case 0x49754:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49760;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x49760:
                    r2 = r0 + r0;
                case 0x49764:
                    r31 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r30 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r23 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r22 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r29 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49800:
                    pc=0x49800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49800() throws ExecutionException { /* 0x49800 - 0x49a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49800:
                    r29 = r29 + -1112;
                    r4 = r4 & 65535;
                    r5 = 6 << 16;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r4 = r4 + 28468;
                    r5 = r5 + 25752;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r17;
                    writePages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff] = r31;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r30;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r23;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r22;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r21;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r20;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r19;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r18;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x4984c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x4984c:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49960;
                        continue;
                    }
                    r19 = 8 << 16;
                    r22 = 8 << 16;
                    r19 = r19 + -18664;
                    r18 = 8 << 16;
                case 0x49868:
                    r16 = r0 + 35;
                case 0x4986c:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49880;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x49880:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49954;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4986c;
                        continue;
                    }
                    r2 = r22 + -17616;
                    r3 = 8 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r3 + -20712;
                    r8 = 8 << 16;
                    r3 = 8 << 16;
                    r2 = 8 << 16;
                    r2 = r2 + -17614;
                    r23 = r8 + -21736;
                    r30 = r3 + -22760;
                    r5 = 6 << 16;
                    r21 = 8 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r23;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 28480;
                    r6 = r19 + r0;
                    r7 = r21 + -19688;
                    /* Next insn is delay slot */ 
                    r31=0x498f0;
                    pc=0x54a00;
                    run_54a00(); return;
                case 0x498f0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49954;
                        continue;
                    }
                    r2 = 8 << 16;
                    r2 = r2 + -18664;
                    writePages[(r18+-17624)>>>12][((r18+-17624)>>>2)&0x3ff] = r2;
                    r2 = 6 << 16;
                    r16 = r18 + -17624;
                    r2 = r2 + 23396;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r10 = r21 + -19688;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r20;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r23;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x49868;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49948;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x49948:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49964;
                    continue;
                case 0x49954:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49960;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x49960:
                    r2 = r0 + r0;
                case 0x49964:
                    r31 = readPages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff];
                    r30 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r23 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r22 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r21 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r20 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r19 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r18 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r17 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r16 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r29 = r29 + 1112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49a00:
                    pc=0x49a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49a00() throws ExecutionException { /* 0x49a00 - 0x49c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49a00:
                    r6 = readPages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff];
                    r29 = r29 + -2112;
                    writePages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff] = r31;
                    writePages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff] = r20;
                    writePages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff] = r19;
                    writePages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff] = r18;
                    writePages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff] = r17;
                    writePages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49b90;
                        continue;
                    }
                    r4 = r29 + 1064;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x49a38;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x49a38:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49b90;
                        continue;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x49b10;
                        continue;
                    }
                    r2 = 8 << 16;
                    r2 = r2 + -17616;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 8 << 16;
                    r2 = 8 << 16;
                    r17 = 8 << 16;
                    r16 = 8 << 16;
                    r2 = r2 + -17614;
                    r18 = r18 + -20712;
                    r17 = r17 + -21736;
                    r16 = r16 + -22760;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 1064;
                case 0x49a90:
                    r5 = 6 << 16;
                    r20 = 8 << 16;
                    r19 = 8 << 16;
                    r5 = r5 + 28480;
                    r6 = r20 + -18664;
                    r7 = r19 + -19688;
                    /* Next insn is delay slot */ 
                    r31=0x49ab0;
                    pc=0x54a00;
                    run_54a00(); return;
                case 0x49ab0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49b90;
                        continue;
                    }
                    r2 = 8 << 16;
                    r20 = r20 + -18664;
                    r3 = 6 << 16;
                    writePages[(r2+-17624)>>>12][((r2+-17624)>>>2)&0x3ff] = r20;
                    r19 = r19 + -19688;
                    r2 = r2 + -17624;
                    r3 = r3 + 23396;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r18;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r17;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                case 0x49aec:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49b10:
                    r6 = readPages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49b90;
                        continue;
                    }
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x49b30;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x49b30:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49b90;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x49bb8;
                        continue;
                    }
                    r2 = 8 << 16;
                    r2 = r2 + -17616;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 8 << 16;
                    r2 = 8 << 16;
                    r17 = 8 << 16;
                    r16 = 8 << 16;
                    r2 = r2 + -17614;
                    r18 = r18 + -20712;
                    r17 = r17 + -21736;
                    r16 = r16 + -22760;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x49a90;
                    continue;
                case 0x49b90:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49bb8:
                    /* Next insn is delay slot */ 
                    r31=0x49bc0;
                    pc=0x49a00;
                    continue;
                case 0x49bc0:
                    /* Next insn is delay slot */ 
                    pc=0x49aec;
                    continue;
                case 0x49c00:
                    pc=0x49c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49c00() throws ExecutionException { /* 0x49c00 - 0x49e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49c00:
                    r4 = readPages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49c1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x49c1c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x49c1c:
                    r4 = 6 << 16;
                    r5 = 6 << 16;
                    r4 = r4 + 28440;
                    r5 = r5 + 25752;
                    /* Next insn is delay slot */ 
                    r31=0x49c34;
                    pc=0x33800;
                    run_33800(); return;
                case 0x49c34:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49e00:
                    pc=0x49e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49e00() throws ExecutionException { /* 0x49e00 - 0x4a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49e00:
                    r4 = readPages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49e1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x49e1c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x49e1c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a000:
                    pc=0x4a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a000() throws ExecutionException { /* 0x4a000 - 0x4a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a000:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x4a020;
                    pc=0x4e800;
                    run_4e800(); return;
                case 0x4a020:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r16 = 8 << 16;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4a034;
                    pc=0x31200;
                    run_31200(); return;
                case 0x4a034:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r4 = r16 + -28200;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x4a04c;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x4a04c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a0b8;
                        continue;
                    }
                    r4 = r16 + -28200;
                    /* Next insn is delay slot */ 
                    r31=0x4a060;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4a060:
                    r17 = r2 + -1;
                    r16 = r16 + -28200;
                    r3 = r16 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 10;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4a080;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x4a080:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r17 = r16 + r17;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x4a098;
                    pc=0x34000;
                    run_34000(); return;
                case 0x4a098:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a0b8:
                    r17 = r0 + r0;
                    r16 = r16 + -28200;
                    /* Next insn is delay slot */ 
                    pc=0x4a080;
                    continue;
                case 0x4a200:
                    pc=0x4a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a200() throws ExecutionException { /* 0x4a200 - 0x4a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a200:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r0 + 128;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r18 = r5 + r0;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4a22c;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x4a22c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a2bc;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r0 + 128;
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4a250;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x4a250:
                    r3 = r2 < 128 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a278;
                        continue;
                    }
                case 0x4a25c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a278:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4a288;
                    pc=0x37600;
                    run_37600(); return;
                case 0x4a288:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a2c8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x5b200;
                    run_5b200(); return;
                case 0x4a2bc:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4a25c;
                    continue;
                case 0x4a2c8:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4a2d4;
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x4a2d4:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4a25c;
                    continue;
                case 0x4a400:
                    pc=0x4a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a400() throws ExecutionException { /* 0x4a400 - 0x4a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a400:
                    r4 = 6 << 16;
                    r4 = r4 + 28516;
                    /* Next insn is delay slot */ 
                    pc=0x4f200;
                    run_4f200(); return;
                case 0x4a600:
                    pc=0x4a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a600() throws ExecutionException { /* 0x4a600 - 0x4a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a600:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a6b4;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a6b4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4a638;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4a638:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a70c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4a6e0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x4a678;
                    continue;
                case 0x4a668:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4a6e0;
                        continue;
                    }
                case 0x4a678:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4a668;
                        continue;
                    }
                case 0x4a684:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4a7b4;
                        continue;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 23284;
                case 0x4a69c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = 8 << 16;
                    addr=r2+-29224;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -29224;
                    /* Next insn is delay slot */ 
                    pc=0x4a6c4;
                    continue;
                case 0x4a6b4:
                    r2 = 8 << 16;
                    r3 = r0 + 11776;
                    addr=r2+-29224;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -29224;
                case 0x4a6c4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a6e0:
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x4a6fc;
                    continue;
                case 0x4a6ec:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4a70c;
                        continue;
                    }
                case 0x4a6fc:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a6ec;
                        continue;
                    }
                case 0x4a70c:
                    r4 = r0 + 47;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4a730;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4a684;
                    continue;
                case 0x4a720:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4a740;
                        continue;
                    }
                case 0x4a730:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a720;
                        continue;
                    }
                case 0x4a740:
                    r2 = r2 - r16;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a798;
                        continue;
                    }
                    r17 = r2 + 1;
                    r18 = 8 << 16;
                    r4 = r18 + -29224;
                    r5 = r16 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4a770;
                    pc=0x55000;
                    run_55000(); return;
                case 0x4a770:
                    r2 = r18 + -29224;
                    r17 = r17 + r2;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a798:
                    /* Next insn is delay slot */ 
                    r31=0x4a7a0;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4a7a0:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a6c4;
                    continue;
                case 0x4a7b4:
                    r3 = 6 << 16;
                    r3 = r3 + 28524;
                    /* Next insn is delay slot */ 
                    pc=0x4a69c;
                    continue;
                case 0x4a800:
                    pc=0x4a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a800() throws ExecutionException { /* 0x4a800 - 0x4aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a94c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a94c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4a834;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4a834:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a98c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4a8e0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x4a874;
                    continue;
                case 0x4a864:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4a8d4;
                        continue;
                    }
                case 0x4a874:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4a864;
                        continue;
                    }
                case 0x4a880:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4a974;
                        continue;
                    }
                case 0x4a890:
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                case 0x4a898:
                    r16 = r2 + 1;
                    r17 = 8 << 16;
                    r6 = r16 + r0;
                    r4 = r17 + -30248;
                    /* Next insn is delay slot */ 
                    r31=0x4a8b0;
                    pc=0x55000;
                    run_55000(); return;
                case 0x4a8b0:
                    r2 = r17 + -30248;
                    r16 = r16 + r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4a8bc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a8d4:
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a890;
                        continue;
                    }
                case 0x4a8e0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r0 + 47;
                    r5 = r2 + r0;
                    r4 = r0 + 47;
                    if(r6 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4a910;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4a890;
                    continue;
                case 0x4a900:
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4a91c;
                        continue;
                    }
                case 0x4a910:
                    r5 = r5 + -1;
                    if(r5 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4a900;
                        continue;
                    }
                case 0x4a91c:
                    r2 = r2 - r5;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a898;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4a938;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4a938:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a8bc;
                    continue;
                case 0x4a94c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = 8 << 16;
                    r3 = r0 + 11776;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+-30248;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -30248;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a974:
                    r2 = 8 << 16;
                    r3 = r0 + 12032;
                    addr=r2+-30248;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -30248;
                    /* Next insn is delay slot */ 
                    pc=0x4a8bc;
                    continue;
                case 0x4a98c:
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4a880;
                        continue;
                    }
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a898;
                    continue;
                case 0x4aa00:
                    pc=0x4aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4aa00() throws ExecutionException { /* 0x4aa00 - 0x4ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4aa00:
                    r29 = r29 + -72;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4aa3c;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4aa3c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4aa98;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 28352;
                    /* Next insn is delay slot */ 
                    r31=0x4aa6c;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x4aa6c:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x4aa74:
                    /* Next insn is delay slot */ 
                    r31=0x4aa7c;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4aa7c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ae5c;
                        run_4ae00(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4aad0;
                    continue;
                case 0x4aa98:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4aac0;
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x4aac0:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4aa74;
                        continue;
                    }
                case 0x4aacc:
                    r18 = r0 + r0;
                case 0x4aad0:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+31;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4aaf4;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4aaf4:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab50;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 28352;
                    /* Next insn is delay slot */ 
                    r31=0x4ab24;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x4ab24:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x4ab2c:
                    /* Next insn is delay slot */ 
                    r31=0x4ab34;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4ab34:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ae70;
                        run_4ae00(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ab84;
                    continue;
                case 0x4ab50:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x4ab78;
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x4ab78:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab2c;
                        continue;
                    }
                case 0x4ab84:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+63;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4aba8;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4aba8:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac04;
                        run_4ac00(); return;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 28352;
                    /* Next insn is delay slot */ 
                    r31=0x4abd8;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x4abd8:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x4abe0:
                    /* Next insn is delay slot */ 
                    r31=0x4abe8;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4abe8:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ae84;
                        run_4ae00(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ac38;
                    run_4ac00(); return;
                case 0x4ac00:
                    pc=0x4ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ac00() throws ExecutionException { /* 0x4ac00 - 0x4ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ac00:
                case 0x4ac04:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x4ac2c;
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x4ac2c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4abe0;
                        run_4aa00(); return;
                    }
                case 0x4ac38:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 4;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+95;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4ac5c;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4ac5c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = r17 + 96;
                    r19 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4acbc;
                        continue;
                    }
                    r4 = readPages[(r19+12)>>>12][((r19+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 28352;
                    /* Next insn is delay slot */ 
                    r31=0x4ac90;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x4ac90:
                    r2 = r0 + 22;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                case 0x4ac98:
                    /* Next insn is delay slot */ 
                    r31=0x4aca0;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4aca0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ae98;
                        run_4ae00(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4acf0;
                    continue;
                case 0x4acbc:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r19 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ace4;
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x4ace4:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac98;
                        continue;
                    }
                case 0x4acf0:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    addr=r17+127;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ad60;
                        continue;
                    }
                    r4 = r0 + 32;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ad24;
                    continue;
                case 0x4ad14:
                    r3 = r3 + -1;
                    r16 = r16 + 1;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4ad60;
                        continue;
                    }
                case 0x4ad24:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 + -9;
                    r5 = r5 & 255;
                    r5 = (r5&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ad14;
                        continue;
                    }
                    r2 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ade4;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4ad24;
                        continue;
                    }
                case 0x4ad60:
                    r2 = r0 + 6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4ad80;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4ad80:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4adf0;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 28352;
                    /* Next insn is delay slot */ 
                    r31=0x4adb0;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x4adb0:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x4adb8:
                    /* Next insn is delay slot */ 
                    r31=0x4adc0;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4adc0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ae50;
                        run_4ae00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4add8;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4add8:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x4ae24;
                    run_4ae00(); return;
                case 0x4ade4:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4ad14;
                    continue;
                case 0x4adf0:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                case 0x4ae00:
                    pc=0x4ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ae00() throws ExecutionException { /* 0x4ae00 - 0x4b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ae00:
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x4ae18;
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x4ae18:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4adb8;
                        run_4ac00(); return;
                    }
                case 0x4ae24:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    addr=r17+159;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r29 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ae50:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ae24;
                    continue;
                case 0x4ae5c:
                    /* Next insn is delay slot */ 
                    r31=0x4ae64;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4ae64:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x4aacc;
                    run_4aa00(); return;
                case 0x4ae70:
                    /* Next insn is delay slot */ 
                    r31=0x4ae78;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4ae78:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x4ab84;
                    run_4aa00(); return;
                case 0x4ae84:
                    /* Next insn is delay slot */ 
                    r31=0x4ae8c;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4ae8c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x4ac38;
                    run_4ac00(); return;
                case 0x4ae98:
                    /* Next insn is delay slot */ 
                    r31=0x4aea0;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4aea0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x4acf0;
                    run_4ac00(); return;
                case 0x4b000:
                    pc=0x4b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b000() throws ExecutionException { /* 0x4b000 - 0x4b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b000:
                    r29 = r29 + -56;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r4 + r0;
                    r2 = r29 + 40;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4b044;
                    pc=0x3e88c;
                    run_3e800(); return;
                case 0x4b044:
                    r2 = r2 + 1;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r0 - r2;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b200:
                    pc=0x4b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b200() throws ExecutionException { /* 0x4b200 - 0x4b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b200:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r17 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x4b22c;
                    pc=0x58e00;
                    run_58e00(); return;
                case 0x4b22c:
                    r16 = r2 + r0;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x4b264;
                        continue;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b288;
                        continue;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4b24c;
                    pc=0x3f0b4;
                    run_3f000(); return;
                case 0x4b24c:
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x4b33c;
                        continue;
                    }
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b318;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b294;
                        continue;
                    }
                case 0x4b264:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b288:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b294;
                    pc=0x3de00;
                    run_3de00(); return;
                case 0x4b294:
                    r4 = 6 << 16;
                    r4 = r4 + 28528;
                    r5 = r0 + 2;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b2ac;
                    pc=0x3aa00;
                    run_3aa00(); return;
                case 0x4b2ac:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b264;
                        continue;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b2d0;
                    pc=0x3e290;
                    run_3e200(); return;
                case 0x4b2d0:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4b2e4;
                    pc=0x3e290;
                    run_3e200(); return;
                case 0x4b2e4:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x4b2f8;
                    pc=0x3e290;
                    run_3e200(); return;
                case 0x4b2f8:
                    r2 = r17 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b264;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b310;
                    pc=0x3a800;
                    run_3a800(); return;
                case 0x4b310:
                    /* Next insn is delay slot */ 
                    pc=0x4b264;
                    continue;
                case 0x4b318:
                    r5 = 6 << 16;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r5 + 28524;
                    /* Next insn is delay slot */ 
                    r31=0x4b32c;
                    pc=0x3e210;
                    run_3e200(); return;
                case 0x4b32c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b264;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4b294;
                    continue;
                case 0x4b33c:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4b264;
                    continue;
                case 0x4b400:
                    pc=0x4b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b400() throws ExecutionException { /* 0x4b400 - 0x4b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b400:
                    r29 = r29 + -80;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r23;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r21;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r20;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r18;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r23 = r4 + r0;
                    r22 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b438;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4b438:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b450;
                    pc=0x3a600;
                    run_3a600(); return;
                case 0x4b450:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b45c;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4b45c:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r0 + 34;
                    r17 = r29 + 16;
                    r19 = r0 + r0;
                    r20 = r0 + 46;
                    r21 = r0 + 3;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                case 0x4b47c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b544;
                        continue;
                    }
                    if(r4 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x4b524;
                        continue;
                    }
                    r17 = r17 + 4;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                    r23 = r3 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4b4bc;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4b4bc:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b4d4;
                    pc=0x3a600;
                    run_3a600(); return;
                case 0x4b4d4:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b4e0;
                    pc=0x30400;
                    run_30400(); return;
                case 0x4b4e0:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x4b47c;
                        continue;
                    }
                case 0x4b4f0:
                    r2 = r0 + r0;
                case 0x4b4f4:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r23 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r22 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r20 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b524:
                    r2 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r4 = r4 & 255;
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                case 0x4b544:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b5e8;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b580;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b638;
                        run_4b600(); return;
                    }
                case 0x4b568:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b66c;
                        run_4b600(); return;
                    }
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4b4f4;
                    continue;
                case 0x4b580:
                    r2 = (r16&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r2 << 24;
                    r2 = r4 | r2;
                    r3 = r3 << 8;
                    r2 = r2 | r3;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x4b568;
                    continue;
                case 0x4b5e8:
                    r2 = 1 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x4b600:
                    pc=0x4b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b600() throws ExecutionException { /* 0x4b600 - 0x4b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b600:
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        run_4b400(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        run_4b400(); return;
                    }
                    r3 = r3 << 16;
                    r2 = r2 << 24;
                    r2 = r3 | r2;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x4b568;
                    run_4b400(); return;
                case 0x4b638:
                    r2 = 256 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        run_4b400(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4f0;
                        run_4b400(); return;
                    }
                    r2 = r2 << 24;
                    r16 = r16 | r2;
                    /* Next insn is delay slot */ 
                    pc=0x4b568;
                    run_4b400(); return;
                case 0x4b66c:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4b4f4;
                    run_4b400(); return;
                case 0x4b800:
                    pc=0x4b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b800() throws ExecutionException { /* 0x4b800 - 0x4ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b800:
                    r29 = r29 + -32;
                    r5 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4b814;
                    pc=0x4b400;
                    run_4b400(); return;
                case 0x4b814:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b830;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b830:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ba00:
                    pc=0x4ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ba00() throws ExecutionException { /* 0x4ba00 - 0x4bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ba00:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r5 = r5 & 65535;
                    r2 = r20 < 2 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    r19 = r6 + r0;
                    r22 = r7 + r0;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bbcc;
                        continue;
                    }
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r0 + 2;
                case 0x4ba54:
                    r4 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba6c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4ba6c;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x4ba6c:
                    r4 = 6 << 16;
                    r5 = 6 << 16;
                    r4 = r4 + 28440;
                    r5 = r5 + 25752;
                    /* Next insn is delay slot */ 
                    r31=0x4ba84;
                    pc=0x33800;
                    run_33800(); return;
                case 0x4ba84:
                    writePages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff] = r2;
                    r21 = r0 + r0;
                case 0x4ba8c:
                    /* Next insn is delay slot */ 
                    r31=0x4ba94;
                    pc=0x49000;
                    run_49000(); return;
                case 0x4ba94:
                    r18 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bb6c;
                        continue;
                    }
                case 0x4baa0:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4baec;
                        continue;
                    }
                    addr=r2+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba8c;
                        continue;
                    }
                    r8 = r19 + 2;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4bae0;
                    continue;
                case 0x4bacc:
                    r8 = r8 + 2;
                    addr=r8+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba8c;
                        continue;
                    }
                case 0x4bae0:
                    r3 = r3 + 1;
                    if(r3 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4bacc;
                        continue;
                    }
                case 0x4baec:
                    r23 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba8c;
                        continue;
                    }
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x4bb24;
                    continue;
                case 0x4bb10:
                    r23 = r23 + 4;
                    r4 = readPages[(r23+-4)>>>12][((r23+-4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba8c;
                        continue;
                    }
                case 0x4bb24:
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4bb30;
                    pc=0x39600;
                    run_39600(); return;
                case 0x4bb30:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bb10;
                        continue;
                    }
                    r2 = r16 < r20 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bbc0;
                        continue;
                    }
                    addr=r18+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r16 << 1;
                    r2 = r19 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x4bb5c;
                    pc=0x49000;
                    run_49000(); return;
                case 0x4bb5c:
                    r16 = r16 + 1;
                    r18 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4baa0;
                        continue;
                    }
                case 0x4bb6c:
                    r4 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bb84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4bb84;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x4bb84:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r21 + r0;
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff] = r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4bbc0:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ba8c;
                    continue;
                case 0x4bbcc:
                    r16 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4ba54;
                    continue;
                case 0x4bc00:
                    pc=0x4bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4bc00() throws ExecutionException { /* 0x4bc00 - 0x4be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4bc00:
                    r29 = r29 + -96;
                    r6 = r29 + 16;
                    r7 = r29 + 80;
                    r2 = r0 + 32;
                    r5 = r5 & 65535;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x4bc24;
                    pc=0x4ba00;
                    run_4ba00(); return;
                case 0x4bc24:
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r5 = tmp;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x4bc38;
                    pc=0x3eee4;
                    run_3ee00(); return;
                case 0x4bc38:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4be00:
                    pc=0x4be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4be00() throws ExecutionException { /* 0x4be00 - 0x4c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4be00:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f800;
                    run_4f800(); return;
                case 0x4c000:
                    pc=0x4c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c000() throws ExecutionException { /* 0x4c000 - 0x4c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c000:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c130;
                        continue;
                    }
                case 0x4c024:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r8 = r3 < 32 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0ac;
                        continue;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + 23040;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c064;
                        continue;
                    }
                case 0x4c048:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c064:
                    r4 = r0 + 400;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4c07c;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x4c07c:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c048;
                        continue;
                    }
                    r3 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    r3 = r0 + r0;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r0;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r0;
                case 0x4c0ac:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0e8;
                        continue;
                    }
                case 0x4c0b4:
                    r4 = r3 + 1;
                    r3 = r3 + 2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c0e8:
                    r4 = r3 << 2;
                    r4 = r2 + r4;
                    writePages[(r4+136)>>>12][((r4+136)>>>2)&0x3ff] = r6;
                    r8 = readPages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r6 = r6 << (r3&0x1f);
                    r8 = r8 | r6;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r8;
                    writePages[(r4+264)>>>12][((r4+264)>>>2)&0x3ff] = r7;
                    r4 = r0 + 2;
                    if(r17 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0b4;
                        continue;
                    }
                    r4 = readPages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff];
                    r6 = r4 | r6;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4c0b4;
                    continue;
                case 0x4c130:
                    r2 = r16 + 332;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4c024;
                    continue;
                case 0x4c200:
                    pc=0x4c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c200() throws ExecutionException { /* 0x4c200 - 0x4c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c200:
                    r2 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    r2 = r2 + 328;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r0 + 1;
                    r21 = r0 + -1;
                case 0x4c248:
                    r2 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r23 = readPages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff];
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2cc;
                        continue;
                    }
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x4c264:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2bc;
                        continue;
                    }
                    r18 = r3 + 1;
                    r17 = r23 + 136;
                    r4 = r16 << 2;
                    r18 = r18 << 2;
                    r17 = r17 + r4;
                    r18 = r23 + r18;
                case 0x4c290:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c300;
                        continue;
                    }
                    r3 = readPages[(r17+128)>>>12][((r17+128)>>>2)&0x3ff];
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x4c300;
                        continue;
                    }
                case 0x4c2a8:
                    r16 = r16 + -1;
                    r17 = r17 + -4;
                    r18 = r18 + -4;
                    if(r16 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x4c290;
                        continue;
                    }
                case 0x4c2bc:
                    r2 = 3 << 16;
                    r2 = r2 + 23552;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c3b4;
                        continue;
                    }
                case 0x4c2cc:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c300:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    if(r4 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4c394;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x4c318:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2a8;
                        continue;
                    }
                    r5 = readPages[(r23+392)>>>12][((r23+392)>>>2)&0x3ff];
                    r4 = r20 << (r16&0x1f);
                    r5 = r4 & r5;
                    r22 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c384;
                        continue;
                    }
                    r5 = readPages[(r23+396)>>>12][((r23+396)>>>2)&0x3ff];
                    r4 = r4 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c3a0;
                        continue;
                    }
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x4c35c;
                    return;
                case 0x4c35c:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x4c248;
                        continue;
                    }
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2a8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4c248;
                    continue;
                case 0x4c384:
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x4c38c;
                    return;
                case 0x4c38c:
                    /* Next insn is delay slot */ 
                    pc=0x4c35c;
                    continue;
                case 0x4c394:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x4c318;
                    continue;
                case 0x4c3a0:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x4c3ac;
                    return;
                case 0x4c3ac:
                    /* Next insn is delay slot */ 
                    pc=0x4c35c;
                    continue;
                case 0x4c3b4:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c3fc;
                        continue;
                    }
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c410;
                        run_4c400(); return;
                    }
                    r4 = r23 + r0;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4c3e4;
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x4c3e4:
                    r23 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                case 0x4c3ec:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c264;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4c2cc;
                    continue;
                case 0x4c3fc:
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                case 0x4c400:
                    pc=0x4c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c400() throws ExecutionException { /* 0x4c400 - 0x4c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c400:
                    r30 = r23 + r0;
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c3ec;
                    run_4c200(); return;
                case 0x4c410:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c400;
                    continue;
                case 0x4c600:
                    pc=0x4c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c600() throws ExecutionException { /* 0x4c600 - 0x4c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c600:
                    r29 = r29 + -48;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r2 < r17 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c874;
                        run_4c800(); return;
                    }
                    r17 = r17 + -1;
                    r12 = r17 << 2;
                    r16 = r5 + 20;
                    r18 = r16 + r12;
                    r19 = r4 + 20;
                    r12 = r19 + r12;
                    r22 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x4c66c;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4c66c:
                    r22 = lo;
                    r21 = lo;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c768;
                        continue;
                    }
                    r6 = r16 + r0;
                    r3 = r19 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + r0;
                case 0x4c68c:
                    r6 = r6 + 4;
                    r11 = readPages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff];
                    r8 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r11 & 65535;
                    { long hilo = (long)(r22) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r10 = lo;
                    r10 = r4 + r10;
                    r4 = r10 >>> 16;
                    { long hilo = (long)(r22) * ((long)r11); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = r10 & 65535;
                    r7 = r2 - r7;
                    r11 = lo;
                    r9 = r4 + r11;
                    r11 = r8 & 65535;
                    r7 = r7 + r11;
                    r4 = r9 >>> 16;
                    r8 = r8 >>> 16;
                    r9 = r9 & 65535;
                    r2 = r7 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r2;
                    r2 = r8 >> 16;
                    r7 = r7 & 65535;
                    r8 = r8 << 16;
                    r7 = r8 | r7;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r7;
                    r7 = ((r18 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c68c;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c768;
                        continue;
                    }
                    r2 = r12 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c764;
                        continue;
                    }
                    r3 = readPages[(r12+-4)>>>12][((r12+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c750;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4c764;
                    continue;
                case 0x4c740:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c764;
                        continue;
                    }
                case 0x4c750:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c740;
                        continue;
                    }
                case 0x4c764:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x4c768:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4c774;
                    pc=0x52200;
                    run_52200(); return;
                case 0x4c774:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c844;
                        run_4c800(); return;
                    }
                    r21 = r22 + 1;
                    r3 = r19 + r0;
                    r8 = r0 + r0;
                case 0x4c788:
                    r16 = r16 + 4;
                    r7 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r7 & 65535;
                    r2 = r6 & 65535;
                    r5 = r8 - r5;
                    r5 = r5 + r2;
                    r6 = r6 >>> 16;
                    r7 = r7 >>> 16;
                    r2 = r5 >> 16;
                    r6 = r6 - r7;
                    r6 = r6 + r2;
                    r8 = r6 >> 16;
                    r5 = r5 & 65535;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c788;
                        continue;
                    }
                    r3 = r17 << 2;
                    r3 = r19 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c844;
                        run_4c800(); return;
                    }
                    r2 = r3 + -4;
                    r4 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c840;
                        run_4c800(); return;
                    }
                case 0x4c800:
                    pc=0x4c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c800() throws ExecutionException { /* 0x4c800 - 0x4ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c800:
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c82c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4c840;
                    continue;
                case 0x4c81c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c840;
                        continue;
                    }
                case 0x4c82c:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c81c;
                        continue;
                    }
                case 0x4c840:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x4c844:
                    r2 = r21 + r0;
                case 0x4c848:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c874:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c848;
                    continue;
                case 0x4ca00:
                    pc=0x4ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ca00() throws ExecutionException { /* 0x4ca00 - 0x4cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ca00:
                    r5 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r29 = r29 + -128;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = f20;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = f21;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ca70;
                        continue;
                    }
                    r2 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = r3 << (r2&0x1f);
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4ca6c;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4ca6c:
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r0;
                case 0x4ca70:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cb7c;
                        continue;
                    }
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                case 0x4ca88:
                    r2 = 32752 << 16;
                    r3 = r18 & r2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4cb24;
                        continue;
                    }
                    f20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r0;
                    f21 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4cba0;
                        continue;
                    }
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d16c;
                        run_4d000(); return;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 24121;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = 6 << 16;
                    r2 = r2 + 24120;
                case 0x4cae8:
                    f20 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    f21 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4cb24:
                    r8 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r9 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 9999;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d10c;
                        run_4d000(); return;
                    }
                case 0x4cb3c:
                    r2 = 6 << 16;
                    r2 = r2 + 28684;
                case 0x4cb44:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cae8;
                        continue;
                    }
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d130;
                        run_4d000(); return;
                    }
                    r3 = r2 + 3;
                case 0x4cb68:
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4cae8;
                    continue;
                case 0x4cb7c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = 32767 << 16;
                    r18 = r18 | 65535;
                    r2 = r0 + 1;
                    r18 = r18 & r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x4ca88;
                    continue;
                case 0x4cba0:
                    r2 = r29 + 24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r7 = f20;
                    r2 = r29 + 28;
                    r6 = f21;
                    r4 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4cbc4;
                    pc=0x52a00;
                    run_52a00(); return;
                case 0x4cbc4:
                    r4 = r18 >>> 20;
                    r17 = r2 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d13c;
                        run_4d000(); return;
                    }
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r5 + r4;
                    r2 = r4 < -1041 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d7f0;
                        run_4d600(); return;
                    }
                    r2 = r0 + -1010;
                    r2 = r2 - r4;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 << (r2&0x1f);
                case 0x4cc00:
                    pc=0x4cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4cc00() throws ExecutionException { /* 0x4cc00 - 0x4ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4cc00:
                    r2 = r4 + 1042;
                    r2 = r6 >>> (r2&0x1f);
                    r18 = r18 | r2;
                case 0x4cc0c:
                    f0 = r18;
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd98;
                        run_4dc00(); return;
                    }
                case 0x4cc20:
                    r2 = f3;
                    r6 = 65040 << 16;
                    r3 = f2;
                    r2 = r6 + r2;
                    r4 = r4 + -1;
                    r19 = r0 + 1;
                case 0x4cc38:
                    f4 = r3;
                    f0 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    f5 = r2;
                    f1 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    f6 = r4;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32684)>>>12][((r28+-32684)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32676)>>>12][((r28+-32676)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f6)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4d784;
                        run_4d600(); return;
                    }
                case 0x4ccdc:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = (r8&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d74c;
                        run_4d600(); return;
                    }
                    r3 = 6 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 28792;
                    r2 = r2 + r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4d808;
                        run_4d800(); return;
                    }
                    r8 = r8 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x4cd30:
                    r4 = r5 - r4;
                    r23 = r4 + -1;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d774;
                        run_4d600(); return;
                    }
                    r18 = r0 + r0;
                case 0x4cd44:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d75c;
                        run_4d600(); return;
                    }
                    r23 = r23 + r8;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    r22 = r0 + r0;
                case 0x4cd60:
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d17c;
                        run_4d000(); return;
                    }
                    r2 = r3 < 6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e1f8;
                        run_4e000(); return;
                    }
                    r3 = r3 + -4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r3;
                    r8 = r0 + r0;
                case 0x4cd8c:
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ddb4;
                        run_4dc00(); return;
                    }
                    r2 = r9 < 4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dc2c;
                        run_4dc00(); return;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9fc;
                        run_4d800(); return;
                    }
                    r2 = r0 + 5;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4d180;
                        run_4d000(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                case 0x4cdcc:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r9 = r9 + r3;
                    r30 = r9 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r9;
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de18;
                        run_4de00(); return;
                    }
                    r6 = r30 + r0;
                case 0x4cdf0:
                    r2 = (r6&0xffffffffL) < (24&0xffffffffL) ? 1 : 0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e204;
                        run_4e200(); return;
                    }
                case 0x4ce00:
                    pc=0x4ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ce00() throws ExecutionException { /* 0x4ce00 - 0x4d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ce00:
                    r3 = r0 + 1;
                    r2 = r0 + 4;
                case 0x4ce08:
                    r2 = r2 << 1;
                    r4 = r2 + 20;
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r5 = r3 + r0;
                    r3 = r3 + 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ce08;
                        continue;
                    }
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r5;
                    r21 = r6 + r0;
                case 0x4ce2c:
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r8;
                    r21 = (r21&0xffffffffL) < (15&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r31=0x4ce40;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x4ce40:
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d1b4;
                        run_4d000(); return;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d1b4;
                        run_4d000(); return;
                    }
                    f8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de2c;
                        run_4de00(); return;
                    }
                    r3 = r8 & 15;
                    r2 = 6 << 16;
                    r3 = r3 << 3;
                    r2 = r2 + 28792;
                    r2 = r3 + r2;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r8 >> 4;
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dde0;
                        run_4dc00(); return;
                    }
                    r3 = 6 << 16;
                    f0 = readPages[(r3+28788)>>>12][((r3+28788)>>>2)&0x3ff];
                    r2 = r2 & 15;
                    f1 = readPages[(r3+28784)>>>12][((r3+28784)>>>2)&0x3ff];
                    r8 = r0 + 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x4ceb8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cef8;
                        continue;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 28752;
                case 0x4cec8:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cee8;
                        continue;
                    }
                    f4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x4cee8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cec8;
                        continue;
                    }
                case 0x4cef8:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x4cefc:
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cf2c;
                        continue;
                    }
                    f2 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e0b4;
                        run_4e000(); return;
                    }
                case 0x4cf2c:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd00;
                        run_4dc00(); return;
                    }
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r30 + r0;
                case 0x4cf6c:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r4 + -1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df74;
                        run_4de00(); return;
                    }
                    r3 = 6 << 16;
                    r5 = r5 << 3;
                    r3 = r3 + 28792;
                    r3 = r5 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f6 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f6 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f4 = r9;
                    r7 = f6;
                    f5 = r8;
                    r5 = r7 + 48;
                    r5 = r5 << 24;
                    r5 = r5 >> 24;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f6)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0c0;
                        run_4d000(); return;
                    }
                case 0x4d000:
                    pc=0x4d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d000() throws ExecutionException { /* 0x4d000 - 0x4d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d000:
                    f10 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    f11 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e180;
                        run_4e000(); return;
                    }
                    r5 = r4 < 2 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd68;
                        run_4dc00(); return;
                    }
                    f6 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4d064;
                    continue;
                case 0x4d048:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e180;
                        run_4e000(); return;
                    }
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd68;
                        run_4dc00(); return;
                    }
                case 0x4d064:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = r3 + 1;
                    r8 = fcsr;
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f12 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f12 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    { long l = Double.doubleToLongBits(((double)f12)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r9 = f12;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = r9 + 48;
                    r5 = r5 << 24;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    r5 = r5 >> 24;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4d048;
                        continue;
                    }
                case 0x4d0c0:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                case 0x4d0c4:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4d0d8;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4d0d8:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r8 + 1;
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dc20;
                        run_4dc00(); return;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cae8;
                    run_4ca00(); return;
                case 0x4d10c:
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r18 = r18 & r2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cb3c;
                        run_4ca00(); return;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 28672;
                    /* Next insn is delay slot */ 
                    pc=0x4cb44;
                    run_4ca00(); return;
                case 0x4d130:
                    r3 = r2 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4cb68;
                    run_4ca00(); return;
                case 0x4d13c:
                    r2 = f21;
                    r6 = 15 << 16;
                    r6 = r6 | 65535;
                    r5 = 16368 << 16;
                    r6 = r2 & r6;
                    r2 = r6 | r5;
                    r3 = f20;
                    r4 = r4 + -1023;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cc38;
                    run_4cc00(); return;
                case 0x4d16c:
                    r2 = 6 << 16;
                    r2 = r2 + 24120;
                    /* Next insn is delay slot */ 
                    pc=0x4cae8;
                    run_4ca00(); return;
                case 0x4d17c:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                case 0x4d180:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d194;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x4d194:
                    r8 = r0 + -1;
                    r9 = r0 + 1;
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r8;
                    r30 = r0 + -1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x4d1b4:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d37c;
                        run_4d200(); return;
                    }
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r8 < 15 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d37c;
                        run_4d200(); return;
                    }
                    r3 = 6 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 28792;
                    r2 = r2 + r3;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da28;
                        run_4da00(); return;
                    }
                case 0x4d1fc:
                    f6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x4d200:
                    pc=0x4d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d200() throws ExecutionException { /* 0x4d200 - 0x4d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d200:
                    f7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    { long l = Double.doubleToLongBits(((double)f10)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = f10;
                    r3 = r20 + 1;
                    r2 = r4 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4d300;
                        continue;
                    }
                    f6 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    f8 = r0;
                    f7 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    f9 = r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0c4;
                        run_4d000(); return;
                    }
                    r2 = r20 + 2;
                    r30 = r20 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x4d2ac;
                    continue;
                case 0x4d294:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 1;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0c4;
                        run_4d000(); return;
                    }
                case 0x4d2ac:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r3 = r2 + r0;
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f10)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r5 = f10;
                    r4 = r5 + 48;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x4d294;
                        continue;
                    }
                case 0x4d300:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4d338;
                        continue;
                    }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0c4;
                        run_4d000(); return;
                    }
                    r4 = f10;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0c4;
                        run_4d000(); return;
                    }
                case 0x4d338:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x4d33c:
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x4d358;
                    continue;
                case 0x4d348:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4deb4;
                        run_4de00(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = r2 + r0;
                case 0x4d358:
                    r2 = r3 + -1;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4d348;
                        continue;
                    }
                    r4 = r5 + 1;
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4d0c4;
                    run_4d000(); return;
                case 0x4d37c:
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d7b8;
                        run_4d600(); return;
                    }
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r9 = r9 < 2 ? 1 : 0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r9;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dafc;
                        run_4da00(); return;
                    }
                    r3 = r30 + -1;
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ddc0;
                        run_4dc00(); return;
                    }
                    r3 = r22 - r3;
                case 0x4d3b8:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e078;
                        run_4e000(); return;
                    }
                    r21 = r18 + r0;
                    r2 = r30 + r0;
                case 0x4d3c8:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    r18 = r18 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x4d3e4;
                    pc=0x51800;
                    run_51800(); return;
                case 0x4d3e4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = r2 + r0;
                case 0x4d3ec:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d418;
                        run_4d400(); return;
                    }
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d418;
                        run_4d400(); return;
                    }
                    r4 = r21 < r23 ? 1 : 0;
                case 0x4d400:
                    pc=0x4d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d400() throws ExecutionException { /* 0x4d400 - 0x4d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d400:
                    r2 = r23 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9f0;
                        run_4d800(); return;
                    }
                case 0x4d40c:
                    r18 = r18 - r2;
                    r21 = r21 - r2;
                    r23 = r23 - r2;
                case 0x4d418:
                    if(r22 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d494;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd78;
                        run_4dc00(); return;
                    }
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d488;
                        continue;
                    }
                    r6 = r3 + r0;
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4d450;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x4d450:
                    r5 = r2 + r0;
                    r6 = r17 + r0;
                    r4 = r16 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d468;
                    pc=0x51a00;
                    run_51a00(); return;
                case 0x4d468:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4d47c;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4d47c:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r17 = r2 + r0;
                case 0x4d488:
                    r6 = r22 - r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4daa4;
                        run_4da00(); return;
                    }
                case 0x4d494:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4d4a4;
                    pc=0x51800;
                    run_51800(); return;
                case 0x4d4a4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r2 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4cc;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d4c8;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x4d4c8:
                    r22 = r2 + r0;
                case 0x4d4cc:
                    r7 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9a0;
                        run_4d800(); return;
                    }
                case 0x4d4dc:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x4d4e0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dbf0;
                        run_4da00(); return;
                    }
                    r2 = r0 + 1;
                case 0x4d4f4:
                    r2 = r2 + r23;
                    r2 = r2 & 31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d7d8;
                        run_4d600(); return;
                    }
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    r4 = r3 < 5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e1dc;
                        run_4e000(); return;
                    }
                    r3 = r0 + 28;
                    r2 = r3 - r2;
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                case 0x4d52c:
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d54c;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d548;
                    pc=0x52000;
                    run_52000(); return;
                case 0x4d548:
                    r17 = r2 + r0;
                case 0x4d54c:
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d56c;
                        continue;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d568;
                    pc=0x52000;
                    run_52000(); return;
                case 0x4d568:
                    r22 = r2 + r0;
                case 0x4d56c:
                    r8 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d948;
                        run_4d800(); return;
                    }
                case 0x4d57c:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dc44;
                        run_4dc00(); return;
                    }
                case 0x4d584:
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d814;
                        run_4d800(); return;
                    }
                    if(r21 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5b4;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d5b0;
                    pc=0x52000;
                    run_52000(); return;
                case 0x4d5b0:
                    r19 = r2 + r0;
                case 0x4d5b4:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ded8;
                        run_4de00(); return;
                    }
                    r21 = r19 + r0;
                case 0x4d5c8:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = r20 + r30;
                    r8 = r8 & 1;
                    r18 = r20 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r8;
                case 0x4d5e0:
                    r9 = r18 + -1;
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x4d5f8;
                    pc=0x4c600;
                    run_4c600(); return;
                case 0x4d5f8:
                    r4 = r17 + r0;
                    r5 = r19 + r0;
                case 0x4d600:
                    pc=0x4d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d600() throws ExecutionException { /* 0x4d600 - 0x4d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d600:
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r23 = r2 + 48;
                    /* Next insn is delay slot */ 
                    r31=0x4d610;
                    pc=0x52200;
                    run_52200(); return;
                case 0x4d610:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d628;
                    pc=0x52400;
                    run_52400(); return;
                case 0x4d628:
                    r3 = r2 + r0;
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dbd4;
                        run_4da00(); return;
                    }
                    r5 = r3 + r0;
                    r4 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4d650;
                    pc=0x52200;
                    run_52200(); return;
                case 0x4d650:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4d668;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4d668:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d698;
                        continue;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d698;
                        continue;
                    }
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db90;
                        run_4da00(); return;
                    }
                case 0x4d698:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db24;
                        run_4da00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d6c8;
                        continue;
                    }
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d6c8;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db24;
                        run_4da00(); return;
                    }
                case 0x4d6c8:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df28;
                        run_4de00(); return;
                    }
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r18 + r0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x4df54;
                        run_4de00(); return;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d6fc;
                    pc=0x51000;
                    run_51000(); return;
                case 0x4d6fc:
                    r17 = r2 + r0;
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x4dbb8;
                        run_4da00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4d720;
                    pc=0x51000;
                    run_51000(); return;
                case 0x4d720:
                    r5 = r21 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d73c;
                    pc=0x51000;
                    run_51000(); return;
                case 0x4d73c:
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d5e0;
                    run_4d400(); return;
                case 0x4d74c:
                    r3 = r0 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4cd30;
                    run_4cc00(); return;
                case 0x4d75c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    r18 = r18 - r9;
                    r22 = r0 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x4cd60;
                    run_4cc00(); return;
                case 0x4d774:
                    r18 = r0 - r23;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cd44;
                    run_4cc00(); return;
                case 0x4d784:
                    f4 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f4)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4ccdc;
                        run_4cc00(); return;
                    }
                    r3 = f4;
                    r3 = r3 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4ccdc;
                    run_4cc00(); return;
                case 0x4d7b8:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r22 + r0;
                    r8 = r8 < 2 ? 1 : 0;
                    r21 = r18 + r0;
                    r19 = r0 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x4d3ec;
                    run_4d200(); return;
                case 0x4d7d8:
                    r2 = r0 + 28;
                case 0x4d7dc:
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d52c;
                    run_4d400(); return;
                case 0x4d7f0:
                    r18 = r0 + -1042;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 - r4;
                    r18 = r7 << (r18&0x1f);
                case 0x4d800:
                    pc=0x4d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d800() throws ExecutionException { /* 0x4d800 - 0x4da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d800:
                    /* Next insn is delay slot */ 
                    pc=0x4cc0c;
                    run_4cc00(); return;
                case 0x4d808:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cd30;
                    run_4cc00(); return;
                case 0x4d814:
                    r18 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d83c;
                    continue;
                case 0x4d820:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d838;
                    pc=0x51000;
                    run_51000(); return;
                case 0x4d838:
                    r17 = r2 + r0;
                case 0x4d83c:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d84c;
                    pc=0x4c600;
                    run_4c600(); return;
                case 0x4d84c:
                    r18 = r18 + 1;
                    r23 = r2 + 48;
                    r2 = r18 - r20;
                    r2 = r2 < r30 ? 1 : 0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d820;
                        continue;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db18;
                        run_4da00(); return;
                    }
                case 0x4d870:
                    r3 = r20 + r30;
                    r18 = r0 + r0;
                case 0x4d878:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4d890;
                    pc=0x52000;
                    run_52000(); return;
                case 0x4d890:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d8a4;
                    pc=0x52200;
                    run_52200(); return;
                case 0x4d8a4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                case 0x4d8b0:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                case 0x4d8b4:
                    r5 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x4d8d0;
                    continue;
                case 0x4d8c0:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcb4;
                        run_4dc00(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r2 + r0;
                case 0x4d8d0:
                    r2 = r3 + -1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8c0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4d8e4:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4d8f8;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4d8f8:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0c4;
                        run_4d000(); return;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d928;
                        continue;
                    }
                    if(r18 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x4d928;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d924;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4d924:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                case 0x4d928:
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4d93c;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4d93c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4d0c4;
                    run_4d000(); return;
                case 0x4d948:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4d958;
                    pc=0x52200;
                    run_52200(); return;
                case 0x4d958:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d57c;
                        run_4d400(); return;
                    }
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r9 = r9 + -1;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x4d984;
                    pc=0x51000;
                    run_51000(); return;
                case 0x4d984:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e1a8;
                        run_4e000(); return;
                    }
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4d57c;
                    run_4d400(); return;
                case 0x4d9a0:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4dc;
                        run_4d400(); return;
                    }
                    r2 = 15 << 16;
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4dc;
                        run_4d400(); return;
                    }
                    r2 = 32752 << 16;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4dc;
                        run_4d400(); return;
                    }
                    r3 = r0 + 1;
                    r18 = r18 + 1;
                    r23 = r23 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4d4e0;
                    run_4d400(); return;
                case 0x4d9f0:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d40c;
                    run_4d400(); return;
                case 0x4d9fc:
                    r9 = r0 + 1;
                case 0x4da00:
                    pc=0x4da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4da00() throws ExecutionException { /* 0x4da00 - 0x4dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4da00:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x4da04:
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ddf0;
                        run_4dc00(); return;
                    }
                    r6 = r4 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r30 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cdf0;
                    run_4cc00(); return;
                case 0x4da28:
                    if(r30 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d1fc;
                        run_4d000(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd58;
                        run_4dc00(); return;
                    }
                    f0 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4dc94;
                        run_4dc00(); return;
                    }
                case 0x4da6c:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r20 + r0;
                    r9 = ~(r0 | r9);
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                case 0x4da7c:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4da90;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4da90:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d928;
                        run_4d800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4d0c4;
                    run_4d000(); return;
                case 0x4daa4:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dab4;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x4dab4:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d494;
                    run_4d400(); return;
                case 0x4dac0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dad4;
                        continue;
                    }
                    r23 = r23 & 1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8b0;
                        run_4d800(); return;
                    }
                case 0x4dad4:
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x4dae4;
                    continue;
                case 0x4dae0:
                    r3 = r4 + r0;
                case 0x4dae4:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r3 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4dae0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4d8e4;
                    run_4d800(); return;
                case 0x4dafc:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e088;
                        run_4e000(); return;
                    }
                    r2 = r2 + 1075;
                    r3 = r22 + r0;
                    r21 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d3c8;
                    run_4d200(); return;
                case 0x4db18:
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d870;
                    run_4d800(); return;
                case 0x4db24:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db74;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4db40;
                    pc=0x52000;
                    run_52000(); return;
                case 0x4db40:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4db54;
                    pc=0x52200;
                    run_52200(); return;
                case 0x4db54:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e18c;
                        run_4e000(); return;
                    }
                case 0x4db5c:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e11c;
                        run_4e000(); return;
                    }
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r3 + 49;
                case 0x4db74:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = r19 + r0;
                    r3 = r7 + 1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d8e4;
                    run_4d800(); return;
                case 0x4db90:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e11c;
                        run_4e000(); return;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db74;
                        continue;
                    }
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r9 + 49;
                    /* Next insn is delay slot */ 
                    pc=0x4db74;
                    continue;
                case 0x4dbb8:
                    /* Next insn is delay slot */ 
                    r31=0x4dbc0;
                    pc=0x51000;
                    run_51000(); return;
                case 0x4dbc0:
                    r19 = r2 + r0;
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d5e0;
                    run_4d400(); return;
                case 0x4dbd4:
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dbe4;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x4dbe4:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d698;
                    run_4d600(); return;
                case 0x4dbf0:
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r2 = r2 << 2;
                case 0x4dc00:
                    pc=0x4dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4dc00() throws ExecutionException { /* 0x4dc00 - 0x4de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4dc00:
                    r2 = r22 + r2;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4dc10;
                    pc=0x51400;
                    run_51400(); return;
                case 0x4dc10:
                    r3 = r0 + 32;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d4f4;
                    run_4d400(); return;
                case 0x4dc20:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cae8;
                    run_4ca00(); return;
                case 0x4dc2c:
                    r2 = r0 + 2;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4d180;
                        run_4d000(); return;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4da04;
                    run_4da00(); return;
                case 0x4dc44:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r8 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d584;
                        run_4d400(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da6c;
                        run_4da00(); return;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 5;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dc78;
                    pc=0x51000;
                    run_51000(); return;
                case 0x4dc78:
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    r22 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dc8c;
                    pc=0x52200;
                    run_52200(); return;
                case 0x4dc8c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da6c;
                        run_4da00(); return;
                    }
                case 0x4dc94:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r8 = r8 + 1;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x4da7c;
                    run_4da00(); return;
                case 0x4dcb4:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r9 = r9 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4d8e4;
                    run_4d800(); return;
                case 0x4dcd0:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                case 0x4dd00:
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = r9;
                    f3 = r8;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4df64;
                        run_4de00(); return;
                    }
                    r4 = 32768 << 16;
                    f2 = r9;
                    r2 = r4 ^ r8;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd68;
                        continue;
                    }
                case 0x4dd58:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4da6c;
                    run_4da00(); return;
                case 0x4dd68:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = f8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = f9;
                    /* Next insn is delay slot */ 
                    pc=0x4d1b4;
                    run_4d000(); return;
                case 0x4dd78:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dd8c;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x4dd8c:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d494;
                    run_4d400(); return;
                case 0x4dd98:
                    f0 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x4cc20;
                    run_4cc00(); return;
                case 0x4ddb4:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cdcc;
                    run_4cc00(); return;
                case 0x4ddc0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r3 - r22;
                    r7 = r7 + r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r7;
                    r22 = r3 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d3b8;
                    run_4d200(); return;
                case 0x4dde0:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4ceb8;
                    run_4ce00(); return;
                case 0x4ddf0:
                    r3 = r0 + 1;
                    r4 = r0 + 1;
                    r21 = r0 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                case 0x4de00:
                    pc=0x4de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4de00() throws ExecutionException { /* 0x4de00 - 0x4e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4de00:
                    r30 = r0 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ce2c;
                    run_4ce00(); return;
                case 0x4de18:
                    r21 = r30 + r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ce2c;
                    run_4ce00(); return;
                case 0x4de2c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 - r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e0a4;
                        run_4e000(); return;
                    }
                    r4 = r2 & 15;
                    r3 = 6 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 28792;
                    r3 = r4 + r3;
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 >> 4;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e1d0;
                        run_4e000(); return;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 28752;
                    r8 = r0 + 2;
                case 0x4de7c:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de9c;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x4de9c:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de7c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4cefc;
                    run_4ce00(); return;
                case 0x4deb4:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    r4 = r0 + 49;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4d0c4;
                    run_4d000(); return;
                case 0x4ded8:
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dee8;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x4dee8:
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r5 = r19 + 12;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x4df08;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x4df08:
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4df1c;
                    pc=0x52000;
                    run_52000(); return;
                case 0x4df1c:
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d5c8;
                    run_4d400(); return;
                case 0x4df28:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e11c;
                        run_4e000(); return;
                    }
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r18 = r19 + r0;
                    r3 = r9 + 1;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d8e4;
                    run_4d800(); return;
                case 0x4df54:
                    r18 = r19 + r0;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d878;
                    run_4d800(); return;
                case 0x4df64:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4dc94;
                    run_4dc00(); return;
                case 0x4df74:
                    r3 = 6 << 16;
                    r6 = r5 << 3;
                    r3 = r3 + 28792;
                    r3 = r6 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r9;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = r8;
                    r3 = r20 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f11 = (int)(l >>> 32); f10 = (int)l; }
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    r7 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r6 = r7 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4e044;
                        run_4e000(); return;
                    }
                    f6 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    r6 = r3 + r0;
                case 0x4dff4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r6 = r6 + 1;
                    r8 = fcsr;
                case 0x4e000:
                    pc=0x4e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e000() throws ExecutionException { /* 0x4e000 - 0x4e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e000:
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    r9 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r10 = r9 + 48;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4dff4;
                        run_4de00(); return;
                    }
                    r3 = r3 + r5;
                case 0x4e044:
                    f2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4e140;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d33c;
                    run_4d200(); return;
                case 0x4e078:
                    r21 = r18 - r30;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d3c8;
                    run_4d200(); return;
                case 0x4e088:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    r2 = r3 - r2;
                    r21 = r18 + r0;
                    r3 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d3c8;
                    run_4d200(); return;
                case 0x4e0a4:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4cefc;
                    run_4ce00(); return;
                case 0x4e0b4:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcd0;
                        run_4dc00(); return;
                    }
                    r9 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd68;
                        run_4dc00(); return;
                    }
                    f6 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f7 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    f4 = r8;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r3 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r3 = 64704 << 16;
                    f3 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r3 + r8;
                    /* Next insn is delay slot */ 
                    pc=0x4cf6c;
                    run_4ce00(); return;
                case 0x4e11c:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r0 + 57;
                    r18 = r19 + r0;
                    r3 = r8 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x4d8b4;
                    run_4d800(); return;
                case 0x4e140:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd68;
                        run_4dc00(); return;
                    }
                    r6 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x4e164;
                    continue;
                case 0x4e160:
                    r3 = r5 + r0;
                case 0x4e164:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r3 + -1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4e160;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d0c4;
                    run_4d000(); return;
                case 0x4e180:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d33c;
                    run_4d200(); return;
                case 0x4e18c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db74;
                        run_4da00(); return;
                    }
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db74;
                        run_4da00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4db5c;
                    run_4da00(); return;
                case 0x4e1a8:
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e1c0;
                    pc=0x51000;
                    run_51000(); return;
                case 0x4e1c0:
                    r19 = r2 + r0;
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4d57c;
                    run_4d400(); return;
                case 0x4e1d0:
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4cefc;
                    run_4ce00(); return;
                case 0x4e1dc:
                    r4 = r0 + 4;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4d52c;
                        run_4d400(); return;
                    }
                    r3 = r0 + 60;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d7dc;
                    run_4d600(); return;
                case 0x4e1f8:
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4cd8c;
                    run_4cc00(); return;
                case 0x4e200:
                    pc=0x4e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e200() throws ExecutionException { /* 0x4e200 - 0x4e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e200:
                case 0x4e204:
                    r21 = r6 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ce2c;
                    run_4ce00(); return;
                case 0x4e400:
                    pc=0x4e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e400() throws ExecutionException { /* 0x4e400 - 0x4e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e400:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 114;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4e498;
                        continue;
                    }
                    r3 = r0 + 119;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4e484;
                        continue;
                    }
                    r3 = r0 + 97;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4e43c;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e43c:
                    r7 = r0 + 520;
                    r4 = r0 + 1;
                    r2 = r0 + 264;
                case 0x4e448:
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e474;
                        continue;
                    }
                    r8 = r0 + 43;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x4e4ac;
                        continue;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x4e4ac;
                        continue;
                    }
                case 0x4e474:
                    r4 = r4 | r7;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e484:
                    r7 = r0 + 1536;
                    r4 = r0 + 1;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4e448;
                    continue;
                case 0x4e498:
                    r7 = r0 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x4e448;
                    continue;
                case 0x4e4ac:
                    r3 = r0 + -29;
                    r4 = r0 + 2;
                    r2 = r2 & r3;
                    r4 = r4 | r7;
                    r2 = r2 | 16;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e600:
                    pc=0x4e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e600() throws ExecutionException { /* 0x4e600 - 0x4e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e600:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x4e628;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4e628:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r29 + 28;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e658;
                        continue;
                    }
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e6b0;
                        continue;
                    }
                case 0x4e658:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e684;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x4e684:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x4e698;
                    pc=0x4ea00;
                    run_4ea00(); return;
                case 0x4e698:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e6b0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e6bc;
                    pc=0x32600;
                    run_32600(); return;
                case 0x4e6bc:
                    /* Next insn is delay slot */ 
                    pc=0x4e658;
                    continue;
                case 0x4e800:
                    pc=0x4e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e800() throws ExecutionException { /* 0x4e800 - 0x4ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e600;
                    run_4e600(); return;
                case 0x4ea00:
                    pc=0x4ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ea00() throws ExecutionException { /* 0x4ea00 - 0x4ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ea00:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ead4;
                        continue;
                    }
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r21 = r4 + r0;
                    r3 = r2 & 8;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb0c;
                        continue;
                    }
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb0c;
                        continue;
                    }
                    r3 = r2 & 2;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb38;
                        continue;
                    }
                case 0x4ea74:
                    r20 = r0 + r0;
                    r18 = r0 + r0;
                case 0x4ea7c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ebfc;
                        continue;
                    }
                    r2 = (r18&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = r18 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea9c;
                        continue;
                    }
                    r7 = r0 + 1024;
                case 0x4ea9c:
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x4eab0;
                    return;
                case 0x4eab0:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec3c;
                        run_4ec00(); return;
                    }
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r20 + r2;
                    r18 = r18 - r2;
                    r2 = r3 - r2;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea7c;
                        continue;
                    }
                case 0x4ead4:
                    r2 = r0 + r0;
                case 0x4ead8:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4eb0c:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eb1c;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x4eb1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4efec;
                        run_4ee00(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = r2 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea74;
                        continue;
                    }
                case 0x4eb38:
                    r3 = r2 & 1;
                    r22 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec58;
                        run_4ec00(); return;
                    }
                    r18 = r0 + r0;
                case 0x4eb4c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ebe8;
                        continue;
                    }
                case 0x4eb54:
                    r3 = r2 & 512;
                    r20 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed38;
                        run_4ec00(); return;
                    }
                    r3 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee00;
                        run_4ee00(); return;
                    }
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee84;
                        run_4ee00(); return;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r23 = r20 + r0;
                    r30 = r20 + r0;
                    r20 = r18 + r0;
                case 0x4eb8c:
                    r5 = r22 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eb9c;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x4eb9c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r30 = r2 - r30;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r30;
                    r3 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                case 0x4ebbc:
                    r22 = r22 + r2;
                    r18 = r18 - r2;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ead4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb54;
                        continue;
                    }
                case 0x4ebe8:
                    r22 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4eb4c;
                    continue;
                case 0x4ebfc:
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x4ec00:
                    pc=0x4ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ec00() throws ExecutionException { /* 0x4ec00 - 0x4ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ec00:
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4ea7c;
                    run_4ea00(); return;
                case 0x4ec10:
                    /* Next insn is delay slot */ 
                    r31=0x4ec18;
                    pc=0x37800;
                    run_37800(); return;
                case 0x4ec18:
                    r30 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef10;
                        run_4ee00(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ec34;
                    pc=0x34400;
                    run_34400(); return;
                case 0x4ec34:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                case 0x4ec3c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ead8;
                    run_4ea00(); return;
                case 0x4ec58:
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    r18 = r0 + r0;
                case 0x4ec64:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed20;
                        continue;
                    }
                case 0x4ec6c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee54;
                        run_4ee00(); return;
                    }
                case 0x4ec74:
                    r2 = ((r18 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec88;
                        continue;
                    }
                    r23 = r18 + r0;
                case 0x4ec88:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r23 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecb8;
                        continue;
                    }
                    r8 = r6 + r7;
                    r2 = r8 < r23 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef3c;
                        run_4ee00(); return;
                    }
                case 0x4ecb8:
                    r2 = r23 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eda0;
                        continue;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x4ece0;
                    return;
                case 0x4ece0:
                    r20 = r2 + r0;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec3c;
                        continue;
                    }
                case 0x4ecf0:
                    r22 = r22 - r20;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eddc;
                        continue;
                    }
                case 0x4ecfc:
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r30 = r30 + r20;
                    r18 = r18 - r20;
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ead4;
                        run_4ea00(); return;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec6c;
                        continue;
                    }
                case 0x4ed20:
                    r30 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = r0 + r0;
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4ec64;
                    continue;
                case 0x4ed38:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed5c;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef90;
                        run_4ee00(); return;
                    }
                case 0x4ed5c:
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = ((r18 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee18;
                        run_4ee00(); return;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x4ed88;
                    return;
                case 0x4ed88:
                    r20 = r2 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec3c;
                        continue;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ebbc;
                    run_4ea00(); return;
                case 0x4eda0:
                    r6 = r23 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4edb4;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x4edb4:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r22 = r22 - r20;
                    r2 = r2 - r23;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r23;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecfc;
                        continue;
                    }
                case 0x4eddc:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4edec;
                    pc=0x31000;
                    run_31000(); return;
                case 0x4edec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec3c;
                        continue;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ecfc;
                    continue;
                case 0x4ee00:
                    pc=0x4ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ee00() throws ExecutionException { /* 0x4ee00 - 0x4f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ee00:
                    r30 = r18 + r0;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4eb8c;
                    run_4ea00(); return;
                case 0x4ee18:
                    r5 = r22 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ee28;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x4ee28:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r2 = r2 - r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ebbc;
                    run_4ea00(); return;
                case 0x4ee54:
                    r4 = r30 + r0;
                    r5 = r0 + 10;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ee68;
                    pc=0x36800;
                    run_36800(); return;
                case 0x4ee68:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4efdc;
                        continue;
                    }
                    r22 = r2 + 1;
                    r22 = r22 - r30;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4ec74;
                    run_4ec00(); return;
                case 0x4ee84:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r6 = r4 << 1;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r6 + r4;
                    r20 = r4 >>> 31;
                    r23 = r3 - r5;
                    r4 = r20 + r4;
                    r6 = r23 + 1;
                    r20 = r4 >> 1;
                    r6 = r6 + r18;
                    r4 = ((r20 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4efd0;
                        continue;
                    }
                    r20 = r6 + r0;
                case 0x4eec0:
                    r2 = r2 & 1024;
                    r4 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec10;
                        run_4ec00(); return;
                    }
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eedc;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x4eedc:
                    r30 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec34;
                        run_4ec00(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eefc;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x4eefc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4ef10:
                    r4 = r30 + r23;
                    r3 = r20 - r23;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r30;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    r30 = r18 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4eb8c;
                    run_4ea00(); return;
                case 0x4ef3c:
                    r6 = r8 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x4ef54;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x4ef54:
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r8;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ef74;
                    pc=0x31000;
                    run_31000(); return;
                case 0x4ef74:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec3c;
                        run_4ec00(); return;
                    }
                    r20 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ecf0;
                    run_4ec00(); return;
                case 0x4ef90:
                    r5 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4efa0;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x4efa0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4efbc;
                    pc=0x31000;
                    run_31000(); return;
                case 0x4efbc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec3c;
                        run_4ec00(); return;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ebbc;
                    run_4ea00(); return;
                case 0x4efd0:
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4eec0;
                    continue;
                case 0x4efdc:
                    r22 = r18 + 1;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4ec74;
                    run_4ec00(); return;
                case 0x4efec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ead8;
                    run_4ea00(); return;
                case 0x4f000:
                    pc=0x4f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f000() throws ExecutionException { /* 0x4f000 - 0x4f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f400;
                    run_4f400(); return;
                case 0x4f200:
                    pc=0x4f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f200() throws ExecutionException { /* 0x4f200 - 0x4f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f200:
                    r29 = r29 + -32;
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4f21c;
                    pc=0x4f400;
                    run_4f400(); return;
                case 0x4f21c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4f400:
                    pc=0x4f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f400() throws ExecutionException { /* 0x4f400 - 0x4f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f400:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    r21 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f438;
                    pc=0x5b800;
                    run_5b800(); return;
                case 0x4f438:
                    r16 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4f0;
                        continue;
                    }
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f554;
                        continue;
                    }
                    r5 = r0 + 61;
                    r2 = r18 + r0;
                    r4 = r0 + 61;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4f47c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4f4f0;
                    continue;
                case 0x4f474:
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4f0;
                        continue;
                    }
                case 0x4f47c:
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f474;
                        continue;
                    }
                    r17 = r2 - r18;
                case 0x4f494:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4f0;
                        continue;
                    }
                    r22 = r0 + 61;
                case 0x4f4a8:
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f4b8;
                    pc=0x54e00;
                    run_54e00(); return;
                case 0x4f4b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4dc;
                        continue;
                    }
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r19 = r19 + r17;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x4f52c;
                        continue;
                    }
                case 0x4f4dc:
                    r16 = r16 + 4;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4a8;
                        continue;
                    }
                case 0x4f4f0:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f4fc;
                    pc=0x5ba00;
                    run_5ba00(); return;
                case 0x4f4fc:
                    r2 = r0 + r0;
                case 0x4f500:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4f52c:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r16 = r16 - r2;
                    r16 = r16 >> 2;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x4f548;
                    pc=0x5ba00;
                    run_5ba00(); return;
                case 0x4f548:
                    r2 = r19 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4f500;
                    continue;
                case 0x4f554:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f494;
                    continue;
                case 0x4f600:
                    pc=0x4f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f600() throws ExecutionException { /* 0x4f600 - 0x4f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f600:
                    r29 = r29 + -32;
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4f614;
                    pc=0x4f400;
                    run_4f400(); return;
                case 0x4f614:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4f800:
                    pc=0x4f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f800() throws ExecutionException { /* 0x4f800 - 0x4fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f800:
                    /* Next insn is delay slot */ 
                    pc=0x5b400;
                    run_5b400(); return;
                case 0x4fa00:
                    pc=0x4fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fa00() throws ExecutionException { /* 0x4fa00 - 0x4fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fa00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa38;
                        continue;
                    }
                    r5 = 6 << 16;
                    r4 = r6 + r0;
                    r5 = r5 + 28688;
                    /* Next insn is delay slot */ 
                    r31=0x4fa30;
                    pc=0x39600;
                    run_39600(); return;
                case 0x4fa30:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa5c;
                        continue;
                    }
                case 0x4fa38:
                    r17 = 6 << 16;
                case 0x4fa3c:
                    r17 = r17 + 25732;
                case 0x4fa40:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4fa5c:
                    r17 = 6 << 16;
                    r4 = r16 + r0;
                    r5 = r17 + 25732;
                    /* Next insn is delay slot */ 
                    r31=0x4fa70;
                    pc=0x39600;
                    run_39600(); return;
                case 0x4fa70:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa3c;
                        continue;
                    }
                    r5 = 6 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + 23396;
                    /* Next insn is delay slot */ 
                    r31=0x4fa8c;
                    pc=0x39600;
                    run_39600(); return;
                case 0x4fa8c:
                    r17 = r17 + 25732;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa40;
                        continue;
                    }
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4fa40;
                    continue;
                case 0x4fc00:
                    pc=0x4fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fc00() throws ExecutionException { /* 0x4fc00 - 0x4fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fc00:
                    r2 = 7 << 16;
                    r2 = r2 + -30920;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4fe00:
                    pc=0x4fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fe00() throws ExecutionException { /* 0x4fe00 - 0x50000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fe00:
                    r2 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50000:
                    pc=0x50000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50000() throws ExecutionException { /* 0x50000 - 0x50200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50000:
                    r2 = 7 << 16;
                    r2 = r2 + -30952;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50200:
                    pc=0x50200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50200() throws ExecutionException { /* 0x50200 - 0x50400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50200:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50400:
                    pc=0x50400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50400() throws ExecutionException { /* 0x50400 - 0x50600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50400:
                    r2 = 7 << 16;
                    r2 = r2 + -30888;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50600:
                    pc=0x50600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50600() throws ExecutionException { /* 0x50600 - 0x50800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4fa00;
                    run_4fa00(); return;
                case 0x50800:
                    pc=0x50800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50800() throws ExecutionException { /* 0x50800 - 0x50a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50800:
                    r2 = 7 << 16;
                    r2 = r2 + -30888;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50a00:
                    pc=0x50a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50a00() throws ExecutionException { /* 0x50a00 - 0x50c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50a00:
                    r3 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r2 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a50;
                        continue;
                    }
                    r7 = r5 + r6;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a50;
                        continue;
                    }
                    r3 = r4 + r6;
                    r5 = r3 - r6;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b48;
                        continue;
                    }
                case 0x50a30:
                    r7 = r7 + -1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x50a30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50a50:
                    r3 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b50;
                        continue;
                    }
                    r3 = r2 | r5;
                    r3 = r3 & 3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b64;
                        continue;
                    }
                    r7 = r5 + r0;
                    r3 = r2 + r0;
                    r4 = r6 + r0;
                case 0x50a78:
                    r8 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r7 = r7 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-12)>>>12][((r7+-12)>>>2)&0x3ff];
                    r3 = r3 + 16;
                    writePages[(r3+-12)>>>12][((r3+-12)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-8)>>>12][((r7+-8)>>>2)&0x3ff];
                    r4 = r4 + -16;
                    writePages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff];
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r8;
                    r8 = (r4&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a78;
                        continue;
                    }
                    r4 = r6 + -16;
                    r4 = r4 >>> 4;
                    r4 = r4 + 1;
                    r4 = r4 << 4;
                    r10 = r6 & 15;
                    r3 = r2 + r4;
                    r5 = r5 + r4;
                    r4 = (r10&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b78;
                        continue;
                    }
                    r8 = r5 + r0;
                    r7 = r3 + r0;
                    r4 = r10 + r0;
                case 0x50ae8:
                    r8 = r8 + 4;
                    r9 = readPages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    r4 = r4 + -4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r9;
                    r9 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ae8;
                        continue;
                    }
                    r4 = r10 + -4;
                    r4 = r4 >>> 2;
                    r4 = r4 + 1;
                    r4 = r4 << 2;
                    r6 = r6 & 3;
                    r3 = r3 + r4;
                    r5 = r5 + r4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b70;
                        continue;
                    }
                case 0x50b2c:
                    r6 = r3 + r6;
                case 0x50b30:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x50b30;
                        continue;
                    }
                case 0x50b48:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50b50:
                    r3 = r2 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50b70;
                    continue;
                case 0x50b64:
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50b2c;
                    continue;
                case 0x50b70:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50b78:
                    r6 = r10 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50b2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50b70;
                    continue;
                case 0x50c00:
                    pc=0x50c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50c00() throws ExecutionException { /* 0x50c00 - 0x50e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50c00:
                    r2 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c70;
                        continue;
                    }
                case 0x50c28:
                    r3 = r17 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c98;
                        continue;
                    }
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                case 0x50c4c:
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                case 0x50c54:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50c70:
                    r5 = r0 + 4;
                    r6 = r0 + 33;
                    /* Next insn is delay slot */ 
                    r31=0x50c80;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x50c80:
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c28;
                        continue;
                    }
                case 0x50c8c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50c54;
                    continue;
                case 0x50c98:
                    r18 = r0 + 1;
                    r18 = r18 << (r17&0x1f);
                    r6 = r18 + 5;
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x50cb8;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x50cb8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c8c;
                        continue;
                    }
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x50c4c;
                    continue;
                case 0x50e00:
                    pc=0x50e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50e00() throws ExecutionException { /* 0x50e00 - 0x51000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50e00:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e28;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x50e28:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51000:
                    pc=0x51000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51000() throws ExecutionException { /* 0x51000 - 0x51200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51000:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r18 = r4 + r0;
                    r17 = r5 + r0;
                    r3 = r5 + 20;
                    r8 = r0 + r0;
                case 0x5102c:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r9 = r11 & 65535;
                    { long hilo = (long)(r9) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r9 = lo;
                    r9 = r9 + r7;
                    r7 = r9 >>> 16;
                    { long hilo = (long)(r11) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r9 & 65535;
                    r11 = lo;
                    r10 = r7 + r11;
                    r7 = r10 >>> 16;
                    r10 = r10 << 16;
                    r9 = r10 + r9;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r9;
                    r9 = r8 < r16 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5102c;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x510b0;
                        continue;
                    }
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x510d4;
                        continue;
                    }
                case 0x51098:
                    r2 = r16 + 4;
                    r2 = r2 << 2;
                    r2 = r17 + r2;
                    r16 = r16 + 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r7;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r16;
                case 0x510b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x510d4:
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r5 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x510ec;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x510ec:
                    r6 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r5 = r17 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5110c;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x5110c:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+76)>>>12][((r18+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r17 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51098;
                    continue;
                case 0x51200:
                    pc=0x51200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51200() throws ExecutionException { /* 0x51200 - 0x51400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51200:
                    r29 = r29 + -48;
                    r2 = r0 + 9;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r7 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x51220;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x51220:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r18 = r6 + r0;
                    r19 = r7 + r0;
                    r4 = lo;
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5134c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r5 = r0 + r0;
                case 0x5125c:
                    r2 = r2 << 1;
                    r8 = r2 < r4 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5125c;
                        continue;
                    }
                case 0x51270:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5127c;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x5127c:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r18 < 10 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5133c;
                        continue;
                    }
                    r21 = r20 + 9;
                    r16 = r21 + r0;
                    r20 = r20 + r18;
                case 0x512a8:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x512c8;
                    pc=0x51000;
                    run_51000(); return;
                case 0x512c8:
                    if(r16 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x512a8;
                        continue;
                    }
                    r16 = r21 + r18;
                    r16 = r16 + -8;
                case 0x512d8:
                    r3 = r18 < r19 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51314;
                        continue;
                    }
                    r18 = r19 - r18;
                    r18 = r16 + r18;
                case 0x512ec:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x5130c;
                    pc=0x51000;
                    run_51000(); return;
                case 0x5130c:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x512ec;
                        continue;
                    }
                case 0x51314:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5133c:
                    r16 = r20 + 10;
                    r18 = r0 + 9;
                    /* Next insn is delay slot */ 
                    pc=0x512d8;
                    continue;
                case 0x5134c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51270;
                    continue;
                case 0x51400:
                    pc=0x51400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51400() throws ExecutionException { /* 0x51400 - 0x51600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51400:
                    r2 = 65535 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51484;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r0 + 16;
                case 0x51418:
                    r3 = 65280 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51430;
                        continue;
                    }
                    r2 = r2 + 8;
                    r4 = r4 << 8;
                case 0x51430:
                    r3 = 61440 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51448;
                        continue;
                    }
                    r2 = r2 + 4;
                    r4 = r4 << 4;
                case 0x51448:
                    r3 = 49152 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51460;
                        continue;
                    }
                    r2 = r2 + 2;
                    r4 = r4 << 2;
                case 0x51460:
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5147c;
                        continue;
                    }
                    r3 = 16384 << 16;
                    r4 = r4 & r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51490;
                        continue;
                    }
                    r2 = r0 + 32;
                case 0x5147c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51484:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51418;
                    continue;
                case 0x51490:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51600:
                    pc=0x51600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51600() throws ExecutionException { /* 0x51600 - 0x51800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51600:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51640;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x516d0;
                        continue;
                    }
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x516dc;
                        continue;
                    }
                    r3 = r3 >>> 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51640:
                    r2 = r3 & 65535;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x516b0;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x51650:
                    r5 = r3 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51664;
                        continue;
                    }
                    r2 = r2 + 8;
                    r3 = r3 >>> 8;
                case 0x51664:
                    r5 = r3 & 15;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51678;
                        continue;
                    }
                    r2 = r2 + 4;
                    r3 = r3 >>> 4;
                case 0x51678:
                    r5 = r3 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5168c;
                        continue;
                    }
                    r2 = r2 + 2;
                    r3 = r3 >>> 2;
                case 0x5168c:
                    r5 = r3 & 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x516c4;
                        continue;
                    }
                    r3 = r3 >>> 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x516c0;
                        continue;
                    }
                    r2 = r0 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x516b0:
                    r3 = r3 >>> 16;
                    r2 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x51650;
                    continue;
                case 0x516c0:
                    r2 = r2 + 1;
                case 0x516c4:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x516d0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x516dc:
                    r3 = r3 >>> 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51800:
                    pc=0x51800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51800() throws ExecutionException { /* 0x51800 - 0x51a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x5181c;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x5181c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r16;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51a00:
                    pc=0x51a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51a00() throws ExecutionException { /* 0x51a00 - 0x51c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51a00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r18 < r19 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    r20 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a4c;
                        continue;
                    }
                    r2 = r18 + r0;
                    r17 = r6 + r0;
                    r18 = r19 + r0;
                    r20 = r5 + r0;
                    r19 = r2 + r0;
                case 0x51a4c:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r16 = r18 + r19;
                    r2 = r2 < r16 ? 1 : 0;
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a68;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x51a68:
                    /* Next insn is delay slot */ 
                    r31=0x51a70;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x51a70:
                    r13 = r2 + 20;
                    r14 = r16 << 2;
                    r14 = r13 + r14;
                    r4 = ((r13 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r3 = r13 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51aa0;
                        continue;
                    }
                case 0x51a8c:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a8c;
                        continue;
                    }
                case 0x51aa0:
                    r12 = r20 + 20;
                    r15 = r19 << 2;
                    r15 = r12 + r15;
                    r24 = r17 + 20;
                    r11 = r18 << 2;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r11 = r24 + r11;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51c04;
                        run_51c00(); return;
                    }
                case 0x51ac4:
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r8 = r9 & 65535;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b60;
                        continue;
                    }
                    r4 = r13 + r0;
                    r3 = r24 + r0;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51af0;
                    continue;
                case 0x51aec:
                    r4 = r7 + r0;
                case 0x51af0:
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r6 & 65535;
                    { long hilo = (long)(r5) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = r6 >>> 16;
                    r10 = r7 & 65535;
                    r7 = r7 >>> 16;
                    r3 = r3 + 4;
                    r5 = lo;
                    r5 = r5 + r10;
                    r5 = r5 + r9;
                    { long hilo = (long)(r6) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r5 >>> 16;
                    r5 = r5 & 65535;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r9;
                    r9 = r6 >>> 16;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r5 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r7 = r4 + 4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51aec;
                        continue;
                    }
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                case 0x51b60:
                    r9 = r9 >>> 16;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51bf0;
                        continue;
                    }
                    r4 = readPages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff];
                    r5 = r13 + r0;
                    r7 = r4 + r0;
                    r3 = r24 + r0;
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51b8c;
                    continue;
                case 0x51b88:
                    r5 = r8 + r0;
                case 0x51b8c:
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    r7 = r7 >>> 16;
                    { long hilo = (long)(r6) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r4 & 65535;
                    r3 = r3 + 4;
                    r8 = r5 + 4;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r10;
                    r7 = r6 << 16;
                    r4 = r7 | r4;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r4;
                    addr=r3+-4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r7 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    { long hilo = (long)(r4) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r7 & 65535;
                    r6 = r6 >>> 16;
                    r4 = lo;
                    r4 = r4 + r10;
                    r4 = r4 + r6;
                    r6 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r10 = r4 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b88;
                        continue;
                    }
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r4;
                case 0x51bf0:
                    r12 = r12 + 4;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r13 = r13 + 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51ac4;
                        continue;
                    }
                case 0x51c00:
                    pc=0x51c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51c00() throws ExecutionException { /* 0x51c00 - 0x51e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51c00:
                case 0x51c04:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x51c44;
                        continue;
                    }
                    r4 = readPages[(r14+-4)>>>12][((r14+-4)>>>2)&0x3ff];
                    r3 = r14 + -4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51c38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x51c44;
                    continue;
                case 0x51c24:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51c44;
                        continue;
                    }
                case 0x51c38:
                    r16 = r16 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51c24;
                        continue;
                    }
                case 0x51c44:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51e00:
                    pc=0x51e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51e00() throws ExecutionException { /* 0x51e00 - 0x52000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51e00:
                    r29 = r29 + -40;
                    r2 = r6 & 3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51f24;
                        continue;
                    }
                case 0x51e30:
                    r16 = r16 >> 2;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51ecc;
                        continue;
                    }
                    r17 = readPages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51f54;
                        continue;
                    }
                case 0x51e4c:
                    r3 = r16 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51e84;
                        continue;
                    }
                case 0x51e58:
                    r16 = r16 >> 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51ecc;
                        continue;
                    }
                case 0x51e64:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51ef0;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x51e78:
                    r3 = r16 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51e58;
                        continue;
                    }
                case 0x51e84:
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51e98;
                    pc=0x51a00;
                    run_51a00(); return;
                case 0x51e98:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51f18;
                        continue;
                    }
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r16 = r16 >> 1;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r18 = r2 + r0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51e64;
                        continue;
                    }
                case 0x51ecc:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51ef0:
                    r5 = r17 + r0;
                    r6 = r17 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51f04;
                    pc=0x51a00;
                    run_51a00(); return;
                case 0x51f04:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51e78;
                    continue;
                case 0x51f18:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51e58;
                    continue;
                case 0x51f24:
                    r2 = r2 + -1;
                    r3 = 6 << 16;
                    r3 = r3 + 28696;
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51f48;
                    pc=0x51000;
                    run_51000(); return;
                case 0x51f48:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51e30;
                    continue;
                case 0x51f54:
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x51f64;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x51f64:
                    r17 = r2 + r0;
                    r2 = r0 + 625;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff] = r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x51e4c;
                    continue;
                case 0x52000:
                    pc=0x52000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52000() throws ExecutionException { /* 0x52000 - 0x52200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52000:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 >> 5;
                    r20 = r17 + r20;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r20 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r2 < r16 ? 1 : 0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r21 = r6 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52064;
                        continue;
                    }
                case 0x52050:
                    r2 = r2 << 1;
                    r7 = r2 < r16 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52050;
                        continue;
                    }
                case 0x52064:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52070;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x52070:
                    r7 = r2 + 20;
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x520a0;
                        continue;
                    }
                    r8 = r7 + r0;
                    r3 = r0 + r0;
                case 0x52084:
                    r8 = r8 + 4;
                    r3 = r3 + 1;
                    writePages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff] = r0;
                    if(r3 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x52084;
                        continue;
                    }
                    r3 = r3 << 2;
                    r7 = r7 + r3;
                case 0x520a0:
                    r10 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = r18 + 20;
                    r10 = r10 << 2;
                    r6 = r21 & 31;
                    r10 = r3 + r10;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5215c;
                        continue;
                    }
                    r4 = r0 + 32;
                    r4 = r4 - r6;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x520d4;
                    continue;
                case 0x520d0:
                    r7 = r8 + r0;
                case 0x520d4:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r11 = r11 << (r6&0x1f);
                    r9 = r9 | r11;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r11 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    r8 = r7 + 4;
                    r9 = r9 >>> (r4&0x1f);
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x520d0;
                        continue;
                    }
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r9;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52110;
                        continue;
                    }
                    r16 = r20 + 2;
                case 0x52110:
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = r16 + -1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5215c:
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52110;
                        continue;
                    }
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5215c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x52110;
                    continue;
                case 0x52200:
                    pc=0x52200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52200() throws ExecutionException { /* 0x52200 - 0x52400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52200:
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52278;
                        continue;
                    }
                    r3 = r3 << 2;
                    r4 = r4 + 20;
                    r5 = r5 + 20;
                    r2 = r4 + r3;
                    r5 = r5 + r3;
                    /* Next insn is delay slot */ 
                    pc=0x52240;
                    continue;
                case 0x52234:
                    r3 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52274;
                        continue;
                    }
                case 0x52240:
                    r2 = r2 + -4;
                    r5 = r5 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x52234;
                        continue;
                    }
                    r3 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52280;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52274:
                    r2 = r0 + r0;
                case 0x52278:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52280:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52400:
                    pc=0x52400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52400() throws ExecutionException { /* 0x52400 - 0x52600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52400:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52434;
                    pc=0x52200;
                    run_52200(); return;
                case 0x52434:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x525a4;
                        continue;
                    }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5258c;
                        continue;
                    }
                    r19 = r0 + r0;
                case 0x52448:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52458;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x52458:
                    r10 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r13 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r16 + 20;
                    r12 = r10 << 2;
                    r7 = r17 + 20;
                    r13 = r13 << 2;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r19;
                    r12 = r4 + r12;
                    r13 = r7 + r13;
                    r3 = r2 + 20;
                    r5 = r0 + r0;
                case 0x52484:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r6 = r8 & 65535;
                    r5 = r6 + r5;
                    r11 = r9 & 65535;
                    r6 = r5 - r11;
                    r8 = r8 >>> 16;
                    r9 = r9 >>> 16;
                    r5 = r6 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r5;
                    r7 = r7 + 4;
                    r5 = r8 >> 16;
                    r6 = r6 & 65535;
                    r8 = r8 << 16;
                    r6 = r8 | r6;
                    r3 = r3 + 4;
                    r8 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    r4 = r4 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52484;
                        continue;
                    }
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r9 = r3 + r0;
                    r11 = r4 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52548;
                        continue;
                    }
                case 0x524f0:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r6 = r8 & 65535;
                    r6 = r6 + r5;
                    r7 = r6 >> 16;
                    r8 = r8 >>> 16;
                    r7 = r7 + r8;
                    r5 = r7 >> 16;
                    r6 = r6 & 65535;
                    r7 = r7 << 16;
                    r6 = r7 | r6;
                    r3 = r3 + 4;
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x524f0;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r12;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r9 + r3;
                case 0x52548:
                    r3 = r3 + -4;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52568;
                        continue;
                    }
                case 0x52554:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r10 + -1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52554;
                        continue;
                    }
                case 0x52568:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r10;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5258c:
                    r2 = r16 + r0;
                    r19 = r0 + 1;
                    r16 = r17 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52448;
                    continue;
                case 0x525a4:
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x525b4;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x525b4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52600:
                    pc=0x52600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52600() throws ExecutionException { /* 0x52600 - 0x52800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52600:
                    r2 = f13;
                    r4 = 32752 << 16;
                    r2 = r2 & r4;
                    r3 = 64704 << 16;
                    r4 = r2 + r3;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x52634;
                        continue;
                    }
                    r3 = r0 + r0;
                    f0 = r3;
                    r2 = r4 + r0;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52634:
                    r4 = r0 - r4;
                    r4 = r4 >> 20;
                    r2 = r4 < 20 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52690;
                        continue;
                    }
                    r5 = r4 < 51 ? 1 : 0;
                    r2 = r0 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52680;
                        continue;
                    }
                    r5 = r0 + 51;
                    r4 = r5 - r4;
                    r5 = r0 + 1;
                    r4 = r5 << (r4&0x1f);
                    r3 = r4 + r0;
                case 0x5266c:
                    f0 = r3;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52680:
                    r4 = r0 + 1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5266c;
                    continue;
                case 0x52690:
                    r3 = r0 + r0;
                    r5 = 8 << 16;
                    f0 = r3;
                    r2 = r5 >> (r4&0x1f);
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52800:
                    pc=0x52800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52800() throws ExecutionException { /* 0x52800 - 0x52a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52800:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r16 << 2;
                    r18 = r4 + 20;
                    r16 = r18 + r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r4 = r17 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x52840;
                    pc=0x51400;
                    run_51400(); return;
                case 0x52840:
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r3 = r2 < 11 ? 1 : 0;
                    r19 = r16 + -4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528c0;
                        continue;
                    }
                    r3 = r0 + 11;
                    r3 = r3 - r2;
                    r5 = r17 >>> (r3&0x1f);
                    r4 = 16368 << 16;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r6 = r5 | r4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52944;
                        continue;
                    }
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r4 >>> (r3&0x1f);
                case 0x52888:
                    r2 = r2 + 21;
                    r17 = r17 << (r2&0x1f);
                    r7 = r3 | r17;
                case 0x52894:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r7;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    f1 = r6;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x528c0:
                    r3 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5291c;
                        continue;
                    }
                    r3 = r2 + -11;
                    r4 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52930;
                        continue;
                    }
                case 0x528dc:
                    r5 = r0 + 43;
                    r2 = r5 - r2;
                    r17 = r17 << (r3&0x1f);
                    r5 = 16368 << 16;
                    r17 = r17 | r5;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 >>> (r2&0x1f);
                    r6 = r17 | r5;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52950;
                        continue;
                    }
                    r5 = readPages[(r19+-4)>>>12][((r19+-4)>>>2)&0x3ff];
                    r3 = r4 << (r3&0x1f);
                    r2 = r5 >>> (r2&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x52894;
                    continue;
                case 0x5291c:
                    r3 = r2 + -11;
                    r19 = r16 + -8;
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528dc;
                        continue;
                    }
                case 0x52930:
                    r2 = 16368 << 16;
                    r6 = r17 | r2;
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52894;
                    continue;
                case 0x52944:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52888;
                    continue;
                case 0x52950:
                    r2 = r0 + r0;
                    r3 = r4 << (r3&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x52894;
                    continue;
                case 0x52a00:
                    pc=0x52a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52a00() throws ExecutionException { /* 0x52a00 - 0x52c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52a00:
                    r29 = r29 + -48;
                    r5 = r0 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    r17 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52a2c;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x52a2c:
                    r18 = r2 + r0;
                    r19 = r16 << 1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r19 = r19 >>> 21;
                    r2 = r2 & r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a54;
                        continue;
                    }
                    r3 = 16 << 16;
                    r2 = r2 | r3;
                case 0x52a54:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52af4;
                        continue;
                    }
                    r4 = r29 + 20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x52a70;
                    pc=0x51600;
                    run_51600(); return;
                case 0x52a70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52b64;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                case 0x52a84:
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r16;
                    r3 = r0 + 2;
                    r16 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r16 = r3 - r16;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r16;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52b20;
                        continue;
                    }
                case 0x52aa0:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + -1074;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r16 << 2;
                    r2 = r18 + r2;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r16 = r16 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x52ac4;
                    pc=0x51400;
                    run_51400(); return;
                case 0x52ac4:
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52af4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x52b00;
                    pc=0x51600;
                    run_51600(); return;
                case 0x52b00:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + 32;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    r16 = r0 + 1;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52aa0;
                        continue;
                    }
                case 0x52b20:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + -1075;
                    r19 = r19 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r19;
                    r3 = r0 + 53;
                    r2 = r3 - r2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52b64:
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r0 - r2;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r16 << (r3&0x1f);
                    r3 = r3 | r4;
                    r16 = r16 >>> (r2&0x1f);
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x52a84;
                    continue;
                case 0x52c00:
                    pc=0x52c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52c00() throws ExecutionException { /* 0x52c00 - 0x52e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52c00:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    r5 = r29 + 20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f21;
                    /* Next insn is delay slot */ 
                    r31=0x52c34;
                    pc=0x52800;
                    run_52800(); return;
                case 0x52c34:
                    r4 = r18 + r0;
                    r5 = r29 + 16;
                    f20 = f0;
                    f21 = f1;
                    r17 = f0;
                    r16 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x52c50;
                    pc=0x52800;
                    run_52800(); return;
                case 0x52c50:
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r4 = r5 - r4;
                    r5 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = f0;
                    r5 = r6 - r5;
                    r5 = r5 << 5;
                    r4 = r4 + r5;
                    r2 = f1;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x52cc0;
                        continue;
                    }
                    r4 = r4 << 20;
                    f20 = r17;
                    r16 = r4 + r16;
                    f21 = r16;
                case 0x52c94:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f20 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52cc0:
                    r4 = r4 << 20;
                    f0 = r3;
                    r2 = r2 - r4;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=0x52c94;
                    continue;
                case 0x52e00:
                    pc=0x52e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52e00() throws ExecutionException { /* 0x52e00 - 0x53000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52e00:
                    r2 = r4 < 24 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52e34;
                        continue;
                    }
                    f0 = readPages[(r28+-32612)>>>12][((r28+-32612)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32604)>>>12][((r28+-32604)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32608)>>>12][((r28+-32608)>>>2)&0x3ff];
                case 0x52e1c:
                    r4 = r4 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52e1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52e34:
                    r2 = 6 << 16;
                    r2 = r2 + 28792;
                    r4 = r4 << 3;
                    r4 = r4 + r2;
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53000:
                    pc=0x53000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53000() throws ExecutionException { /* 0x53000 - 0x53200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53000:
                    r7 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    r2 = r6 + 20;
                    r8 = r5 >> 5;
                    r7 = r7 << 2;
                    r8 = r8 + 1;
                    r7 = r2 + r7;
                    r8 = r8 << 2;
                    r3 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r4 + r8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5307c;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x53034:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53034;
                        continue;
                    }
                    r2 = r7 - r6;
                    r2 = r2 + -21;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r4 = r4 + r2;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53088;
                        continue;
                    }
                case 0x53074:
                    r4 = r4 + 4;
                    writePages[(r4+-4)>>>12][((r4+-4)>>>2)&0x3ff] = r0;
                case 0x5307c:
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53074;
                        continue;
                    }
                case 0x53088:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53200:
                    pc=0x53200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53200() throws ExecutionException { /* 0x53200 - 0x53400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53200:
                    r3 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r4 + 20;
                    r4 = r3 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53274;
                        continue;
                    }
                    r3 = r3 << 2;
                    r3 = r6 + r3;
                case 0x53220:
                    r2 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53268;
                        continue;
                    }
                    r2 = r3 + -4;
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5325c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x532ac;
                    continue;
                case 0x53248:
                    r2 = r2 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x532ac;
                        continue;
                    }
                case 0x5325c:
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53248;
                        continue;
                    }
                case 0x53268:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53274:
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x532b8;
                        continue;
                    }
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r3 = r6 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53220;
                        continue;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r2 >>> (r5&0x1f);
                    r5 = r4 << (r5&0x1f);
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x53220;
                        continue;
                    }
                case 0x532ac:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x532b8:
                    r2 = r2 << 2;
                    r3 = r6 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x53220;
                    continue;
                case 0x53400:
                    pc=0x53400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53400() throws ExecutionException { /* 0x53400 - 0x53600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53400:
                    r4 = f13;
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r3 = r3 & r4;
                    r5 = f12;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53440;
                        continue;
                    }
                    r2 = 65520 << 16;
                    r2 = r3 + r2;
                    r6 = 32736 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53454;
                        continue;
                    }
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53440:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r0 + 3;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53454:
                    r2 = 16 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53470;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53470:
                    r2 = 32752 << 16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x53488;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53488:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53600:
                    pc=0x53600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53600() throws ExecutionException { /* 0x53600 - 0x53800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53600:
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53634;
                        continue;
                    }
                case 0x5361c:
                    r2 = r0 + r0;
                case 0x53620:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53634:
                    r5 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x53640;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x53640:
                    writePages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53680;
                        continue;
                    }
                    r3 = r0 + r0;
                    r4 = r0 + 128;
                    /* Next insn is delay slot */ 
                    pc=0x53664;
                    continue;
                case 0x5365c:
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                case 0x53664:
                    r2 = r2 + r3;
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5365c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5361c;
                    continue;
                case 0x53680:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x53620;
                    continue;
                case 0x53800:
                    pc=0x53800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53800() throws ExecutionException { /* 0x53800 - 0x53a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53800:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53850;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53870;
                        continue;
                    }
                case 0x5382c:
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r6;
                case 0x5383c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53850:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53870:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x53880;
                    pc=0x53600;
                    run_53600(); return;
                case 0x53880:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5389c;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5382c;
                    continue;
                case 0x5389c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5383c;
                    continue;
                case 0x53a00:
                    pc=0x53a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53a00() throws ExecutionException { /* 0x53a00 - 0x53c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53a00:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53af0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53ac0;
                        continue;
                    }
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53ac0;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x53ab4;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x53a90;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x53a74;
                    return;
                case 0x53a74:
                    r2 = r0 + r0;
                case 0x53a78:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53a90:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53ab4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53a78;
                    continue;
                case 0x53ac0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x53acc;
                    pc=0x3e020;
                    run_3e000(); return;
                case 0x53acc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x3dfe0;
                    run_3de00(); return;
                case 0x53af0:
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x53a78;
                    continue;
                case 0x53c00:
                    pc=0x53c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53c00() throws ExecutionException { /* 0x53c00 - 0x53e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53c00:
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53ce0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53cbc;
                        continue;
                    }
                case 0x53c28:
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53cb0;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x53c98;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x53c80;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x53c68;
                    return;
                case 0x53c68:
                    r2 = r0 + r0;
                case 0x53c6c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53c80:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53c98:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53cb0:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x53c6c;
                    continue;
                case 0x53cbc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x53cc8;
                    pc=0x53600;
                    run_53600(); return;
                case 0x53cc8:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53cec;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x53c28;
                    continue;
                case 0x53ce0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53cec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x53c6c;
                    continue;
                case 0x53e00:
                    pc=0x53e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53e00() throws ExecutionException { /* 0x53e00 - 0x54000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x53a00;
                    run_53a00(); return;
                case 0x54000:
                    pc=0x54000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54000() throws ExecutionException { /* 0x54000 - 0x54200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53800;
                    run_53800(); return;
                case 0x54200:
                    pc=0x54200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54200() throws ExecutionException { /* 0x54200 - 0x54400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54200:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x53600;
                    run_53600(); return;
                case 0x54400:
                    pc=0x54400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54400() throws ExecutionException { /* 0x54400 - 0x54600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x53c00;
                    run_53c00(); return;
                case 0x54600:
                    pc=0x54600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54600() throws ExecutionException { /* 0x54600 - 0x54800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54600:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x546f4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x546a4;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5466c;
                    pc=0x55400;
                    run_55400(); return;
                case 0x5466c:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x546e4;
                        continue;
                    }
                case 0x54678:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5468c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x5468c:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x546a4:
                    r2 = r6 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x546d8;
                    pc=0x55400;
                    run_55400(); return;
                case 0x546d8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54678;
                        continue;
                    }
                case 0x546e4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x54678;
                    continue;
                case 0x546f4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5468c;
                    continue;
                case 0x54800:
                    pc=0x54800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54800() throws ExecutionException { /* 0x54800 - 0x54a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54800:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    r17 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x548e8;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x548a0;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x54868;
                    pc=0x55400;
                    run_55400(); return;
                case 0x54868:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x548d8;
                        continue;
                    }
                case 0x54874:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54888;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x54888:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x548a0:
                    r2 = r5 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x548cc;
                    pc=0x55400;
                    run_55400(); return;
                case 0x548cc:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54874;
                        continue;
                    }
                case 0x548d8:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x54874;
                    continue;
                case 0x548e8:
                    r2 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x54888;
                    continue;
                case 0x54a00:
                    pc=0x54a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54a00() throws ExecutionException { /* 0x54a00 - 0x54c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54a00:
                    r29 = r29 + -136;
                    r3 = r0 + 516;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    r16 = r5 + r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r31=0x54a30;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x54a30:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + -29696;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    r6 = r16 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x54a70;
                    pc=0x57800;
                    run_57800(); return;
                case 0x54a70:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54c00:
                    pc=0x54c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54c00() throws ExecutionException { /* 0x54c00 - 0x54e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54c00:
                    r29 = r29 + -144;
                    r2 = r0 + 516;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x54c34;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x54c34:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + -29696;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r16 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x54c74;
                    pc=0x57800;
                    run_57800(); return;
                case 0x54c74:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r16 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54e00:
                    pc=0x54e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54e00() throws ExecutionException { /* 0x54e00 - 0x55000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54e00:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54ea4;
                        continue;
                    }
                case 0x54e18:
                    r6 = r6 + -1;
                case 0x54e1c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x54f58;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                    r2 = r4 + 1;
                    r5 = r5 + 1;
                    r4 = r4 + r6;
                    /* Next insn is delay slot */ 
                    pc=0x54e6c;
                    continue;
                case 0x54e54:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                    r2 = r2 + 1;
                    r5 = r5 + 1;
                case 0x54e6c:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x54e54;
                        continue;
                    }
                case 0x54e80:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54e98:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54ea4:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e18;
                        continue;
                    }
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x54e18;
                        continue;
                    }
                    r2 = r6 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = r3 + r8;
                    r7 = 32896 << 16;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r7 = r7 | 32896;
                    r3 = r3 & r7;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54f38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x54e98;
                    continue;
                case 0x54f00:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x54f64;
                        continue;
                    }
                    r2 = r2 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                    r6 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r3 = r3 & r7;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e98;
                        continue;
                    }
                case 0x54f38:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54f00;
                        continue;
                    }
                    r6 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54e1c;
                        continue;
                    }
                case 0x54f58:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x54e80;
                    continue;
                case 0x54f64:
                    r6 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x54e1c;
                    continue;
                case 0x55000:
                    pc=0x55000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55000() throws ExecutionException { /* 0x55000 - 0x55200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55000:
                    r2 = r4 + r0;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55034;
                    continue;
                case 0x55010:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x551cc;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r6 + -1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x551d4;
                        continue;
                    }
                case 0x55034:
                    r7 = r5 & 3;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55010;
                        continue;
                    }
                    r4 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r12 = r6 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x551f8;
                        continue;
                    }
                    r6 = r6 & 3;
                    r12 = r12 - r6;
                    /* Next insn is delay slot */ 
                    pc=0x55094;
                    continue;
                case 0x55060:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x550c0;
                        continue;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x550c8;
                        continue;
                    }
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x550d0;
                        continue;
                    }
                    r3 = r3 + 4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x551f8;
                        continue;
                    }
                    r12 = r7 + r0;
                case 0x55094:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r7 = r12 + -4;
                    r5 = r5 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55060;
                        continue;
                    }
                    r7 = r12 + -3;
                    r3 = r3 + -1;
                case 0x550c0:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x550c8:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x550d0:
                    r6 = r7 + r6;
                    r3 = r3 + 4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x551c4;
                        continue;
                    }
                    r4 = r3 & 3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55100;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5511c;
                    continue;
                case 0x550f4:
                    r5 = r3 & 3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5511c;
                        continue;
                    }
                case 0x55100:
                    r3 = r3 + 1;
                    r6 = r6 + -1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x550f4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5511c:
                    r4 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55268;
                        run_55200(); return;
                    }
                    r5 = r3 + r0;
                    r7 = r6 + r0;
                case 0x55130:
                    r7 = r7 + -16;
                    r5 = r5 + 16;
                    r8 = (r7&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r5+-16)>>>12][((r5+-16)>>>2)&0x3ff] = r0;
                    writePages[(r5+-12)>>>12][((r5+-12)>>>2)&0x3ff] = r0;
                    writePages[(r5+-8)>>>12][((r5+-8)>>>2)&0x3ff] = r0;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55130;
                        continue;
                    }
                    r5 = r6 + -16;
                    r5 = r5 >>> 4;
                    r5 = r5 + 1;
                    r5 = r5 << 4;
                    r4 = r6 & 15;
                    r3 = r3 + r5;
                case 0x5516c:
                    r5 = (r4&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55188;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r0;
                    r4 = r4 + -8;
                    r3 = r3 + 8;
                case 0x55188:
                    r5 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x551a0;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r4 + -4;
                    r3 = r3 + 4;
                case 0x551a0:
                    r5 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x551b8;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 + -2;
                    r3 = r3 + 2;
                case 0x551b8:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x551c4;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x551c4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x551cc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x551d4:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x551c4;
                        continue;
                    }
                case 0x551e0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x551e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x551f8:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x551c4;
                        continue;
                    }
                case 0x55200:
                    pc=0x55200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55200() throws ExecutionException { /* 0x55200 - 0x55400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55200:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r8 = r5 + 1;
                    r7 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55240;
                        continue;
                    }
                case 0x55220:
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x55260;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55220;
                        continue;
                    }
                case 0x55240:
                    if(r6 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x551c4;
                        run_55000(); return;
                    }
                case 0x55248:
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x55248;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55260:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55268:
                    r4 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5516c;
                    run_55000(); return;
                case 0x55400:
                    pc=0x55400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55400() throws ExecutionException { /* 0x55400 - 0x55600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55400:
                    r29 = r29 + -304;
                    writePages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r22;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r4;
                    r22 = r5 + r0;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r6;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r7;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r30;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r23;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r21;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r19;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r18;
                    writePages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff] = r17;
                    writePages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x55444;
                    pc=0x50400;
                    run_50400(); return;
                case 0x55444:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5545c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x5545c:
                    writePages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55484;
                        continue;
                    }
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57064;
                        run_57000(); return;
                    }
                case 0x55484:
                    r21 = r29 + 40;
                    r2 = 6 << 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r21;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r0;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r0;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r0;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    r19 = r2 + 29364;
                case 0x554b8:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55ba4;
                        run_55a00(); return;
                    }
                case 0x554d0:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x554f0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5555c;
                    continue;
                case 0x554e8:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x55504;
                        continue;
                    }
                case 0x554f0:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x554e8;
                        continue;
                    }
                case 0x55504:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5555c;
                        continue;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55604;
                        run_55600(); return;
                    }
                    r8 = r8 + 8;
                case 0x5554c:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r3;
                case 0x5555c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5562c;
                        run_55600(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x5558c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x55594:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5612c;
                        run_56000(); return;
                    }
                    r4 = 6 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 28992;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x555c4:
                    r17 = r17 | 16;
                case 0x555c8:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    continue;
                case 0x555d4:
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5611c;
                        run_56000(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                case 0x555f4:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    continue;
                case 0x55600:
                    pc=0x55600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55600() throws ExecutionException { /* 0x55600 - 0x55800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55600:
                case 0x55604:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x55618;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x55618:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        continue;
                    }
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5554c;
                    run_55400(); return;
                case 0x5562c:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x55650;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x55650:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5569c;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x55668:
                    r31 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r30 = readPages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff];
                    r23 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r22 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r21 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r20 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r19 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r18 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r17 = readPages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff];
                    r16 = readPages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff];
                    r29 = r29 + 304;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5569c:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x55668;
                    continue;
                case 0x556a8:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    run_55400(); return;
                case 0x556b8:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5720c;
                        run_57200(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x570e0;
                        run_57000(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x556f8;
                    pc=0x36800;
                    run_36800(); return;
                case 0x556f8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x574ac;
                        run_57400(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5571c;
                        continue;
                    }
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                case 0x5571c:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x570fc;
                        run_57000(); return;
                    }
                case 0x5572c:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                case 0x55740:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55758;
                        continue;
                    }
                case 0x55748:
                    r2 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                case 0x55758:
                    r4 = r17 & 2;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55778;
                        continue;
                    }
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                case 0x55778:
                    r2 = r17 & 132;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56150;
                        run_56000(); return;
                    }
                    r4 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56150;
                        run_56000(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57148;
                        run_57000(); return;
                    }
                    r4 = r20 + r0;
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r16;
                    r20 = r17 + r0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x557ec;
                    continue;
                case 0x557d8:
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55848;
                        run_55800(); return;
                    }
                case 0x557ec:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                case 0x55800:
                    pc=0x55800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55800() throws ExecutionException { /* 0x55800 - 0x55a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55800:
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x557d8;
                        run_55600(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x55824;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x55824:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x557ec;
                        run_55600(); return;
                    }
                case 0x55848:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r4 + r0;
                case 0x55858:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5681c;
                        run_56800(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x55888:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x558c4;
                        continue;
                    }
                    r3 = r29 + 182;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56650;
                        run_56600(); return;
                    }
                    r8 = r8 + 8;
                case 0x558c4:
                    r3 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55908;
                        continue;
                    }
                    r3 = r29 + 180;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5667c;
                        run_56600(); return;
                    }
                    r8 = r8 + 8;
                case 0x55908:
                    r4 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x564bc;
                        run_56400(); return;
                    }
                case 0x55918:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x55a14;
                        run_55a00(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56cc0;
                        run_56c00(); return;
                    }
                    r5 = 6 << 16;
                    r23 = r5 + 29348;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r30 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5597c;
                    continue;
                case 0x55968:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x559d8;
                        continue;
                    }
                case 0x5597c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55968;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x559b4;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x559b4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5597c;
                        continue;
                    }
                case 0x559d8:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x559ec:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                case 0x55a00:
                    pc=0x55a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55a00() throws ExecutionException { /* 0x55a00 - 0x55c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55a00:
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56624;
                        run_56600(); return;
                    }
                    r8 = r8 + 8;
                case 0x55a14:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56350;
                        run_56200(); return;
                    }
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56254;
                        run_56200(); return;
                    }
                case 0x55a4c:
                    r8 = r8 + 8;
                case 0x55a50:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55b50;
                        continue;
                    }
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x55b50;
                        continue;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x571fc;
                        run_57000(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    r18 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x55aac;
                    continue;
                case 0x55a98:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55b08;
                        continue;
                    }
                case 0x55aac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55a98;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x55ae4;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x55ae4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55aac;
                        continue;
                    }
                case 0x55b08:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55b50;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x55b44;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x55b44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x55b50:
                    r3 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55b6c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x55b6c:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56280;
                        run_56200(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                case 0x55b8c:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x554d0;
                        run_55400(); return;
                    }
                case 0x55ba4:
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5555c;
                    run_55400(); return;
                case 0x55bb0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x555c8;
                        run_55400(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    run_55400(); return;
                case 0x55bc8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x57704;
                        run_57600(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55c1c;
                        run_55c00(); return;
                    }
                case 0x55bec:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                case 0x55c00:
                    pc=0x55c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55c00() throws ExecutionException { /* 0x55c00 - 0x55e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55c00:
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55bec;
                        run_55a00(); return;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57054;
                        run_57000(); return;
                    }
                case 0x55c1c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55594;
                    run_55400(); return;
                case 0x55c28:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    run_55400(); return;
                case 0x55c38:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x55c40:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55c40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x55594;
                    run_55400(); return;
                case 0x55c70:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x560ec;
                        run_56000(); return;
                    }
                case 0x55c88:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x55ca4:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x55cb4;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x55cb4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x562ac;
                        run_56200(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x562ac;
                        run_56200(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x566d0;
                        run_56600(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x566d0;
                        run_56600(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r16 = r29 + 143;
                case 0x55cec:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55d04;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x55d04:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x55740;
                    run_55600(); return;
                case 0x55d14:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x560a8;
                        run_56000(); return;
                    }
                case 0x55d2c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    continue;
                case 0x55d50:
                    r2 = 6 << 16;
                    r2 = r2 + 23988;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55f90;
                        run_55e00(); return;
                    }
                case 0x55d74:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x55d88:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x566e0;
                        run_56600(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x566e0;
                        run_56600(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    continue;
                case 0x55dc0:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55f2c;
                        run_55e00(); return;
                    }
                case 0x55dd8:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x55dec:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x55f50;
                        run_55e00(); return;
                    }
                case 0x55df4:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    continue;
                case 0x55e00:
                    pc=0x55e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55e00() throws ExecutionException { /* 0x55e00 - 0x56000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55e00:
                case 0x55e04:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    run_55400(); return;
                case 0x55e14:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x55e34:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=0x55758;
                    run_55600(); return;
                case 0x55e5c:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    run_55400(); return;
                case 0x55e6c:
                    r2 = r17 & 16;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5696c;
                        run_56800(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5696c;
                        run_56800(); return;
                    }
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x554b8;
                    run_55400(); return;
                case 0x55ebc:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r3 = 6 << 16;
                    r3 = r3 + 24008;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    run_55c00(); return;
                case 0x55f10:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55dd8;
                        run_55c00(); return;
                    }
                case 0x55f2c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56c6c;
                        run_56c00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x55df4;
                        run_55c00(); return;
                    }
                case 0x55f50:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    run_55c00(); return;
                case 0x55f6c:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = 6 << 16;
                    r3 = r3 + 24008;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55d74;
                        run_55c00(); return;
                    }
                case 0x55f90:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56c58;
                        run_56c00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x55d88;
                    run_55c00(); return;
                case 0x55fb4:
                    r2 = r17 & 8;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56c44;
                        run_56c00(); return;
                    }
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x55fd8:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                case 0x56000:
                    pc=0x56000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56000() throws ExecutionException { /* 0x56000 - 0x56200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56000:
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x56010;
                    pc=0x53400;
                    run_53400(); return;
                case 0x56010:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x56be4;
                        run_56a00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x572e0;
                        run_57200(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x56048:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57044;
                        run_57000(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 27904;
                case 0x5605c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x55740;
                    run_55600(); return;
                case 0x56084:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    run_55400(); return;
                case 0x56094:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55d2c;
                        run_55c00(); return;
                    }
                case 0x560a8:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56c80;
                        run_56c00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    run_55c00(); return;
                case 0x560d8:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55c88;
                        run_55c00(); return;
                    }
                case 0x560ec:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56ca0;
                        run_56c00(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    run_55c00(); return;
                case 0x5611c:
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    run_55400(); return;
                case 0x5612c:
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5562c;
                        run_55600(); return;
                    }
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x55e34;
                    run_55e00(); return;
                case 0x56150:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x55888;
                    run_55800(); return;
                case 0x5615c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x565cc;
                        run_56400(); return;
                    }
                case 0x56180:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56b34;
                        run_56a00(); return;
                    }
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r8 = r8 + 8;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56b88;
                        run_56a00(); return;
                    }
                case 0x561cc:
                    r8 = r8 + 8;
                case 0x561d0:
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5684c;
                        run_56800(); return;
                    }
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                case 0x56200:
                    pc=0x56200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56200() throws ExecutionException { /* 0x56200 - 0x56400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56200:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x5620c:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x565f4;
                        run_56400(); return;
                    }
                case 0x56224:
                    r8 = r8 + 8;
                case 0x56228:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r29 + 164;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x5623c:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55a4c;
                        run_55a00(); return;
                    }
                case 0x56254:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56268;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56268:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55a50;
                    run_55a00(); return;
                case 0x56280:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56294;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56294:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55b8c;
                    run_55a00(); return;
                case 0x562ac:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x566a8;
                        run_56600(); return;
                    }
                    r6 = r29 + 144;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x56300;
                        continue;
                    }
                    r5 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                case 0x562d0:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x562d0;
                        continue;
                    }
                case 0x562f0:
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x55cec;
                    run_55c00(); return;
                case 0x56300:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56300;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x562f0;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x562f0;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x55cec;
                    run_55c00(); return;
                case 0x56350:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5615c;
                        run_56000(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x566f4;
                        run_56600(); return;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 24120;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56cd4;
                        run_56c00(); return;
                    }
                    r8 = r8 + 8;
                case 0x563b8:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x563dc;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55a50;
                        run_55a00(); return;
                    }
                case 0x563dc:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                case 0x56400:
                    pc=0x56400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56400() throws ExecutionException { /* 0x56400 - 0x56600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56400:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57018;
                        run_57000(); return;
                    }
                    r8 = r8 + 8;
                case 0x56418:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x55a50;
                        run_55a00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56908;
                        run_56800(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 29348;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x56468;
                    continue;
                case 0x56454:
                    r8 = r8 + 8;
                case 0x56458:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56914;
                        run_56800(); return;
                    }
                case 0x56468:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56454;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x564a0;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x564a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56458;
                    continue;
                case 0x564bc:
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x55918;
                        run_55800(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5732c;
                        run_57200(); return;
                    }
                    r4 = 6 << 16;
                    r23 = r4 + 29348;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r7 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56524;
                    continue;
                case 0x56510:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56588;
                        continue;
                    }
                case 0x56524:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56510;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x56560;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56560:
                    r7 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56524;
                        continue;
                    }
                case 0x56588:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x5659c:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56bb8;
                        run_56a00(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x55918;
                    run_55800(); return;
                case 0x565cc:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56180;
                        run_56000(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56224;
                        run_56200(); return;
                    }
                case 0x565f4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                case 0x56600:
                    pc=0x56600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56600() throws ExecutionException { /* 0x56600 - 0x56800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56600:
                    /* Next insn is delay slot */ 
                    r31=0x56608;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56608:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56228;
                    run_56200(); return;
                case 0x56624:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56638;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56638:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55a14;
                    run_55a00(); return;
                case 0x56650:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56664;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56664:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x558c4;
                    run_55800(); return;
                case 0x5667c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56690;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56690:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55908;
                    run_55800(); return;
                case 0x566a8:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56928;
                        run_56800(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r16 = r29 + 143;
                    /* Next insn is delay slot */ 
                    pc=0x55cec;
                    run_55c00(); return;
                case 0x566d0:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r0;
                    r16 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=0x55cec;
                    run_55c00(); return;
                case 0x566e0:
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    run_55c00(); return;
                case 0x566f4:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56d00;
                        run_56c00(); return;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56724;
                        continue;
                    }
                    r20 = r4 + r0;
                case 0x56724:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56758;
                        continue;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57168;
                        run_57000(); return;
                    }
                    r8 = r8 + 8;
                case 0x56758:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5715c;
                        run_57000(); return;
                    }
                case 0x56760:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x569dc;
                        run_56800(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57694;
                        run_57600(); return;
                    }
                    r5 = 6 << 16;
                    r23 = r5 + 29348;
                    r4 = r23 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r30 = r0 + 16;
                    r18 = r17 + r0;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x567c8;
                    continue;
                case 0x567b4:
                    r8 = r8 + 8;
                case 0x567b8:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5699c;
                        run_56800(); return;
                    }
                case 0x567c8:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x567b4;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56800;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56800:
                    pc=0x56800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56800() throws ExecutionException { /* 0x56800 - 0x56a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56800:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x567b8;
                    run_56600(); return;
                case 0x5681c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56830;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56830:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55888;
                    run_55800(); return;
                case 0x5684c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56228;
                        run_56200(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57684;
                        run_57600(); return;
                    }
                    r4 = 6 << 16;
                    r23 = r4 + 29348;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x56898;
                    continue;
                case 0x56884:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x568f4;
                        continue;
                    }
                case 0x56898:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56884;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x568d0;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x568d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56898;
                        continue;
                    }
                case 0x568f4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x5620c;
                    run_56200(); return;
                case 0x56908:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 29348;
                case 0x56914:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x5623c;
                    run_56200(); return;
                case 0x56928:
                    r6 = r29 + 144;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x56934:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x56940;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x56940:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56934;
                        continue;
                    }
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x55cec;
                    run_55c00(); return;
                case 0x5696c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x554b8;
                    run_55400(); return;
                case 0x5699c:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r17 = r18 + r0;
                    r18 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x569b4:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57250;
                        run_57200(); return;
                    }
                    r8 = r8 + 8;
                case 0x569dc:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a08;
                        run_56a00(); return;
                    }
                    r4 = r17 & 1;
                case 0x56a00:
                    pc=0x56a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56a00() throws ExecutionException { /* 0x56a00 - 0x56c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56a00:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a3c;
                        continue;
                    }
                case 0x56a08:
                    r4 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r5 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x571cc;
                        run_57000(); return;
                    }
                    r8 = r8 + 8;
                case 0x56a3c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a5c;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x56a5c:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a90;
                        continue;
                    }
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5727c;
                        run_57200(); return;
                    }
                    r8 = r8 + 8;
                case 0x56a90:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x572b4;
                        run_57200(); return;
                    }
                case 0x56a98:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x55a50;
                        run_55a00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56908;
                        run_56800(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 29348;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x56ae0;
                    continue;
                case 0x56acc:
                    r8 = r8 + 8;
                case 0x56ad0:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56914;
                        run_56800(); return;
                    }
                case 0x56ae0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56acc;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56b18;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56b18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56ad0;
                    continue;
                case 0x56b34:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56b48;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56b48:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x561cc;
                        run_56000(); return;
                    }
                case 0x56b88:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56b9c;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56b9c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x561d0;
                    run_56000(); return;
                case 0x56bb8:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56bcc;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56bcc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55918;
                    run_55800(); return;
                case 0x56be4:
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x56bf8;
                    pc=0x53400;
                    run_53400(); return;
                case 0x56bf8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56e34;
                        run_56e00(); return;
                    }
                case 0x56c00:
                    pc=0x56c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56c00() throws ExecutionException { /* 0x56c00 - 0x56e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56c00:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57094;
                        run_57000(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 27912;
                case 0x56c18:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x55740;
                    run_55600(); return;
                case 0x56c44:
                    r2 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x55fd8;
                    run_55e00(); return;
                case 0x56c58:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x55d88;
                    run_55c00(); return;
                case 0x56c6c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x55dec;
                    run_55c00(); return;
                case 0x56c80:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    run_55c00(); return;
                case 0x56ca0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55ca4;
                    run_55c00(); return;
                case 0x56cc0:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 29348;
                    /* Next insn is delay slot */ 
                    pc=0x559ec;
                    run_55800(); return;
                case 0x56cd4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56ce8;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56ce8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x563b8;
                    run_56200(); return;
                case 0x56d00:
                    r4 = 6 << 16;
                    r4 = r4 + 24120;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x570a4;
                        run_57000(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x56d3c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56d60;
                        continue;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56d60;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55a50;
                        run_55a00(); return;
                    }
                case 0x56d60:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x574e0;
                        run_57400(); return;
                    }
                    r8 = r8 + 8;
                case 0x56d9c:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57130;
                        run_57000(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57194;
                        run_57000(); return;
                    }
                    r5 = 6 << 16;
                    r23 = r5 + 29348;
                    r20 = r0 + 16;
                    r30 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x56de0;
                    continue;
                case 0x56dcc:
                    r8 = r8 + 8;
                case 0x56dd0:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5719c;
                        run_57000(); return;
                    }
                case 0x56de0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56dcc;
                        continue;
                    }
                case 0x56e00:
                    pc=0x56e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56e00() throws ExecutionException { /* 0x56e00 - 0x57000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56e00:
                    r4 = r30 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x56e18;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x56e18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56dd0;
                    run_56c00(); return;
                case 0x56e34:
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x570d4;
                        run_57000(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x574cc;
                        run_57400(); return;
                    }
                case 0x56e54:
                    r2 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57514;
                        run_57400(); return;
                    }
                    f0 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = f0;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = f1;
                case 0x56e7c:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57340;
                        run_57200(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57340;
                        run_57200(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5753c;
                        run_57400(); return;
                    }
                    r5 = r30 + r0;
                case 0x56ea4:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r5;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x56ee4;
                    pc=0x4ca00;
                    run_4ca00(); return;
                case 0x56ee4:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x56f08;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x56f14;
                        continue;
                    }
                case 0x56f08:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5766c;
                        run_57600(); return;
                    }
                case 0x56f14:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5744c;
                        run_57400(); return;
                    }
                case 0x56f24:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x57320;
                        run_57200(); return;
                    }
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f80;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x56f60:
                    r3 = r2 + 1;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f60;
                        continue;
                    }
                case 0x56f80:
                    r2 = r2 - r16;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x572f4;
                        run_57200(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57780;
                        run_57600(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x575ac;
                        run_57400(); return;
                    }
                case 0x56fb4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57548;
                        run_57400(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57580;
                        run_57400(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57764;
                        run_57600(); return;
                    }
                case 0x56fe4:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                case 0x56ff0:
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x572c0;
                        run_57200(); return;
                    }
                case 0x57000:
                    pc=0x57000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57000() throws ExecutionException { /* 0x57000 - 0x57200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57000:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55740;
                    run_55600(); return;
                case 0x57018:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x5702c;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x5702c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56418;
                    run_56400(); return;
                case 0x57044:
                    r16 = 6 << 16;
                    r16 = r16 + 27900;
                    /* Next insn is delay slot */ 
                    pc=0x5605c;
                    run_56000(); return;
                case 0x57054:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55594;
                    run_55400(); return;
                case 0x57064:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x57074;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x57074:
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5778c;
                        run_57600(); return;
                    }
                    r2 = r0 + 64;
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x55484;
                    run_55400(); return;
                case 0x57094:
                    r16 = 6 << 16;
                    r16 = r16 + 27908;
                    /* Next insn is delay slot */ 
                    pc=0x56c18;
                    run_56c00(); return;
                case 0x570a4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x570b8;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x570b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56d3c;
                    run_56c00(); return;
                case 0x570d4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x56e54;
                    run_56e00(); return;
                case 0x570e0:
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x570ec;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x570ec:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5572c;
                        run_55600(); return;
                    }
                case 0x570fc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5572c;
                    run_55600(); return;
                case 0x57108:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x5711c;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x5711c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                case 0x57130:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x5623c;
                    run_56200(); return;
                case 0x57148:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x55858;
                    run_55800(); return;
                case 0x5715c:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56760;
                    run_56600(); return;
                case 0x57168:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x5717c;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x5717c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56758;
                    run_56600(); return;
                case 0x57194:
                    r4 = 6 << 16;
                    r23 = r4 + 29348;
                case 0x5719c:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57108;
                        continue;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x57130;
                    continue;
                case 0x571cc:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x571e0;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x571e0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56a3c;
                    run_56a00(); return;
                case 0x571fc:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                case 0x57200:
                    pc=0x57200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57200() throws ExecutionException { /* 0x57200 - 0x57400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57200:
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x55b08;
                    run_55a00(); return;
                case 0x5720c:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57220;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x57220:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57678;
                        run_57600(); return;
                    }
                case 0x5722c:
                    r16 = 6 << 16;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r16 + 27916;
                    /* Next insn is delay slot */ 
                    pc=0x55758;
                    run_55600(); return;
                case 0x57250:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x57264;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x57264:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x569dc;
                    run_56800(); return;
                case 0x5727c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x57290;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x57290:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56a90;
                    run_56a00(); return;
                case 0x572b4:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56a98;
                    run_56a00(); return;
                case 0x572c0:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55748;
                    run_55600(); return;
                case 0x572e0:
                    r2 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x56048;
                    run_56000(); return;
                case 0x572f4:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57390;
                        continue;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57390;
                        continue;
                    }
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x56fb4;
                    run_56e00(); return;
                case 0x57320:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56f80;
                    run_56e00(); return;
                case 0x5732c:
                    r5 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 29348;
                    /* Next insn is delay slot */ 
                    pc=0x5659c;
                    run_56400(); return;
                case 0x57340:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x5737c;
                    pc=0x4ca00;
                    run_4ca00(); return;
                case 0x5737c:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x56f14;
                    run_56e00(); return;
                case 0x57390:
                    r18 = r18 + -2;
                case 0x57394:
                    r2 = r2 + -1;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    addr=r29+164;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57734;
                        run_57600(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x573b0:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x575d8;
                        run_57400(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+167;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+166;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 168;
                    r4 = r29 + 164;
                case 0x573d4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57420;
                        run_57400(); return;
                    }
                case 0x573f8:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                case 0x57400:
                    pc=0x57400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57400() throws ExecutionException { /* 0x57400 - 0x57600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57400:
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5743c;
                        continue;
                    }
                case 0x57414:
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x56ff0;
                    run_56e00(); return;
                case 0x57420:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x573f8;
                        run_57200(); return;
                    }
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57414;
                        continue;
                    }
                case 0x5743c:
                    r2 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x56ff0;
                    run_56e00(); return;
                case 0x5744c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57470;
                        continue;
                    }
                case 0x5745c:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x56f24;
                    run_56e00(); return;
                case 0x57470:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5745c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x56f24;
                    run_56e00(); return;
                case 0x574ac:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r30;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x55740;
                    run_55600(); return;
                case 0x574cc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56e54;
                        run_56e00(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x56e54;
                    run_56e00(); return;
                case 0x574e0:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x574f4;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x574f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55650;
                        run_55600(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56d9c;
                    run_56c00(); return;
                case 0x57514:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = r2;
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = r4;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x56e7c;
                    run_56e00(); return;
                case 0x5753c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x56ea4;
                    run_56e00(); return;
                case 0x57548:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x576f4;
                        run_57600(); return;
                    }
                    r2 = r0 + 1;
                case 0x5755c:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5759c;
                        continue;
                    }
                case 0x57574:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x56ff0;
                    run_56e00(); return;
                case 0x57580:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57574;
                        continue;
                    }
                case 0x5759c:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x56ff0;
                    run_56e00(); return;
                case 0x575ac:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x576cc;
                        run_57600(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576a8;
                        run_57600(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576a8;
                        run_57600(); return;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x56ff0;
                    run_56e00(); return;
                case 0x575d8:
                    r6 = r29 + 163;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x575e4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x575f0;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x575f0:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x57600:
                    pc=0x57600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57600() throws ExecutionException { /* 0x57600 - 0x57800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57600:
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x575e4;
                        run_57400(); return;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57770;
                        continue;
                    }
                    r2 = r29 + 166;
                    /* Next insn is delay slot */ 
                    pc=0x57640;
                    continue;
                case 0x5763c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x57640:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5763c;
                        continue;
                    }
                    r4 = r29 + 164;
                    r2 = r4 - r3;
                    r3 = r29 + 166;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x573d4;
                    run_57200(); return;
                case 0x5766c:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x56f80;
                    run_56e00(); return;
                case 0x57678:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5722c;
                    run_57200(); return;
                case 0x57684:
                    r5 = 6 << 16;
                    r23 = r5 + 29348;
                    /* Next insn is delay slot */ 
                    pc=0x568f4;
                    run_56800(); return;
                case 0x57694:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 29348;
                    /* Next insn is delay slot */ 
                    pc=0x569b4;
                    run_56800(); return;
                case 0x576a8:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56ff0;
                        run_56e00(); return;
                    }
                case 0x576c0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56ff0;
                    run_56e00(); return;
                case 0x576cc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57748;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57748;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x56ff0;
                    run_56e00(); return;
                case 0x576f4:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x5755c;
                    run_57400(); return;
                case 0x57704:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5611c;
                        run_56000(); return;
                    }
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5558c;
                    run_55400(); return;
                case 0x57734:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x573b0;
                    run_57200(); return;
                case 0x57748:
                    r30 = r30 + 2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56ff0;
                        run_56e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x576c0;
                    continue;
                case 0x57764:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56fe4;
                    run_56e00(); return;
                case 0x57770:
                    r2 = r29 + 166;
                    r4 = r29 + 164;
                    /* Next insn is delay slot */ 
                    pc=0x573d4;
                    run_57200(); return;
                case 0x57780:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57394;
                    run_57200(); return;
                case 0x5778c:
                    r3 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x55668;
                    run_55600(); return;
                case 0x57800:
                    pc=0x57800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57800() throws ExecutionException { /* 0x57800 - 0x57a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57800:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -752;
                    writePages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff] = r30;
                    writePages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff] = r20;
                    writePages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff] = r16;
                    writePages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff] = r31;
                    writePages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff] = r23;
                    writePages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff] = r22;
                    writePages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff] = r21;
                    writePages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff] = r19;
                    writePages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff] = r18;
                    writePages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff] = f20;
                    writePages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff] = f21;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    r20 = r7 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5786c;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x5786c:
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r0;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r21 = r0 + r0;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r0;
                case 0x5787c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        run_57a00(); return;
                    }
                case 0x57890:
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r3 = r4 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5792c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57908;
                        continue;
                    }
                case 0x578c0:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5787c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x578c0;
                        continue;
                    }
                case 0x57908:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57918;
                    pc=0x61200;
                    run_61200(); return;
                case 0x57918:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5787c;
                        continue;
                    }
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x578c0;
                    continue;
                case 0x5792c:
                    r3 = r0 + 37;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x57aec;
                        run_57a00(); return;
                    }
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                case 0x57940:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 255;
                    r5 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5797c;
                        continue;
                    }
                    r5 = 6 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 29388;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x5797c:
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 1;
                    r3 = r3 & 3;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57998;
                        continue;
                    }
                case 0x57994:
                    r18 = r18 | 1;
                case 0x57998:
                    r2 = 6 << 16;
                    r2 = r2 + -3072;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x579b0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b74;
                        run_57a00(); return;
                    }
                case 0x579c0:
                    r2 = r18 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57a94;
                        run_57a00(); return;
                    }
                case 0x579cc:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57cb8;
                        run_57c00(); return;
                    }
                    r2 = r19 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57bf0;
                        run_57a00(); return;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57dec;
                        run_57c00(); return;
                    }
                    r2 = r0 + 4;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57d58;
                        run_57c00(); return;
                    }
                    r2 = r23 + -1;
                case 0x57a00:
                    pc=0x57a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57a00() throws ExecutionException { /* 0x57a00 - 0x57c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57a00:
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58508;
                        run_58400(); return;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r0;
                case 0x57a10:
                    r10 = r29 + 24;
                    r19 = r18 | 1920;
                    r3 = r0 + r0;
                    r18 = r0 + r0;
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r0;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r0;
                    r22 = r10 + r0;
                    r11 = r0 + -1921;
                case 0x57a38:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r5 + -43;
                    r2 = r2 & 255;
                    r7 = (r2&0xffffffffL) < (79&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    r4 = 6 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 29872;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x57a7c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57a8c;
                    pc=0x61200;
                    run_61200(); return;
                case 0x57a8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        continue;
                    }
                case 0x57a94:
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57aac;
                    continue;
                case 0x57aa4:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x57aac:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x579cc;
                        run_57800(); return;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57aa4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x57a7c;
                    continue;
                case 0x57aec:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58b5c;
                        run_58a00(); return;
                    }
                case 0x57afc:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r21 = r21 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57890;
                        run_57800(); return;
                    }
                case 0x57b40:
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57bb4;
                    continue;
                case 0x57b4c:
                    r18 = r18 | 1;
                case 0x57b50:
                    r2 = 4 << 16;
                    r2 = r2 + -24064;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r0 + 8;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x579c0;
                        run_57800(); return;
                    }
                case 0x57b74:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57b84;
                    pc=0x61200;
                    run_61200(); return;
                case 0x57b84:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x579c0;
                        run_57800(); return;
                    }
                case 0x57b8c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57bb0;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        continue;
                    }
                case 0x57bb0:
                    r2 = r0 + -1;
                case 0x57bb4:
                    f20 = readPages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff];
                    r31 = readPages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff];
                    r30 = readPages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff];
                    r23 = readPages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff];
                    r22 = readPages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff];
                    r21 = readPages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff];
                    r20 = readPages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff];
                    r19 = readPages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff];
                    r18 = readPages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff];
                    r17 = readPages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff];
                    r16 = readPages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff];
                    f21 = readPages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff];
                    r29 = r29 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x57bf0:
                    r2 = r0 + 1;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57d58;
                        run_57c00(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c08;
                        run_57c00(); return;
                    }
                case 0x57c00:
                    pc=0x57c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57c00() throws ExecutionException { /* 0x57c00 - 0x57e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57c00:
                    r23 = r0 + -1;
                case 0x57c08:
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58448;
                        run_58400(); return;
                    }
                    r10 = r29 + 24;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                    r19 = r10 + r0;
                case 0x57c24:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57ca4;
                        continue;
                    }
                case 0x57c40:
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x57cac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c24;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57c78;
                    pc=0x61200;
                    run_61200(); return;
                case 0x57c78:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cac;
                        continue;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c40;
                        continue;
                    }
                case 0x57ca4:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        run_57a00(); return;
                    }
                case 0x57cac:
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x57cb8:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cc4;
                        continue;
                    }
                    r23 = r0 + -1;
                case 0x57cc4:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5875c;
                        run_58600(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x587fc;
                        run_58600(); return;
                    }
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                case 0x57ce8:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cac;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x57cac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57ce8;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57d40;
                    pc=0x61200;
                    run_61200(); return;
                case 0x57d40:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cac;
                        continue;
                    }
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57ce8;
                    continue;
                case 0x57d58:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d64;
                        continue;
                    }
                    r23 = r0 + 1;
                case 0x57d64:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5864c;
                        run_58600(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58b18;
                        run_58a00(); return;
                    }
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57db4;
                    continue;
                case 0x57d88:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r2;
                    r23 = r23 - r2;
                    r2 = r3 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57dac;
                    pc=0x61200;
                    run_61200(); return;
                case 0x57dac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58b04;
                        run_58a00(); return;
                    }
                case 0x57db4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r2 < r23 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d88;
                        continue;
                    }
                    r2 = r2 - r23;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r23;
                    r8 = r2 + r23;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r8;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x57dec:
                    r2 = r23 + -1;
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58438;
                        run_58400(); return;
                    }
                    r6 = r0 + r0;
                case 0x57e00:
                    pc=0x57e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57e00() throws ExecutionException { /* 0x57e00 - 0x58000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57e00:
                    r10 = r29 + 24;
                    r4 = 6 << 16;
                    r11 = r20 + r0;
                    r20 = r16 + r0;
                    r16 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r18 = r18 | 3456;
                    r8 = r0 + r0;
                    r19 = r10 + r0;
                    r7 = r0 + 512;
                    r22 = r4 + 30500;
                case 0x57e28:
                    r5 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -43;
                    r2 = r2 & 255;
                    r9 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582cc;
                        run_58200(); return;
                    }
                    r4 = 6 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 30188;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x57e6c:
                    r2 = r3 + r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        continue;
                    }
                    r2 = r0 + -385;
                    r19 = r19 & r2;
                case 0x57e80:
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r22 = r22 + 1;
                case 0x57e88:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + -1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x580b4;
                        run_58000(); return;
                    }
                case 0x57ea4:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57a38;
                        run_57a00(); return;
                    }
                case 0x57eb4:
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x580f4;
                        run_58000(); return;
                    }
                case 0x57ec4:
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58d60;
                        run_58c00(); return;
                    }
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57f5c;
                        continue;
                    }
                    r2 = r18 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58ce0;
                        run_58c00(); return;
                    }
                    r2 = r0 + 3;
                    r7 = r18 & 255;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57f5c;
                        continue;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r16;
                    r23 = r22 + r0;
                    r16 = r7 + r0;
                    r18 = r10 + r0;
                case 0x57f10:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x57f28;
                    pc=0x61000;
                    run_61000(); return;
                case 0x57f28:
                    r3 = r16 + -1;
                    r2 = r23 + r21;
                    r16 = r3 & 255;
                    r4 = r2 - r22;
                    r2 = r16 << 24;
                    r2 = r2 >> 24;
                    r2 = r2 < 4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57f10;
                        continue;
                    }
                    r16 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r10 = r18 + r0;
                    r21 = r4 + r0;
                    r22 = r23 + r0;
                case 0x57f5c:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57fe4;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58d20;
                        run_58c00(); return;
                    }
                    addr=r22+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r0 + 101;
                    r23 = r22 + -1;
                    r7 = r21 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57fbc;
                        continue;
                    }
                    r2 = r0 + 69;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57fbc;
                        continue;
                    }
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x57fac;
                    pc=0x61000;
                    run_61000(); return;
                case 0x57fac:
                    addr=r22+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r23 = r22 + -2;
                    r7 = r21 + -2;
                case 0x57fbc:
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x57fd4;
                    pc=0x61000;
                    run_61000(); return;
                case 0x57fd4:
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r22 = r23 + r0;
                case 0x57fe4:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5787c;
                        run_57800(); return;
                    }
                    r4 = r19 & 1536;
                    r2 = r0 + 1024;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x58b7c;
                        run_58a00(); return;
                    }
                case 0x58000:
                    pc=0x58000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58000() throws ExecutionException { /* 0x58000 - 0x58200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58000:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58a54;
                        run_58a00(); return;
                    }
                case 0x58014:
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58028;
                    pc=0x5d400;
                    run_5d400(); return;
                case 0x58028:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58944;
                        run_58800(); return;
                    }
                case 0x58038:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f21;
                case 0x58048:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x58060:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e6c;
                        run_57e00(); return;
                    }
                    r2 = r0 + -129;
                    r5 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r19 = r19 & r2;
                    r2 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e88;
                        run_57e00(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57ea4;
                        run_57e00(); return;
                    }
                case 0x580b4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r3;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x580d0;
                    pc=0x61200;
                    run_61200(); return;
                case 0x580d0:
                    r3 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57a38;
                        run_57a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x57eb4;
                    run_57e00(); return;
                case 0x580f4:
                    r2 = r0 + -257;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x57ec4;
                    run_57e00(); return;
                case 0x58104:
                    r2 = r19 & 512;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = r0 + -641;
                    r19 = r19 & r4;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x58128:
                    r2 = r19 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    r2 = r0 + -129;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x58144:
                    r2 = r0 + 7;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    r18 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x5815c:
                    r2 = r0 + 6;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    r18 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x58174:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x588ac;
                        run_58800(); return;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58990;
                        run_58800(); return;
                    }
                case 0x5818c:
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x581a4;
                        continue;
                    }
                    r2 = r0 + 4;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                case 0x581a4:
                    r18 = r18 + 1;
                    r18 = r18 << 24;
                    r18 = r18 >> 24;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x581b8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x588c4;
                        run_58800(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x580f4;
                        continue;
                    }
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57ec4;
                        run_57e00(); return;
                    }
                    r19 = r19 & r11;
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x581f0:
                    r2 = r0 + 2;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    r18 = r0 + 3;
                case 0x58200:
                    pc=0x58200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58200() throws ExecutionException { /* 0x58200 - 0x58400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58200:
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x58208:
                    r2 = r19 & 1280;
                    r4 = r0 + 1024;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x58234;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57ec4;
                        run_57e00(); return;
                    }
                case 0x58234:
                    r2 = r19 & 512;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58254;
                        continue;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r2 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r22;
                    r4 = r4 - r2;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r4;
                case 0x58254:
                    r19 = r19 & r11;
                    r19 = r19 | 384;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x58268:
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57eb4;
                        run_57e00(); return;
                    }
                    r3 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x58280:
                    r2 = r18 & 1536;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x582cc;
                        continue;
                    }
                    r2 = r0 + -513;
                    r18 = r18 & r2;
                    r18 = r18 | 1280;
                    r16 = r0 + 16;
                case 0x5829c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r19 = r19 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x583c4;
                        continue;
                    }
                case 0x582b8:
                    r5 = r5 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r5;
                case 0x582c0:
                    r23 = r23 + -1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e28;
                        run_57e00(); return;
                    }
                case 0x582cc:
                    r2 = r18 & 256;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r16;
                    r16 = r20 + r0;
                    r20 = r11 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582f8;
                        continue;
                    }
                    r2 = ((r10 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58a20;
                        run_58a00(); return;
                    }
                case 0x582f0:
                    if(r10 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        run_57a00(); return;
                    }
                case 0x582f8:
                    r2 = r18 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x588e4;
                        run_58800(); return;
                    }
                case 0x58304:
                    r10 = r19 - r10;
                    r23 = r10 + r8;
                    r21 = r21 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x58318:
                    r2 = r16 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582cc;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5829c;
                    continue;
                case 0x58334:
                    r2 = r18 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582cc;
                        continue;
                    }
                    r2 = r0 + -129;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5829c;
                    continue;
                case 0x58350:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5829c;
                    continue;
                case 0x5836c:
                    r2 = r18 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5829c;
                        continue;
                    }
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58388;
                        continue;
                    }
                    r18 = r18 | 512;
                    r16 = r0 + 8;
                case 0x58388:
                    r2 = r18 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58980;
                        run_58800(); return;
                    }
                    r2 = r0 + -897;
                    r18 = r18 & r2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x583ac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r23 = r23 + 1;
                case 0x583ac:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x582b8;
                        continue;
                    }
                case 0x583c4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r6;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x583e8;
                    pc=0x61200;
                    run_61200(); return;
                case 0x583e8:
                    r6 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582c0;
                        continue;
                    }
                case 0x58400:
                    pc=0x58400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58400() throws ExecutionException { /* 0x58400 - 0x58600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58400:
                    /* Next insn is delay slot */ 
                    pc=0x582cc;
                    run_58200(); return;
                case 0x5840c:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r16 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582cc;
                        run_58200(); return;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5829c;
                    run_58200(); return;
                case 0x58438:
                    r6 = r23 + -349;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x57e00;
                    run_57e00(); return;
                case 0x58448:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r19 = r20 + 4;
                    r22 = r10 + r0;
                    r20 = r18 + r0;
                case 0x5845c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r22 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x584dc;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x584dc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5845c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x584cc;
                    pc=0x61200;
                    run_61200(); return;
                case 0x584cc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5845c;
                        continue;
                    }
                    if(r18 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        run_57a00(); return;
                    }
                case 0x584dc:
                    r18 = r20 - r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        run_57a00(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x58508:
                    r23 = r23 + -349;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r23;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x57a10;
                    run_57a00(); return;
                case 0x5851c:
                    r2 = 6 << 16;
                    r2 = r2 + -3072;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x579b0;
                    run_57800(); return;
                case 0x58538:
                    r18 = r18 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x57940;
                    run_57800(); return;
                case 0x58544:
                    r18 = r18 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x57940;
                    run_57800(); return;
                case 0x58550:
                    r18 = r18 | 64;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x579b0;
                    run_57800(); return;
                case 0x58560:
                    r5 = r16 + r0;
                    r4 = r29 + 376;
                    /* Next insn is delay slot */ 
                    r31=0x58570;
                    pc=0x5cc00;
                    run_5cc00(); return;
                case 0x58570:
                    r16 = r2 + r0;
                    r18 = r18 | 64;
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x579b0;
                    run_57800(); return;
                case 0x58584:
                    r18 = r18 | 512;
                case 0x58588:
                    r2 = 4 << 16;
                    r2 = r2 + -24064;
                    r3 = r0 + 16;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x579b0;
                    run_57800(); return;
                case 0x585a8:
                    r18 = r18 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x57940;
                    run_57800(); return;
                case 0x585b4:
                    r19 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x579b0;
                    run_57800(); return;
                case 0x585c0:
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r2 = r2 + r23;
                    r3 = r3 + -48;
                    r23 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x57940;
                    run_57800(); return;
                case 0x585dc:
                    r18 = r18 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x57940;
                    run_57800(); return;
                case 0x585e8:
                    r2 = 4 << 16;
                    r2 = r2 + -24064;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x58600:
                    pc=0x58600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58600() throws ExecutionException { /* 0x58600 - 0x58800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58600:
                    /* Next insn is delay slot */ 
                    pc=0x579b0;
                    run_57800(); return;
                case 0x58608:
                    r19 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x579b0;
                    run_57800(); return;
                case 0x58614:
                    r18 = r18 | 544;
                    /* Next insn is delay slot */ 
                    pc=0x58588;
                    run_58400(); return;
                case 0x58620:
                    r2 = r18 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5787c;
                        run_57800(); return;
                    }
                    r2 = r18 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58ba0;
                        run_58a00(); return;
                    }
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r21&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x5864c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x5866c;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x5866c:
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x589e4;
                        run_58800(); return;
                    }
                    r18 = r0 + r0;
                case 0x5867c:
                    r22 = r0 + r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r16 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r20;
                    r20 = r22 + r0;
                case 0x58694:
                    /* Next insn is delay slot */ 
                    r31=0x5869c;
                    pc=0x4fe00;
                    run_4fe00(); return;
                case 0x5869c:
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        run_57a00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r3 = r4 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r22 = r20 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = r17 + r0;
                    r6 = r29 + 24;
                    r7 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x586ec;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x586ec:
                    r5 = r0 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        run_57a00(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58ae0;
                        run_58a00(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5870c;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x5870c:
                    r21 = r21 + r22;
                    r23 = r23 + -1;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58af8;
                        run_58a00(); return;
                    }
                    r18 = r18 + 4;
                    r20 = r0 + r0;
                case 0x58724:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x589b0;
                        run_58800(); return;
                    }
                case 0x58734:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58694;
                        continue;
                    }
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                case 0x58744:
                    r3 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58048;
                        run_58000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x5875c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x5877c;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x5877c:
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x589f4;
                        run_58800(); return;
                    }
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                case 0x58790:
                    r6 = r0 + r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r16;
                    r22 = r0 + -2;
                    r16 = r6 + r0;
                case 0x587a0:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x587d0;
                        continue;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58bb4;
                        run_58a00(); return;
                    }
                case 0x587d0:
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                case 0x587d4:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5787c;
                        run_57800(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x587fc:
                    r19 = r20 + 4;
                case 0x58800:
                    pc=0x58800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58800() throws ExecutionException { /* 0x58800 - 0x58a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58800:
                    r20 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r18 = r20 + r0;
                case 0x5880c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r5 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58888;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58888;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5880c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58880;
                    pc=0x61200;
                    run_61200(); return;
                case 0x58880:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5880c;
                        continue;
                    }
                case 0x58888:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    r18 = r18 - r20;
                    r21 = r21 + r18;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x588ac:
                    r2 = r0 + 2;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5818c;
                        run_58000(); return;
                    }
                    r3 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x588c4:
                    r2 = r0 + 3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x581a4;
                        run_58000(); return;
                    }
                    r2 = r0 + 5;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x581a4;
                        run_58000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x57eb4;
                    run_57e00(); return;
                case 0x588e4:
                    r3 = readPages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff];
                    r7 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r10 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x5890c;
                    return;
                case 0x5890c:
                    r3 = r18 & 32;
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58a00;
                        run_58a00(); return;
                    }
                case 0x58920:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x5892c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x58304;
                    run_58200(); return;
                case 0x58944:
                    r9 = r19 & 2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58038;
                        run_58000(); return;
                    }
                    f12 = f0;
                    f13 = f1;
                    r18 = r20 + 4;
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x58964;
                    pc=0x53400;
                    run_53400(); return;
                case 0x58964:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58c78;
                        run_58c00(); return;
                    }
                    f20=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f20;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58048;
                    run_58000(); return;
                case 0x58980:
                    r2 = r0 + -1409;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5829c;
                    run_58200(); return;
                case 0x58990:
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5818c;
                        run_58000(); return;
                    }
                    r19 = r19 & r11;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x57e80;
                    run_57e00(); return;
                case 0x589b0:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x589c0;
                    pc=0x61200;
                    run_61200(); return;
                case 0x589c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58734;
                        run_58600(); return;
                    }
                    r22 = r20 + r0;
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58744;
                        run_58600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x57b8c;
                    run_57a00(); return;
                case 0x589e4:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x5867c;
                    run_58600(); return;
                case 0x589f4:
                    r19 = r29 + 640;
                    /* Next insn is delay slot */ 
                    pc=0x58790;
                    run_58600(); return;
                case 0x58a00:
                    pc=0x58a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58a00() throws ExecutionException { /* 0x58a00 - 0x58c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58a00:
                    r3 = r18 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58920;
                        run_58800(); return;
                    }
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x5892c;
                    run_58800(); return;
                case 0x58a20:
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r22 = r19 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58a44;
                    pc=0x61000;
                    run_61000(); return;
                case 0x58a44:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x582f0;
                    run_58200(); return;
                case 0x58a54:
                    r3 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r5 = r3 + 1;
                    r4 = r17 + r0;
                    r7 = r0 + 10;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x58a74;
                    pc=0x5f400;
                    run_5f400(); return;
                case 0x58a74:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r22 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r6 = r2 - r3;
                case 0x58a84:
                    r2 = r29 + 363;
                    r2 = ((r22 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58a98;
                        continue;
                    }
                    r22 = r29 + 362;
                case 0x58a98:
                    r2 = 6 << 16;
                    r4 = r22 + r0;
                    r5 = r2 + 29380;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x58ab0;
                    pc=0x5d200;
                    run_5d200(); return;
                case 0x58ab0:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58ac8;
                    pc=0x5d400;
                    run_5d400(); return;
                case 0x58ac8:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58944;
                        run_58800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x58038;
                    run_58000(); return;
                case 0x58ae0:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5870c;
                        run_58600(); return;
                    }
                    r20 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58724;
                    run_58600(); return;
                case 0x58af8:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58724;
                    run_58600(); return;
                case 0x58b04:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        run_57a00(); return;
                    }
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x58b18:
                    r5 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r6 = r0 + 1;
                    r7 = r23 + r0;
                    r18 = r20 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x58b38;
                    pc=0x61400;
                    run_61400(); return;
                case 0x58b38:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        run_57a00(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r21 = r2 + r21;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x58b5c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58b6c;
                    pc=0x61200;
                    run_61200(); return;
                case 0x58b6c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57afc;
                        run_57a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x57b8c;
                    run_57a00(); return;
                case 0x58b7c:
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r18 = r3 - r4;
                    r6 = r0 - r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58a84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x58014;
                    run_58000(); return;
                case 0x58ba0:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x5787c;
                    run_57800(); return;
                case 0x58bb4:
                    /* Next insn is delay slot */ 
                    r31=0x58bbc;
                    pc=0x4fe00;
                    run_4fe00(); return;
                case 0x58bbc:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        run_57a00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r18 = r16 + 1;
                    r16 = r4 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r19 + r0;
                case 0x58c00:
                    pc=0x58c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58c00() throws ExecutionException { /* 0x58c00 - 0x58e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58c00:
                    r6 = r29 + 24;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58c10;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x58c10:
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        run_57a00(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58c94;
                        continue;
                    }
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x58c2c:
                    /* Next insn is delay slot */ 
                    r31=0x58c34;
                    pc=0x5c200;
                    run_5c200(); return;
                case 0x58c34:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58da0;
                        continue;
                    }
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x587d4;
                        run_58600(); return;
                    }
                case 0x58c48:
                    r18 = r18 + -1;
                    r5 = r29 + 24;
                    r2 = r5 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58c68;
                    pc=0x61000;
                    run_61000(); return;
                case 0x58c68:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58c48;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x587d4;
                    run_58600(); return;
                case 0x58c78:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58c84;
                    pc=0x5ce00;
                    run_5ce00(); return;
                case 0x58c84:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f0;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58048;
                    run_58000(); return;
                case 0x58c94:
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x58dc4;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x58ca0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x587a0;
                        run_58600(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58cc0;
                    pc=0x61200;
                    run_61200(); return;
                case 0x58cc0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x587a0;
                        run_58600(); return;
                    }
                    r6 = r16 + r0;
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b8c;
                        run_57a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x587d4;
                    run_58600(); return;
                case 0x58ce0:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    r16 = r10 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        run_57a00(); return;
                    }
                case 0x58cf4:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58d0c;
                    pc=0x61000;
                    run_61000(); return;
                case 0x58d0c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x58cf4;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57bb4;
                    run_57a00(); return;
                case 0x58d20:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        run_57a00(); return;
                    }
                    r16 = r10 + r0;
                case 0x58d34:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58d4c;
                    pc=0x61000;
                    run_61000(); return;
                case 0x58d4c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x58d34;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57bb4;
                    run_57a00(); return;
                case 0x58d60:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57b40;
                        run_57a00(); return;
                    }
                    r16 = r10 + r0;
                case 0x58d74:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58d8c;
                    pc=0x61000;
                    run_61000(); return;
                case 0x58d8c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x58d74;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x57bb4;
                    run_57a00(); return;
                case 0x58da0:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r21 = r21 + r18;
                    r23 = r23 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58dd0;
                        continue;
                    }
                    r19 = r19 + 4;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58ca0;
                    continue;
                case 0x58dc4:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x58c2c;
                    continue;
                case 0x58dd0:
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58ca0;
                    continue;
                case 0x58e00:
                    pc=0x58e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58e00() throws ExecutionException { /* 0x58e00 - 0x59000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58e00:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3e2d0;
                    run_3e200(); return;
                case 0x59000:
                    pc=0x59000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59000() throws ExecutionException { /* 0x59000 - 0x59200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3df60;
                    run_3de00(); return;
                case 0x59200:
                    pc=0x59200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59200() throws ExecutionException { /* 0x59200 - 0x59400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59200:
                    r2 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    r2 = r2 & 8192;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    r22 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59308;
                        continue;
                    }
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r23 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r21 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x592fc;
                        continue;
                    }
                case 0x59258:
                    r18 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r18 = r18 >>> 2;
                    r17 = r0 + r0;
                    if(r18 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59288;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x592e4;
                    continue;
                case 0x59278:
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r18 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x592e0;
                        continue;
                    }
                case 0x59288:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5929c;
                    pc=0x5bc00;
                    run_5bc00(); return;
                case 0x5929c:
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x59278;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x592a8:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r0;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r0;
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x592e0:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                case 0x592e4:
                    r18 = r18 << 2;
                    r2 = r2 - r18;
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r23 = r23 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59258;
                        continue;
                    }
                case 0x592fc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x592a8;
                    continue;
                case 0x59308:
                    /* Next insn is delay slot */ 
                    r31=0x59310;
                    pc=0x4ea00;
                    run_4ea00(); return;
                case 0x59310:
                    /* Next insn is delay slot */ 
                    pc=0x592a8;
                    continue;
                case 0x59400:
                    pc=0x59400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59400() throws ExecutionException { /* 0x59400 - 0x59600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59400:
                    r3 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59418;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x59200;
                    run_59200(); return;
                case 0x59418:
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59600:
                    pc=0x59600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59600() throws ExecutionException { /* 0x59600 - 0x59800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59600:
                    r29 = r29 + -1248;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r23;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r20;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r18;
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r31;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r30;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r22;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r21;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r19;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r17;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r23 = r5 + r0;
                    r20 = r6 + r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59654;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a14c;
                        run_5a000(); return;
                    }
                case 0x59654:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59688;
                        continue;
                    }
                    r4 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff] = r2;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x59688:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59fd4;
                        run_59e00(); return;
                    }
                    r4 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59fd4;
                        run_59e00(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5a004;
                        run_5a000(); return;
                    }
                case 0x596b4:
                    r3 = r29 + 1080;
                    writePages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r3 = r29 + 1079;
                    r21 = r29 + 16;
                    r10 = 6 << 16;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    r3 = r4 - r3;
                    writePages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff] = r3;
                    writePages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff] = r21;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r0;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r0;
                    r22 = r10 + 30908;
                    r3 = r21 + r0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r18;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r23;
                    r16 = r20 + r0;
                case 0x59700:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a728;
                        run_5a600(); return;
                    }
                    r4 = r0 + 37;
                    r17 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x59730;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x59798;
                    continue;
                case 0x59728:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x59744;
                        continue;
                    }
                case 0x59730:
                    r17 = r17 + 1;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59728;
                        continue;
                    }
                case 0x59744:
                    r19 = r17 - r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59798;
                        continue;
                    }
                    r2 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r4 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r19 + r4;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x597fc;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a640;
                        run_5a600(); return;
                    }
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r5 = r5 + r19;
                    r3 = r21 + r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                case 0x59798:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a7a0;
                        run_5a600(); return;
                    }
                    r2 = r17 + 1;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r30 = r0 + -1;
                    r17 = r0 + r0;
                    r23 = r0 + r0;
                    r7 = r0 + 42;
                case 0x597c4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r16 = r2 + 1;
                case 0x597cc:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a57c;
                        run_5a400(); return;
                    }
                    r5 = 6 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 30536;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x597fc:
                    r3 = r3 + 8;
                case 0x59800:
                    pc=0x59800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59800() throws ExecutionException { /* 0x59800 - 0x59a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59800:
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x59798;
                    run_59600(); return;
                case 0x59818:
                    r23 = r23 | 16;
                case 0x5981c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x59828:
                    r23 = r23 | 16;
                case 0x5982c:
                    r2 = r23 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c68;
                        run_59c00(); return;
                    }
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c68;
                        run_59c00(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x59884;
                    continue;
                case 0x59860:
                    r23 = r23 | 16;
                case 0x59864:
                    r2 = r23 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a2e8;
                        run_5a200(); return;
                    }
                case 0x59870:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x59884:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r30 + r0;
                    r5 = r0 + r0;
                case 0x59890:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x598a0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r23 = r23 & r6;
                case 0x598a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59d50;
                        run_59c00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59d50;
                        run_59c00(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a178;
                        run_5a000(); return;
                    }
                case 0x598b8:
                    r18 = r29 + 1080;
                case 0x598bc:
                    r2 = r19 < r30 ? 1 : 0;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x598d0;
                        continue;
                    }
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r30;
                case 0x598d0:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x598e8;
                        continue;
                    }
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                case 0x598e8:
                    r15 = r23 & 2;
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59904;
                        continue;
                    }
                    r4 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r4 = r4 + 2;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r4;
                case 0x59904:
                    r20 = r23 & 132;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59cc4;
                        run_59c00(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r9 = r17 - r5;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59cc4;
                        run_59c00(); return;
                    }
                    r2 = r9 < 17 ? 1 : 0;
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a854;
                        run_5a800(); return;
                    }
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r25 = r0 + 16;
                    writePages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff] = r15;
                    r16 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59970;
                    continue;
                case 0x59954:
                    r7 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x59960:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x599b8;
                        continue;
                    }
                case 0x59970:
                    r2 = r4 + 1;
                    r8 = r8 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r25;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r8;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59954;
                        continue;
                    }
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c88;
                        run_59c00(); return;
                    }
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r7 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59970;
                        continue;
                    }
                case 0x599b8:
                    r9 = r16 + r0;
                    r15 = readPages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff];
                    r16 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                case 0x599c4:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r5 = r9 + r8;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r7 < 8 ? 1 : 0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a15c;
                        run_5a000(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 8;
                    r4 = r7 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59ce0;
                        run_59c00(); return;
                    }
                case 0x599fc:
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59a38;
                        run_59a00(); return;
                    }
                case 0x59a00:
                    pc=0x59a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59a00() throws ExecutionException { /* 0x59a00 - 0x59c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59a00:
                    r2 = r29 + 1156;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 2;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a0e0;
                        run_5a000(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x59a38:
                    r2 = r0 + 128;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x59ebc;
                        run_59e00(); return;
                    }
                case 0x59a44:
                    r20 = r30 - r19;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59b0c;
                        continue;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a790;
                        run_5a600(); return;
                    }
                    r4 = 6 << 16;
                    r8 = r4 + 30892;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r30 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59a94;
                    continue;
                case 0x59a78:
                    r4 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x59a84:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59adc;
                        continue;
                    }
                case 0x59a94:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59a78;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59d1c;
                        run_59c00(); return;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59a94;
                        continue;
                    }
                case 0x59adc:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x59ae4:
                    r5 = r5 + r20;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e80;
                        run_59e00(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x59b0c:
                    r14 = r19 + r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59ea4;
                        run_59e00(); return;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a614;
                        run_5a600(); return;
                    }
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                case 0x59b3c:
                    r12 = r23 & 4;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c0c;
                        run_59c00(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r18 = r17 - r5;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c0c;
                        run_59c00(); return;
                    }
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8a8;
                        run_5a800(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r19 = r0 + 16;
                    r20 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x59ba0;
                    continue;
                case 0x59b84:
                    r5 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x59b90:
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59be8;
                        continue;
                    }
                case 0x59ba0:
                    r2 = r4 + 1;
                    r14 = r14 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59b84;
                        continue;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e4c;
                        run_59e00(); return;
                    }
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r5 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59ba0;
                        continue;
                    }
                case 0x59be8:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r14 = r14 + r18;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r5;
                    r5 = r5 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                case 0x59c00:
                    pc=0x59c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59c00() throws ExecutionException { /* 0x59c00 - 0x59e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59c00:
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a51c;
                        run_5a400(); return;
                    }
                case 0x59c0c:
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c24;
                        continue;
                    }
                    r19 = r17 + r0;
                case 0x59c24:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c58;
                        continue;
                    }
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x59c50;
                    pc=0x59200;
                    run_59200(); return;
                case 0x59c50:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        continue;
                    }
                case 0x59c58:
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59700;
                    run_59600(); return;
                case 0x59c68:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59884;
                    run_59800(); return;
                case 0x59c88:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r25;
                    /* Next insn is delay slot */ 
                    r31=0x59ca0;
                    pc=0x59200;
                    run_59200(); return;
                case 0x59ca0:
                    r25 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r7 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59960;
                    run_59800(); return;
                case 0x59cc4:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                case 0x59cd0:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x599fc;
                        run_59800(); return;
                    }
                case 0x59ce0:
                    r2 = r29 + 1158;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 1;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a0c4;
                        run_5a000(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x599fc;
                    run_59800(); return;
                case 0x59d1c:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x59d30;
                    pc=0x59200;
                    run_59200(); return;
                case 0x59d30:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        continue;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59a84;
                    run_59a00(); return;
                case 0x59d50:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5a0fc;
                        run_5a000(); return;
                    }
                    r6 = r0 + 2;
                    r18 = r29 + 1080;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x59da4;
                        continue;
                    }
                    r6 = readPages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff];
                case 0x59d70:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r18 = r18 + -1;
                    r2 = r2 >>> 4;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59d70;
                        continue;
                    }
                case 0x59d90:
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r4 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x598bc;
                    run_59800(); return;
                case 0x59da4:
                    r4 = r2 & 7;
                    r18 = r18 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59da4;
                        continue;
                    }
                    r2 = r23 & 1;
                    r6 = r18 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59de4;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x59d90;
                        continue;
                    }
                    r18 = r18 + -1;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x59de4:
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x598bc;
                    run_59800(); return;
                case 0x59df8:
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                case 0x59e00:
                    pc=0x59e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59e00() throws ExecutionException { /* 0x59e00 - 0x5a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59e00:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59eb0;
                        continue;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x59e18:
                    r31 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r30 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r23 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r22 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r21 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r20 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    r19 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r18 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r17 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r29 = r29 + 1248;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59e4c:
                    r4 = r20 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x59e60;
                    pc=0x59200;
                    run_59200(); return;
                case 0x59e60:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e00;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59b90;
                    run_59a00(); return;
                case 0x59e80:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a6f4;
                        run_5a600(); return;
                    }
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r19;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r14 = r19 + r0;
                    r3 = r21 + r0;
                case 0x59ea4:
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x59b3c;
                    run_59a00(); return;
                case 0x59eb0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x59e18;
                    continue;
                case 0x59ebc:
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r20 = r17 - r2;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59a44;
                        run_59a00(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8d4;
                        run_5a800(); return;
                    }
                    r4 = 6 << 16;
                    r8 = r4 + 30892;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r9 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59f14;
                    continue;
                case 0x59ef8:
                    r6 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x59f04:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59f5c;
                        continue;
                    }
                case 0x59f14:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59ef8;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59f98;
                        continue;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r6 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59f14;
                        continue;
                    }
                case 0x59f5c:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x59f64:
                    r5 = r5 + r20;
                    r2 = r6 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a6d8;
                        run_5a600(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r6 + 1;
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59a44;
                    run_59a00(); return;
                case 0x59f98:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x59fb0;
                    pc=0x59200;
                    run_59200(); return;
                case 0x59fb0:
                    r9 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r6 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59f04;
                    continue;
                case 0x59fd4:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59fe4;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x59fe4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59eb0;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x596b4;
                        run_59600(); return;
                    }
                case 0x5a000:
                    pc=0x5a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a000() throws ExecutionException { /* 0x5a000 - 0x5a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a000:
                case 0x5a004:
                    addr=r23+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x596b4;
                        run_59600(); return;
                    }
                    addr=r29+1054;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r23+28)>>>12][((r23+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r23+36)>>>12][((r23+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r29 + 16;
                    r7 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1040;
                    r6 = r20 + r0;
                    writePages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff] = r3;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r2;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r2;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a070;
                    pc=0x59600;
                    run_59600(); return;
                case 0x5a070:
                    r21 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a094;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x5a08c;
                    pc=0x31000;
                    run_31000(); return;
                case 0x5a08c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a920;
                        run_5a800(); return;
                    }
                case 0x5a094:
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a0b8;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x5a0b8:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59e18;
                    run_59e00(); return;
                case 0x5a0c4:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a668;
                        run_5a600(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x599fc;
                    run_59800(); return;
                case 0x5a0e0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a6a4;
                        run_5a600(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59a38;
                    run_59a00(); return;
                case 0x5a0fc:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a554;
                        run_5a400(); return;
                    }
                    r18 = r29 + 1080;
                    r4 = r0 + 10;
                case 0x5a110:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x5a11c;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x5a11c:
                    r18 = r18 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a110;
                        continue;
                    }
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x598bc;
                    run_59800(); return;
                case 0x5a14c:
                    /* Next insn is delay slot */ 
                    r31=0x5a154;
                    pc=0x32600;
                    run_32600(); return;
                case 0x5a154:
                    /* Next insn is delay slot */ 
                    pc=0x59654;
                    run_59600(); return;
                case 0x5a15c:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a5ac;
                        run_5a400(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59cd0;
                    run_59c00(); return;
                case 0x5a178:
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x598b8;
                        run_59800(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x598bc;
                    run_59800(); return;
                case 0x5a19c:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a56c;
                        run_5a400(); return;
                    }
                    r17 = r0 - r17;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                case 0x5a1bc:
                    r23 = r23 | 4;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x5a1cc:
                    r6 = r0 + 43;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x5a1dc:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a5e8;
                        run_5a400(); return;
                    }
                    r12 = r23 & 64;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a5e8;
                        run_5a400(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x5a200:
                    pc=0x5a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a200() throws ExecutionException { /* 0x5a200 - 0x5a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a200:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x59700;
                    run_59600(); return;
                case 0x5a218:
                    r2 = 6 << 16;
                    r2 = r2 + 24008;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a3c8;
                        continue;
                    }
                case 0x5a234:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x5a248:
                    r5 = r23 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a608;
                        run_5a600(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a608;
                        run_5a600(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 | 2;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x59884;
                    run_59800(); return;
                case 0x5a278:
                    r23 = r23 | 64;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x5a288:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r16 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8f4;
                        run_5a800(); return;
                    }
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a2dc;
                        continue;
                    }
                case 0x5a2ac:
                    r4 = r30 << 1;
                    r5 = r5 + 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r30 = r2 + r30;
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a2ac;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a780;
                        run_5a600(); return;
                    }
                case 0x5a2dc:
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597cc;
                    run_59600(); return;
                case 0x5a2e8:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59870;
                        run_59800(); return;
                    }
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59884;
                    run_59800(); return;
                case 0x5a314:
                    r23 = r23 | 128;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x5a324:
                    r17 = r0 + r0;
                    r2 = r4 + -48;
                case 0x5a32c:
                    r4 = r17 << 1;
                    r16 = r16 + 1;
                    r17 = r17 << 3;
                    r17 = r4 + r17;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r17 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a32c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x597cc;
                    run_59600(); return;
                case 0x5a35c:
                    r23 = r23 | 16;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a430;
                        run_5a400(); return;
                    }
                case 0x5a370:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a430;
                        run_5a400(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x5a390:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a734;
                        run_5a600(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r19 = r30 + r0;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59890;
                    run_59800(); return;
                case 0x5a3ac:
                    r2 = 6 << 16;
                    r2 = r2 + 23988;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a234;
                        continue;
                    }
                case 0x5a3c8:
                    r2 = r23 & 64;
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a754;
                        run_5a600(); return;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x5a248;
                    continue;
                case 0x5a3ec:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x5a400:
                    pc=0x5a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a400() throws ExecutionException { /* 0x5a400 - 0x5a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a400:
                    r2 = r0 + 1;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x598e8;
                    run_59800(); return;
                case 0x5a420:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a370;
                        run_5a200(); return;
                    }
                case 0x5a430:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x5a390;
                    run_5a200(); return;
                case 0x5a44c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5981c;
                        run_59800(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x5a464:
                    r23 = r23 | 1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x5a474:
                    r2 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r20 = r2 + 4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a868;
                        run_5a800(); return;
                    }
                    r4 = r18 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a7f8;
                        run_5a600(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x5a4ac;
                    pc=0x36800;
                    run_36800(); return;
                case 0x5a4ac:
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8bc;
                        run_5a800(); return;
                    }
                    r19 = r2 - r18;
                    r2 = r30 < r19 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a774;
                        run_5a600(); return;
                    }
                case 0x5a4c8:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x598bc;
                    run_59800(); return;
                case 0x5a4dc:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 6 << 16;
                    r4 = r4 + 24008;
                    r5 = r5 + 4;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r4;
                    r23 = r23 | 2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x59884;
                    run_59800(); return;
                case 0x5a51c:
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a7d0;
                        run_5a600(); return;
                    }
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a768;
                        run_5a600(); return;
                    }
                case 0x5a538:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59700;
                    run_59600(); return;
                case 0x5a554:
                    r2 = r2 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x598bc;
                    run_59800(); return;
                case 0x5a56c:
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x5a57c:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a7a0;
                        run_5a600(); return;
                    }
                    r5 = r0 + 1;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r5;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x598e8;
                    run_59800(); return;
                case 0x5a5ac:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x5a5c4;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a5c4:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59cd0;
                    run_59c00(); return;
                case 0x5a5e8:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x5a600:
                    pc=0x5a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a600() throws ExecutionException { /* 0x5a600 - 0x5a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a600:
                    /* Next insn is delay slot */ 
                    pc=0x59700;
                    run_59600(); return;
                case 0x5a608:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x59884;
                    run_59800(); return;
                case 0x5a614:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x5a628;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a628:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59b3c;
                    run_59a00(); return;
                case 0x5a640:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x5a654;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a654:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59800;
                    run_59800(); return;
                case 0x5a668:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x5a680;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a680:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x599fc;
                    run_59800(); return;
                case 0x5a6a4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x5a6b8;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a6b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59a38;
                    run_59a00(); return;
                case 0x5a6d8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a820;
                        run_5a800(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59a44;
                    run_59a00(); return;
                case 0x5a6f4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x5a708;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a708:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59b0c;
                    run_59a00(); return;
                case 0x5a728:
                    r17 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59798;
                    run_59600(); return;
                case 0x5a734:
                    r4 = r0 + 45;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r19 = r30 + r0;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59890;
                    run_59800(); return;
                case 0x5a754:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x5a248;
                    run_5a200(); return;
                case 0x5a768:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5a538;
                    run_5a400(); return;
                case 0x5a774:
                    r19 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5a4c8;
                    run_5a400(); return;
                case 0x5a780:
                    r30 = r0 + -1;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597cc;
                    run_59600(); return;
                case 0x5a790:
                    r2 = 6 << 16;
                    r8 = r2 + 30892;
                    /* Next insn is delay slot */ 
                    pc=0x59ae4;
                    run_59a00(); return;
                case 0x5a7a0:
                    r2 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r18 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e00;
                        run_59e00(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x5a7c8;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a7c8:
                    /* Next insn is delay slot */ 
                    pc=0x59e00;
                    run_59e00(); return;
                case 0x5a7d0:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x5a7e4;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a7e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x59c0c;
                    run_59c00(); return;
                case 0x5a7f8:
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x5a804;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x5a800:
                    pc=0x5a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a800() throws ExecutionException { /* 0x5a800 - 0x5aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a800:
                case 0x5a804:
                    r19 = r2 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x598bc;
                    run_59800(); return;
                case 0x5a820:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x5a834;
                    pc=0x59200;
                    run_59200(); return;
                case 0x5a834:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59df8;
                        run_59c00(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59a44;
                    run_59a00(); return;
                case 0x5a854:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x599c4;
                    run_59800(); return;
                case 0x5a868:
                    r2 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r13 = r30 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a87c;
                        continue;
                    }
                    r13 = r0 + 6;
                case 0x5a87c:
                    r19 = r13 + r0;
                    r2 = r13 + r0;
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8e8;
                        continue;
                    }
                case 0x5a88c:
                    r10 = 6 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r18 = r10 + 27916;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x598e8;
                    run_59800(); return;
                case 0x5a8a8:
                    r5 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59be8;
                    run_59a00(); return;
                case 0x5a8bc:
                    r19 = r30 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x598bc;
                    run_59800(); return;
                case 0x5a8d4:
                    r2 = 6 << 16;
                    r6 = r4 + r0;
                    r8 = r2 + 30892;
                    /* Next insn is delay slot */ 
                    pc=0x59f64;
                    run_59e00(); return;
                case 0x5a8e8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5a88c;
                    continue;
                case 0x5a8f4:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    r30 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a56c;
                        run_5a400(); return;
                    }
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x597c4;
                    run_59600(); return;
                case 0x5a920:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5a094;
                    run_5a000(); return;
                case 0x5aa00:
                    pc=0x5aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5aa00() throws ExecutionException { /* 0x5aa00 - 0x5ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5aa00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59600;
                    run_59600(); return;
                case 0x5ac00:
                    pc=0x5ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ac00() throws ExecutionException { /* 0x5ac00 - 0x5ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ac00:
                    r29 = r29 + -136;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r17;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ace4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ac9c;
                        continue;
                    }
                    r2 = r0 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x5ac64;
                    pc=0x55400;
                    run_55400(); return;
                case 0x5ac64:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5acd4;
                        continue;
                    }
                case 0x5ac70:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ac84;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x5ac84:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r17 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r16 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ac9c:
                    r2 = r6 + -1;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x5acc8;
                    pc=0x55400;
                    run_55400(); return;
                case 0x5acc8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ac70;
                        continue;
                    }
                case 0x5acd4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5ac70;
                    continue;
                case 0x5ace4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5ac84;
                    continue;
                case 0x5ae00:
                    pc=0x5ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ae00() throws ExecutionException { /* 0x5ae00 - 0x5b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ae00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x5ae30;
                    pc=0x5ac00;
                    run_5ac00(); return;
                case 0x5ae30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b000:
                    pc=0x5b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b000() throws ExecutionException { /* 0x5b000 - 0x5b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b000:
                    r29 = r29 + -128;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r5 = r29 + 16;
                    r2 = r0 + -1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x5b03c;
                    pc=0x55400;
                    run_55400(); return;
                case 0x5b03c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b200:
                    pc=0x5b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b200() throws ExecutionException { /* 0x5b200 - 0x5b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5b000;
                    run_5b000(); return;
                case 0x5b400:
                    pc=0x5b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b400() throws ExecutionException { /* 0x5b400 - 0x5b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b400:
                    r29 = r29 + -88;
                    r5 = r29 + 16;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x5b414;
                    pc=0x59000;
                    run_59000(); return;
                case 0x5b414:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b468;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 8192;
                    r3 = r3 & 61440;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5b454;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x5b438;
                    pc=0x30400;
                    run_30400(); return;
                case 0x5b438:
                    r3 = r0 + 25;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                case 0x5b444:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b454:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b468:
                    /* Next insn is delay slot */ 
                    r31=0x5b470;
                    pc=0x30400;
                    run_30400(); return;
                case 0x5b470:
                    r3 = r0 + 9;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5b444;
                    continue;
                case 0x5b600:
                    pc=0x5b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b600() throws ExecutionException { /* 0x5b600 - 0x5b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b600:
                    { long hilo = (long)(r5) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r5 = lo;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x5b634;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x5b634:
                    r2 = 7 << 16;
                    r18 = readPages[(r2+-31976)>>>12][((r2+-31976)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5b650;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x5b650:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b77c;
                        continue;
                    }
                    r19 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r16 + -8;
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5b74c;
                        continue;
                    }
                case 0x5b674:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5b680;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x5b680:
                    r6 = r19 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b708;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b6d4;
                        continue;
                    }
                    r2 = r16 + r0;
                case 0x5b6a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x5b6b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b6d4:
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b740;
                        continue;
                    }
                    r2 = r0 + 36;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r0;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5b768;
                        continue;
                    }
                    r2 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x5b6a0;
                    continue;
                case 0x5b708:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5b718;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x5b718:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b740:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x5b6a0;
                    continue;
                case 0x5b74c:
                    r2 = r20 & r2;
                    r3 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b674;
                        continue;
                    }
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5b674;
                    continue;
                case 0x5b768:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + 24;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5b6a0;
                    continue;
                case 0x5b77c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5b788;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x5b788:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5b6b0;
                    continue;
                case 0x5b800:
                    pc=0x5b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b800() throws ExecutionException { /* 0x5b800 - 0x5ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b800:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ba00:
                    pc=0x5ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ba00() throws ExecutionException { /* 0x5ba00 - 0x5bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ba00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5bc00:
                    pc=0x5bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5bc00() throws ExecutionException { /* 0x5bc00 - 0x5be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5bc00:
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -56;
                    r3 = r2 & 8192;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bc54;
                        continue;
                    }
                    r2 = r2 | 8192;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    writePages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff] = r2;
                case 0x5bc54:
                    /* Next insn is delay slot */ 
                    r31=0x5bc5c;
                    pc=0x4fe00;
                    run_4fe00(); return;
                case 0x5bc5c:
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5bdc4;
                        continue;
                    }
                case 0x5bc68:
                    r4 = r19 + r0;
                    r5 = r29 + 16;
                    r6 = r18 + r0;
                    r7 = r16 + 92;
                    /* Next insn is delay slot */ 
                    r31=0x5bc80;
                    pc=0x62e00;
                    run_62e00(); return;
                case 0x5bc80:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5bd58;
                        continue;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bd4c;
                        continue;
                    }
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x5bc9c:
                    r17 = r0 + r0;
                    r21 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x5bce4;
                    continue;
                case 0x5bcac:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x5bcc8:
                    r17 = r17 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bd4c;
                        continue;
                    }
                case 0x5bcd8:
                    r2 = r29 + 16;
                    r3 = r2 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x5bce4:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bcac;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r3 = r3 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bd94;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x5bdec;
                        continue;
                    }
                    r17 = r17 + 1;
                    r2 = r2 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bcd8;
                        continue;
                    }
                case 0x5bd4c:
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5bd6c;
                    continue;
                case 0x5bd58:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                case 0x5bd6c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5bd94:
                    r4 = r19 + r0;
                    r5 = r5 & 255;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5bda8;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x5bda8:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x5bdb0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bcc8;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5bd6c;
                    continue;
                case 0x5bdc4:
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bc68;
                        continue;
                    }
                    r5 = r18 << 24;
                    r5 = r5 >> 24;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5bc9c;
                    continue;
                case 0x5bdec:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5be00;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x5be00:
                    pc=0x5be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5be00() throws ExecutionException { /* 0x5be00 - 0x5c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5be00:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x5bdb0;
                    run_5bc00(); return;
                case 0x5c000:
                    pc=0x5c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c000() throws ExecutionException { /* 0x5c000 - 0x5c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c05c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c044;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x5c03c;
                    pc=0x32600;
                    run_32600(); return;
                case 0x5c03c:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x5c044:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x5bc00;
                    run_5bc00(); return;
                case 0x5c05c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x5bc00;
                    run_5bc00(); return;
                case 0x5c200:
                    pc=0x5c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c200() throws ExecutionException { /* 0x5c200 - 0x5c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c200:
                    r2 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c230;
                        continue;
                    }
                    r2 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    r2 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c230:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c400:
                    pc=0x5c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c400() throws ExecutionException { /* 0x5c400 - 0x5c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c400:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r18 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c494;
                        continue;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5c43c;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x5c43c:
                    r5 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x5c45c;
                    return;
                case 0x5c45c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c478;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x5c478:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c494:
                    /* Next insn is delay slot */ 
                    r31=0x5c49c;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x5c49c:
                    r6 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + 23396;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x5c4c0;
                    return;
                case 0x5c4c0:
                    /* Next insn is delay slot */ 
                    pc=0x5c45c;
                    continue;
                case 0x5c600:
                    pc=0x5c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c600() throws ExecutionException { /* 0x5c600 - 0x5c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c600:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r16 = r5 + r0;
                    r17 = r7 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c6b0;
                        continue;
                    }
                    r21 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    r18 = r6 + r0;
                    r20 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5c648;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x5c648:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r21 + r0;
                    r5 = r19 + r0;
                    r6 = r16 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x5c668;
                    return;
                case 0x5c668:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c688;
                        continue;
                    }
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x5c688:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c6b0:
                    r18 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5c6c0;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x5c6c0:
                    r6 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + 23396;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x5c6e4;
                    return;
                case 0x5c6e4:
                    /* Next insn is delay slot */ 
                    pc=0x5c668;
                    continue;
                case 0x5c800:
                    pc=0x5c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c800() throws ExecutionException { /* 0x5c800 - 0x5ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c800:
                    r29 = r29 + -8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c840;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c84c;
                        continue;
                    }
                case 0x5c814:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c85c;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x5c834:
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c840:
                    r5 = r29 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c814;
                        continue;
                    }
                case 0x5c84c:
                    r2 = r0 + r0;
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c85c:
                    r2 = r0 + -2;
                    /* Next insn is delay slot */ 
                    pc=0x5c834;
                    continue;
                case 0x5ca00:
                    pc=0x5ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ca00() throws ExecutionException { /* 0x5ca00 - 0x5cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ca00:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5ca28;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x5ca28:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x5ca4c;
                    return;
                case 0x5ca4c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5cc00:
                    pc=0x5cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5cc00() throws ExecutionException { /* 0x5cc00 - 0x5ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5cc00:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r0 + 94;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5cce8;
                        continue;
                    }
                    r2 = r5 + 1;
                    r7 = r0 + r0;
                    r9 = r0 + r0;
                case 0x5cc1c:
                    r3 = r0 + r0;
                    r6 = r0 + 256;
                case 0x5cc24:
                    r5 = r4 + r3;
                    r3 = r3 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5cc24;
                        continue;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cc90;
                        continue;
                    }
                    r5 = r0 + 1;
                    r5 = r5 - r9;
                    r10 = r0 + 45;
                    r9 = r0 + 93;
                case 0x5cc50:
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x5cc58:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r7 = r2 + 1;
                    if(r3 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x5cca8;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x5cc9c;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cc88;
                        continue;
                    }
                    r8 = r3 + r0;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5cc50;
                    continue;
                case 0x5cc88:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5cc90:
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5cc9c:
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5cca8:
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r6 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x5cd00;
                        continue;
                    }
                    r3 = r6 < r8 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cd00;
                        continue;
                    }
                    r2 = r2 + 2;
                case 0x5ccc8:
                    r8 = r8 + 1;
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 < r6 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ccc8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5cc58;
                    continue;
                case 0x5cce8:
                    r2 = r5 + 2;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r7 = r0 + 1;
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5cc1c;
                    continue;
                case 0x5cd00:
                    r8 = r0 + 45;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5cc50;
                    continue;
                case 0x5ce00:
                    pc=0x5ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ce00() throws ExecutionException { /* 0x5ce00 - 0x5d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ce00:
                    f0 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d000:
                    pc=0x5d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d000() throws ExecutionException { /* 0x5d000 - 0x5d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d000:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 148;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5d048;
                    pc=0x55400;
                    run_55400(); return;
                case 0x5d048:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d200:
                    pc=0x5d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d200() throws ExecutionException { /* 0x5d200 - 0x5d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d200:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r2 | 65535;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r6 = r5 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5d254;
                    pc=0x55400;
                    run_55400(); return;
                case 0x5d254:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d400:
                    pc=0x5d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d400() throws ExecutionException { /* 0x5d400 - 0x5d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d400:
                    r29 = r29 + -216;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r22;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r18;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r31;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r30;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r23;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r21;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r20;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r19;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r17;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = f30;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = f31;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = f28;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = f29;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = f26;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = f27;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = f24;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = f25;
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = f22;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = f23;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = f20;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = f21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    r16 = r5 + r0;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r18 = r4 + r0;
                    r2 = r21 & 255;
                    r4 = 6 << 16;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    r22 = r5 + r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r6;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    r4 = r4 + 30940;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d800;
                        run_5d800(); return;
                    }
                case 0x5d494:
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x5d4ac:
                    r7 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + 1;
                case 0x5d4b8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d960;
                        run_5d800(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d960;
                        run_5d800(); return;
                    }
                case 0x5d4c8:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x5d4d8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4f4;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x5d4f4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d874;
                        run_5d800(); return;
                    }
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                case 0x5d50c:
                    f30 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    f28 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    f26 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    f24 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    f22 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    f20 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r31 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    f0 = r3;
                    r30 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r23 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r22 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r21 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r19 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r18 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r17 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    f31 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    f29 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    f27 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    f25 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    f23 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    f21 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    f1 = r2;
                    r29 = r29 + 216;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d578:
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x5d57c:
                    r2 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4c8;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = r0 + 48;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5d810;
                        run_5d800(); return;
                    }
                case 0x5d5a4:
                    r19 = r0 + r0;
                case 0x5d5a8:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea94;
                        run_5ea00(); return;
                    }
                    r2 = r16 + 1;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d610;
                    run_5d600(); return;
                case 0x5d5d4:
                    r3 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r3 + r23;
                    r21 = r23 + r21;
                    r23 = r21 + -48;
                case 0x5d5e8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                case 0x5d600:
                    pc=0x5d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d600() throws ExecutionException { /* 0x5d600 - 0x5d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d600:
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d664;
                        continue;
                    }
                case 0x5d610:
                    r3 = r20 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d5e8;
                        run_5d400(); return;
                    }
                    r3 = r20 < 9 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d5d4;
                        run_5d400(); return;
                    }
                    r3 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r21 = r30 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r30 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d610;
                        continue;
                    }
                case 0x5d664:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5d670;
                    pc=0x50400;
                    run_50400(); return;
                case 0x5d670:
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x5d684;
                    pc=0x50400;
                    run_50400(); return;
                case 0x5d684:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5d690;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x5d690:
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5d6a4;
                    pc=0x54e00;
                    run_54e00(); return;
                case 0x5d6a4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dae4;
                        run_5da00(); return;
                    }
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + r0;
                case 0x5d6bc:
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5d958;
                        run_5d800(); return;
                    }
                case 0x5d6d0:
                    r4 = r0 + r0;
                case 0x5d6d4:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d8bc;
                        run_5d800(); return;
                    }
                case 0x5d6dc:
                    r3 = r4 - r3;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r3;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d6f0;
                        continue;
                    }
                    r20 = r7 + r0;
                case 0x5d6f0:
                    r3 = r7 < 17 ? 1 : 0;
                    r2 = r7 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d704;
                        continue;
                    }
                    r2 = r0 + 16;
                case 0x5d704:
                    f2 = r23;
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e6d8;
                        run_5e600(); return;
                    }
                case 0x5d718:
                    r3 = r2 < 10 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d76c;
                        continue;
                    }
                    r4 = r2 + -9;
                    r3 = 6 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 28792;
                    r3 = r4 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r30;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eaac;
                        run_5ea00(); return;
                    }
                case 0x5d760:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                case 0x5d76c:
                    r3 = r7 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5db54;
                        run_5da00(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dac4;
                        run_5da00(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ec5c;
                        run_5ec00(); return;
                    }
                    r3 = r3 < 23 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eac8;
                        run_5ea00(); return;
                    }
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = 6 << 16;
                    r3 = r4 << 3;
                    r2 = r2 + 28792;
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x5d4d8;
                    run_5d400(); return;
                case 0x5d7e0:
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r21 & 255;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d494;
                        run_5d400(); return;
                    }
                case 0x5d800:
                    pc=0x5d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d800() throws ExecutionException { /* 0x5d800 - 0x5da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d800:
                    r2 = r0 + 48;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5d5a4;
                        run_5d400(); return;
                    }
                case 0x5d810:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 88;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5e668;
                        run_5e600(); return;
                    }
                    r3 = r0 + 120;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5e668;
                        run_5e600(); return;
                    }
                    r2 = r16 + 1;
                    r3 = r0 + 48;
                case 0x5d834:
                    r16 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r2 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5d834;
                        continue;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5da8c;
                        run_5da00(); return;
                    }
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5d5a8;
                    run_5d400(); return;
                case 0x5d864:
                    r3 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5d57c;
                    run_5d400(); return;
                case 0x5d874:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = 32768 << 16;
                    r2 = r5 ^ r4;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5d50c;
                    run_5d400(); return;
                case 0x5d88c:
                    r3 = r0 + r0;
                case 0x5d890:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e608;
                        run_5e600(); return;
                    }
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    r5 = r3 + r0;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4ac;
                        run_5d400(); return;
                    }
                    r9 = r0 + 1;
                case 0x5d8bc:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5da8c;
                        run_5da00(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5da8c;
                        run_5da00(); return;
                    }
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4c8;
                        run_5d400(); return;
                    }
                    r2 = r0 + 78;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5d904;
                        continue;
                    }
                    r2 = r21 < 79 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ed18;
                        run_5ec00(); return;
                    }
                    r2 = r0 + 105;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5ed24;
                        run_5ec00(); return;
                    }
                    r2 = r0 + 110;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4c8;
                        run_5d400(); return;
                    }
                case 0x5d904:
                    r3 = 6 << 16;
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r3 + 30936;
                case 0x5d910:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee8c;
                        run_5ee00(); return;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = r2 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d948;
                        continue;
                    }
                    r2 = r2 + 32;
                case 0x5d948:
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x5d910;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5d4c8;
                    run_5d400(); return;
                case 0x5d958:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4b8;
                        run_5d400(); return;
                    }
                case 0x5d960:
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r22 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r0 + 43;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5e4a8;
                        run_5e400(); return;
                    }
                    r2 = r0 + 45;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5e49c;
                        run_5e400(); return;
                    }
                    r10 = r0 + 1;
                case 0x5d990:
                    r2 = r22 + 2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x5d9a0:
                    r2 = r21 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e3c8;
                        run_5e200(); return;
                    }
                    r2 = r0 + 48;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5d9dc;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    r2 = r2 + 1;
                case 0x5d9c8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r2 + 1;
                    if(r21 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5d9c8;
                        continue;
                    }
                case 0x5d9dc:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d6d0;
                        run_5d600(); return;
                    }
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r21 + -48;
                    r8 = r11 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    addr=r11+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x5da00:
                    pc=0x5da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5da00() throws ExecutionException { /* 0x5da00 - 0x5dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5da00:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5da54;
                        continue;
                    }
                    r2 = r11 + 2;
                case 0x5da1c:
                    r6 = r4 << 1;
                    r4 = r4 << 3;
                    r4 = r6 + r4;
                    r21 = r4 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r8 = r2 + r0;
                    r6 = r21 + -48;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r2 = r2 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5da1c;
                        continue;
                    }
                case 0x5da54:
                    r2 = r8 - r11;
                    r2 = r2 < 9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e65c;
                        run_5e600(); return;
                    }
                    r2 = r4 < 20000 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e65c;
                        run_5e600(); return;
                    }
                case 0x5da70:
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d6d4;
                        run_5d600(); return;
                    }
                    r4 = r0 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d6dc;
                        run_5d600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5d8bc;
                    run_5d800(); return;
                case 0x5da8c:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d4d8;
                    run_5d400(); return;
                case 0x5da9c:
                    r4 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x5daa8:
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dac4;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r2 = r2 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x5dac4:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5d4d8;
                    run_5d400(); return;
                case 0x5dae4:
                    r4 = r18 + r0;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5daf4;
                    pc=0x50400;
                    run_50400(); return;
                case 0x5daf4:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5db00;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x5db00:
                    r2 = r17 + r2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e3e0;
                        run_5e200(); return;
                    }
                    r3 = r0 + 48;
                    if(r21 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5d88c;
                        run_5d800(); return;
                    }
                    r3 = r0 + r0;
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x5db34;
                    continue;
                case 0x5db30:
                    r2 = r4 + r0;
                case 0x5db34:
                    r4 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r3 = r3 + 1;
                    if(r21 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x5db30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5d890;
                    run_5d800(); return;
                case 0x5db54:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r7 - r2;
                    r2 = r3 + r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e910;
                        run_5e800(); return;
                    }
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dba4;
                        continue;
                    }
                    r4 = 6 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 28792;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x5dba4:
                    r3 = r0 + -16;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e4fc;
                        run_5e400(); return;
                    }
                case 0x5dbb4:
                    f4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                case 0x5dbcc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r23;
                    r5 = r16 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dbe4;
                    pc=0x51200;
                    run_51200(); return;
                case 0x5dbe4:
                    r3 = r2 + 12;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    f24 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    r2 = r0 - r3;
                    r3 = r3 >> 31;
                case 0x5dc00:
                    pc=0x5dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5dc00() throws ExecutionException { /* 0x5dc00 - 0x5de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5dc00:
                    r16 = r3 & r2;
                    f20 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    f22 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    f25 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    r3 = r0 < r3 ? 1 : 0;
                    f21 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    f23 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r3;
                    f26 = f24;
                    f27 = f25;
                case 0x5dc28:
                    r5 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dc38;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x5dc38:
                    r6 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dc58;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x5dc58:
                    r5 = r29 + 24;
                    r7 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = r29 + 32;
                    r6 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dc7c;
                    pc=0x52a00;
                    run_52a00(); return;
                case 0x5dc7c:
                    r4 = r18 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5dc90;
                    pc=0x51800;
                    run_51800(); return;
                case 0x5dc90:
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r19 = r2 + r0;
                    r7 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dca8;
                        continue;
                    }
                    r7 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                case 0x5dca8:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e120;
                        run_5e000(); return;
                    }
                    r20 = r16 + r2;
                    r3 = r7 + r0;
                case 0x5dcc0:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 - r22;
                    r5 = r2 + r4;
                    r5 = r5 < -1021 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e01c;
                        run_5e000(); return;
                    }
                    r2 = r2 + 1075;
                case 0x5dcdc:
                    r30 = r20 + r2;
                    r4 = r20 < r30 ? 1 : 0;
                    r2 = r3 + r2;
                    r17 = r2 + r22;
                    r2 = r30 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dcfc;
                        continue;
                    }
                    r2 = r20 + r0;
                case 0x5dcfc:
                    r4 = r17 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dd0c;
                        continue;
                    }
                    r2 = r17 + r0;
                case 0x5dd0c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dd20;
                        continue;
                    }
                    r30 = r30 - r2;
                    r17 = r17 - r2;
                    r20 = r20 - r2;
                case 0x5dd20:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dd78;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5dd40;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x5dd40:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dd58;
                    pc=0x51a00;
                    run_51a00(); return;
                case 0x5dd58:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5dd6c;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5dd6c:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x5dd78:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dda0;
                        continue;
                    }
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5dd98;
                    pc=0x52000;
                    run_52000(); return;
                case 0x5dd98:
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x5dda0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ddc0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ddbc;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x5ddbc:
                    r21 = r2 + r0;
                case 0x5ddc0:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dde0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dddc;
                    pc=0x52000;
                    run_52000(); return;
                case 0x5dddc:
                    r21 = r2 + r0;
                case 0x5dde0:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5de00;
                        run_5de00(); return;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ddfc;
                    pc=0x52000;
                    run_52000(); return;
                case 0x5ddfc:
                    r19 = r2 + r0;
                case 0x5de00:
                    pc=0x5de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5de00() throws ExecutionException { /* 0x5de00 - 0x5e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5de00:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5de14;
                    pc=0x52400;
                    run_52400(); return;
                case 0x5de14:
                    r30 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5de30;
                    pc=0x52200;
                    run_52200(); return;
                case 0x5de30:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e6f4;
                        run_5e600(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e7e8;
                        run_5e600(); return;
                    }
                    r4 = r20 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5de50;
                    pc=0x52c00;
                    run_52c00(); return;
                case 0x5de50:
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5e02c;
                        run_5e000(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e130;
                        run_5e000(); return;
                    }
                    r3 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f26;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f27;
                case 0x5de7c:
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    if(r17 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x5e078;
                        run_5e000(); return;
                    }
                case 0x5de90:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5df78;
                        continue;
                    }
                    r5 = 1696 << 16;
                    r5 = r5 + 1;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5df78;
                        continue;
                    }
                    f0 = readPages[(r28+-32540)>>>12][((r28+-32540)>>>2)&0x3ff];
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32544)>>>12][((r28+-32544)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5df6c;
                        continue;
                    }
                    f0 = readPages[(r28+-32532)>>>12][((r28+-32532)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32536)>>>12][((r28+-32536)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5e358;
                        run_5e200(); return;
                    }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f0;
                case 0x5df20:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e338;
                        run_5e200(); return;
                    }
                    f4 = r2;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e638;
                        run_5e600(); return;
                    }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                case 0x5df44:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e3a8;
                        run_5e200(); return;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r2;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x5df64:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                case 0x5df6c:
                    r5 = 1712 << 16;
                    r5 = r2 + r5;
                    r2 = r5 - r17;
                case 0x5df78:
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f28 = r3;
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f29 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5df90;
                    pc=0x52600;
                    run_52600(); return;
                case 0x5df90:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                case 0x5dfbc:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dfd4;
                        continue;
                    }
                    r3 = 32752 << 16;
                    r3 = r2 & r3;
                    if(r17 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5e1f4;
                        run_5e000(); return;
                    }
                case 0x5dfd4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dfe4;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5dfe4:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5dff4;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5dff4:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e004;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5e000:
                    pc=0x5e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e000() throws ExecutionException { /* 0x5e000 - 0x5e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e000:
                case 0x5e004:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e014;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5e014:
                    /* Next insn is delay slot */ 
                    pc=0x5dc28;
                    run_5dc00(); return;
                case 0x5e01c:
                    r2 = r0 + 54;
                    r2 = r2 - r4;
                    /* Next insn is delay slot */ 
                    pc=0x5dcdc;
                    run_5dc00(); return;
                case 0x5e02c:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e1b8;
                        continue;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r4;
                case 0x5e058:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r17 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x5de90;
                        run_5de00(); return;
                    }
                case 0x5e078:
                    r7 = 64688 << 16;
                    r7 = r6 + r7;
                    f28 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r7;
                    f30 = r3;
                    f29 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f31 = r2;
                    f12 = f28;
                    f13 = f29;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = f2;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    r31=0x5e0b4;
                    pc=0x52600;
                    run_52600(); return;
                case 0x5e0b4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f31&0xffffffffL) << 32) | (f30&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    r3 = r5 & r2;
                    r2 = 31904 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e30c;
                        run_5e200(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x5e8b4;
                        run_5e800(); return;
                    }
                case 0x5e0f0:
                    r5 = r0 + -1;
                    r2 = 32751 << 16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r2 | 65535;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5dfd4;
                    run_5de00(); return;
                case 0x5e120:
                    r3 = r7 - r2;
                    r20 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5dcc0;
                    run_5dc00(); return;
                case 0x5e130:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e2e4;
                        run_5e200(); return;
                    }
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e1d8;
                        continue;
                    }
                    f2 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea6c;
                        run_5ea00(); return;
                    }
                    f4 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    f5 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r2;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r4;
                case 0x5e1a8:
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5de7c;
                    run_5de00(); return;
                case 0x5e1b8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = f0;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5e058;
                    continue;
                case 0x5e1d8:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                case 0x5e1dc:
                    r3 = readPages[(r28+-32548)>>>12][((r28+-32548)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f24;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f25;
                    /* Next insn is delay slot */ 
                    pc=0x5de7c;
                    run_5de00(); return;
                case 0x5e1f4:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                case 0x5e200:
                    pc=0x5e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e200() throws ExecutionException { /* 0x5e200 - 0x5e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e200:
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e24c;
                        continue;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e4b4;
                        run_5e400(); return;
                    }
                case 0x5e24c:
                    f0 = readPages[(r28+-32524)>>>12][((r28+-32524)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32528)>>>12][((r28+-32528)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5e28c;
                        continue;
                    }
                    f0 = readPages[(r28+-32516)>>>12][((r28+-32516)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32520)>>>12][((r28+-32520)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5dfd4;
                        run_5de00(); return;
                    }
                case 0x5e28c:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e29c;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5e29c:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e2ac;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5e2ac:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e2bc;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5e2bc:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e2cc;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5e2cc:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e2dc;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5e2dc:
                    /* Next insn is delay slot */ 
                    pc=0x5d4d8;
                    run_5d400(); return;
                case 0x5e2e4:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5e1d8;
                        run_5e000(); return;
                    }
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e7d0;
                        run_5e600(); return;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5e1dc;
                    run_5e000(); return;
                case 0x5e30c:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 848 << 16;
                    r2 = r2 + r3;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5dfbc;
                    run_5de00(); return;
                case 0x5e338:
                    f0 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5df44;
                    run_5de00(); return;
                case 0x5e358:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = 32768 << 16;
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f2 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f2 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f2;
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x5df20;
                    run_5de00(); return;
                case 0x5e3a8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = f0;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5df64;
                    run_5de00(); return;
                case 0x5e3c8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    r4 = r0 + r0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d6dc;
                        run_5d600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5d8bc;
                    run_5d800(); return;
                case 0x5e3e0:
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                case 0x5e3ec:
                    r2 = r21 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e4f0;
                        run_5e400(); return;
                    }
                    r5 = r5 + 1;
                case 0x5e400:
                    pc=0x5e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e400() throws ExecutionException { /* 0x5e400 - 0x5e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e400:
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e624;
                        run_5e600(); return;
                    }
                    r2 = r0 + 1;
                    r4 = r5 + r0;
                    r6 = r7 < 17 ? 1 : 0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5e460;
                        continue;
                    }
                    r2 = r7 + 1;
                    r8 = r5 + r7;
                    r6 = r7 < 17 ? 1 : 0;
                case 0x5e430:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e450;
                        continue;
                    }
                    r4 = r2 < 10 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e6c4;
                        run_5e600(); return;
                    }
                    r4 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                case 0x5e450:
                    r2 = r2 + 1;
                    r4 = r5 + r0;
                    if(r2 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x5e430;
                        continue;
                    }
                case 0x5e460:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ed0c;
                        run_5ec00(); return;
                    }
                case 0x5e468:
                    r2 = r7 + r5;
                    r2 = r2 < 10 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee74;
                        run_5ee00(); return;
                    }
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r2 + r23;
                    r23 = r23 + r21;
                case 0x5e488:
                    r3 = r3 + r4;
                    r7 = r7 + r4;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5e624;
                    run_5e600(); return;
                case 0x5e49c:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d9a0;
                    run_5d800(); return;
                case 0x5e4a8:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d990;
                    run_5d800(); return;
                case 0x5e4b4:
                    r3 = 15 << 16;
                    r3 = r3 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e24c;
                        run_5e200(); return;
                    }
                    f0 = readPages[(r28+-32508)>>>12][((r28+-32508)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32512)>>>12][((r28+-32512)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5dfd4;
                        run_5de00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5e28c;
                    run_5e200(); return;
                case 0x5e4f0:
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5d6bc;
                    run_5d600(); return;
                case 0x5e4fc:
                    r3 = r2 < 309 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e8f4;
                        run_5e800(); return;
                    }
                    r2 = r2 >> 4;
                    r3 = r2 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ef08;
                        run_5ee00(); return;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = 6 << 16;
                    r6 = r6 + 28752;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r6 + r0;
                    r4 = r0 + r0;
                case 0x5e530:
                    r5 = r2 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e550;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x5e550:
                    r2 = r2 >> 1;
                    r5 = r2 < 2 ? 1 : 0;
                    r4 = r4 + 1;
                    r3 = r3 + 8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e530;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x5e570:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r4 << 3;
                    r6 = r6 + r4;
                    r2 = 64688 << 16;
                    r2 = r2 + r3;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r4 = 31904 << 16;
                    r4 = r4 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    r3 = r2 & r5;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e8f4;
                        run_5e800(); return;
                    }
                    r4 = 31888 << 16;
                    r4 = r4 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ed78;
                        run_5ec00(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                case 0x5e600:
                    pc=0x5e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e600() throws ExecutionException { /* 0x5e600 - 0x5e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e600:
                    /* Next insn is delay slot */ 
                    pc=0x5dbcc;
                    run_5da00(); return;
                case 0x5e608:
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r21 + -48;
                    r9 = r16 + r0;
                    r7 = r0 + r0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eb70;
                        run_5ea00(); return;
                    }
                    r5 = r0 + 1;
                case 0x5e624:
                    r2 = r9 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x5e3ec;
                    run_5e200(); return;
                case 0x5e638:
                    f0 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x5df44;
                    run_5de00(); return;
                case 0x5e65c:
                    r4 = r0 + 19999;
                    /* Next insn is delay slot */ 
                    pc=0x5da70;
                    run_5da00(); return;
                case 0x5e668:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r29 + 36;
                    r19 = 7 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r18 + r0;
                    r5 = r29 + 40;
                    r6 = r19 + -30812;
                    r7 = r29 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x5e694;
                    pc=0x63a00;
                    run_63a00(); return;
                case 0x5e694:
                    r17 = r2 & 7;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5da8c;
                        run_5da00(); return;
                    }
                    r3 = r0 + 6;
                    if(r17 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5eb80;
                        run_5ea00(); return;
                    }
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d4d8;
                    run_5d400(); return;
                case 0x5e6c4:
                    r4 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x5e450;
                    run_5e400(); return;
                case 0x5e6d8:
                    f2 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x5d718;
                    run_5d600(); return;
                case 0x5e6f4:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e84c;
                        run_5e800(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e84c;
                        run_5e800(); return;
                    }
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e84c;
                        run_5e800(); return;
                    }
                    r3 = 32752 << 16;
                    r2 = 1712 << 16;
                    r3 = r3 & r16;
                    r2 = r2 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e84c;
                        run_5e800(); return;
                    }
                    r2 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e764;
                        continue;
                    }
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e84c;
                        run_5e800(); return;
                    }
                case 0x5e764:
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x5e778;
                    pc=0x52000;
                    run_52000(); return;
                case 0x5e778:
                    r4 = r2 + r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5e78c;
                    pc=0x52200;
                    run_52200(); return;
                case 0x5e78c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e84c;
                        run_5e800(); return;
                    }
                    r2 = r16 + r0;
                case 0x5e798:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eeb8;
                        run_5ee00(); return;
                    }
                    r3 = 32752 << 16;
                    r4 = 1712 << 16;
                    r3 = r2 & r3;
                    r4 = r4 + 1;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eeb8;
                        run_5ee00(); return;
                    }
                    r2 = 880 << 16;
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e854;
                        run_5e800(); return;
                    }
                case 0x5e7d0:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5e28c;
                    run_5e200(); return;
                case 0x5e7e8:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eb3c;
                        run_5ea00(); return;
                    }
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r3 = r2 & r4;
                case 0x5e800:
                    pc=0x5e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5e800() throws ExecutionException { /* 0x5e800 - 0x5ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5e800:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5eda0;
                        run_5ec00(); return;
                    }
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                case 0x5e810:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e84c;
                        continue;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5e830;
                    pc=0x52600;
                    run_52600(); return;
                case 0x5e830:
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                case 0x5e84c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e28c;
                        run_5e200(); return;
                    }
                case 0x5e854:
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r0;
                    f0 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = 14672 << 16;
                    f2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r4;
                    f1 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e28c;
                        run_5e200(); return;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e28c;
                        run_5e200(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5e28c;
                    run_5e200(); return;
                case 0x5e8b4:
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5e0f0;
                        run_5e000(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5e28c;
                    run_5e200(); return;
                case 0x5e8f4:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                case 0x5e8fc:
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5dac4;
                    run_5da00(); return;
                case 0x5e910:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dbb4;
                        run_5da00(); return;
                    }
                    r2 = r0 - r2;
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e958;
                        continue;
                    }
                    r4 = 6 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 28792;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x5e958:
                    r2 = r2 >> 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5dbb4;
                        run_5da00(); return;
                    }
                    r3 = r2 < 32 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea54;
                        run_5ea00(); return;
                    }
                    r3 = r2 & 16;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ef1c;
                        run_5ee00(); return;
                    }
                    r22 = r0 + r0;
                case 0x5e980:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e9d0;
                        continue;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = 6 << 16;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r3 + 31152;
                case 0x5e998:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e9b8;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x5e9b8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e998;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x5e9d0:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea18;
                        run_5ea00(); return;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r0 + 107;
                    r2 = r3 << 1;
                    r2 = r2 >>> 21;
                    r2 = r4 - r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ea18;
                        run_5ea00(); return;
                    }
                    r4 = r2 < 32 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ef6c;
                        run_5ee00(); return;
                    }
                case 0x5ea00:
                    pc=0x5ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ea00() throws ExecutionException { /* 0x5ea00 - 0x5ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ea00:
                    r4 = r2 < 53 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ef8c;
                        run_5ee00(); return;
                    }
                    r2 = 880 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x5ea18:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f0 = r0;
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5dbcc;
                        run_5da00(); return;
                    }
                case 0x5ea54:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d4d8;
                    run_5d400(); return;
                case 0x5ea6c:
                    f2 = readPages[(r28+-32588)>>>12][((r28+-32588)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = f2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = f3;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x5e1a8;
                    run_5e000(); return;
                case 0x5ea94:
                    r17 = r16 + r0;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d664;
                    run_5d600(); return;
                case 0x5eaac:
                    f4 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x5d760;
                    run_5d600(); return;
                case 0x5eac8:
                    r3 = r0 + 37;
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r3 - r7;
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5db54;
                        run_5da00(); return;
                    }
                    r2 = r0 + 15;
                    r7 = r2 - r7;
                    r2 = 6 << 16;
                    r2 = r2 + 28792;
                    r3 = r7 << 3;
                    r3 = r3 + r2;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r4 - r7;
                    r3 = r3 << 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x5d4d8;
                    run_5d400(); return;
                case 0x5eb3c:
                    r2 = 15 << 16;
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eca8;
                        run_5ec00(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eca8;
                        run_5ec00(); return;
                    }
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5e798;
                    run_5e600(); return;
                case 0x5eb70:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5e468;
                    run_5e400(); return;
                case 0x5eb80:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ebb8;
                        continue;
                    }
                    r5 = readPages[(r19+-30812)>>>12][((r19+-30812)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5eba4;
                    pc=0x53000;
                    run_53000(); return;
                case 0x5eba4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ebb4;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x5ebb4:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                case 0x5ebb8:
                    r3 = (r17&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5daa8;
                        run_5da00(); return;
                    }
                    r3 = 6 << 16;
                    r17 = r17 << 2;
                    r3 = r3 + 31124;
                    r3 = r3 + r17;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x5ebe8:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x5daa8;
                    run_5da00(); return;
                case 0x5ec00:
                    pc=0x5ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ec00() throws ExecutionException { /* 0x5ec00 - 0x5ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ec00:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    r3 = 65519 << 16;
                    r4 = r4 + 1075;
                    r3 = r3 | 65535;
                    r4 = r4 << 20;
                    r3 = r5 & r3;
                    r3 = r4 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5daa8;
                    run_5da00(); return;
                case 0x5ec30:
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r5 = r0 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x5daa8;
                    run_5da00(); return;
                case 0x5ec4c:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5daa8;
                    run_5da00(); return;
                case 0x5ec5c:
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r4 < -22 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5db54;
                        run_5da00(); return;
                    }
                    r3 = 6 << 16;
                    r2 = r4 << 3;
                    r3 = r3 + 28792;
                    r2 = r3 - r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x5d4d8;
                    run_5d400(); return;
                case 0x5eca8:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5e84c;
                        run_5e800(); return;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5ecd0;
                    pc=0x52600;
                    run_52600(); return;
                case 0x5ecd0:
                    f4 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    f1 = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5e7d0;
                        run_5e600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5e84c;
                    run_5e800(); return;
                case 0x5ed0c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5e624;
                    run_5e600(); return;
                case 0x5ed18:
                    r2 = r0 + 73;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5d4c8;
                        run_5d400(); return;
                    }
                case 0x5ed24:
                    r4 = 6 << 16;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r4 + 30924;
                case 0x5ed30:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee18;
                        run_5ee00(); return;
                    }
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ed68;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x5ed68:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x5ed30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5d4c8;
                    run_5d400(); return;
                case 0x5ed78:
                    r2 = 848 << 16;
                    r2 = r5 + r2;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x5dbcc;
                    run_5da00(); return;
                case 0x5eda0:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eefc;
                        run_5ee00(); return;
                    }
                    r3 = 32752 << 16;
                    r5 = 1696 << 16;
                    r3 = r4 & r3;
                    r5 = r5 + 1;
                    r5 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5eefc;
                        run_5ee00(); return;
                    }
                    r5 = r0 + 107;
                    r3 = r3 >>> 20;
                    r3 = r5 - r3;
                    r5 = r0 + -1;
                    r3 = r5 << (r3&0x1f);
                case 0x5eddc:
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5e810;
                        run_5e800(); return;
                    }
                    r2 = 32752 << 16;
                    r4 = r4 & r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    r2 = 16 << 16;
                    r2 = r4 + r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x5ee00:
                    pc=0x5ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ee00() throws ExecutionException { /* 0x5ee00 - 0x5f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ee00:
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5e84c;
                    run_5e800(); return;
                case 0x5ee18:
                    r4 = 6 << 16;
                    r7 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r4 + 30928;
                case 0x5ee28:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r2 + 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee68;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee5c;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x5ee5c:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x5ee28;
                        continue;
                    }
                    r2 = r7 + 1;
                case 0x5ee68:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5e8fc;
                    run_5e800(); return;
                case 0x5ee74:
                    r2 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r2 + r30;
                    r30 = r30 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x5e488;
                    run_5e400(); return;
                case 0x5ee8c:
                    r2 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 40;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5ef28;
                        continue;
                    }
                case 0x5eea4:
                    r4 = 32760 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5dac4;
                    run_5da00(); return;
                case 0x5eeb8:
                    r3 = 32752 << 16;
                    r2 = r2 & r3;
                    r3 = 65520 << 16;
                    r3 = r2 + r3;
                    r5 = r0 + -1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r3 | r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5e84c;
                    run_5e800(); return;
                case 0x5eefc:
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5eddc;
                    run_5ec00(); return;
                case 0x5ef08:
                    r6 = 6 << 16;
                    r4 = r0 + r0;
                    r6 = r6 + 28752;
                    /* Next insn is delay slot */ 
                    pc=0x5e570;
                    run_5e400(); return;
                case 0x5ef1c:
                    r22 = r0 + 106;
                    /* Next insn is delay slot */ 
                    pc=0x5e980;
                    run_5e800(); return;
                case 0x5ef28:
                    r5 = 7 << 16;
                    r4 = r29 + 40;
                    r5 = r5 + -30832;
                    r6 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x5ef40;
                    pc=0x64600;
                    run_64600(); return;
                case 0x5ef40:
                    r3 = r0 + 5;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5eea4;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = 32752 << 16;
                    r2 = r3 | r2;
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5dac4;
                    run_5da00(); return;
                case 0x5ef6c:
                    r3 = r0 + -1;
                    r2 = r3 << (r2&0x1f);
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5ea18;
                    run_5ea00(); return;
                case 0x5ef8c:
                    r4 = r0 + -1;
                    r2 = r4 << (r2&0x1f);
                    r2 = r2 & r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5ea18;
                    run_5ea00(); return;
                case 0x5f000:
                    pc=0x5f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f000() throws ExecutionException { /* 0x5f000 - 0x5f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5d400;
                    run_5d400(); return;
                case 0x5f200:
                    pc=0x5f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f200() throws ExecutionException { /* 0x5f200 - 0x5f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f20;
                    /* Next insn is delay slot */ 
                    r31=0x5f228;
                    pc=0x5d400;
                    run_5d400(); return;
                case 0x5f228:
                    f12 = f0;
                    f13 = f1;
                    f20 = f0;
                    f21 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x5f238;
                    pc=0x53400;
                    run_53400(); return;
                case 0x5f238:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f260;
                        continue;
                    }
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f260:
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x5ce00;
                    run_5ce00(); return;
                case 0x5f400:
                    pc=0x5f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f400() throws ExecutionException { /* 0x5f400 - 0x5f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f400:
                    r29 = r29 + -8;
                    r11 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x5f41c;
                    continue;
                case 0x5f418:
                    r2 = r3 + r0;
                case 0x5f41c:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f418;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x5f618;
                        run_5f600(); return;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x5f62c;
                        run_5f600(); return;
                    }
                    r25 = r0 + r0;
                case 0x5f45c:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f59c;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5f580;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f59c;
                        continue;
                    }
                    r24 = r0 + 10;
                    r7 = r0 + 10;
                case 0x5f488:
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f5a8;
                        continue;
                    }
                case 0x5f490:
                    r13 = 32768 << 16;
                case 0x5f494:
                    if(r24 != r0) {
                        /* Next insn is delay slot */ 
                        if(r24!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                        }
                        pc=0x5f4a0;
                        continue;
                    }
                    if(r24!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x5f4a0:
                    r12 = r0 + r0;
                    r2 = r0 + r0;
                    r15 = r0 + 1;
                    r14 = r0 + -1;
                    r16 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x5f508;
                    continue;
                case 0x5f4c0:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f548;
                        continue;
                    }
                case 0x5f4d0:
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x5f4fc;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f5c4;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x5f5b8;
                        continue;
                    }
                case 0x5f4ec:
                    { long hilo = (long)(r2) * ((long)r24); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r12 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x5f4fc:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x5f508:
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r10 = r9 & 4;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f4c0;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f548;
                        continue;
                    }
                    if(r9 == r15) {
                        /* Next insn is delay slot */ 
                        pc=0x5f5d0;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x5f53c:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f4d0;
                        continue;
                    }
                case 0x5f548:
                    r7 = r0 + -1;
                    if(r12 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x5f5e0;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f60c;
                        run_5f600(); return;
                    }
                case 0x5f55c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f570;
                        continue;
                    }
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f600;
                        run_5f600(); return;
                    }
                case 0x5f56c:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                case 0x5f570:
                    r16 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5f580:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5f64c;
                        run_5f600(); return;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f664;
                        run_5f600(); return;
                    }
                case 0x5f59c:
                    r24 = r7 + r0;
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f490;
                        continue;
                    }
                case 0x5f5a8:
                    r13 = 32767 << 16;
                    r13 = r13 | 65535;
                    /* Next insn is delay slot */ 
                    pc=0x5f494;
                    continue;
                case 0x5f5b8:
                    r9 = r16 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f4ec;
                        continue;
                    }
                case 0x5f5c4:
                    r12 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5f4fc;
                    continue;
                case 0x5f5d0:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x5f53c;
                    continue;
                case 0x5f5e0:
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f640;
                        run_5f600(); return;
                    }
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                case 0x5f5f0:
                    r5 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5f570;
                        continue;
                    }
                case 0x5f600:
                    pc=0x5f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f600() throws ExecutionException { /* 0x5f600 - 0x5f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f600:
                    r5 = r3 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5f56c;
                    run_5f400(); return;
                case 0x5f60c:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x5f55c;
                    run_5f400(); return;
                case 0x5f618:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5f45c;
                    run_5f400(); return;
                case 0x5f62c:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5f45c;
                    run_5f400(); return;
                case 0x5f640:
                    r2 = 32768 << 16;
                    /* Next insn is delay slot */ 
                    pc=0x5f5f0;
                    run_5f400(); return;
                case 0x5f64c:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 16;
                    r3 = r3 + 2;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x5f488;
                    run_5f400(); return;
                case 0x5f664:
                    r24 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x5f488;
                    run_5f400(); return;
                case 0x5f800:
                    pc=0x5f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5f800() throws ExecutionException { /* 0x5f800 - 0x5fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5f800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5f400;
                    run_5f400(); return;
                case 0x5fa00:
                    pc=0x5fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5fa00() throws ExecutionException { /* 0x5fa00 - 0x5fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5fa00:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r23 = r6 + r0;
                    r18 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fbfc;
                        continue;
                    }
                    r20 = r4 + r0;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r30 = r0 + r0;
                    r16 = r0 + r0;
                case 0x5fa58:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fac4;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r19 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fad8;
                        continue;
                    }
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fae8;
                        continue;
                    }
                    r22 = r19 + r0;
                case 0x5fa88:
                    r5 = r30 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5fa98;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x5fa98:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r3 = r3 - r19;
                    r4 = r4 + r22;
                    r2 = r2 - r16;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fbfc;
                        continue;
                    }
                case 0x5fac4:
                    r30 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x5fa58;
                    continue;
                case 0x5fad8:
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5fa88;
                    continue;
                case 0x5fae8:
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r6 = r16 + 1;
                    r21 = r4 - r5;
                    r4 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r6 = r6 + r21;
                    r22 = r4 << 1;
                    r4 = r22 + r4;
                    r22 = r4 >>> 31;
                    r22 = r22 + r4;
                    r22 = r22 >> 1;
                    r4 = ((r22 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fb98;
                        continue;
                    }
                    r2 = r2 & 1024;
                    r22 = r6 + r0;
                    r4 = r20 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fbac;
                        continue;
                    }
                case 0x5fb30:
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5fb3c;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x5fb3c:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fbd0;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5fb5c;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x5fb5c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x5fb70:
                    r4 = r19 + r21;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r22;
                    r22 = r22 - r21;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r19;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5fa88;
                    continue;
                case 0x5fb98:
                    r2 = r2 & 1024;
                    r6 = r22 + r0;
                    r4 = r20 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fb30;
                        continue;
                    }
                case 0x5fbac:
                    /* Next insn is delay slot */ 
                    r31=0x5fbb4;
                    pc=0x37800;
                    run_37800(); return;
                case 0x5fbb4:
                    r19 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fb70;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5fbd0;
                    pc=0x34400;
                    run_34400(); return;
                case 0x5fbd0:
                    r2 = r0 + 12;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r0;
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5fc00;
                    run_5fc00(); return;
                case 0x5fbfc:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                case 0x5fc00:
                    pc=0x5fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5fc00() throws ExecutionException { /* 0x5fc00 - 0x5fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5fc00:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5fe00:
                    pc=0x5fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5fe00() throws ExecutionException { /* 0x5fe00 - 0x60000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5fe00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -224;
                    r2 = r2 & 128;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r17;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r16;
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r31;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r30;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r23;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r22;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r21;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r20;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r19;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r18;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r4;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fe5c;
                        continue;
                    }
                    r2 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60de4;
                        run_60c00(); return;
                    }
                case 0x5fe5c:
                    r5 = r29 + 119;
                    r21 = r29 + 120;
                    r4 = r29 + 16;
                    r2 = 6 << 16;
                    r6 = r21 - r5;
                    r18 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r4;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                    r3 = r4 + r0;
                    r22 = r2 + 31564;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r5;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r6;
                case 0x5fe98:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60898;
                        run_60800(); return;
                    }
                case 0x5fea8:
                    r4 = r0 + 37;
                    r19 = r17 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5fec8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5ff28;
                    continue;
                case 0x5fec0:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5fedc;
                        continue;
                    }
                case 0x5fec8:
                    r19 = r19 + 1;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fec0;
                        continue;
                    }
                case 0x5fedc:
                    r20 = r19 - r17;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ff28;
                        continue;
                    }
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    r2 = r2 + 1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60adc;
                        run_60a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x5ff18:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r2;
                case 0x5ff28:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60d60;
                        run_60c00(); return;
                    }
                    r2 = r19 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r23 = r0 + -1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                    r19 = r0 + r0;
                    r7 = r0 + 42;
                    r8 = r0 + r0;
                case 0x5ff58:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r2 + 1;
                case 0x5ff60:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x604dc;
                        run_60400(); return;
                    }
                case 0x5ff70:
                    r5 = 6 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 31192;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x5ff90:
                    r19 = r19 | 16;
                case 0x5ff94:
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    continue;
                case 0x5ffa0:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r8 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c3c;
                        run_60c00(); return;
                    }
                    r8 = r0 - r8;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                case 0x5ffc0:
                    r19 = r19 | 4;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    continue;
                case 0x5ffd0:
                    r6 = r0 + 43;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    continue;
                case 0x5ffe0:
                    r2 = r19 & 16;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60cac;
                        run_60c00(); return;
                    }
                    r19 = r19 & 64;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60d8c;
                        run_60c00(); return;
                    }
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                case 0x60000:
                    pc=0x60000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60000() throws ExecutionException { /* 0x60000 - 0x60200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60000:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                case 0x60004:
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x5fe98;
                    run_5fe00(); return;
                case 0x6001c:
                    r2 = 6 << 16;
                    r2 = r2 + 24008;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                case 0x60030:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60048;
                        continue;
                    }
                    r2 = r19 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c90;
                        run_60c00(); return;
                    }
                case 0x60048:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                case 0x6005c:
                    r5 = r19 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x605c8;
                        run_60400(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x605c8;
                        run_60400(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r19 | 2;
                    r4 = r0 + 2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                case 0x60090:
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x600a0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r19 = r19 & r6;
                case 0x600a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6090c;
                        run_60800(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6090c;
                        run_60800(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x600c4;
                        continue;
                    }
                    r2 = r19 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c74;
                        run_60c00(); return;
                    }
                case 0x600c4:
                    r30 = r21 + r0;
                case 0x600c8:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r6 < r23 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x600e4;
                        continue;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r23;
                case 0x600e4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6018c;
                        continue;
                    }
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x6018c;
                    continue;
                case 0x60104:
                    r19 = r19 | 64;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    run_5fe00(); return;
                case 0x60114:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60454;
                        run_60400(); return;
                    }
                case 0x60128:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                case 0x6013c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6047c;
                        run_60400(); return;
                    }
                case 0x60144:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x60090;
                    continue;
                case 0x60158:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r30 = r29 + 80;
                case 0x60188:
                    r23 = r0 + r0;
                case 0x6018c:
                    r4 = r19 & 2;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x601ac;
                        continue;
                    }
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                case 0x601ac:
                    r6 = r19 & 132;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r6;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x605d4;
                        run_60400(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r2 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x605d4;
                        run_60400(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e48;
                        run_60e00(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6020c;
                    run_60200(); return;
                case 0x601f8:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                case 0x60200:
                    pc=0x60200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60200() throws ExecutionException { /* 0x60200 - 0x60400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60200:
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60270;
                        continue;
                    }
                case 0x6020c:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x601f8;
                        run_60000(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x60248;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60248:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6020c;
                        continue;
                    }
                case 0x60270:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r20 + r5;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60be0;
                        run_60a00(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x605dc;
                    run_60400(); return;
                case 0x602a4:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x603a0;
                        continue;
                    }
                case 0x602b8:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                case 0x602d0:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x60090;
                    run_60000(); return;
                case 0x602e4:
                    r2 = 6 << 16;
                    r2 = r2 + 23988;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x60030;
                    run_60000(); return;
                case 0x60300:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x605a0;
                        run_60400(); return;
                    }
                case 0x60314:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x602d0;
                    continue;
                case 0x60334:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 6 << 16;
                    r4 = r4 + 24008;
                    r5 = r5 + 4;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r19 = r19 | 2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x602d0;
                    continue;
                case 0x60378:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ff94;
                        run_5fe00(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    run_5fe00(); return;
                case 0x60390:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x602b8;
                        continue;
                    }
                case 0x603a0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ce8;
                        run_60c00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x602d0;
                    continue;
                case 0x603c8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r30 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r6 + 4;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e10;
                        run_60e00(); return;
                    }
                    r4 = r30 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60dac;
                        run_60c00(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r23 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x60404;
                    pc=0x36800;
                    run_36800(); return;
                case 0x60400:
                    pc=0x60400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60400() throws ExecutionException { /* 0x60400 - 0x60600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60400:
                case 0x60404:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e78;
                        run_60e00(); return;
                    }
                    r2 = r2 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r2 = r23 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60428;
                        continue;
                    }
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                case 0x60428:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x6043c:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60128;
                        run_60000(); return;
                    }
                case 0x60454:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ccc;
                        run_60c00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60144;
                        run_60000(); return;
                    }
                case 0x6047c:
                    r4 = r0 + 45;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x60090;
                    run_60000(); return;
                case 0x6049c:
                    r8 = r0 + r0;
                    r2 = r4 + -48;
                case 0x604a4:
                    r4 = r8 << 1;
                    r17 = r17 + 1;
                    r8 = r8 << 3;
                    r8 = r4 + r8;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r8 = r8 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x604a4;
                        continue;
                    }
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ff70;
                        run_5fe00(); return;
                    }
                case 0x604dc:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60d60;
                        run_60c00(); return;
                    }
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    r4 = r0 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    r30 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x60188;
                    run_60000(); return;
                case 0x60510:
                    r19 = r19 | 128;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    run_5fe00(); return;
                case 0x60520:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r17 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x60e9c;
                        run_60e00(); return;
                    }
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r23 = r0 + r0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60574;
                        continue;
                    }
                case 0x60544:
                    r4 = r23 << 1;
                    r5 = r5 + 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r23 = r2 + r23;
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60544;
                        continue;
                    }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60dd4;
                        run_60c00(); return;
                    }
                case 0x60574:
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff60;
                    run_5fe00(); return;
                case 0x60580:
                    r19 = r19 | 1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    run_5fe00(); return;
                case 0x60590:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60314;
                        run_60200(); return;
                    }
                case 0x605a0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60d04;
                        run_60c00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x602d0;
                    run_60200(); return;
                case 0x605c8:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x602d0;
                    run_60200(); return;
                case 0x605d4:
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                case 0x605dc:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6061c;
                        run_60600(); return;
                    }
                    r4 = r29 + 134;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                case 0x60600:
                    pc=0x60600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60600() throws ExecutionException { /* 0x60600 - 0x60800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60600:
                    r5 = r5 + 1;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60b80;
                        run_60a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x6061c:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6065c;
                        continue;
                    }
                    r4 = r29 + 132;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + 2;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60bb0;
                        run_60a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x6065c:
                    r6 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r4 = r0 + 128;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x609ac;
                        run_60800(); return;
                    }
                case 0x6066c:
                    r4 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r23 = r23 - r4;
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60740;
                        continue;
                    }
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60d50;
                        run_60c00(); return;
                    }
                    r4 = 6 << 16;
                    r20 = r4 + 31548;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x606b4;
                    continue;
                case 0x606a0:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60718;
                        continue;
                    }
                case 0x606b4:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x606a0;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x606f0;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x606f0:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x606b4;
                        continue;
                    }
                case 0x60718:
                    r2 = r2 + 1;
                    r5 = r5 + r23;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60b04;
                        run_60a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x60740:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r5 = r6 + r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r6;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60aa4;
                        run_60a00(); return;
                    }
                    r3 = r3 + 8;
                case 0x6076c:
                    r19 = r19 & 4;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60850;
                        run_60800(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r19 = r2 - r4;
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60850;
                        run_60800(); return;
                    }
                    r2 = r19 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e58;
                        run_60e00(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r23 = r0 + 16;
                    r6 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x607c8;
                    continue;
                case 0x607b4:
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60824;
                        run_60800(); return;
                    }
                case 0x607c8:
                    r2 = r2 + 1;
                    r6 = r6 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x607b4;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60800;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60800:
                    pc=0x60800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60800() throws ExecutionException { /* 0x60800 - 0x60a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60800:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        continue;
                    }
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x607c8;
                        run_60600(); return;
                    }
                case 0x60824:
                    r5 = r6 + r0;
                case 0x60828:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c4c;
                        run_60c00(); return;
                    }
                case 0x60850:
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r2 < r4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6086c;
                        continue;
                    }
                    r2 = r4 + r0;
                case 0x6086c:
                    r3 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608a4;
                        continue;
                    }
                case 0x60884:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    r3 = r29 + 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5fea8;
                        run_5fe00(); return;
                    }
                case 0x60898:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff28;
                    run_5fe00(); return;
                case 0x608a4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x608b8;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x608b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60884;
                        continue;
                    }
                case 0x608c0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ad0;
                        run_60a00(); return;
                    }
                    r2 = r0 + -1;
                case 0x608d8:
                    r31 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r30 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r23 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r22 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r21 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r20 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r19 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r18 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r29 = r29 + 224;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6090c:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x60b34;
                        run_60a00(); return;
                    }
                    r6 = r0 + 2;
                    r30 = r21 + r0;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x6095c;
                        continue;
                    }
                    r6 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                case 0x6092c:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r30 = r30 + -1;
                    r2 = r2 >>> 4;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6092c;
                        continue;
                    }
                    r4 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x6095c:
                    r4 = r2 & 7;
                    r30 = r30 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6095c;
                        continue;
                    }
                    r2 = r19 & 1;
                    r6 = r30 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c2c;
                        run_60c00(); return;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x60b70;
                        run_60a00(); return;
                    }
                    r30 = r30 + -1;
                    r4 = r21 - r30;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x609ac:
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r6 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r9 = r4 - r6;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6066c;
                        run_60600(); return;
                    }
                    r4 = r9 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e68;
                        run_60e00(); return;
                    }
                    r6 = 6 << 16;
                    r20 = r6 + 31548;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r17;
                    r10 = r0 + 16;
                    r17 = r20 + r0;
                    r20 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x60a04;
                    run_60a00(); return;
                case 0x609f0:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60a68;
                        run_60a00(); return;
                    }
                case 0x60a00:
                    pc=0x60a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60a00() throws ExecutionException { /* 0x60a00 - 0x60c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60a00:
                case 0x60a04:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r10;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x609f0;
                        run_60800(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x60a40;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60a40:
                    r10 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60a04;
                        continue;
                    }
                case 0x60a68:
                    r9 = r20 + r0;
                    r20 = r17 + r0;
                    r17 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x60a74:
                    r2 = r2 + 1;
                    r5 = r5 + r9;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60d20;
                        run_60c00(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x6066c;
                    run_60600(); return;
                case 0x60aa4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60ab8;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60ab8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6076c;
                    run_60600(); return;
                case 0x60ad0:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x608d8;
                    run_60800(); return;
                case 0x60adc:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60af0;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60af0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x5ff18;
                    run_5fe00(); return;
                case 0x60b04:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60b18;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60b18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x60740;
                    run_60600(); return;
                case 0x60b34:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c10;
                        run_60c00(); return;
                    }
                    r30 = r21 + r0;
                    r4 = r0 + 10;
                case 0x60b48:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x60b54;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x60b54:
                    r30 = r30 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60b48;
                        continue;
                    }
                case 0x60b70:
                    r2 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x60b80:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60b94;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60b94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6061c;
                    run_60600(); return;
                case 0x60bb0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60bc4;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60bc4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6065c;
                    run_60600(); return;
                case 0x60be0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60bf4;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60bf4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                case 0x60c00:
                    pc=0x60c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60c00() throws ExecutionException { /* 0x60c00 - 0x60e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60c00:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x605dc;
                    run_60400(); return;
                case 0x60c10:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r2 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x60c2c:
                    r6 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x60c3c:
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    run_5fe00(); return;
                case 0x60c4c:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60c60;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60c60:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x60850;
                    run_60800(); return;
                case 0x60c74:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x60c90:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x6005c;
                    run_60000(); return;
                case 0x60cac:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x5fe98;
                    run_5fe00(); return;
                case 0x60ccc:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x6013c;
                    run_60000(); return;
                case 0x60ce8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x602d0;
                    run_60200(); return;
                case 0x60d04:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x602d0;
                    run_60200(); return;
                case 0x60d20:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x60d34;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60d34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x6066c;
                    run_60600(); return;
                case 0x60d50:
                    r6 = 6 << 16;
                    r20 = r6 + 31548;
                    /* Next insn is delay slot */ 
                    pc=0x60718;
                    run_60600(); return;
                case 0x60d60:
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x608c0;
                        run_60800(); return;
                    }
                    r4 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r6 = r29 + 120;
                    /* Next insn is delay slot */ 
                    r31=0x60d84;
                    pc=0x5fa00;
                    run_5fa00(); return;
                case 0x60d84:
                    /* Next insn is delay slot */ 
                    pc=0x608c0;
                    run_60800(); return;
                case 0x60d8c:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r6;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x5fe98;
                    run_5fe00(); return;
                case 0x60dac:
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x60db8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x60db8:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x60dd4:
                    r23 = r0 + -1;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff60;
                    run_5fe00(); return;
                case 0x60de4:
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x60df0;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x60df0:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60ec8;
                        run_60e00(); return;
                    }
                case 0x60e00:
                    pc=0x60e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_60e00() throws ExecutionException { /* 0x60e00 - 0x61000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x60e00:
                    r2 = r0 + 64;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5fe5c;
                    run_5fe00(); return;
                case 0x60e10:
                    r2 = (r23&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e20;
                        continue;
                    }
                    r23 = r0 + 6;
                case 0x60e20:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r2 = r23 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60e90;
                        continue;
                    }
                case 0x60e30:
                    r8 = 6 << 16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r30 = r8 + 27916;
                    /* Next insn is delay slot */ 
                    pc=0x60188;
                    run_60000(); return;
                case 0x60e48:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x60270;
                    run_60200(); return;
                case 0x60e58:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x60828;
                    run_60800(); return;
                case 0x60e68:
                    r4 = 6 << 16;
                    r20 = r4 + 31548;
                    /* Next insn is delay slot */ 
                    pc=0x60a74;
                    run_60a00(); return;
                case 0x60e78:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x600c8;
                    run_60000(); return;
                case 0x60e90:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x60e30;
                    continue;
                case 0x60e9c:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r23 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r23 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x60c3c;
                        run_60c00(); return;
                    }
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r23 = r0 + -1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ff58;
                    run_5fe00(); return;
                case 0x60ec8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x608d8;
                    run_60800(); return;
                case 0x61000:
                    pc=0x61000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61000() throws ExecutionException { /* 0x61000 - 0x61200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61000:
                    r2 = r0 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61124;
                        continue;
                    }
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -32;
                    r2 = r2 & 65503;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff];
                    r16 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x610b0;
                        continue;
                    }
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = readPages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61088;
                        continue;
                    }
                case 0x6104c:
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                case 0x61074:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61088:
                    r5 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x61098;
                    pc=0x62600;
                    run_62600(); return;
                case 0x61098:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6104c;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x61074;
                    continue;
                case 0x610b0:
                    r2 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r3 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x610dc;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x610dc;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x61130;
                        continue;
                    }
                case 0x610dc:
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    addr=r6+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r6+60)>>>12][((r6+60)>>>2)&0x3ff] = r2;
                    r2 = r6 + 64;
                    writePages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r6 + 66;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    writePages[(r6+56)>>>12][((r6+56)>>>2)&0x3ff] = r3;
                    r2 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61124:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61130:
                    r3 = r3 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x61074;
                    continue;
                case 0x61200:
                    pc=0x61200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61200() throws ExecutionException { /* 0x61200 - 0x61400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61268;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61230;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x61230;
                    pc=0x34400;
                    run_34400(); return;
                case 0x61230:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61268;
                        continue;
                    }
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                case 0x61254:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x61268:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x61254;
                    continue;
                case 0x61400:
                    pc=0x61400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61400() throws ExecutionException { /* 0x61400 - 0x61600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61400:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -56;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r22 = r6 + r0;
                    r21 = lo;
                    r23 = r7 + r0;
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6150c;
                        continue;
                    }
                    r20 = r4 + r0;
                    r19 = r5 + r0;
                    r18 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x61494;
                    continue;
                case 0x61458:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61464;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x61464:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r19 = r19 + r17;
                    r18 = r18 - r17;
                    /* Next insn is delay slot */ 
                    r31=0x6148c;
                    pc=0x61200;
                    run_61200(); return;
                case 0x6148c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61518;
                        continue;
                    }
                case 0x61494:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61458;
                        continue;
                    }
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x614b8;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x614b8:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 - r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r18;
                    r2 = r23 + r0;
                case 0x614dc:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6150c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x614dc;
                    continue;
                case 0x61518:
                    r2 = r21 - r18;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x61528;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x61528:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x614dc;
                    continue;
                case 0x61600:
                    pc=0x61600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61600() throws ExecutionException { /* 0x61600 - 0x61800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61600:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -416;
                    writePages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff] = r30;
                    writePages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff] = r16;
                    writePages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff] = r31;
                    writePages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff] = r23;
                    writePages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff] = r22;
                    writePages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff] = r21;
                    writePages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff] = r20;
                    writePages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff] = r19;
                    writePages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff] = r18;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61664;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x61664:
                    r19 = 6 << 16;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r0;
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r0;
                    r19 = r19 + 31580;
                case 0x6167c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61884;
                        run_61800(); return;
                    }
                case 0x61690:
                    r5 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r4 = r5 + r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6172c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61708;
                        continue;
                    }
                case 0x616c0:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r5 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6167c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x616c0;
                        continue;
                    }
                case 0x61708:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61718;
                    pc=0x61200;
                    run_61200(); return;
                case 0x61718:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6167c;
                        continue;
                    }
                    r5 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x616c0;
                    continue;
                case 0x6172c:
                    r4 = r0 + 37;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x61900;
                        run_61800(); return;
                    }
                    r21 = r0 + r0;
                    r22 = r0 + r0;
                case 0x61740:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r4 & 255;
                    r6 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61774;
                        continue;
                    }
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x61774:
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 1;
                    r4 = r4 & 3;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61790;
                        continue;
                    }
                case 0x6178c:
                    r21 = r21 | 1;
                case 0x61790:
                    r3 = 6 << 16;
                    r3 = r3 + -3072;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                case 0x617a4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x6196c;
                        run_61800(); return;
                    }
                case 0x617b4:
                    r2 = r21 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x618a8;
                        run_61800(); return;
                    }
                case 0x617c0:
                    r2 = r0 + 2;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61b14;
                        run_61a00(); return;
                    }
                    r2 = r0 + 3;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x61aa0;
                        run_61a00(); return;
                    }
                    r2 = r0 + 1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x619e0;
                        run_61800(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x617f0;
                        continue;
                    }
                    r22 = r0 + 1;
                case 0x617f0:
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x620d8;
                        run_62000(); return;
                    }
                    r21 = r21 & 16;
                case 0x61800:
                    pc=0x61800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61800() throws ExecutionException { /* 0x61800 - 0x61a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61800:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62278;
                        run_62200(); return;
                    }
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x61840;
                    continue;
                case 0x61814:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r2;
                    r22 = r22 - r2;
                    r2 = r4 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61838;
                    pc=0x61200;
                    run_61200(); return;
                case 0x61838:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x623a4;
                        run_62200(); return;
                    }
                case 0x61840:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r2 < r22 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61814;
                        continue;
                    }
                    r2 = r2 - r22;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r22;
                    r9 = r2 + r22;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r9;
                case 0x6186c:
                    r23 = r23 + r21;
                case 0x61870:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61690;
                        run_61600(); return;
                    }
                case 0x61884:
                    r2 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x619ac;
                    continue;
                case 0x61890:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x618a0;
                    pc=0x61200;
                    run_61200(); return;
                case 0x618a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        continue;
                    }
                case 0x618a8:
                    r5 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x618c0;
                    continue;
                case 0x618b8:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x618c0:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x617c0;
                        run_61600(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x618b8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61890;
                    continue;
                case 0x61900:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x623b8;
                        run_62200(); return;
                    }
                case 0x61910:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x61884;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x6167c;
                    run_61600(); return;
                case 0x61948:
                    r21 = r21 | 1;
                case 0x6194c:
                    r3 = 4 << 16;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + -24064;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 8;
                    r20 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x617b4;
                        run_61600(); return;
                    }
                case 0x6196c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6197c;
                    pc=0x61200;
                    run_61200(); return;
                case 0x6197c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x617b4;
                        run_61600(); return;
                    }
                case 0x61984:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x619a8;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61884;
                        continue;
                    }
                case 0x619a8:
                    r2 = r0 + -1;
                case 0x619ac:
                    r31 = readPages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff];
                    r30 = readPages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff];
                    r23 = readPages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff];
                    r22 = readPages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff];
                    r21 = readPages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff];
                    r20 = readPages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff];
                    r19 = readPages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff];
                    r18 = readPages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff];
                    r17 = readPages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff];
                    r16 = readPages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff];
                    r29 = r29 + 416;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x619e0:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x619ec;
                        continue;
                    }
                    r22 = r0 + -1;
                case 0x619ec:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61e10;
                        run_61e00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x61a00:
                    pc=0x61a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61a00() throws ExecutionException { /* 0x61a00 - 0x61c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61a00:
                    r10 = r29 + 24;
                case 0x61a04:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61a8c;
                        continue;
                    }
                case 0x61a20:
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x6186c;
                        run_61800(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61a04;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x61a5c;
                    pc=0x61200;
                    run_61200(); return;
                case 0x61a5c:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6186c;
                        run_61800(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61a20;
                        continue;
                    }
                case 0x61a8c:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61884;
                        run_61800(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x61870;
                    run_61800(); return;
                case 0x61aa0:
                    r2 = r22 + -1;
                    r2 = (r2&0xffffffffL) < (39&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61e00;
                        run_61e00(); return;
                    }
                    r13 = r0 + r0;
                case 0x61ab4:
                    r11 = r29 + 280;
                    r2 = 6 << 16;
                    r10 = r21 | 3456;
                    r12 = r0 + r0;
                    r21 = r11 + r0;
                    r14 = r0 + 512;
                    r7 = r2 + 32376;
                case 0x61ad0:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r4 + -43;
                    r2 = r2 & 255;
                    r5 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c98;
                        run_61c00(); return;
                    }
                    r3 = 6 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 32064;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x61b14:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61bb0;
                        continue;
                    }
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61bc0;
                        continue;
                    }
                case 0x61b28:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62010;
                        run_62000(); return;
                    }
                    r5 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x61b40:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6186c;
                        run_61800(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x6186c;
                        run_61800(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61b40;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x61b98;
                    pc=0x61200;
                    run_61200(); return;
                case 0x61b98:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6186c;
                        run_61800(); return;
                    }
                    r5 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x61b40;
                    continue;
                case 0x61bb0:
                    r2 = r21 & 1;
                    r22 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61b28;
                        continue;
                    }
                case 0x61bc0:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r20 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x61bd8;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x61bd8:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x622d0;
                        run_62200(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x61bf4:
                    r6 = r0 + r0;
                case 0x61bf8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                case 0x61c00:
                    pc=0x61c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61c00() throws ExecutionException { /* 0x61c00 - 0x61e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61c00:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c28;
                        continue;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x623f0;
                        run_62200(); return;
                    }
                case 0x61c28:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6167c;
                        run_61600(); return;
                    }
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                case 0x61c34:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6167c;
                    run_61600(); return;
                case 0x61c4c:
                    r2 = r10 & 1536;
                    if(r2 != r14) {
                        /* Next insn is delay slot */ 
                        pc=0x61c98;
                        continue;
                    }
                    r2 = r0 + -513;
                    r10 = r10 & r2;
                    r10 = r10 | 1280;
                    r18 = r0 + 16;
                case 0x61c68:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61d94;
                        continue;
                    }
                case 0x61c84:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                case 0x61c8c:
                    r22 = r22 + -1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61ad0;
                        run_61a00(); return;
                    }
                case 0x61c98:
                    r2 = r10 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61cb8;
                        continue;
                    }
                    r2 = ((r11 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6233c;
                        run_62200(); return;
                    }
                case 0x61cb0:
                    if(r21 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x61884;
                        run_61800(); return;
                    }
                case 0x61cb8:
                    r2 = r10 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62204;
                        run_62200(); return;
                    }
                case 0x61cc4:
                    r11 = r21 - r11;
                    r12 = r11 + r12;
                    r23 = r23 + r12;
                    /* Next insn is delay slot */ 
                    pc=0x6167c;
                    run_61600(); return;
                case 0x61cd8:
                    r2 = r18 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c98;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x61c68;
                    continue;
                case 0x61cf4:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r18 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c98;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x61c68;
                    continue;
                case 0x61d20:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x61c68;
                    continue;
                case 0x61d3c:
                    r2 = r10 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c68;
                        continue;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61d58;
                        continue;
                    }
                    r10 = r10 | 512;
                    r18 = r0 + 8;
                case 0x61d58:
                    r2 = r10 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x622c0;
                        run_62200(); return;
                    }
                    r2 = r0 + -897;
                    r10 = r10 & r2;
                    if(r13 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61d7c;
                        continue;
                    }
                    r13 = r13 + -1;
                    r22 = r22 + 1;
                case 0x61d7c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r12 = r12 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c84;
                        continue;
                    }
                case 0x61d94:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r13;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r14;
                    /* Next insn is delay slot */ 
                    r31=0x61dbc;
                    pc=0x61200;
                    run_61200(); return;
                case 0x61dbc:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r13 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r14 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61c98;
                    continue;
                case 0x61de4:
                    r2 = r10 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c98;
                        continue;
                    }
                    r2 = r0 + -129;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x61c68;
                    continue;
                case 0x61e00:
                    pc=0x61e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_61e00() throws ExecutionException { /* 0x61e00 - 0x62000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x61e00:
                    r13 = r22 + -39;
                    r22 = r0 + 39;
                    /* Next insn is delay slot */ 
                    pc=0x61ab4;
                    run_61a00(); return;
                case 0x61e10:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r20 = r21 + r0;
                case 0x61e34:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61ebc;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61ebc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61e34;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x61ea8;
                    pc=0x61200;
                    run_61200(); return;
                case 0x61ea8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61e34;
                        continue;
                    }
                    if(r21 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        run_61800(); return;
                    }
                case 0x61ebc:
                    r21 = r20 - r21;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61884;
                        run_61800(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r23 = r23 + r21;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x61870;
                    run_61800(); return;
                case 0x61eec:
                    r3 = 4 << 16;
                    r3 = r3 + -24064;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x617a4;
                    run_61600(); return;
                case 0x61f08:
                    r20 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x617a4;
                    run_61600(); return;
                case 0x61f14:
                    r21 = r21 | 544;
                case 0x61f18:
                    r3 = 4 << 16;
                    r3 = r3 + -24064;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 16;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x617a4;
                    run_61600(); return;
                case 0x61f34:
                    r2 = r21 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6167c;
                        run_61600(); return;
                    }
                    r2 = r21 & 4;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x623d8;
                        run_62200(); return;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r23&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6167c;
                    run_61600(); return;
                case 0x61f68:
                    r21 = r21 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x61740;
                    run_61600(); return;
                case 0x61f74:
                    r3 = 6 << 16;
                    r3 = r3 + -3072;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + r0;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x617a4;
                    run_61600(); return;
                case 0x61f90:
                    r21 = r21 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x61740;
                    run_61600(); return;
                case 0x61f9c:
                    r21 = r21 | 64;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x617a4;
                    run_61600(); return;
                case 0x61fac:
                    r5 = r16 + r0;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x61fbc;
                    pc=0x5cc00;
                    run_5cc00(); return;
                case 0x61fbc:
                    r16 = r2 + r0;
                    r21 = r21 | 64;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x617a4;
                    run_61600(); return;
                case 0x61fd0:
                    r21 = r21 | 512;
                    /* Next insn is delay slot */ 
                    pc=0x61f18;
                    continue;
                case 0x61fdc:
                    r21 = r21 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x61740;
                    run_61600(); return;
                case 0x61fe8:
                    r21 = r21 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x61740;
                    run_61600(); return;
                case 0x61ff4:
                    r2 = r22 << 1;
                    r9 = r22 << 3;
                    r2 = r2 + r9;
                case 0x62000:
                    pc=0x62000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62000() throws ExecutionException { /* 0x62000 - 0x62200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62000:
                    r4 = r4 + -48;
                    r22 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x61740;
                    run_61600(); return;
                case 0x62010:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r20 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r21 = r20 + r0;
                case 0x62034:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x620b0;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x620b0;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62034;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x620a8;
                    pc=0x61200;
                    run_61200(); return;
                case 0x620a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62034;
                        continue;
                    }
                case 0x620b0:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r6 = r21 - r20;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + r6;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6167c;
                    run_61600(); return;
                case 0x620d8:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r21 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x620f0;
                    pc=0x3e5ec;
                    run_3e400(); return;
                case 0x620f0:
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r21;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62308;
                        run_62200(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x62120:
                    r21 = r0 + r0;
                case 0x62124:
                    /* Next insn is delay slot */ 
                    r31=0x6212c;
                    pc=0x4fe00;
                    run_4fe00(); return;
                case 0x6212c:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        run_61800(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r6 = r3 + r21;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    r20 = r21 + 1;
                    r5 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r6 = r29 + 280;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62180;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x62180:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        run_61800(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62380;
                        run_62200(); return;
                    }
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x621b0;
                        continue;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                case 0x621b0:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r23 = r23 + r20;
                    r22 = r22 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62398;
                        run_62200(); return;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                case 0x621d4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x62314;
                        run_62200(); return;
                    }
                case 0x621e4:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62124;
                        continue;
                    }
                case 0x621ec:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c34;
                        run_61c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x6167c;
                    run_61600(); return;
                case 0x62200:
                    pc=0x62200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62200() throws ExecutionException { /* 0x62200 - 0x62400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62200:
                case 0x62204:
                    r3 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                    r5 = r11 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    r6 = r0 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x62230;
                    return;
                case 0x62230:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r4 = r10 & 32;
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x622dc;
                        continue;
                    }
                case 0x62248:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x62260:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x61cc4;
                    run_61c00(); return;
                case 0x62278:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r7 = r22 + r0;
                    r21 = r3 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x6229c;
                    pc=0x61400;
                    run_61400(); return;
                case 0x6229c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        run_61800(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x6167c;
                    run_61600(); return;
                case 0x622c0:
                    r2 = r0 + -1409;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x61c68;
                    run_61c00(); return;
                case 0x622d0:
                    r21 = r29 + 328;
                    /* Next insn is delay slot */ 
                    pc=0x61bf4;
                    run_61a00(); return;
                case 0x622dc:
                    r4 = r10 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62248;
                        continue;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x62260;
                    continue;
                case 0x62308:
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x62120;
                    run_62000(); return;
                case 0x62314:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62324;
                    pc=0x61200;
                    run_61200(); return;
                case 0x62324:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x621e4;
                        run_62000(); return;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x621ec;
                        run_62000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61984;
                    run_61800(); return;
                case 0x6233c:
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r7 = r21 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    /* Next insn is delay slot */ 
                    r31=0x62364;
                    pc=0x61000;
                    run_61000(); return;
                case 0x62364:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x61cb0;
                    run_61c00(); return;
                case 0x62380:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x621b0;
                        run_62000(); return;
                    }
                    r21 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x621d4;
                    run_62000(); return;
                case 0x62398:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x621d4;
                    run_62000(); return;
                case 0x623a4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        run_61800(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x61870;
                    run_61800(); return;
                case 0x623b8:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x623c8;
                    pc=0x61200;
                    run_61200(); return;
                case 0x623c8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61910;
                        run_61800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61984;
                    run_61800(); return;
                case 0x623d8:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r23;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x6167c;
                    run_61600(); return;
                case 0x623f0:
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x623fc;
                    pc=0x4fe00;
                    run_4fe00(); return;
                case 0x623fc:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                case 0x62400:
                    pc=0x62400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62400() throws ExecutionException { /* 0x62400 - 0x62600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62400:
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        run_61800(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r10 = r6 + 1;
                    r6 = r3 + r6;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r7 = r10 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r21 + r0;
                    r6 = r29 + 280;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x6245c;
                    pc=0x5c400;
                    run_5c400(); return;
                case 0x6245c:
                    r3 = r0 + -1;
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        run_61800(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x624c4;
                        continue;
                    }
                    r3 = r0 + -2;
                    r6 = r10 + r0;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x62554;
                        continue;
                    }
                case 0x62484:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x61bf8;
                        run_61a00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x624a8;
                    pc=0x61200;
                    run_61200(); return;
                case 0x624a8:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61bf8;
                        run_61a00(); return;
                    }
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61984;
                        run_61800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61c28;
                    run_61c00(); return;
                case 0x624c4:
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x624cc:
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x624d8;
                    pc=0x5c200;
                    run_5c200(); return;
                case 0x624d8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62528;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x61c28;
                        run_61c00(); return;
                    }
                case 0x624ec:
                    r10 = r10 + -1;
                    r3 = r29 + 280;
                    r2 = r3 + r10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x62510;
                    pc=0x61000;
                    run_61000(); return;
                case 0x62510:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x624ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x61c28;
                    run_61c00(); return;
                case 0x62528:
                    r23 = r23 + r10;
                    r22 = r22 + -1;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62548;
                        continue;
                    }
                    r21 = r21 + 4;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x62484;
                    continue;
                case 0x62548:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x62484;
                    continue;
                case 0x62554:
                    r4 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x624cc;
                    continue;
                case 0x62600:
                    pc=0x62600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62600() throws ExecutionException { /* 0x62600 - 0x62800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62600:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r2 = r16 + 64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x626a0;
                        continue;
                    }
                    r18 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r19 = r18 << 1;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62648;
                    pc=0x37800;
                    run_37800(); return;
                case 0x62648:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6270c;
                        continue;
                    }
                    r20 = r2 + r18;
                    r4 = r20 + r0;
                    r5 = r2 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x6266c;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x6266c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r20;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r17;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r19;
                    r2 = r0 + r0;
                case 0x6267c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x626a0:
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x626ac;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x626ac:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6270c;
                        continue;
                    }
                    r3 = r0 + 1024;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r3;
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    addr=r2+1023;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+65;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1021;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+64;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x6270c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x6267c;
                    continue;
                case 0x62800:
                    pc=0x62800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62800() throws ExecutionException { /* 0x62800 - 0x62a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62800:
                    r29 = r29 + -32;
                    r2 = r0 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r5 + r0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x6292c;
                        continue;
                    }
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62844;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62938;
                        continue;
                    }
                case 0x62844:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6286c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    r2 = r2 | 8192;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r3;
                case 0x6286c:
                    r3 = r0 + -33;
                    r2 = r2 & r3;
                    r3 = r2 & 65535;
                    r4 = r3 & 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x628a8;
                        continue;
                    }
                    r4 = r3 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6292c;
                        continue;
                    }
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62948;
                        continue;
                    }
                    r2 = r2 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x628a8:
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r18 = r18 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62988;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62914;
                        continue;
                    }
                case 0x628d0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                case 0x628f8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x62914:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62924;
                    pc=0x62600;
                    run_62600(); return;
                case 0x62924:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x628d0;
                        continue;
                    }
                case 0x6292c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x628f8;
                    continue;
                case 0x62938:
                    /* Next insn is delay slot */ 
                    r31=0x62940;
                    pc=0x32600;
                    run_32600(); return;
                case 0x62940:
                    /* Next insn is delay slot */ 
                    pc=0x62844;
                    continue;
                case 0x62948:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x62958;
                    pc=0x31000;
                    run_31000(); return;
                case 0x62958:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6292c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r2 & 65527;
                    r2 = r2 << 16;
                    r2 = r2 >> 16;
                    r2 = r2 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x628a8;
                    continue;
                case 0x62988:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x629b4;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x629b4;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x62a04;
                        run_62a00(); return;
                    }
                case 0x629b4:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 66;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x62a00:
                    pc=0x62a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62a00() throws ExecutionException { /* 0x62a00 - 0x62c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62a00:
                case 0x62a04:
                    r3 = r3 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x628f8;
                    run_62800(); return;
                case 0x62c00:
                    pc=0x62c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62c00() throws ExecutionException { /* 0x62c00 - 0x62e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x62800;
                    run_62800(); return;
                case 0x62e00:
                    pc=0x62e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_62e00() throws ExecutionException { /* 0x62e00 - 0x63000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x62e00:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = r7 + r0;
                    r18 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x62e8c;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x62e38;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x62e38:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x62e54;
                    return;
                case 0x62e54:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x62e70;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x62e70:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x62e8c:
                    /* Next insn is delay slot */ 
                    r31=0x62e94;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x62e94:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x62eb0;
                    return;
                case 0x62eb0:
                    /* Next insn is delay slot */ 
                    pc=0x62e54;
                    continue;
                case 0x63000:
                    pc=0x63000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63000() throws ExecutionException { /* 0x63000 - 0x63200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63000:
                    r29 = r29 + -64;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x630a0;
                        continue;
                    }
                    r20 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r18 = r5 + r0;
                    r19 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x63040;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x63040:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x6305c;
                    return;
                case 0x6305c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x6307c;
                        continue;
                    }
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x6307c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x630a0:
                    r18 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x630b0;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x630b0:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x630cc;
                    return;
                case 0x630cc:
                    /* Next insn is delay slot */ 
                    pc=0x6305c;
                    continue;
                case 0x63200:
                    pc=0x63200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63200() throws ExecutionException { /* 0x63200 - 0x63400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63200:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63224;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63230;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63224:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63230:
                    r2 = r0 + 138;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63400:
                    pc=0x63400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63400() throws ExecutionException { /* 0x63400 - 0x63600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63400:
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r17 = r7 + r0;
                    r16 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x6342c;
                    pc=0x4fc00;
                    run_4fc00(); return;
                case 0x6342c:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x63448;
                    return;
                case 0x63448:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63600:
                    pc=0x63600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63600() throws ExecutionException { /* 0x63600 - 0x63800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63600:
                    r7 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r2 < r7 ? 1 : 0;
                    r3 = r4 + 20;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636bc;
                        continue;
                    }
                    r7 = r7 << 2;
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r7 = r3 + r7;
                    r11 = r3 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636cc;
                        continue;
                    }
                    r2 = r11 + 4;
                    r8 = readPages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff];
                    r10 = r0 + 32;
                    r6 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r10 = r10 - r5;
                    r8 = r8 >>> (r5&0x1f);
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63724;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x63658:
                    r9 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r9 = r9 << (r10&0x1f);
                    r8 = r8 | r9;
                    r2 = r2 + 4;
                    writePages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r9 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 >>> (r5&0x1f);
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63658;
                        continue;
                    }
                    r2 = r7 - r11;
                    r2 = r2 + -5;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                case 0x6369c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r8;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636ac;
                        continue;
                    }
                    r2 = r2 + 4;
                case 0x636ac:
                    r3 = r2 - r3;
                    r3 = r3 >> 2;
                    /* Next insn is delay slot */ 
                    pc=0x63710;
                    continue;
                case 0x636bc:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r0;
                case 0x636c0:
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x636cc:
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636bc;
                        continue;
                    }
                    r2 = r11 + r0;
                case 0x636dc:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636dc;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r7;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r3 >> 2;
                case 0x63710:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x636c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63724:
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6369c;
                    continue;
                case 0x63800:
                    pc=0x63800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63800() throws ExecutionException { /* 0x63800 - 0x63a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63800:
                    r5 = 6 << 16;
                    r2 = 8 << 16;
                    r5 = r5 + 32429;
                    r4 = r0 + 16;
                    r3 = r0 + 48;
                    r2 = r2 + -17596;
                case 0x63818:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63818;
                        continue;
                    }
                    r5 = 6 << 16;
                    r5 = r5 + 32421;
                    r4 = r0 + 26;
                    r3 = r0 + 97;
                case 0x63848:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63848;
                        continue;
                    }
                    r5 = 6 << 16;
                    r5 = r5 + 32413;
                    r4 = r0 + 26;
                    r3 = r0 + 65;
                case 0x63878:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63878;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63a00:
                    pc=0x63a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63a00() throws ExecutionException { /* 0x63a00 - 0x63c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63a00:
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r6;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r7;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x63a44;
                    pc=0x50400;
                    run_50400(); return;
                case 0x63a44:
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x63a58;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x63a58:
                    r9 = 8 << 16;
                    r18 = r2 + r0;
                    r20 = r9 + -17596;
                    r2 = r17 + r2;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                    addr=r20+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63f30;
                        run_63e00(); return;
                    }
                case 0x63a7c:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r23 = r3 + 2;
                    if(r8 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x64230;
                        run_64200(); return;
                    }
                    r3 = r3 + 3;
                    r22 = r0 + r0;
                case 0x63a9c:
                    r23 = r3 + r0;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r22 = r22 + 1;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x63a9c;
                        continue;
                    }
                case 0x63ab4:
                    r8 = r20 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63eac;
                        run_63e00(); return;
                    }
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + r0;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r30 = r0 + r0;
                case 0x63adc:
                    r16 = r23 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63b08;
                        continue;
                    }
                case 0x63ae8:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63ae8;
                        continue;
                    }
                case 0x63b08:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x63b20;
                    pc=0x54e00;
                    run_54e00(); return;
                case 0x63b20:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63ba8;
                        continue;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6426c;
                        run_64200(); return;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x63b38:
                    r30 = r30 - r16;
                    r30 = r30 << 2;
                case 0x63b40:
                    r3 = r0 + 80;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x63bc0;
                        continue;
                    }
                case 0x63b4c:
                    r3 = r0 + 112;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x63bc0;
                        continue;
                    }
                case 0x63b58:
                    r2 = r16 + r0;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63c68;
                        run_63c00(); return;
                    }
                case 0x63b68:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64174;
                        run_64000(); return;
                    }
                    r2 = r0 + 6;
                case 0x63b74:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x63ba8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63b38;
                        continue;
                    }
                    r3 = r0 + 80;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x63b4c;
                        continue;
                    }
                case 0x63bc0:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 43;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x64180;
                        run_64000(); return;
                    }
                    r3 = r0 + 45;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x640fc;
                        run_64000(); return;
                    }
                    r4 = r16 + 1;
                    r6 = r0 + r0;
                case 0x63be4:
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63b58;
                        continue;
                    }
                case 0x63c00:
                    pc=0x63c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63c00() throws ExecutionException { /* 0x63c00 - 0x63e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63c00:
                    r2 = r4 + 1;
                    r3 = r3 + -16;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x63c30;
                    continue;
                case 0x63c14:
                    r5 = r3 << 1;
                    r3 = r3 << 3;
                    r3 = r5 + r3;
                    r2 = r2 + 1;
                    r3 = r3 + r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r3 + -16;
                case 0x63c30:
                    r4 = r4 + r20;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r5 = r4 + -1;
                    r5 = (r5&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63c14;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63c58;
                        continue;
                    }
                    r3 = r0 - r3;
                case 0x63c58:
                    r30 = r30 + r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63b68;
                        run_63a00(); return;
                    }
                case 0x63c68:
                    r2 = r16 - r23;
                    r2 = r2 + -1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63c94;
                        continue;
                    }
                case 0x63c80:
                    r2 = r2 >> 1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63c80;
                        continue;
                    }
                case 0x63c94:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x63ca0;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x63ca0:
                    r19 = r2 + 20;
                    r22 = r2 + r0;
                    r2 = ((r23 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r11 = r19 + r0;
                    r8 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63da0;
                        continue;
                    }
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r14 = r0 + 1;
                    r3 = r0 + r0;
                    r14 = r14 - r18;
                    r12 = r0 + 32;
                    r7 = r16 + -1;
                    if(r6 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x63d2c;
                        continue;
                    }
                case 0x63cdc:
                    if(r3 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x63e90;
                        run_63e00(); return;
                    }
                    r2 = r3 + r0;
                    r3 = r3 + 4;
                case 0x63cec:
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r20 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r6 = r6 & 15;
                    r6 = r6 << (r2&0x1f);
                    r8 = r8 | r6;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63da0;
                        continue;
                    }
                case 0x63d18:
                    r16 = r7 + r0;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r7 = r16 + -1;
                    if(r6 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x63cdc;
                        continue;
                    }
                case 0x63d2c:
                    r15 = r7 + r14;
                    r2 = ((r15 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63cdc;
                        continue;
                    }
                    r4 = r15 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r11;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r12;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r14;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x63d6c;
                    pc=0x54e00;
                    run_54e00(); return;
                case 0x63d6c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r11 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r12 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r14 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r15 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63cdc;
                        continue;
                    }
                    r7 = r15 + r0;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63d18;
                        continue;
                    }
                case 0x63da0:
                    r2 = r11 + 4;
                    r2 = r2 - r19;
                    r2 = r2 >> 2;
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r4 = r8 + r0;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r16 = r2 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x63dc4;
                    pc=0x51400;
                    run_51400(); return;
                case 0x63dc4:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r16 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6418c;
                        run_64000(); return;
                    }
                    r3 = r2 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64200;
                        run_64200(); return;
                    }
                    r17 = r0 + r0;
                case 0x63df0:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                case 0x63e00:
                    pc=0x63e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_63e00() throws ExecutionException { /* 0x63e00 - 0x64000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x63e00:
                    r3 = r3 < r30 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x640d4;
                        run_64000(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64128;
                        run_64000(); return;
                    }
                    r30 = r2 - r30;
                    r3 = r30 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63f40;
                        continue;
                    }
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r4 = r0 + 2;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x6431c;
                        run_64200(); return;
                    }
                    r4 = r0 + 3;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x642cc;
                        run_64200(); return;
                    }
                    r4 = r0 + 1;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x64334;
                        run_64200(); return;
                    }
                case 0x63e68:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x63e78;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x63e78:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x63b74;
                    run_63a00(); return;
                case 0x63e90:
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r3 = r0 + 4;
                    r11 = r11 + 4;
                    r8 = r0 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63cec;
                    run_63c00(); return;
                case 0x63eac:
                    r4 = r23 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x63ec0;
                    pc=0x54e00;
                    run_54e00(); return;
                case 0x63ec0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64110;
                        run_64000(); return;
                    }
                    r16 = r23 + r18;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 + r20;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6423c;
                        run_64200(); return;
                    }
                    r4 = r0 + 48;
                    r23 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x63f1c;
                        continue;
                    }
                    r3 = r0 + 48;
                case 0x63efc:
                    r23 = r23 + 1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x63efc;
                        continue;
                    }
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x63f1c:
                    r7 = (r3&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r30 = r16 + r0;
                    r22 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x63adc;
                    run_63a00(); return;
                case 0x63f30:
                    /* Next insn is delay slot */ 
                    r31=0x63f38;
                    pc=0x63800;
                    run_63800(); return;
                case 0x63f38:
                    /* Next insn is delay slot */ 
                    pc=0x63a7c;
                    run_63a00(); return;
                case 0x63f40:
                    r18 = r30 + -1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x642c0;
                        run_64200(); return;
                    }
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x63f68;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x63f64;
                    pc=0x53200;
                    run_53200(); return;
                case 0x63f64:
                    r17 = r2 + r0;
                case 0x63f68:
                    r2 = r18 >> 5;
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r3 = r0 + 1;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r3 << (r18&0x1f);
                    r2 = r18 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63f90;
                        continue;
                    }
                    r17 = r17 | 2;
                case 0x63f90:
                    r5 = r30 + r0;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x63fa0;
                    pc=0x63600;
                    run_63600(); return;
                case 0x63fa0:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r16 = r16 - r30;
                    r30 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r18 = r0 + 2;
                case 0x63fb0:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64158;
                        run_64000(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x64134;
                        run_64000(); return;
                    }
                    r3 = r0 + 3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x64144;
                        run_64000(); return;
                    }
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x64154;
                        run_64000(); return;
                    }
                    r2 = r17 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64154;
                        run_64000(); return;
                    }
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r17 | r2;
                case 0x64000:
                    pc=0x64000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64000() throws ExecutionException { /* 0x64000 - 0x64200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64000:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64154;
                        continue;
                    }
                case 0x6400c:
                    r17 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r3 = r19 + r0;
                    r23 = r17 << 2;
                    r5 = r19 + r23;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x6403c;
                    continue;
                case 0x64028:
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64374;
                        run_64200(); return;
                    }
                case 0x6403c:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x64028;
                        continue;
                    }
                    r4 = r4 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r2 = r19 + r0;
                case 0x64058:
                    r3 = r0 + 2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x643b4;
                        run_64200(); return;
                    }
                    r3 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r17 = r17 < r3 ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x640a8;
                        continue;
                    }
                    r16 = r16 & 31;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64304;
                        run_64200(); return;
                    }
                    r2 = r2 + r23;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x64094;
                    pc=0x51400;
                    run_51400(); return;
                case 0x64094:
                    r3 = r0 + 32;
                    r16 = r3 - r16;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64304;
                        run_64200(); return;
                    }
                case 0x640a8:
                    r4 = r22 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x640b8;
                    pc=0x63600;
                    run_63600(); return;
                case 0x640b8:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    r2 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    r2 = r2 < r30 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64304;
                        run_64200(); return;
                    }
                case 0x640d4:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x640e4;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x640e4:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 163;
                    /* Next insn is delay slot */ 
                    pc=0x63b74;
                    run_63a00(); return;
                case 0x640fc:
                    r6 = r0 + 1;
                case 0x64100:
                    r4 = r16 + 2;
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x63be4;
                    run_63a00(); return;
                case 0x64110:
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r23 + r0;
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x63b40;
                    run_63a00(); return;
                case 0x64128:
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x63fb0;
                    run_63e00(); return;
                case 0x64134:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r4 = r2 - r4;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x64144:
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6400c;
                        continue;
                    }
                case 0x64154:
                    r18 = r18 | 16;
                case 0x64158:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r18 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x63b74;
                    run_63a00(); return;
                case 0x64174:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63b74;
                    run_63a00(); return;
                case 0x64180:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x64100;
                    continue;
                case 0x6418c:
                    r18 = r2 - r16;
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x641a0;
                    pc=0x53200;
                    run_53200(); return;
                case 0x641a0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6424c;
                        run_64200(); return;
                    }
                    r2 = r18 + -1;
                    r3 = r2 >> 5;
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r4 = r0 + 1;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 << (r2&0x1f);
                    r3 = r4 & r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x642b4;
                        run_64200(); return;
                    }
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64310;
                        run_64200(); return;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + -2;
                    /* Next insn is delay slot */ 
                    r31=0x641ec;
                    pc=0x53200;
                    run_53200(); return;
                case 0x641ec:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64310;
                        run_64200(); return;
                    }
                    r17 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x64250;
                    run_64200(); return;
                case 0x64200:
                    pc=0x64200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64200() throws ExecutionException { /* 0x64200 - 0x64400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64200:
                    r17 = r16 - r2;
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64218;
                    pc=0x52000;
                    run_52000(); return;
                case 0x64218:
                    r30 = r30 - r17;
                    r22 = r2 + r0;
                    r19 = r2 + 20;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63df0;
                    run_63c00(); return;
                case 0x64230:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x63ab4;
                    run_63a00(); return;
                case 0x6423c:
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x63b40;
                    run_63a00(); return;
                case 0x6424c:
                    r17 = r0 + r0;
                case 0x64250:
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64260;
                    pc=0x63600;
                    run_63600(); return;
                case 0x64260:
                    r30 = r30 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x63df0;
                    run_63c00(); return;
                case 0x6426c:
                    r30 = r16 + r18;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r30 + r0;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63b38;
                        run_63a00(); return;
                    }
                case 0x6428c:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6428c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x63b38;
                    run_63a00(); return;
                case 0x642b4:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x64250;
                    continue;
                case 0x642c0:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x63f68;
                    run_63e00(); return;
                case 0x642cc:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63e68;
                        run_63e00(); return;
                    }
                case 0x642dc:
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r0 + 98;
                    /* Next insn is delay slot */ 
                    pc=0x63b74;
                    run_63a00(); return;
                case 0x64304:
                    r18 = r0 + 33;
                    /* Next insn is delay slot */ 
                    pc=0x64158;
                    run_64000(); return;
                case 0x64310:
                    r17 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x64250;
                    continue;
                case 0x6431c:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x642dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x63e68;
                    run_63e00(); return;
                case 0x64334:
                    if(r30 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x63e68;
                        run_63e00(); return;
                    }
                    r3 = r16 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x642dc;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r16 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x64358;
                    pc=0x53200;
                    run_53200(); return;
                case 0x64358:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x63e68;
                        run_63e00(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x642dc;
                    continue;
                case 0x64374:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x643dc;
                        continue;
                    }
                    r2 = r19 + r0;
                    r3 = r17 + r0;
                case 0x64390:
                    r4 = r3 + 1;
                    r3 = r3 + 4;
                    r3 = r3 << 2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r4;
                    r3 = r22 + r3;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x64058;
                    run_64000(); return;
                case 0x643b4:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    if(r3 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x64434;
                        run_64400(); return;
                    }
                    r18 = r0 + 34;
                    /* Next insn is delay slot */ 
                    pc=0x64158;
                    run_64000(); return;
                case 0x643dc:
                    r5 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x643f0;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x643f0:
                    r6 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r5 = r22 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                case 0x64400:
                    pc=0x64400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64400() throws ExecutionException { /* 0x64400 - 0x64600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64400:
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64410;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x64410:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x64420;
                    pc=0x50e00;
                    run_50e00(); return;
                case 0x64420:
                    r22 = r19 + r0;
                    r3 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r2 = r19 + 20;
                    /* Next insn is delay slot */ 
                    pc=0x64390;
                    run_64200(); return;
                case 0x64434:
                    r3 = r16 >> 5;
                    r3 = r3 << 2;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r16 = r3 << (r16&0x1f);
                    r18 = r16 & r2;
                    r18 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 34;
                    r18 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x64158;
                    run_64000(); return;
                case 0x64600:
                    pc=0x64600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64600() throws ExecutionException { /* 0x64600 - 0x64800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64600:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r16 = 8 << 16;
                    r16 = r16 + -17596;
                    addr=r16+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x648d8;
                        run_64800(); return;
                    }
                case 0x64628:
                    r24 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r15 = r24 >> 5;
                    r15 = r15 << 2;
                    r24 = r24 & 31;
                    r15 = r6 + r15;
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6464c;
                        continue;
                    }
                    r15 = r15 + 4;
                case 0x6464c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r0;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r10 = r15 + -4;
                    r12 = r10 + r0;
                    r5 = r10 + r0;
                    r8 = r0 + r0;
                    r14 = r0 + r0;
                    r11 = r0 + r0;
                    r17 = r0 + 8;
                    r25 = r0 + 32;
                    r9 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64734;
                        continue;
                    }
                case 0x64684:
                    r7 = r16 + r2;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64830;
                        run_64800(); return;
                    }
                    r7 = (r2&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x648ac;
                        run_64800(); return;
                    }
                    r2 = r14 < r11 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64720;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64710;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64710;
                        continue;
                    }
                    r8 = r17 - r8;
                    r8 = r8 << 2;
                    r18 = r25 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x646e8;
                    continue;
                case 0x646e4:
                    r7 = r3 + r0;
                case 0x646e8:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r13 = r3 << (r18&0x1f);
                    r7 = r7 | r13;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r7;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r7 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x646e4;
                        continue;
                    }
                case 0x64710:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6488c;
                        run_64800(); return;
                    }
                    r8 = r0 + 8;
                case 0x64720:
                    r3 = r9 + r0;
                case 0x64724:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r9 = r3 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64684;
                        continue;
                    }
                case 0x64734:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x648b8;
                        run_64800(); return;
                    }
                case 0x6473c:
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x647a4;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x647a4;
                        continue;
                    }
                    r2 = r0 + 8;
                    r8 = r2 - r8;
                    r8 = r8 << 2;
                    r9 = r0 + 32;
                    r9 = r9 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x6477c;
                    continue;
                case 0x64778:
                    r7 = r3 + r0;
                case 0x6477c:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r4 = r3 << (r9&0x1f);
                    r4 = r7 | r4;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64778;
                        continue;
                    }
                case 0x647a4:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64900;
                        run_64800(); return;
                    }
                    r2 = r6 + r0;
                case 0x647b4:
                    r5 = r5 + 4;
                    r3 = readPages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = ((r10 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x647b4;
                        continue;
                    }
                case 0x647d0:
                    r2 = r2 + 4;
                    r3 = ((r10 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x647d0;
                        continue;
                    }
                case 0x647e4:
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                case 0x647ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64810;
                        run_64800(); return;
                    }
                case 0x647f4:
                    if(r6 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x64928;
                        run_64800(); return;
                    }
                    r10 = r10 + -4;
                case 0x64800:
                    pc=0x64800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_64800() throws ExecutionException { /* 0x64800 - 0x64a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x64800:
                    r2 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x647f4;
                        run_64600(); return;
                    }
                case 0x64810:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x64830:
                    r8 = r8 + 1;
                    r2 = r8 < 9 ? 1 : 0;
                    r11 = r11 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64868;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 << 4;
                case 0x64850:
                    r7 = r7 & 15;
                    r7 = r2 | r7;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r7;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x64724;
                    run_64600(); return;
                case 0x64868:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x64720;
                        run_64600(); return;
                    }
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    r5 = r5 + -4;
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x64850;
                    continue;
                case 0x6488c:
                    r12 = r5 + -4;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r14 = r11 + r0;
                    r5 = r12 + r0;
                    r8 = r0 + r0;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x64724;
                    run_64600(); return;
                case 0x648ac:
                    r7 = r0 + 41;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x64950;
                        continue;
                    }
                case 0x648b8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x648d8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x648ec;
                    pc=0x63800;
                    run_63800(); return;
                case 0x648ec:
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x64628;
                    run_64600(); return;
                case 0x64900:
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x647e4;
                        run_64600(); return;
                    }
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                    r24 = r0 - r24;
                    r3 = r0 + -1;
                    r3 = r3 >>> (r24&0x1f);
                    r2 = r3 & r2;
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x647ec;
                    run_64600(); return;
                case 0x64928:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x64950:
                    r3 = r3 + 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x6473c;
                        run_64600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x648b8;
                    continue;
                case 0x649fc:
                case 0x64a00:
                    pc=0x64a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }

    private static final int[] _data1 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data2 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data3 = decodeData("$[\rF+\035Bl\020\033n\006\033=He\020\011\004S\001I0 0]\004\006\013\021Hr2\\n2\001\020J0\032\026\000\000\000\000l5\030\014D\006K9Hi9\031,7!\001Tu6\\\004\006\023UN :\034M\026;\035Jr2Y\004\006\013P@$\022L\006EA0@i7\031\004\006\013\021Hr\020\017$\002!\024`4,\000\000\000\n8\000\000\001\022@\000\000\011 \000\000\000J\000\000\000\004P\000\000\000\" \000\000\002\021\000\000\000\022@\000\000\000S\000\000\000\010@\000\000\000\" \000\000\004P\000\000\000%\000\000\000\002\017\000\000\000\020p\000\000\001\024\000\000\000\011D\000\000\000I\000\000\000\004P\000\000\000%\000\000\000\002(\000\000\000\020h\000\000\001\006\000\000\000\011 \000\000\000\"@\000\000\004\026\000\000\000%\000\000\000\002(\000\000\000\022@\000\000\001\005\000\000\000\010$\000\000\000J\000\000\000\004N\000\000\000$0\000\000\002(\000\000\000\022@\000\000\001\004\000\000\000\010\034\000\000\000A@\000\000\004P\000\000\000 P\000\000\002\004\000\000\000\010X\000\000\001\024\000\000\000\010\014\000\000\000@@\000\000\004\002\000\000\000%\000\000\000\0020\000\000\000\022\020\000\000\001\024\000\000\000\011 \000\000\000J\000\000\000\004\000\000\000\000\037p\000\000\002(\000\000\000\010`\000\000\000\177\000\000\000\011 \000\000\000J\000\000\000\004P\000\000\000\037P\000\000\001|\000\000\000\022@\000\000\000}@\000\000\011\004\000\000\000J\000\000\000\004P\000\000\000%\000\000\000\001z\000\000\000\017H\000\000\001\024\000\000\000\005\024\000\000\000>\000\000\000\002\032\000\000\000%\000\000\000\002&\000\000\000\0178\000\000\000{\000\000\000\011 \000\000\000K`\000\000\004@\000\000\000%\000\000\000\002(\000\000\000\022@\000\000\000z@\000\000\007P\000\000\000J\000\000\000\002\034\000\000\000\0360\000\000\002(\000\000\000\022@\000\000\001\024\000\000\000\007H\000\000\000< \000\000\004P\000\000\000\036\000\000\000\002\036\000\000\000\022@\000\000\001\024\000\000\000\011 \000\000\000;@\000\000\003Z\000\000\000%\000\000\000\001l\000\000\000\016P\000\000\000G@\000\000\011 \000\000\000'`\000\000\003P\000\000\000\034p\000\000\002(\000\000\000\022p\000\000\001\016\000\000\000\011 \000\000\000J\000\000\000\004P\000\000\000\034P\000\000\001d\000\000\000\022@\000\000\000H\000\000\000\007\010\000\000\000J\000\000\000\004P\000\000\000%\000\000\000\001`\000\000\000\rx\000\000\001\024\000\000\000\011 \000\000\000F`\000\000\004P\000\000\000%\000\000\000\001^\000\000\000\rh\000\000\000n\000\000\000\011 \000\000\000$ \000\000\004P\000\000\000\022 \000\000\002(\000\000\000\n \000\000\000Q@\000\000\005\010\000\000\000J\000\000\000\004Z\000\000\000# \000\000\002(\000\000\000\022@\000\000\000m@\000\000\006h\000\000\0006 \000\000\004P\000\000\000\0220\000\000\001!\000\000\000\011 \000\000\001\024\000\000\000\011 \000\000\000(\000\000\000\004P\000\000\000%\000\000\000\001X\000\000\000\021H\000\000\000k@\000\000\011 \000\000\0005@\000\000\003*\000\000\000\032@\000\000\002(\000\000\000\011(\000\000\000i@\000\000\004X\000\000\000J\000\000\000\003$\000\000\000\032\020\000\000\001P\000\000\000\022@\000\000\001\026\000\000\000\010`\000\000\000J\000\000\000\004P\000\000\000\031p\000\000\001N\000\000\000\014h\000\000\001\024\000\000\000\004\\\000\000\0003\000\000\000\0020\000\000\000%\000\000\000\001K\000\000\000\014P\000\000\000d@\000\000\011 \000\000\0002\000\000\000\004.\000\000\000%\000\000\000\002(\000\000\000\0148\000\000\000c\000\000\000\006\024\000\000\000J\000\000\000\0022\000\000\000\030@\000\000\001\032\000\000\000\022@\000\000\000a@\000\000\006\010\000\000\0000 \000\000\004P\000\000\000%0\000\000\001@\000\000\000\022@\000\000\001\024\000\000\000\011 \000\000\000/`\000\000\002|\000\000\000%\000\000\000\001\033\000\000\000\013h\000\000\001\024\000\000\000\011 \000\000\000J\000\000\000\002x\000\000\000\0270\000\000\002(\000\000\000\013P\000\000\001\n@\000\000\011 \000\000\000J\000\000\000\002r\000\000\000\026p\000\000\0016\000\000\000\022@\000\000\000N\000\000\000\005P\000\000\000' \000\000\004P\000\000\000\0260\000\000\0011\000\000\000\013\000\000\000\001\024\000\000\000\011(\000\000\000D`\000\000\004P\000\000\000%\000\000\000\002(\000\000\000\np\000\000\000V@\000\000\011 \000\000\000'@\000\000\002V\000\000\000%\000\000\000\002(\000\000\000\022@\000\000\000T@\000\000\005 \000\000\000J\000\000\000\002N\000\000\000$P\000\000\002(\000\000\000\022@\000\000\001\024\000\000\000\010H\000\000\000D \000\000\004P\000\000\000\024`\000\000\002\020\000\000\000\010H\000\000\001\024\000\000\000\011 \000\000\000C`\000\000\004\034\000\000\000%\000\000\000\0021\000\000\000\022 \000\000\001\024\000\000\000\011 \000\000\000J\000\000\000\004\032\000\000\000!@\000\000\002(\000\000\000\010P\000\000\001\005@\000\000\011 \000\000\000J\000\000\000\004P\000\000\000! \000\000\002\011\000\000\000\022@\000\000\001\023@\000\000\011\014\000\000\000J\000\000\000\004P\000\000\000!\000\000\000\002\007\000\000\000\0200\000\000\001\024\000\000\000\010\024\000\000\000A\000\000\000\002\026\000\000\000%\000\000\000\002\003\000\000\000\020\020\000\000\001\000@\000\000\011 \000\000\000L\000\000\000\004D\000\000\000%\000\000\000\002(\000\000\000\022@\000\000\001\000\000\000\000\007|\000\000\000J\000\000\000\002\030\000\000\000\037`\000\000\002(\000\000\000\022@\000\000\001\024\000\000\000\007t\000\000\000?\000\000\000\004P\000\000\000\0370\000\000\002!\000\000\000\022@\000\000\001\024\000\000\000\011 \000\000\000>@\000\000\003r\000\000\000%\000\000\000\001%\000\000\000\017@\000\000\000F@\000\000\011 \000\000\000I@\000\000\003n\000\000\000\036`\000\000\002(\000\000\000\022x\000\000\001\020\000\000\000\011 \000\000\000J\000\000\000\004P\000\000\000\036P\000\000\001t\000\000\000\022@\000\000\000G\000\000\000\007L\000\000\000J\000\000\000\004P\000\000\000%\000\000\000\001r\000\000\000\017\010\000\000\001\024\000\000\000\007@\000\000\000G@\000\000\004P\000\000\000%\000\000\000\002(\000\000\000\016p\000\000\000v@\000\000\011 \000\000\000;\000\000\000\003T\000\000\000\021p\000\000\002(\000\000\000\022H\000\000\000t\000\000\000\007\034\000\000\000J\000\000\000\004\\\000\000\000#@\000\000\002(\000\000\000\022@\000\000\001\024\000\000\000\007\024\000\000\0009\000\000\000\004P\000\000\000\022\000\000\000\001b\000\000\000\022@\000\000\001\024\000\000\000\011 \000\000\0008\000\000\000\003>\000\000\000%\000\000\000\002(\000\000\000\021X\000\000\001\024\000\000\000\011 \000\000\0007@\000\000\003:\000\000\000\033@\000\000\002(\000\000\000\011\010\000\000\001\024\000\000\000\004H\000\000\000J\000\000\000\002H\000\000\000\0240\000\000\001\"\000\000\000\022@\000\000\001\026@\000\000\010h\000\000\000J\000\000\000\004P\000\000\000\0330\000\000\001Z\000\000\000\rH\000\000\001\024\000\000\000\004L\000\000\000( \000\000\002(\000\000\000%\000\000\000\002(\000\000\000\n\000\000\000\001\024\000\000\000\011 \000\000\0006\000\000\000\0042\000\000\000\032p\000\000\002(\000\000\000\r0\000\000\000j@\000\000\006P\000\000\000J\000\000\000\002*\000\000\000\0320\000\000\001\026\000\000\000\022@\000\000\000i\000\000\000\006D\000\000\0004\000\000\000\004P\000\000\000%@\000\000\002\030\000\000\000\022@\000\000\001\024\000\000\000\006<\000\000\0003@\000\000\003\032\000\000\000%\000\000\000\001\027\000\000\000\014`\000\000\000L\000\000\000\011 \000\000\0002`\000\000\003\024\000\000\000\031\020\000\000\002(\000\000\000\014@\000\000\001\013@\000\000\011 \000\000\000J\000\000\000\003\016\000\000\000\030`\000\000\001E\000\000\000\022@\000\000\000L@\000\000\006\020\000\000\000&@\000\000\004P\000\000\000\0300\000\000\001B\000\000\000\014\010\000\000\001\024\000\000\000\011,\000\000\0000\000\000\000\004P\000\000\000%\000\000\000\002(\000\000\000\013x\000\000\000_\000\000\000\011 \000\000\000&`\000\000\002z\000\000\000%\000\000\000\002(\000\000\000\022@\000\000\000^\000\000\000\005l\000\000\000J\000\000\000\002t\000\000\000\"P\000\000\002(\000\000\000\022@\000\000\000\\@\000\000\005\\\000\000\000-@\000\000\004P\000\000\000\023@\000\000\0014\000\000\000\011h\000\000\001\024\000\000\000\005L\000\000\000, \000\000\002`\000\000\000%\000\000\000\002*\000\000\000\021\030\000\000\001\024\000\000\000\011 \000\000\000J\000\000\000\002\\\000\000\000\025P\000\000\002(\000\000\000\011p\000\000\000U@\000\000\011 \000\000\000J\000\000\000\004P\000\000\000\025\020\000\000\001(\000\000\000\022@\000W0\\MfK9N:\020\000\000\000\002\025dr7\\G\"\000\001\022n:\031.&s\005X 2\\N&{Ht \000\000\000\000\002Ufa3Y'\"\001\025f -[n\007#%^n9W$\0063%Xe\020\026l\027\023\035jm2[NG\032t\024S4\033n'!\001^p:\032-vsLt\n\020\010\005V@$\022\011$\031-G\001\000Pt4\032.2\003QJx:\n!\"\001\000Zc\004B!\025\003IRn:\010\014\026k=jn:\010\rv1\001Jx2XnW#\025H !T\nR\003\rrc6\031.0Q\000@-;\002!\020J%\\c9\031,\027\033\024@v2\\L&{MRt<BD\002\0015,\011\004B*\007\023%\\t\020\035\r\006)\001fi6]-F\013Q^r\020\035LW\023MRo7\010\rg+5De9\002D\002\0015p \036\033NVix\022\011\"^\r\027!\001fi6]-F\013Q^r\020\030,g#\025d \036\033NVix@c<XmF+L\024\n&\033mf9\001^p:\032-vsLt\n\020\010\005Rk!Jl8\002!\024C\025Xp\020\n\016FC%f :\031/\007!$\024 \020\013%V\033eFl2\\a\020JAdi7\035\004\006\0135^u7\035\004\006{\030@e<\031,7+QJd\020\020j\005)\001Fy1[\014W\030(@ \026K.f+IDo9Y!\020J%\\c9\031,\027\033\024@v2\\L&{MRt<BD\002\0014Zv2\\N6K=\\\011\004T\016&K9h :\032\014R\003MRm:[\014\027#=d ;\031.'\033%^n\020\033NVk\011Jr\005\000\004W\031\001,%9B@\007\033%Z6\032@\000\000\0029^ 8\034Mv;IBm\020\031M\026c\024\000r1\000\000\004\033\005\\n7]\004\006{AJn\020\030\004W\031\034t \022\\`\000\000\000\000`\022\\dsQ\001\022n;\030-FK\020@C(\025$\007#e`e\000\000\014\002+LN:\020\025\rr\0031Br3Y$\007#<@f4]\004\006K9ho\020\011\006\003\021@`-\022\021Hd1@\000\000\"\\N&{H@r2X,FK9N 3\034Mvi\001@%9Ig\"\001\025f\000&\033l\026#\025H 0\011.29\001Bt\020\011\006\003\021@`-\022\011&\003\"`\024\000&X/\006K5jm\020\033NVk\011Jr\020\033lb\003\rrc6\031.2\003IJa1Z\014V!8\000\000\000\013%VC\025Xp\000\000\005Rk\rrc6\031.0\000\000\000\000\026K.f+IDo9Y \000\000\000Z-;\031.'\033%^n\000\000\000\000\000\0315x\000\000\000\000\000\000\004x\000\000\000eX\000\000\000\000\000\000\000\023X\000\000\003\026a@\000\000\000\000\000\000N@\000\000\014[\014\000\000\000\000\000\000\002=\000\n\0052\rXo9Y$\002A\020J0\032\026\005\020P\000\000\000\000\024\nd+aRt\020\n\004B)@dX\024B@\002+1j 1^,6c\025f\n\000\024\ne\023\025Bd\020\n\004B)@hX\026\010\004B)@hX\026\010\004B)@hX\024B@\000\000\001 V+\\M\027#\024@(\022\011&\003\"`X \022\011&\003\"`X \022\011&\003\"`R\n\000\000\n\0052\005dg9H\005\002!\024`4,\n! \002A,O8\031-b\001 D%9HEB\001\020J0\032\026\005\020P\000\000\000\000\000R \000\000\005\014\000\000\000) \000\000\002E\000\000\000\0248\000\000\001$\000\002+Lt \000\000\000\000\002\rBn7\033nB\003=`e7\010\004\"+LD:\020\011.0\000\000\000\000*[M6s=nn\020\033n\007#%^n\035\010\004W\030\000\000O8\035\r\026{8@r2\\.VKIJs\020\030-b\003\005dg:[,VsPt \022\\`\004K9la6\032,B\003\005dg:[,VsP@f7\\D\002+Lt 0\011.28\000\000\000$[Nf\0131Rd\020\031\014V3%\\i:\032-vqh@`\022\\dp\000\000\000\000$[Nf\0131Rd\020\030,F#IJs9H\0166KiJ\000\000\000\000\006\033=Zm7[Ev\033Aj.1@\000\000\000\001\\o7\031 \000\000\000\0006\032L\006 \000\000\000\000\033\r&\003\022`\000\000\000\rFU\032\014`2\000\000\006c*\014`2\000\000\000\0031Tp1\033\000\000\000\003Mne2]\006\0230\001Pu1MF#A@\000m\033M\006\000\000\000\000\000\032\r&\023\000\000\000\000\000\000\000*s \000\002W\037\000\000\025:8\000\001+I@\000\n\\8\000\000\000\000\010\000\000\000\001\000\000\000\000\030\000\000\000\002@\000\000\0004\000\000\000\007 \000\000\000@\000\000\000\011P\000\000\001\001\000\000\000\020hJu\027\011.P\000\000\000O:]\004\006{\030@m2[-w\023d@-\020\034LW\013UJs:\031,B\003\011Xo1Zd\007\033%te\020\017$\002+1j\000\000\023nW!\001^f\020\033,Vk=dy\020\032-b\003IJa6\033\rv\031\000Z 9\031.\027+\025ft2Y\004\006\0231^c5H\0166KiJ \036H\004VcT\000\000\000\014\006\023\021Lh5\033\rg\003J\005\004C\"\021(`\000\000\000\000\030\014&#\031Pj6\033N\007\026\013\011Fd2Y@\000\000\000\000I7\035L\026c%H :\036.\006)\001fi=\031$\006K8@N2^\016E*YBl\000\000\000\006\033=Zm7[EwCM`r4[NF19F\000\000\000\011\026sYBl4Y\004\007#e`e\020\034m\027S\024@i7\010\011f+ahI+\030-@\000\000\000S(\035\016\"\001\004z \030\000\000\000\002L@!\036H\006\000\000\001\022n;\030-FK\020@s4^LR\0035^d4YM\026+H@f7\\D\002+8@f7\\MV\013P@s8\031,2\003%\\ <\035N6sAdi7\035\014`\000\001\022n;\030-FK\020@f7\\MV\013P@s8\031,6K\031Re9\010\r\026q\001pv9[N\007\023%\\t3\000\000\005\023\025f \037\017$\003\001\000L&\020\n\016VsMRg7\031,BI\000PR2\\e3\011$@<\020\020NV2MRz2@\000\000\000\000\000\002j.\000\000\026Q\030\000\0015\005@\000\013(,\000\000ZF`\000\005T\026\000\000-$P\000\002l4\000\000\026cH\000\0016\034@\000\0131<\000\000[\016 \000\005Xr\000\000-G\020\000\002l9\000\000\026cH\000\0016\034@\000\0131d\000\000[\n@\000\005Xr\000\000-DP\000\002l9\000\000\026cH\000\0015m@\000\0134l\000\000[\005\000\000\005X(\000\000-B@\000\002l\024\000\000\026a \000\0016\n\000\000\0130P\000\000[\005\000\000\005X(\000\000-B@\000\002l\024\000\000\026a \000\0016\n\000\000\0130P\000\000[\005\000\000\005X(\000\000-B@\000\002l\024\000\000\026a \000\0016\n\000\000\0130P\000\000[\005\000\000\005X(\000\000-B@\000\002l\024\000\000\026a \000\0016\n\000\000\0134D\000\000[\005\000\000\005Z\024\000\000-B@\000\002m\000\000\000\026a \000\0016\n\000\000\0130P\000\000[\005\000\000\005X(\000\000-B@\000\002l\024\000\000\026gH\000\0016\n\000\000\0130P\000\000[\005\000\000\005X(\000\000-B@\000\002l[\000\000\026j\020\000\0017\036@\000\0139t\000\000[O \000\005\\z\000\000-gP\000\002n=\000\000\026sh\000\0017\036@\000\0139t\000\000[O \000\005\\P\000\000-]\000\000\002n=\000\000\026sh\000\0017\036@\000\0139t\000\000[:\000\000\005\\z\000\000-gP\000\002n=\000\000\026mH\000\0016n@\000\0139\014\000\000[A`\000\005\\z\000\000-gP\000\002my\000\000\026sh\000\0016z\000\000\0139t\000\000[O \000\005ZH\000\000-xp\000\002o=\000\000\026{\030\000\0017T@\000\013<p\000\000[V\000\000\005^L\000\000-}\020\000\002oa\000\000\026wX\000\0017=@\000\013>@\000\000[v@\000\005]v\011.2+LX 3\032-F)\001@%9IeB\0031Rn2H\004W(\000\000\000\000\024\016&{\035da6H\014\026\023=dt2Y\007\"\000\000\000\000!Z\014V\033,@f0Z-F+\020t \000\000\n\007\023\025Fo7\031\r\027#%^n\020\035M\026{1Bt2Y\007\"\000\000\000\001\001\000@0\030\014\006\004\002\001\000@ \020\010\004\002A P(\024\n\005\002A P(\024\n\005\002A `0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`pnn\005\002A @ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\021\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000\020\010\004\002\001\000@ \020\010\004\010\004\002\001\000@ \020 P(\024\n\005\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004 \020\010\004\002\001\002\011\004B!\020H \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000B\001\000@  \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0100\000\000\000S:Xl6+Mf\000'\033nB\003=nn2\\@\000\000\001\034o\020\034nV\033 @f4[\014R\003=d 2\032.&+\rho9\036 \000\000\001\034o\020\034nV\033 @p9\033l6+Mf\000$[NF+Idu8\035\014V!\001fy9]\014Vi\001Fa6\033\000\004I=\036 2\\N&{H\000\000\000\023Mr\003Mjc4\010\014F+YRc2H\rw\021\001Bd2\034LW\033L\000\000\000\020.&9\001Xi9]\004\007#=^ 6\033mf8\000\000\000\"^\014V\031\001Lo9\033,\027!\001Jr9\033n \000\000\000S7Xm6+P@a6\034LV\013\021r 1[mfs\025Ft2Y\000\000\000\000\000B0Y\004\0063%Xe\020\033NVk\011Jr\000\023Mr\003\rPi6\031\016&+8\000D2\\nFK9Bt4[mb\003\005Hd9\031.7\031\001de8]-\027\023\025H\000\000\000\000\004s<@m7\\LR\003Ado1Y.7\033\025f\000\000\000\011f{P@e7\033nV; @s8\030,6(\000\000\000\000\024\014W\0235Rs9Z-vq\001He7\032,V \000\000\000!\030,B\003\005Hd9\031.7\030\001\010e;\032,6)\001^r\020\034LW\033=jr1Y$\006\023Ufy\000\021M\026c\024@e<\032.7#L\000C9\033n7\0315He;\032,6)\001Xi7\032`\000\000\001\034o\020\034nV\033 @d2]M\026\033\024\000\000'\033nB\003\004@d4\\LV\033Q^r<@\011\006{Mh 4\\d\006#=nn\000\000\000\000\002\r^n7\031,7#%^n\020\030-G\023\025Bd<H\r\026q\001`r7Yn&+Mf\000\000\022.2\003\004@d4\\LV\033Q^r<@\000\004K9la6\032,B\003\005dg:[,VsP\000\000\000\000\011f+Qno9\032d\006K9he9\031L\026\033\024@i9H\rf{P@c7[LfK\035jr2Y\000\005#=^ 6X-gI\001^p2[D\0063%Xe9H\r\026q\001fy9]\014Vh\000\000\000*\033mr\0035Bn<H\rw\003\025\\ 3\032-F+L\000N7]\004\006\011\001Fh0\\L\026\033QJr\020\031\014W3%Fe\000\000\nF+ah 3\032-F)\001Du9^ \000\002\031Rl2H\016F{<@l0\\Lv(\000\000H7\\nB\003%f :[N&+\005Fh0XMF(\001\034o\020\034n\006\013\rJ 6\031,g!\001^n\020\031\014W3%Fe\000\023Mw!\001fu8\034\rw\023QJd\000\000\000\004K1Xe3X-B\003MJe5@\000\000\000\001$e0Y\005V{9Xy\020\031M\026c\024@s<\\nF+4\000\000\000\025\rvy\001Za7\036$\006c%\\k9@\000\004\023I^k2[D\007\003%`e\000\023,\027# @a9\031nVk\025\\t\000\000\000\005\023\025fu6\035\004\007#=^ 6\030.&;\024\000\000\000\000\011fy\001Ze9\\l\026;\024@o3\010\014F+MRr2Y\004\007#e`e\000\000\011\026#\025\\t4YM\026+H@r2[-w3\025H\000\000\021\014V\013\021Xo1Z`\000\000\000\000N2]\016v{IV 4\\d\007+9de0Xm\006\013\011Xe\000\000\011fy\001Xo1Z`\004s=h 0H\0167#IJa6@\000\000\000\001&t9\031,\026i\001Ro1]\rB\003QRm2[nW \000\000\000\000\023Mr\003Mhr2X-R\003IJs7].&\033\025f\000+\032.'#UBl\020\030m\027\023\rji:\010\r\027\031\001No7\031 \005\003I^t7Xmva\001Jr9\033n \000\001*n5[Mw;8@p9\033nF{\r^l\000\000\000\000\0025jl:\032-\006{@@a:\035\014VkAhe2\000\000\004\023\005H 6Y.7\033\005Ne\000\021NVs\rhi7[D\006s=h 4[.\006c\025Ze7\035\014V \000\000\000\000\021\r\027\023\025Ft7\\O\022\0039^t\020\031-W\003Qr\000#\032-F)\001^r\020\034\014\027# @n0[,R\003Q^o\020\033\rvs\034\000\000*\033mr\0035Bn<H\0167K5Do6\032,2\0031Rn5\\`\004s<@b:YLf+H@s8\030,6)\001Bv0Z-F\013\011Xe\000\000\000\004\013\021Hr2\\n2\003\031Bm4[\017\022\0039^t\020\034nW\003A^r:\031,B\003\011r 8\034Mw#=Fo6\010\014f\0135Rl<@\n\007\023=ho1[mB\003]do7\031d\007#e`e\020\031Mw\021\001fo1ZlW \000\000S7Xm6+P@o8\031.&\013QRo7\010\rvq\001\\o7\013.6{\rVe:\000\000\005\003I^t7Xmva\001\\o:\010\014\0273\005Rl0XMF(\000\000C7[Mf+\rhi7[D\007\023\025Lu9Y,@\000\001\002d2\034LW\033L@a6\034LV\013\021r 4[D\007+MJ\000\000\024mv3Qna9\031$\006\033\005js2Y\004\006\033=\\n2XnFK=\\ 0XMw\023P\000\000\000\000\n6{\rVe:\010\r\027\031\001\\o:\010\0146{9\\e1]\014V \001&o1ZlW!\001Rs\020\030-G\023\025Bd<H\0146{9\\e1]\014V \001\036p2\\L\027#%^n\020\030l\026s\rJl2Y\000\000\002Mha:\031$\006s=h 9\031,6{YJr0XMF(\000\000\000(\034LW3%^u9H\rw;9Jr\020\031\r\026+\020\000O8\031.&\013QRo7\010\rf{P@s:\\\016\006{Ihe2\010\rvq\001fo1ZlW \000\000\000&Y.7\033\005Ne\020\035\rvy\001Xo7\031`\000\000\000\000C7[Mf+\rhi7[D\007#%Ze2\010\rw+P\000\000\000\000\000\000\034i\030\000\001fF@\000\016=L\000\000sk`\000\007\036V\000\0009tp\000\003O#\000\000\034yx\000\001gM@\000\016<\\\000\000sd`\000\007\036\036\000\0009q0\000\003O\007\000\000\034x\030\000\001g[@\000\016;|\000\000s^`\000\007\035n\000\0009n0\000\003No\000\000\034vX\000\001g3@\000\016;\014\000\000sW`\000\007\0356\000\0009jp\000\003NS\000\000\034tx\000\001g%@\000\016:\034\000\000sP`\000\007\034~\000\0009g0\000\003N7\000\000\034s\030\000\001g\027@\000\016=\\\000\000sm`\000\007\036n\000\0009vp\000\003O7\000\000\034{8\000\001g[@\000\016=\\\000\000sJ`\000\007\034N\000\0009vp\000\003O7\000\000\034{8\000\001g[@\000\016=\\\000\000sm`\000\007\036n\000\0009vp\000\003O7\000\000\034{8\000\001g[@\000\016=\\\000\000sm`\000\007\034F\000\0009vp\000\003N\037\000\000\034qX\000\001g[@\000\016=\\\000\000sm`\000\007\034.\000\0009vp\000\003O7\000\000\034{8\000\001g\011@\000\016=\\\000\000sm`\000\007\034\036\000\0009vp\000\003O7\000\000\034pX\000\001g[@\000\016=\\\000\000sm`\000\007\036n\000\0009vp\000\003O7\000\000\034{8\000\001g[@\000\016=\\\000\000sm`\000\007\034\016\000\0009vp\000\003N\003\000\000\034ox\000\001f}@\000\016=\\\000\000sm`\000\007\033n\000\0009vp\000\003O7\000\000\034{8\000\001g[@\000\016=\\\000\000sm`\000\007\036n\000\0009vp\000\003O7\000\000\034o\030\000\001fw@\000\0167,\000\000s9`\000\007\033F\000\0009vp\000\003M_\000\000\034mX\000\001fk@\000\0166L\000\000s3`\000\007\033\026\000\0009Xp\000\003MC\000\000\034kx\000\001f]@\000\0165\\\000\000s,`\000\007\032^\000\0009vp\000\003O7\000\000\034{8\000\001fU@\000\0165\034\000\000sm`\000\007\036n\000\0009vp\000\003O7\000\000\034{8\000\001fQ@\000\016=\\\000\000sm`\000\007\036n\000\0009vp\000\003O7\000\000\034ix\000\001fM@\000\0164\\$SH`\003%\\f\000\023H\024p\001\\a7\000\005\006sUXl\024@\000\000\000\016u0\000\000x\001\000\000\007@\010\000\000;V \000\003`\004\000\000\036\000 \000\001p\002\000\000\017\000\020\000\000x\001\000\000\007@\010\000\000;! \000\003[\000\000\000\036\000 \000\001m\011\000\000\016uX\000\000x\001\000\000\007<R\000\000;``\000\003^\006\000\000\035p0\000\001o\003\000\000\016x\030\000\000wA@\000\007<\014\000\000;``\000\003^\006\000\000\036\000 \000\001p\002\000\000\017\000\020\000\000x\001\000\000\007@\010\000\000<\000@\000\003`\004\000\000\036\000 \000\001p\002\000\000\017\000\020\000\000wj\000\000\007=\004\000\000<\000@\000\003^B\000\000\036\000 \000\001p\002\000\000\017\000\020\000\000x\001\000\000\007=l\000\000<\000@\000\003`\004\000\000\035lp\000\001p\002\000\000\017\000\020\000\000x\001\000\000\007@\010\000\000<\000@\000\003]w\000\000\036\000 \000\001p\002\000\000\016{h\000\000x\001\000\000\007@\010\000\000<\000@\000\003`\004\000\000\036\000 \000\001p\002\000\000\017\000\020\000\000x\001\000\000\007@\010\000\000<\000@\000\003_\026\000\000\035q \000\001o!\000\000\016z\010\000\000wP@\000\007<J\000\000;b@\000\003`\004\000\000\036\000 \000\001m\003\000\000\017\000\020\000\000wr@\000\007?<\000\000;eP\000\003Z\006\000\000\036\000 \000\001mB\000\000\017\000\020\000\000w{`\000\007@\010\000\000<\000@\000\003_8\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@W TIdJ9\016:\020\034\014\027#!Fo7\031G\"\002U\\k7\033nvq\000Dn0[,R\021h@%2\002@\000\002]\002R'\022)d9h@s<\\l7#0t *[M6s=nn\020\033L\026k\024t \022Y\001 \000\000^d2]Ev\033=\\s7[\014P\000\000\000\000\022]%b+T\\%:KDW(\001*n5[Mw;8@E9\034Mw\020\000\000\000\022\\g\"\001\025f\n\000\013lW#\014^g9\033nW\000\000\000%-WG%ihJ[/\016KSQ\025Pu\000\013lW#\014^p0\\n7;\020\000%-WG%ihJ[/\016KSQ\025H:\022Y\007\"*m<:.NDUZxt]\035\011.0P\000\000\000*ThU\020\000\000\000\000\013`\000\000\000^d2]EvsUXl\000\000\000\004s<@E9\034Mw\020\000\000\000\000\025-f[9^w7\010\r\006{Mh\000\000\000\000\004C=ft\020\033L\026k\024@l7[m7+@@f0Z-G+IJ\000\000\000\000\005+9Vn7]mb\003MJr;\031.\"\003\025dr7\\@\000\000\000\000N7H\014\026#\021de9\\d\006\013Mfo1Z,\027#\025H ;Z.FA\001\\a6Y \000\000\031^|\000\001Mx@\000\014oL\000\000f}P\000\0067s\011\026s\031Rn4]\017\020\000\000\000\000'\030)`\002A\036S$V\000\000\000\000\000\000\000\001 \000\000\0002\000\000\000\017P\000\000\000\000\036'\032+\024_1\011^\016)\0371\017+(SLf*(?zDz)gR*nt\010gc\022yh+\020\006\024\031\025Fz\r\006Aa^&~\004\000\000FIn\026[(\025\\\027&N\011p\037$\177yzVP':#r0\016LNQ*?:\1779ogC\177@\000\000\000\000\000\000\002\000H\000\000\000\000\000\000\001\000Y\000\000\000\000\000\000\000@GP\000\000\000\000\000\000 0q\000\000\000\000\000\000\020\037\006P\000\000\000\000\000\010\022t\022\000\000\000\000\000\004\013\014%P\000\000\000\000\002\006/WB\000\000\000\000\001\003MfY \000\000\000\000B\001(\013r\000\000\000\000!\ri\0077 \000\000\000\020MQTRD\000\000\000\010*\021B9e \000\000\004\026ZyD\017$\000\000\002\014\030kzIF@\000\001\006Aa^&~\004\000\000C;\r\nx.b@\000!jx\026k\035\035H\000\020|\025G\021A\021\036@\010A-<:xZc\010\004\",5dk8]u\002\022\001pgAI],I\0115\026@X~\n+lDu\036\0107Nf;4\000\001+;\000\000\na\026\000\000V\0110\000\005/\027\000\000+\004X\000\002X%@\000\025B,\000\001,\022`\000\na\026\000\000V\0110\000\005*u\000\000*ZP\000\002X%@\000\025+t\000\001+<@\000\na\026\000\000Ua \000\005.\016\000\000*pp\000\002W\007\000\000\02588\000\001+C@\000\n\\\034\000\000Ua`\000\005.\016\000\000*pp\000\002X%@\000\025B,\000\001,\022`\000\na\026\000\000V\0110\000\0050K\000\000+\004X\000\002X%@\000\025B,\000\001,\022`\000\n_\010\000\000U}P\000\0050K\000\000*~h\000\002X%@\000\025B,\000\001,\022`\000\na\026\000\000V\004\020\000\0050K\000\000+\004X\000\002W\016\000\000\025B,\000\001,\022`\000\na\026\000\000V\0110\000\0050K\000\000*t(\000\002X%@\000\025B,\000\001+U\000\000\na\026\000\000V\0110\000\0050K\000\000+\004X\000\002X%@\000\025B,\000\001,\022`\000\na\026\000\000V\0110\000\0050K\000\000*x(\000\002W8\000\000\025?4\000\001+{ \000\n_Z\000\000Up\020\000\005.p\000\000+\004X\000\002X%@\000\025+D\000\001,\022`\000\n^6\000\000V\006`\000\005//\000\000*W\010\000\002X%@\000\025-8\000\001,\022`\000\n`J\000\000V\0110\000\0050K\000\000*}X0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\006)\025Xd\000\000\000\000\000\000\n{X\000\000WKp\000\005<_\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\ny>\000\000WKp\000\005<_\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\ny>\000\000WKp\000\005<_\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\ny>\000\000WKp\000\005<_\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\ny>\000\000WKp\000\005<_\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\ny>\000\000WKp\000\005=;\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\013\005n\000\000WKp\000\005<_\000\000+ex\000\002^/@\000\025r|\000\0010\\\000\000\013\005`\000\000X.\000\000\005Bp\000\000,\027\000\000\002a8\000\000\026\013@\000\0010\\\000\000\013\005`\000\000X.\000\000\005<_\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\ny>\000\000WKp\000\005<_\000\000+ex\000\002^/@\000\025s\024\000\0010[ \000\ny>\000\000X-P\000\005<_\000\000+ex\000\002^/@\000\025r|\000\0010Z@\000\ny>\000\000WKp\000\005=S\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\ny>\000\000WKp\000\005<_\000\000+ex\000\002a0@\000\025r|\000\001/\027`\000\013\0050\000\000WKp\000\005<_\000\000+ex\000\002^/@\000\025r|\000\001/\027`\000\ny>\000\000X*@\000\005<f\000\000,\026h\000\002a6@\000\026\0134\000\0010T \000\013\005\016\000\000WKp\000\005<_\000\000,\024p\000\002^/@\000\026\014 \000\001/5\000\000\013\006\n\000\000WKp\000\005<_\000\000,\030\020\000\002^/@\000\026\013h\000\001/\027`\000\ny>\000\000X,\020\000\005@J\000\000+zh\000\002`%\000\000\026\002\004\000\001/k \000\013\0000\000\000Ws0\000\005?\033\000\000+yX\000\002_M@\000\025|l\000\001/f`\000\n~6\000\000Ws0\000\005?\033\000\000+zh\000\002_V@\000\025}4\000\001/k \000\n~Z\000\000WuP\000\005?-\000\000,\011P\000\002_V@\000\025}4\000\001/k \000\013\002\004\000\000X\017@\000\005?-\000\000+zh\000\002`7\000\000\025}4\000\001/k \000\n~Z\000\000WuP\000\005@]\000\000+zh\000\002_V@\000\025}4\000\001/k \000\n~Z\000\000X\np\000\005?-\000\000+zh\000\002_V@\000\025}4\000\0010\024 \000\n~Z\000\000WuP\000\005?-\000\000+zh\000\002_V@\000\025}4\000\001/k \000\013\0024\000\000WuP\000\005?-\000\000+zh\000\002`A\000\000\026\003p\000\001/k \000\n~Z\000\000X\r`\000\005?-\000\000+zh\000\002_V@\000\025}4\000\0010\027 \000\n~Z\000\000WuP\000\005?-\000\000+zh\000\002_V@\000\026\002\\\000\001/k \000\n~Z\000\000WuP\000\005?-\000\000,\005\010\000\002`f@\000\026\005L\000\00103 \000\013\002f\000\000X\0260\000\005A[\000\000,\r \000\002`j\000\000\026\006P\000\00105\000\000\013\003(\000\000X\032@\000\005AT\000\000,\020\030\000\002a\001@\000\026\005L\000\0010,`\000\013\002f\000\000X\0260\000\005A3\000\000,\013\030\000\002`Y@\000\026\006\030\000\00101@\000\013\003\014\000\000X\030`\000\005AF\000\000,\0140\000\002`Y@\000\026\005L\000\0010,`\000\013\002f\000\000X\0260\000\005A3\000\000,\013\030\000\002`Y@\000\026\005L\000\0010,`\000\013\002f\000\000X\0260\000\005A3\000\000,\013\030\000\002`Y@\000\026\005L\000\0010,`\000\013\002@\000\000X\0260\000\005A3\000\000,\013\030\000\002`Y@\000\026\005L\000\0010,`\000\013\002f\000\000X\0260\000\005AF\000\000,\0140\000\002`c\000\000\026\006\030\000\00101@\000\013\003\014\000\000X\0260\000\005A3\000\000,\013\030\000\002`Y@\000\026\005L\000\0010,`\000\013\002f\000\000X\0260\000\005A3\000\000,\013\030\000\002`Y@\000\026\005L\000\0010,`\000\013\002f\000\000X\0260\000\005A3\000\000,\013\030\000\002`P\000\000(\000\001\000\000@\000\030\000\010\000\002@\000`\000\034\000\010\000\002 \000P\000\026\000\006\000\001P\0008\000\017\000\004\000\000\000\000\013$&\000\000Z+p\000\005R_\000\000-\021H\000\002i/@\000\026J|\000\0014W`\000\013%>\000\000Z+p\000\005R_\000\000-\0068\000\002h9@\000\026J|\000\0014\033`\000\013\"D\000\000Z+p\000\005QE\000\000-\014H\000\002hd@\000\026F$\000\00142 \000\013#\022\000\000Z\031\020\000\005QI\000\000-\014H\000\002hd@\000\026J|\000\0014W`\000\013%>\000\000Z+p\000\005R_\000\000-\025x\000\002i/@\000\026J|\000\0014W`\000\013%>\000\000Z\032p\000\005R_\000\000-\025x\000\002i/@\000\026J|\000\0014W`\000\013%>\000\000Z+p\000\005R_\000\000-\025x\000\002i/@\000\0260`\000\0014W`\000\013%>\000\000Z+p\000\005R_\000\000-\025x\000\002f\005\000\000\026J|\000\0014W`\000\013#V\000\000Z+p\000\005R_\000\000-\025x\000\002i/@\000\026J|\000\0014W`\000\013%>\000\000Z+p\000\005R_\000\000-\025x\000\002h}@\000\026H \000\0014W`\000\013%>\000\000Z+p\000\005Q\036\000\000-\020@\000\002i/@\000\026J|\000\0013\001@\000\013%>\000\000Z\016p\000\005L\031\000\000-\0238\000\002f\003\000\000\026J|\000\0014G \000\013%>\000\000YA0\000\005R_\000\000-\025x\000\002hC\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ 7\031@\000\003%\\i:\036 \000\000\001Bn\000\000\000\000.S\020\000\002v\000\000\000\0270\000\000\001;\000\000\000\013X\000\000\000]@\000\000\005l\000\000\000.`\000\000\002v\000\000\000\027/`\000\001:~\000\000\013Wp\000\000]?\000\000\005kx\000\000.`\000\000\002v\000\000\000\0270\000\000\001;\000\000\000\013X\000\000\000]@\000\000\005l\000\000\000.`\000\000\002v\000\000\000\0270\000\000\001;\000\000\000\013X\000\000\000]@\000\000\005l\000\000\000.`\000\000\002v\000\000\000\0270\000\000\001;\000\000\000\013Wp\000\000]@\000\000\005l\000\000\000.`\000\000\002v\000\000\000\0270\000\000\001;\000\000\000\013X\000\000\000]@\000\000\005l\000\000\000.`\000\000\002u/\000\000\0270\000\000\001;\006 \000\013l&\000\000^`\000\000\005uz\000\000.j8\000\002{\006\000\000\027X\000\000\001=Dar9RY%{\010MprI{\010zZE\034f2RC\177T'RN=\022Vw F>\031\027NCC\0001!I,7P`\0000\rp\000\003\001\033@\000\030\011\\\000\001@X\000\000\014\004n\000\000`&p\000\006\0027\000\0000\0238\000\003\001\033@\000\030\011\\\000\001?z\000\000\013\177h\000\000`&p\000\005\177p\000\0000\024@\000\003\001\033@\000\030\n\020\000\001@I`\000\014\004N\000\000`$p\000\006\002'\000\0000\0228\000\003\001\023@\000\030\011\034\000\001@I`\000\014\004N\000\000`&p\000\006\0027\000\0000\0238\000\003\001\033@\000\030\011\\\000\001@M`\000\014\004n\000\000`&p\000\006\0027\000\0000\0238\000\003\001\007@\000\030\011\\\000\001@M`\000\014\004n\000\000`&p\000\006\0027\000\0000\0238\000\003\001\033@\000\030\011\\\000\001@M`\000\014\004n\000\000`\030\000\000\006\0027\000\0000\0238\000\003\001\033@\000\030\011\\\000\001@M`\000\014\002R\000\000`&p\000\006\0027\000\0000\013H\000\003\001\033@\000\030\011\\\000\001@M`\000\014\004n\000\000`&p\000\006\0027\000\0000\0238\000\003\001\033@\000\030\011\\\000\001@M`\000\014\001,\000\000`\010P\000\006\0027\000\0000\0238\000\003\001\033@\000\030\002\004\000\001@\021 \000\014\004n\000\000`&p\000\005\177d\000\0000\0238\000\002\177|\000\000\030\013\020\000\001@3 \000\013\177H\000\000`&p\000\006\001r\000\0000\0238\000\003\000r\000\000\030\011\\\000\001@M`\000\014\000\016\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000\000\006\014j\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\013]\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\013]\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\013]\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\013]\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\013]\000\0000]h\000\003\006 \000\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\017z\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a\177P\000\006\017}\000\0000\177h\000\003\007~@\000\030?t\000\001C\177 \000\014\037z\000\000a\177P\000\006\017}\000\0000\177h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\013]\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027F\000\000a;P\000\006\013]\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a~p\000\006\013]\000\0000]h\000\003\006)\000\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\013]\000\0000]h\000\003\005n@\000\030.t\000\001C}\000\000\014\027:\000\000a;P\000\006\017k\000\0000]h\000\003\005n@\000\030.t\000\001Bw \000\014\027:\000\000a;P\000\006\013]\000\0000~8\000\003\005r\000\000\030.t\000\001Bw \000\014\027:\000\000a|@\000\006\017]\000\0000]h\000\003\005n@\000\030>h\000\001Bw \000\014\037\032\000\000aJ0\000\006\017E\000\0000]h\000\003\005n@\000\030>\010\000\001Bw \000\014\036v\000\000a;P\000\006\013]\000\0000\177 \000\003\007<@\000\0309\030\000\001C^ \000\014\034L\000\000ad`\000\006\016O\000\0000t@\000\003\007$\000\000\030: \000\001CR\000\000\014\035\020\000\000ai\000\000\006\016H\000\0000sh\000\003\007\036@\000\0309\030\000\001CI@\000\014\034L\000\000ad`\000\006\016&\000\0000r0\000\003\007\023\000\000\0309X\000\001CM@\000\014\034l\000\000af`\000\006\0166\000\0000s0\000\003\007\023\000\000\0309\030\000\001CI@\000\014\034L\000\000ad`\000\006\016&\000\0000r0\000\003\007\023\000\000\0309\030\000\001CI@\000\014\034L\000\000ad`\000\006\016&\000\0000r0\000\003\007\023\000\000\0309\030\000\001CI@\000\014\034&\000\000ad`\000\006\016&\000\0000r0\000\003\007\023\000\000\0309\030\000\001CI@\000\014\034L\000\000ad`\000\006\0166\000\0000s0\000\003\007\033\000\000\0309X\000\001CM@\000\014\034l\000\000ad`\000\006\016&\000\0000r0\000\003\007\023\000\000\0309\030\000\001CI@\000\014\034L\000\000ad`\000\006\016&\000\0000r0\000\003\007\023\000\000\0309\030\000\001CI@\000\014\034L\000\000ad`\000\006\016&\000\0000r0\000\003\007\011@\000(\000\001\000\000@\000\030\000\010\000\002@\000`\000\034\000\010\000\002 \000P\000\026\000\006\000\001P\0008\000\017\000\004\000\000\002\005\004C\"\021(`\000\001Bb1Y\014V0\000\0000\030LF3!Tl7\034\016 \000\000\000\000\000\000\000\000\000\000\000\002\001",0xbb0);
    private static final int[] _data4 = decodeData("\000\001KK`\000\014\\b\000\000ef0\000\006.5\000\0002s8\000\003\027\034@\000\0319l\000\001KO \000\014\\~\000\000eh\020\000\000\000\000\000\0004\007(\000\003 G@\000\032\005$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000fyQ\021SLmob\000\000\032\006\020\000\001P1@\000\r\003\014\000\000h\031\000\000\006AH\000\0004\014P\000\003 e\000\000\032\0060\000\001P3\000\000\r\003\034\000\000h\031`\000\006AP\000\0004\r\000\000\003 i\000\000\032\006H\000\001P5\000\000\r\003(\000\000h\032`\000\006AV\000\0004\r@\000\003 l\000\000\032\006h\000\001P6@\000\r\0038\000\000h\033@\000\006A^\000\0004\rp\000\003 p\000\000\032\007\000\000\001P8@\000\r\003D\000\000h\034@\000\006Ad\000\0004\0160\000\003 s\000\000\032\007 \000\001P:\000\000\r\003T\000\000h\035 \000\006Al\000\0004\016`\000\003 w\000\000\032\0078\000\001P<\000\000\r\003`\000\000h\036 \000\006Ar\000\0004\017 \000\003 z\000\000\032\007X\000\001P=@\000\r\003p\000\000h\037\000\000\006Az\000\0004\017P\000\003 ~\000\000\032\007p\000\001P?@\000\r\003|\000\000h \000\000\006B\000\000\0004\020\020\000\003!\001\000\000\032\010\020\000\001PA\000\000\r\004\014\000\000h `\000\006B\010\000\0004\020@\000\003!\005\000\000\032\010(\000\001PC\000\000\r\004\030\000\000h!`\000\006B\016\000\0004\021\000\000\003!\010\000\000\032\010H\000\001PD@\000\r\004(\000\000h\"@\000\006B\026\000\0004\0210\000\003!\014\000\000\032\010`\000\001PF@\000\r\0044\000\000h#@\000\006B\034\000\0004\021p\000\003!\017\000\000\032\011\000\000\001PH\000\000\r\004D\000\000h$ \000\006B$\000\0004\022 \000\003!\023\000\000\032\011\030\000\001PJ\000\000\r\004P\000\000h% \000\006B*\000\0004\022`\000\003!\026\000\000\032\0118\000\001PK@\000\r\004`\000\000h&\000\000\006B2\000\0004\023\020\000\003!\032\000\000\032\011P\000\001PM@\000\r\004l\000\000h'\000\000\006B8\000\0004\023P\000\003!\035\000\000\032\011p\000\001PO\000\000\r\004|\000\000h'`\000\006B@\000\0004\024\000\000\003!!\000\000\032\n\010\000\001PQ\000\000\r\005\010\000\000h(`\000\006BF\000\0004\024@\000\003!$\000\000\032\n(\000\001PR@\000\r\005\030\000\000h)@\000\006BN\000\0004\024p\000\003!(\000\000\032\n@\000\001PT@\000\r\005$\000\000h*@\000\006BT\000\0004\0250\000\003!+\000\000\032\n`\000\001PV\000\000\r\0054\000\000h+ \000\006B\\\000\0004\025`\000\003!/\000\000\032\nx\000\001PX\000\000\r\005@\000\000h, \000\006Bb\000\0004\026 \000\003!2\000\000\032\013\030\000\001PY@\000\r\005P\000\000h-\000\000\006Bj\000\0004\026P\000\003!6\000\000\032\0130\000\001P[@\000\r\005\\\000\000h.\000\000\006Bp\000\0004\027\020\000\003!9\000\000\032\013P\000\001P]\000\000\r\005l\000\000h.`\000\006Bx\000\0004\027@\000\003!=\000\000\032\013h\000\001P_\000\000\r\005x\000\000h/`\000\006B~\000\0004\030\000\000\003!@\000\000\032\014\010\000\001P`@\000\r\006\010\000\000h0@\000\006C\006\000\0004\0300\000\003!D\000\000\032\014 \000\001Pb@\000\r\006\024\000\000h1@\000\006C\014\000\0004\030p\000\003!G\000\000\032\014@\000\001Pd\000\000\r\006$\000\000h2 \000\006C\024\000\0004\031 \000\003!K\000\000\032\014X\000\001Pf\000\000\r\0060\000\000h3 \000\006C\032\000\0004\031`\000\003!N\000\000\032\014x\000\001Pg@\000\r\006@\000\000h4\000\000\006C\"\000\0004\032\020\000\003!R\000\000\032\r\020\000\001Pi@\000\r\006L\000\000h5\000\000\006C(\000\0004\032P\000\003!U\000\000\032\r0\000\001Pk\000\000\r\006\\\000\000h5`\000\006C0\000\0004\033\000\000\003!Y\000\000\032\rH\000\001Pm\000\000\r\006h\000\000h6`\000\006C6\000\0004\033@\000\003!\\\000\000\032\rh\000\001Pn@\000\r\006x\000\000h7@\000\006C>\000\0004\033p\000\003!`\000\000\032\016\000\000\001Pp@\000\r\007\004\020*4\032%\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\002S!R)\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002kh\000\003\026l@\000\0316d\000\001K6 \000\014[2\000\000e[\020\000\006-Y\000\0002mH\000\003\026l@\000\0316d?_ow{}~\177?_ow{}~\177\000\000\000\000\000\000i\177\177~y`\000\000\007K\000\000\000\000\010\000\000\000\000\000\000\000\001W\177\177}s@\000\000\017\026\000\000\000\000\020\000\000\000\000",0x23e);
    private static final int[] _data5 = decodeData("\000\000\000\000\000\000\014T2\000\000e\003\023\177\177\177\177`\000\030\000\000\000\003\030\030@\000\031AX\000\001L\016@\000\014X<\000\000f\034\014\000\006D;\000\0003{P\000\003\037]\017\177\177\177\177\000\000@\000\000\000\000\000\000\020>\000\000\000\000\000\000\000\007\177@\000\000\000\000\000\000\003~J\017'1[h6\011\177\r\n\024\"l\014EL\177S\"\004j\011{gv?x\000\000\000\000\000\000\000 \011\000\000\000\000\000\000\000\020\003@\000\000\000\000\000\000\010\001 \000\000\000\000\000\000\003\177\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\177p\000\000\000\000\000\000\000@\022\000\000\000\000\000\000\000\000\0019\000\003\177\000\000\000/|\000\000\000\000\000\000\000\007~\000\000\000\000\000\000\000\003\177@\000\000\000\000\000\000\002\007`\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001?x\000\000\000\000\000\000\000 w\177\177\177\177\000\000\000\020<\000\000\000\000\000\000\000\007}\177\177\177\024P\r2S\177\000\000\000\032k|S)\177\037\177\177e\024\003,T\000\006\031\000\000\020\010\004\002\001",0x43);


    private final void trampoline() throws ExecutionException {
        while(state == RUNNING) {
            switch(pc>>>9) {
                case 0x80: run_10000(); break; 
                case 0x81: run_10200(); break; 
                case 0x82: run_10400(); break; 
                case 0x83: run_10600(); break; 
                case 0x84: run_10800(); break; 
                case 0x85: run_10a00(); break; 
                case 0x86: run_10c00(); break; 
                case 0x87: run_10e00(); break; 
                case 0x88: run_11000(); break; 
                case 0x89: run_11200(); break; 
                case 0x8a: run_11400(); break; 
                case 0x8b: run_11600(); break; 
                case 0x8c: run_11800(); break; 
                case 0x8d: run_11a00(); break; 
                case 0x8e: run_11c00(); break; 
                case 0x8f: run_11e00(); break; 
                case 0x90: run_12000(); break; 
                case 0x91: run_12200(); break; 
                case 0x92: run_12400(); break; 
                case 0x93: run_12600(); break; 
                case 0x94: run_12800(); break; 
                case 0x95: run_12a00(); break; 
                case 0x96: run_12c00(); break; 
                case 0x97: run_12e00(); break; 
                case 0x98: run_13000(); break; 
                case 0x99: run_13200(); break; 
                case 0x9a: run_13400(); break; 
                case 0x9b: run_13600(); break; 
                case 0x9c: run_13800(); break; 
                case 0x9d: run_13a00(); break; 
                case 0x9e: run_13c00(); break; 
                case 0x9f: run_13e00(); break; 
                case 0xa0: run_14000(); break; 
                case 0xa1: run_14200(); break; 
                case 0xa2: run_14400(); break; 
                case 0xa3: run_14600(); break; 
                case 0xa4: run_14800(); break; 
                case 0xa5: run_14a00(); break; 
                case 0xa6: run_14c00(); break; 
                case 0xa7: run_14e00(); break; 
                case 0xa8: run_15000(); break; 
                case 0xa9: run_15200(); break; 
                case 0xaa: run_15400(); break; 
                case 0xab: run_15600(); break; 
                case 0xac: run_15800(); break; 
                case 0xad: run_15a00(); break; 
                case 0xae: run_15c00(); break; 
                case 0xaf: run_15e00(); break; 
                case 0xb0: run_16000(); break; 
                case 0xb1: run_16200(); break; 
                case 0xb2: run_16400(); break; 
                case 0xb3: run_16600(); break; 
                case 0xb4: run_16800(); break; 
                case 0xb5: run_16a00(); break; 
                case 0xb6: run_16c00(); break; 
                case 0xb7: run_16e00(); break; 
                case 0xb8: run_17000(); break; 
                case 0xb9: run_17200(); break; 
                case 0xba: run_17400(); break; 
                case 0xbb: run_17600(); break; 
                case 0xbc: run_17800(); break; 
                case 0xbd: run_17a00(); break; 
                case 0xbe: run_17c00(); break; 
                case 0xbf: run_17e00(); break; 
                case 0xc0: run_18000(); break; 
                case 0xc1: run_18200(); break; 
                case 0xc2: run_18400(); break; 
                case 0xc3: run_18600(); break; 
                case 0xc4: run_18800(); break; 
                case 0xc5: run_18a00(); break; 
                case 0xc6: run_18c00(); break; 
                case 0xc7: run_18e00(); break; 
                case 0xc8: run_19000(); break; 
                case 0xc9: run_19200(); break; 
                case 0xca: run_19400(); break; 
                case 0xcb: run_19600(); break; 
                case 0xcc: run_19800(); break; 
                case 0xcd: run_19a00(); break; 
                case 0xce: run_19c00(); break; 
                case 0xcf: run_19e00(); break; 
                case 0xd0: run_1a000(); break; 
                case 0xd1: run_1a200(); break; 
                case 0xd2: run_1a400(); break; 
                case 0xd3: run_1a600(); break; 
                case 0xd4: run_1a800(); break; 
                case 0xd5: run_1aa00(); break; 
                case 0xd6: run_1ac00(); break; 
                case 0xd7: run_1ae00(); break; 
                case 0xd8: run_1b000(); break; 
                case 0xd9: run_1b200(); break; 
                case 0xda: run_1b400(); break; 
                case 0xdb: run_1b600(); break; 
                case 0xdc: run_1b800(); break; 
                case 0xdd: run_1ba00(); break; 
                case 0xde: run_1bc00(); break; 
                case 0xdf: run_1be00(); break; 
                case 0xe0: run_1c000(); break; 
                case 0xe1: run_1c200(); break; 
                case 0xe2: run_1c400(); break; 
                case 0xe3: run_1c600(); break; 
                case 0xe4: run_1c800(); break; 
                case 0xe5: run_1ca00(); break; 
                case 0xe6: run_1cc00(); break; 
                case 0xe7: run_1ce00(); break; 
                case 0xe8: run_1d000(); break; 
                case 0xe9: run_1d200(); break; 
                case 0xea: run_1d400(); break; 
                case 0xeb: run_1d600(); break; 
                case 0xec: run_1d800(); break; 
                case 0xed: run_1da00(); break; 
                case 0xee: run_1dc00(); break; 
                case 0xef: run_1de00(); break; 
                case 0xf0: run_1e000(); break; 
                case 0xf1: run_1e200(); break; 
                case 0xf2: run_1e400(); break; 
                case 0xf3: run_1e600(); break; 
                case 0xf4: run_1e800(); break; 
                case 0xf5: run_1ea00(); break; 
                case 0xf6: run_1ec00(); break; 
                case 0xf7: run_1ee00(); break; 
                case 0xf8: run_1f000(); break; 
                case 0xf9: run_1f200(); break; 
                case 0xfa: run_1f400(); break; 
                case 0xfb: run_1f600(); break; 
                case 0xfc: run_1f800(); break; 
                case 0xfd: run_1fa00(); break; 
                case 0xfe: run_1fc00(); break; 
                case 0xff: run_1fe00(); break; 
                case 0x100: run_20000(); break; 
                case 0x101: run_20200(); break; 
                case 0x102: run_20400(); break; 
                case 0x103: run_20600(); break; 
                case 0x104: run_20800(); break; 
                case 0x105: run_20a00(); break; 
                case 0x106: run_20c00(); break; 
                case 0x107: run_20e00(); break; 
                case 0x108: run_21000(); break; 
                case 0x109: run_21200(); break; 
                case 0x10a: run_21400(); break; 
                case 0x10b: run_21600(); break; 
                case 0x10c: run_21800(); break; 
                case 0x10d: run_21a00(); break; 
                case 0x10e: run_21c00(); break; 
                case 0x10f: run_21e00(); break; 
                case 0x110: run_22000(); break; 
                case 0x111: run_22200(); break; 
                case 0x112: run_22400(); break; 
                case 0x113: run_22600(); break; 
                case 0x114: run_22800(); break; 
                case 0x115: run_22a00(); break; 
                case 0x116: run_22c00(); break; 
                case 0x117: run_22e00(); break; 
                case 0x118: run_23000(); break; 
                case 0x119: run_23200(); break; 
                case 0x11a: run_23400(); break; 
                case 0x11b: run_23600(); break; 
                case 0x11c: run_23800(); break; 
                case 0x11d: run_23a00(); break; 
                case 0x11e: run_23c00(); break; 
                case 0x11f: run_23e00(); break; 
                case 0x120: run_24000(); break; 
                case 0x121: run_24200(); break; 
                case 0x122: run_24400(); break; 
                case 0x123: run_24600(); break; 
                case 0x124: run_24800(); break; 
                case 0x125: run_24a00(); break; 
                case 0x126: run_24c00(); break; 
                case 0x127: run_24e00(); break; 
                case 0x128: run_25000(); break; 
                case 0x129: run_25200(); break; 
                case 0x12a: run_25400(); break; 
                case 0x12b: run_25600(); break; 
                case 0x12c: run_25800(); break; 
                case 0x12d: run_25a00(); break; 
                case 0x12e: run_25c00(); break; 
                case 0x12f: run_25e00(); break; 
                case 0x130: run_26000(); break; 
                case 0x131: run_26200(); break; 
                case 0x132: run_26400(); break; 
                case 0x133: run_26600(); break; 
                case 0x134: run_26800(); break; 
                case 0x135: run_26a00(); break; 
                case 0x136: run_26c00(); break; 
                case 0x137: run_26e00(); break; 
                case 0x138: run_27000(); break; 
                case 0x139: run_27200(); break; 
                case 0x13a: run_27400(); break; 
                case 0x13b: run_27600(); break; 
                case 0x13c: run_27800(); break; 
                case 0x13d: run_27a00(); break; 
                case 0x13e: run_27c00(); break; 
                case 0x13f: run_27e00(); break; 
                case 0x140: run_28000(); break; 
                case 0x141: run_28200(); break; 
                case 0x142: run_28400(); break; 
                case 0x143: run_28600(); break; 
                case 0x144: run_28800(); break; 
                case 0x145: run_28a00(); break; 
                case 0x146: run_28c00(); break; 
                case 0x147: run_28e00(); break; 
                case 0x148: run_29000(); break; 
                case 0x149: run_29200(); break; 
                case 0x14a: run_29400(); break; 
                case 0x14b: run_29600(); break; 
                case 0x14c: run_29800(); break; 
                case 0x14d: run_29a00(); break; 
                case 0x14e: run_29c00(); break; 
                case 0x14f: run_29e00(); break; 
                case 0x150: run_2a000(); break; 
                case 0x151: run_2a200(); break; 
                case 0x152: run_2a400(); break; 
                case 0x153: run_2a600(); break; 
                case 0x154: run_2a800(); break; 
                case 0x155: run_2aa00(); break; 
                case 0x156: run_2ac00(); break; 
                case 0x157: run_2ae00(); break; 
                case 0x158: run_2b000(); break; 
                case 0x159: run_2b200(); break; 
                case 0x15a: run_2b400(); break; 
                case 0x15b: run_2b600(); break; 
                case 0x15c: run_2b800(); break; 
                case 0x15d: run_2ba00(); break; 
                case 0x15e: run_2bc00(); break; 
                case 0x15f: run_2be00(); break; 
                case 0x160: run_2c000(); break; 
                case 0x161: run_2c200(); break; 
                case 0x162: run_2c400(); break; 
                case 0x163: run_2c600(); break; 
                case 0x164: run_2c800(); break; 
                case 0x165: run_2ca00(); break; 
                case 0x166: run_2cc00(); break; 
                case 0x167: run_2ce00(); break; 
                case 0x168: run_2d000(); break; 
                case 0x169: run_2d200(); break; 
                case 0x16a: run_2d400(); break; 
                case 0x16b: run_2d600(); break; 
                case 0x16c: run_2d800(); break; 
                case 0x16d: run_2da00(); break; 
                case 0x16e: run_2dc00(); break; 
                case 0x16f: run_2de00(); break; 
                case 0x170: run_2e000(); break; 
                case 0x171: run_2e200(); break; 
                case 0x172: run_2e400(); break; 
                case 0x173: run_2e600(); break; 
                case 0x174: run_2e800(); break; 
                case 0x175: run_2ea00(); break; 
                case 0x176: run_2ec00(); break; 
                case 0x177: run_2ee00(); break; 
                case 0x178: run_2f000(); break; 
                case 0x179: run_2f200(); break; 
                case 0x17a: run_2f400(); break; 
                case 0x17b: run_2f600(); break; 
                case 0x17c: run_2f800(); break; 
                case 0x17d: run_2fa00(); break; 
                case 0x17e: run_2fc00(); break; 
                case 0x17f: run_2fe00(); break; 
                case 0x180: run_30000(); break; 
                case 0x181: run_30200(); break; 
                case 0x182: run_30400(); break; 
                case 0x183: run_30600(); break; 
                case 0x184: run_30800(); break; 
                case 0x185: run_30a00(); break; 
                case 0x186: run_30c00(); break; 
                case 0x187: run_30e00(); break; 
                case 0x188: run_31000(); break; 
                case 0x189: run_31200(); break; 
                case 0x18a: run_31400(); break; 
                case 0x18b: run_31600(); break; 
                case 0x18c: run_31800(); break; 
                case 0x18d: run_31a00(); break; 
                case 0x18e: run_31c00(); break; 
                case 0x18f: run_31e00(); break; 
                case 0x190: run_32000(); break; 
                case 0x191: run_32200(); break; 
                case 0x192: run_32400(); break; 
                case 0x193: run_32600(); break; 
                case 0x194: run_32800(); break; 
                case 0x195: run_32a00(); break; 
                case 0x196: run_32c00(); break; 
                case 0x197: run_32e00(); break; 
                case 0x198: run_33000(); break; 
                case 0x199: run_33200(); break; 
                case 0x19a: run_33400(); break; 
                case 0x19b: run_33600(); break; 
                case 0x19c: run_33800(); break; 
                case 0x19d: run_33a00(); break; 
                case 0x19e: run_33c00(); break; 
                case 0x19f: run_33e00(); break; 
                case 0x1a0: run_34000(); break; 
                case 0x1a1: run_34200(); break; 
                case 0x1a2: run_34400(); break; 
                case 0x1a3: run_34600(); break; 
                case 0x1a4: run_34800(); break; 
                case 0x1a5: run_34a00(); break; 
                case 0x1a6: run_34c00(); break; 
                case 0x1a7: run_34e00(); break; 
                case 0x1a8: run_35000(); break; 
                case 0x1a9: run_35200(); break; 
                case 0x1aa: run_35400(); break; 
                case 0x1ab: run_35600(); break; 
                case 0x1ac: run_35800(); break; 
                case 0x1ad: run_35a00(); break; 
                case 0x1ae: run_35c00(); break; 
                case 0x1af: run_35e00(); break; 
                case 0x1b0: run_36000(); break; 
                case 0x1b1: run_36200(); break; 
                case 0x1b2: run_36400(); break; 
                case 0x1b3: run_36600(); break; 
                case 0x1b4: run_36800(); break; 
                case 0x1b5: run_36a00(); break; 
                case 0x1b6: run_36c00(); break; 
                case 0x1b7: run_36e00(); break; 
                case 0x1b8: run_37000(); break; 
                case 0x1b9: run_37200(); break; 
                case 0x1ba: run_37400(); break; 
                case 0x1bb: run_37600(); break; 
                case 0x1bc: run_37800(); break; 
                case 0x1bd: run_37a00(); break; 
                case 0x1be: run_37c00(); break; 
                case 0x1bf: run_37e00(); break; 
                case 0x1c0: run_38000(); break; 
                case 0x1c1: run_38200(); break; 
                case 0x1c2: run_38400(); break; 
                case 0x1c3: run_38600(); break; 
                case 0x1c4: run_38800(); break; 
                case 0x1c5: run_38a00(); break; 
                case 0x1c6: run_38c00(); break; 
                case 0x1c7: run_38e00(); break; 
                case 0x1c8: run_39000(); break; 
                case 0x1c9: run_39200(); break; 
                case 0x1ca: run_39400(); break; 
                case 0x1cb: run_39600(); break; 
                case 0x1cc: run_39800(); break; 
                case 0x1cd: run_39a00(); break; 
                case 0x1ce: run_39c00(); break; 
                case 0x1cf: run_39e00(); break; 
                case 0x1d0: run_3a000(); break; 
                case 0x1d1: run_3a200(); break; 
                case 0x1d2: run_3a400(); break; 
                case 0x1d3: run_3a600(); break; 
                case 0x1d4: run_3a800(); break; 
                case 0x1d5: run_3aa00(); break; 
                case 0x1d6: run_3ac00(); break; 
                case 0x1d7: run_3ae00(); break; 
                case 0x1d8: run_3b000(); break; 
                case 0x1d9: run_3b200(); break; 
                case 0x1da: run_3b400(); break; 
                case 0x1db: run_3b600(); break; 
                case 0x1dc: run_3b800(); break; 
                case 0x1dd: run_3ba00(); break; 
                case 0x1de: run_3bc00(); break; 
                case 0x1df: run_3be00(); break; 
                case 0x1e0: run_3c000(); break; 
                case 0x1e1: run_3c200(); break; 
                case 0x1e2: run_3c400(); break; 
                case 0x1e3: run_3c600(); break; 
                case 0x1e4: run_3c800(); break; 
                case 0x1e5: run_3ca00(); break; 
                case 0x1e6: run_3cc00(); break; 
                case 0x1e7: run_3ce00(); break; 
                case 0x1e8: run_3d000(); break; 
                case 0x1e9: run_3d200(); break; 
                case 0x1ea: run_3d400(); break; 
                case 0x1eb: run_3d600(); break; 
                case 0x1ec: run_3d800(); break; 
                case 0x1ed: run_3da00(); break; 
                case 0x1ee: run_3dc00(); break; 
                case 0x1ef: run_3de00(); break; 
                case 0x1f0: run_3e000(); break; 
                case 0x1f1: run_3e200(); break; 
                case 0x1f2: run_3e400(); break; 
                case 0x1f3: run_3e600(); break; 
                case 0x1f4: run_3e800(); break; 
                case 0x1f5: run_3ea00(); break; 
                case 0x1f6: run_3ec00(); break; 
                case 0x1f7: run_3ee00(); break; 
                case 0x1f8: run_3f000(); break; 
                case 0x1f9: run_3f200(); break; 
                case 0x1fa: run_3f400(); break; 
                case 0x1fb: run_3f600(); break; 
                case 0x1fc: run_3f800(); break; 
                case 0x1fd: run_3fa00(); break; 
                case 0x1fe: run_3fc00(); break; 
                case 0x1ff: run_3fe00(); break; 
                case 0x200: run_40000(); break; 
                case 0x201: run_40200(); break; 
                case 0x202: run_40400(); break; 
                case 0x203: run_40600(); break; 
                case 0x204: run_40800(); break; 
                case 0x205: run_40a00(); break; 
                case 0x206: run_40c00(); break; 
                case 0x207: run_40e00(); break; 
                case 0x208: run_41000(); break; 
                case 0x209: run_41200(); break; 
                case 0x20a: run_41400(); break; 
                case 0x20b: run_41600(); break; 
                case 0x20c: run_41800(); break; 
                case 0x20d: run_41a00(); break; 
                case 0x20e: run_41c00(); break; 
                case 0x20f: run_41e00(); break; 
                case 0x210: run_42000(); break; 
                case 0x211: run_42200(); break; 
                case 0x212: run_42400(); break; 
                case 0x213: run_42600(); break; 
                case 0x214: run_42800(); break; 
                case 0x215: run_42a00(); break; 
                case 0x216: run_42c00(); break; 
                case 0x217: run_42e00(); break; 
                case 0x218: run_43000(); break; 
                case 0x219: run_43200(); break; 
                case 0x21a: run_43400(); break; 
                case 0x21b: run_43600(); break; 
                case 0x21c: run_43800(); break; 
                case 0x21d: run_43a00(); break; 
                case 0x21e: run_43c00(); break; 
                case 0x21f: run_43e00(); break; 
                case 0x220: run_44000(); break; 
                case 0x221: run_44200(); break; 
                case 0x222: run_44400(); break; 
                case 0x223: run_44600(); break; 
                case 0x224: run_44800(); break; 
                case 0x225: run_44a00(); break; 
                case 0x226: run_44c00(); break; 
                case 0x227: run_44e00(); break; 
                case 0x228: run_45000(); break; 
                case 0x229: run_45200(); break; 
                case 0x22a: run_45400(); break; 
                case 0x22b: run_45600(); break; 
                case 0x22c: run_45800(); break; 
                case 0x22d: run_45a00(); break; 
                case 0x22e: run_45c00(); break; 
                case 0x22f: run_45e00(); break; 
                case 0x230: run_46000(); break; 
                case 0x231: run_46200(); break; 
                case 0x232: run_46400(); break; 
                case 0x233: run_46600(); break; 
                case 0x234: run_46800(); break; 
                case 0x235: run_46a00(); break; 
                case 0x236: run_46c00(); break; 
                case 0x237: run_46e00(); break; 
                case 0x238: run_47000(); break; 
                case 0x239: run_47200(); break; 
                case 0x23a: run_47400(); break; 
                case 0x23b: run_47600(); break; 
                case 0x23c: run_47800(); break; 
                case 0x23d: run_47a00(); break; 
                case 0x23e: run_47c00(); break; 
                case 0x23f: run_47e00(); break; 
                case 0x240: run_48000(); break; 
                case 0x241: run_48200(); break; 
                case 0x242: run_48400(); break; 
                case 0x243: run_48600(); break; 
                case 0x244: run_48800(); break; 
                case 0x245: run_48a00(); break; 
                case 0x246: run_48c00(); break; 
                case 0x247: run_48e00(); break; 
                case 0x248: run_49000(); break; 
                case 0x249: run_49200(); break; 
                case 0x24a: run_49400(); break; 
                case 0x24b: run_49600(); break; 
                case 0x24c: run_49800(); break; 
                case 0x24d: run_49a00(); break; 
                case 0x24e: run_49c00(); break; 
                case 0x24f: run_49e00(); break; 
                case 0x250: run_4a000(); break; 
                case 0x251: run_4a200(); break; 
                case 0x252: run_4a400(); break; 
                case 0x253: run_4a600(); break; 
                case 0x254: run_4a800(); break; 
                case 0x255: run_4aa00(); break; 
                case 0x256: run_4ac00(); break; 
                case 0x257: run_4ae00(); break; 
                case 0x258: run_4b000(); break; 
                case 0x259: run_4b200(); break; 
                case 0x25a: run_4b400(); break; 
                case 0x25b: run_4b600(); break; 
                case 0x25c: run_4b800(); break; 
                case 0x25d: run_4ba00(); break; 
                case 0x25e: run_4bc00(); break; 
                case 0x25f: run_4be00(); break; 
                case 0x260: run_4c000(); break; 
                case 0x261: run_4c200(); break; 
                case 0x262: run_4c400(); break; 
                case 0x263: run_4c600(); break; 
                case 0x264: run_4c800(); break; 
                case 0x265: run_4ca00(); break; 
                case 0x266: run_4cc00(); break; 
                case 0x267: run_4ce00(); break; 
                case 0x268: run_4d000(); break; 
                case 0x269: run_4d200(); break; 
                case 0x26a: run_4d400(); break; 
                case 0x26b: run_4d600(); break; 
                case 0x26c: run_4d800(); break; 
                case 0x26d: run_4da00(); break; 
                case 0x26e: run_4dc00(); break; 
                case 0x26f: run_4de00(); break; 
                case 0x270: run_4e000(); break; 
                case 0x271: run_4e200(); break; 
                case 0x272: run_4e400(); break; 
                case 0x273: run_4e600(); break; 
                case 0x274: run_4e800(); break; 
                case 0x275: run_4ea00(); break; 
                case 0x276: run_4ec00(); break; 
                case 0x277: run_4ee00(); break; 
                case 0x278: run_4f000(); break; 
                case 0x279: run_4f200(); break; 
                case 0x27a: run_4f400(); break; 
                case 0x27b: run_4f600(); break; 
                case 0x27c: run_4f800(); break; 
                case 0x27d: run_4fa00(); break; 
                case 0x27e: run_4fc00(); break; 
                case 0x27f: run_4fe00(); break; 
                case 0x280: run_50000(); break; 
                case 0x281: run_50200(); break; 
                case 0x282: run_50400(); break; 
                case 0x283: run_50600(); break; 
                case 0x284: run_50800(); break; 
                case 0x285: run_50a00(); break; 
                case 0x286: run_50c00(); break; 
                case 0x287: run_50e00(); break; 
                case 0x288: run_51000(); break; 
                case 0x289: run_51200(); break; 
                case 0x28a: run_51400(); break; 
                case 0x28b: run_51600(); break; 
                case 0x28c: run_51800(); break; 
                case 0x28d: run_51a00(); break; 
                case 0x28e: run_51c00(); break; 
                case 0x28f: run_51e00(); break; 
                case 0x290: run_52000(); break; 
                case 0x291: run_52200(); break; 
                case 0x292: run_52400(); break; 
                case 0x293: run_52600(); break; 
                case 0x294: run_52800(); break; 
                case 0x295: run_52a00(); break; 
                case 0x296: run_52c00(); break; 
                case 0x297: run_52e00(); break; 
                case 0x298: run_53000(); break; 
                case 0x299: run_53200(); break; 
                case 0x29a: run_53400(); break; 
                case 0x29b: run_53600(); break; 
                case 0x29c: run_53800(); break; 
                case 0x29d: run_53a00(); break; 
                case 0x29e: run_53c00(); break; 
                case 0x29f: run_53e00(); break; 
                case 0x2a0: run_54000(); break; 
                case 0x2a1: run_54200(); break; 
                case 0x2a2: run_54400(); break; 
                case 0x2a3: run_54600(); break; 
                case 0x2a4: run_54800(); break; 
                case 0x2a5: run_54a00(); break; 
                case 0x2a6: run_54c00(); break; 
                case 0x2a7: run_54e00(); break; 
                case 0x2a8: run_55000(); break; 
                case 0x2a9: run_55200(); break; 
                case 0x2aa: run_55400(); break; 
                case 0x2ab: run_55600(); break; 
                case 0x2ac: run_55800(); break; 
                case 0x2ad: run_55a00(); break; 
                case 0x2ae: run_55c00(); break; 
                case 0x2af: run_55e00(); break; 
                case 0x2b0: run_56000(); break; 
                case 0x2b1: run_56200(); break; 
                case 0x2b2: run_56400(); break; 
                case 0x2b3: run_56600(); break; 
                case 0x2b4: run_56800(); break; 
                case 0x2b5: run_56a00(); break; 
                case 0x2b6: run_56c00(); break; 
                case 0x2b7: run_56e00(); break; 
                case 0x2b8: run_57000(); break; 
                case 0x2b9: run_57200(); break; 
                case 0x2ba: run_57400(); break; 
                case 0x2bb: run_57600(); break; 
                case 0x2bc: run_57800(); break; 
                case 0x2bd: run_57a00(); break; 
                case 0x2be: run_57c00(); break; 
                case 0x2bf: run_57e00(); break; 
                case 0x2c0: run_58000(); break; 
                case 0x2c1: run_58200(); break; 
                case 0x2c2: run_58400(); break; 
                case 0x2c3: run_58600(); break; 
                case 0x2c4: run_58800(); break; 
                case 0x2c5: run_58a00(); break; 
                case 0x2c6: run_58c00(); break; 
                case 0x2c7: run_58e00(); break; 
                case 0x2c8: run_59000(); break; 
                case 0x2c9: run_59200(); break; 
                case 0x2ca: run_59400(); break; 
                case 0x2cb: run_59600(); break; 
                case 0x2cc: run_59800(); break; 
                case 0x2cd: run_59a00(); break; 
                case 0x2ce: run_59c00(); break; 
                case 0x2cf: run_59e00(); break; 
                case 0x2d0: run_5a000(); break; 
                case 0x2d1: run_5a200(); break; 
                case 0x2d2: run_5a400(); break; 
                case 0x2d3: run_5a600(); break; 
                case 0x2d4: run_5a800(); break; 
                case 0x2d5: run_5aa00(); break; 
                case 0x2d6: run_5ac00(); break; 
                case 0x2d7: run_5ae00(); break; 
                case 0x2d8: run_5b000(); break; 
                case 0x2d9: run_5b200(); break; 
                case 0x2da: run_5b400(); break; 
                case 0x2db: run_5b600(); break; 
                case 0x2dc: run_5b800(); break; 
                case 0x2dd: run_5ba00(); break; 
                case 0x2de: run_5bc00(); break; 
                case 0x2df: run_5be00(); break; 
                case 0x2e0: run_5c000(); break; 
                case 0x2e1: run_5c200(); break; 
                case 0x2e2: run_5c400(); break; 
                case 0x2e3: run_5c600(); break; 
                case 0x2e4: run_5c800(); break; 
                case 0x2e5: run_5ca00(); break; 
                case 0x2e6: run_5cc00(); break; 
                case 0x2e7: run_5ce00(); break; 
                case 0x2e8: run_5d000(); break; 
                case 0x2e9: run_5d200(); break; 
                case 0x2ea: run_5d400(); break; 
                case 0x2eb: run_5d600(); break; 
                case 0x2ec: run_5d800(); break; 
                case 0x2ed: run_5da00(); break; 
                case 0x2ee: run_5dc00(); break; 
                case 0x2ef: run_5de00(); break; 
                case 0x2f0: run_5e000(); break; 
                case 0x2f1: run_5e200(); break; 
                case 0x2f2: run_5e400(); break; 
                case 0x2f3: run_5e600(); break; 
                case 0x2f4: run_5e800(); break; 
                case 0x2f5: run_5ea00(); break; 
                case 0x2f6: run_5ec00(); break; 
                case 0x2f7: run_5ee00(); break; 
                case 0x2f8: run_5f000(); break; 
                case 0x2f9: run_5f200(); break; 
                case 0x2fa: run_5f400(); break; 
                case 0x2fb: run_5f600(); break; 
                case 0x2fc: run_5f800(); break; 
                case 0x2fd: run_5fa00(); break; 
                case 0x2fe: run_5fc00(); break; 
                case 0x2ff: run_5fe00(); break; 
                case 0x300: run_60000(); break; 
                case 0x301: run_60200(); break; 
                case 0x302: run_60400(); break; 
                case 0x303: run_60600(); break; 
                case 0x304: run_60800(); break; 
                case 0x305: run_60a00(); break; 
                case 0x306: run_60c00(); break; 
                case 0x307: run_60e00(); break; 
                case 0x308: run_61000(); break; 
                case 0x309: run_61200(); break; 
                case 0x30a: run_61400(); break; 
                case 0x30b: run_61600(); break; 
                case 0x30c: run_61800(); break; 
                case 0x30d: run_61a00(); break; 
                case 0x30e: run_61c00(); break; 
                case 0x30f: run_61e00(); break; 
                case 0x310: run_62000(); break; 
                case 0x311: run_62200(); break; 
                case 0x312: run_62400(); break; 
                case 0x313: run_62600(); break; 
                case 0x314: run_62800(); break; 
                case 0x315: run_62a00(); break; 
                case 0x316: run_62c00(); break; 
                case 0x317: run_62e00(); break; 
                case 0x318: run_63000(); break; 
                case 0x319: run_63200(); break; 
                case 0x31a: run_63400(); break; 
                case 0x31b: run_63600(); break; 
                case 0x31c: run_63800(); break; 
                case 0x31d: run_63a00(); break; 
                case 0x31e: run_63c00(); break; 
                case 0x31f: run_63e00(); break; 
                case 0x320: run_64000(); break; 
                case 0x321: run_64200(); break; 
                case 0x322: run_64400(); break; 
                case 0x323: run_64600(); break; 
                case 0x324: run_64800(); break; 
                default: throw new ExecutionException("invalid address 0x" + Long.toString(this.pc&0xffffffffL,16) + ": r2: " + r2);
            }
        }
    }

    public sim65() {
        super(4096,65536);
        initPages(_data1,0x64a00,false);
        initPages(_data2,0x64a08,false);
        initPages(_data3,0x65000,true);
        initPages(_data4,0x67ec0,false);
        initPages(_data5,0x687c0,false);
        clearPages(0x688cc,0x1b);
        clearPages(0x68938,0x4cc3);
    }

    protected int entryPoint() { return 0x11000; }
    protected int heapStart() { return 0x7bc44; }
    protected int gp() { return 0x707c0; }
    public static void main(String[] args) throws Exception {
        sim65 me = new sim65();
        int status = me.run("org.badvision.sim65",args);
        System.exit(status);
    }

    protected void _execute() throws ExecutionException { trampoline(); }

    protected void setCPUState(CPUState state) {
        r1=state.r[1];
        r2=state.r[2];
        r3=state.r[3];
        r4=state.r[4];
        r5=state.r[5];
        r6=state.r[6];
        r7=state.r[7];
        r8=state.r[8];
        r9=state.r[9];
        r10=state.r[10];
        r11=state.r[11];
        r12=state.r[12];
        r13=state.r[13];
        r14=state.r[14];
        r15=state.r[15];
        r16=state.r[16];
        r17=state.r[17];
        r18=state.r[18];
        r19=state.r[19];
        r20=state.r[20];
        r21=state.r[21];
        r22=state.r[22];
        r23=state.r[23];
        r24=state.r[24];
        r25=state.r[25];
        r26=state.r[26];
        r27=state.r[27];
        r28=state.r[28];
        r29=state.r[29];
        r30=state.r[30];
        r31=state.r[31];
        f0=state.f[0];
        f1=state.f[1];
        f2=state.f[2];
        f3=state.f[3];
        f4=state.f[4];
        f5=state.f[5];
        f6=state.f[6];
        f7=state.f[7];
        f8=state.f[8];
        f9=state.f[9];
        f10=state.f[10];
        f11=state.f[11];
        f12=state.f[12];
        f13=state.f[13];
        f14=state.f[14];
        f15=state.f[15];
        f16=state.f[16];
        f17=state.f[17];
        f18=state.f[18];
        f19=state.f[19];
        f20=state.f[20];
        f21=state.f[21];
        f22=state.f[22];
        f23=state.f[23];
        f24=state.f[24];
        f25=state.f[25];
        f26=state.f[26];
        f27=state.f[27];
        f28=state.f[28];
        f29=state.f[29];
        f30=state.f[30];
        f31=state.f[31];
        hi=state.hi; lo=state.lo; fcsr=state.fcsr;
        pc=state.pc;
    }
    protected void getCPUState(CPUState state) {
        state.r[1]=r1;
        state.r[2]=r2;
        state.r[3]=r3;
        state.r[4]=r4;
        state.r[5]=r5;
        state.r[6]=r6;
        state.r[7]=r7;
        state.r[8]=r8;
        state.r[9]=r9;
        state.r[10]=r10;
        state.r[11]=r11;
        state.r[12]=r12;
        state.r[13]=r13;
        state.r[14]=r14;
        state.r[15]=r15;
        state.r[16]=r16;
        state.r[17]=r17;
        state.r[18]=r18;
        state.r[19]=r19;
        state.r[20]=r20;
        state.r[21]=r21;
        state.r[22]=r22;
        state.r[23]=r23;
        state.r[24]=r24;
        state.r[25]=r25;
        state.r[26]=r26;
        state.r[27]=r27;
        state.r[28]=r28;
        state.r[29]=r29;
        state.r[30]=r30;
        state.r[31]=r31;
        state.f[0]=f0;
        state.f[1]=f1;
        state.f[2]=f2;
        state.f[3]=f3;
        state.f[4]=f4;
        state.f[5]=f5;
        state.f[6]=f6;
        state.f[7]=f7;
        state.f[8]=f8;
        state.f[9]=f9;
        state.f[10]=f10;
        state.f[11]=f11;
        state.f[12]=f12;
        state.f[13]=f13;
        state.f[14]=f14;
        state.f[15]=f15;
        state.f[16]=f16;
        state.f[17]=f17;
        state.f[18]=f18;
        state.f[19]=f19;
        state.f[20]=f20;
        state.f[21]=f21;
        state.f[22]=f22;
        state.f[23]=f23;
        state.f[24]=f24;
        state.f[25]=f25;
        state.f[26]=f26;
        state.f[27]=f27;
        state.f[28]=f28;
        state.f[29]=f29;
        state.f[30]=f30;
        state.f[31]=f31;
        state.hi=hi; state.lo=lo; state.fcsr=fcsr;
        state.pc=pc;
    }

    private static final java.util.Hashtable symbols = new java.util.Hashtable();
    static {
        symbols.put("stpcpy",new Integer(0x39400));
        symbols.put("xmalloc",new Integer(0x2c200));
        symbols.put("setgrent",new Integer(0x49200));
        symbols.put("chroot",new Integer(0x42200));
        symbols.put("strcpy",new Integer(0x39800));
        symbols.put("xfree",new Integer(0x2c600));
        symbols.put("waitpid",new Integer(0x40400));
        symbols.put("getgid",new Integer(0x3ecc4));
        symbols.put("sysconf",new Integer(0x3fa00));
        symbols.put("printf",new Integer(0x37000));
        symbols.put("vsprintf",new Integer(0x5b200));
        symbols.put("utime",new Integer(0x3fe00));
        symbols.put("getlogin",new Integer(0x4a400));
        symbols.put("recv",new Integer(0x45400));
        symbols.put("connect",new Integer(0x43800));
        symbols.put("IsBDigit",new Integer(0x2f800));
        symbols.put("GetVersionAsNumber",new Integer(0x2c000));
        symbols.put("ungetc",new Integer(0x62c00));
        symbols.put("strerror",new Integer(0x3a000));
        symbols.put("geteuid",new Integer(0x3ecb4));
        symbols.put("memmove",new Integer(0x50a00));
        symbols.put("MemInit",new Integer(0x28800));
        symbols.put("snprintf",new Integer(0x54800));
        symbols.put("IsDigit",new Integer(0x2f200));
        symbols.put("IRQRequest",new Integer(0x26400));
        symbols.put("pathconf",new Integer(0x41e00));
        symbols.put("MemReadWord",new Integer(0x28400));
        symbols.put("FindExt",new Integer(0x2b200));
        symbols.put("mknod",new Integer(0x42400));
        symbols.put("ExecuteInsn",new Integer(0x26a00));
        symbols.put("getgrgid",new Integer(0x48e00));
        symbols.put("Print",new Integer(0x2b800));
        symbols.put("IsBlank",new Integer(0x2ee00));
        symbols.put("getenv",new Integer(0x4f200));
        symbols.put("fchmod",new Integer(0x41600));
        symbols.put("IsUpper",new Integer(0x2f600));
        symbols.put("getegid",new Integer(0x3ecd4));
        symbols.put("setpriority",new Integer(0x43600));
        symbols.put("getpriority",new Integer(0x43400));
        symbols.put("usleep",new Integer(0x42800));
        symbols.put("IsQuote",new Integer(0x2fe00));
        symbols.put("getpagesize",new Integer(0x3e180));
        symbols.put("fchown",new Integer(0x41000));
        symbols.put("fgets",new Integer(0x31a00));
        symbols.put("dirname",new Integer(0x4a600));
        symbols.put("MemWriteByte",new Integer(0x28000));
        symbols.put("memcpy",new Integer(0x3e5dc));
        symbols.put("readlink",new Integer(0x40c00));
        symbols.put("dup2",new Integer(0x40200));
        symbols.put("mbrtowc",new Integer(0x5c600));
        symbols.put("getpass",new Integer(0x4a000));
        symbols.put("getuid",new Integer(0x3eca4));
        symbols.put("ValidAddrSizeForCPU",new Integer(0x2ae00));
        symbols.put("malloc",new Integer(0x35a00));
        symbols.put("isatty",new Integer(0x4f800));
        symbols.put("iswspace",new Integer(0x5c200));
        symbols.put("endpwent",new Integer(0x49e00));
        symbols.put("sleep",new Integer(0x3e0f0));
        symbols.put("vsnprintf",new Integer(0x5ae00));
        symbols.put("IsODigit",new Integer(0x2fa00));
        symbols.put("recvfrom",new Integer(0x44e00));
        symbols.put("UnknownOption",new Integer(0x2a200));
        symbols.put("strtoul",new Integer(0x3a600));
        symbols.put("gethostbyaddr",new Integer(0x48800));
        symbols.put("rmdir",new Integer(0x3f800));
        symbols.put("InitCmdLine",new Integer(0x2a000));
        symbols.put("socket",new Integer(0x43a00));
        symbols.put("select",new Integer(0x45000));
        symbols.put("readdir",new Integer(0x47c00));
        symbols.put("lchown",new Integer(0x41200));
        symbols.put("setgroups",new Integer(0x46400));
        symbols.put("fflush",new Integer(0x31200));
        symbols.put("ftruncate",new Integer(0x42600));
        symbols.put("realpath",new Integer(0x42e00));
        symbols.put("chown",new Integer(0x40e00));
        symbols.put("send",new Integer(0x45200));
        symbols.put("chmod",new Integer(0x41400));
        symbols.put("alarm",new Integer(0x3f064));
        symbols.put("strtol",new Integer(0x5f800));
        symbols.put("pipe",new Integer(0x40000));
        symbols.put("uname",new Integer(0x4aa00));
        symbols.put("accept",new Integer(0x44000));
        symbols.put("NeedArg",new Integer(0x2a400));
        symbols.put("MemReadZPWord",new Integer(0x28600));
        symbols.put("basename",new Integer(0x4a800));
        symbols.put("strtod",new Integer(0x5f000));
        symbols.put("write",new Integer(0x3ae00));
        symbols.put("xdup",new Integer(0x2ca00));
        symbols.put("sysctl",new Integer(0x43200));
        symbols.put("fstat",new Integer(0x59000));
        symbols.put("fprintf",new Integer(0x33c00));
        symbols.put("setpwent",new Integer(0x49c00));
        symbols.put("xstrdup",new Integer(0x2c800));
        symbols.put("bind",new Integer(0x44600));
        symbols.put("InvDef",new Integer(0x2a800));
        symbols.put("inet_addr",new Integer(0x4b800));
        symbols.put("mkfifo",new Integer(0x42a00));
        symbols.put("chdir",new Integer(0x3fc00));
        symbols.put("initgroups",new Integer(0x4bc00));
        symbols.put("endgrent",new Integer(0x49400));
        symbols.put("setsockopt",new Integer(0x44400));
        symbols.put("fseek",new Integer(0x34e00));
        symbols.put("Reset",new Integer(0x26800));
        symbols.put("MemReadByte",new Integer(0x28200));
        symbols.put("GetCycles",new Integer(0x26c00));
        symbols.put("GetVersionAsString",new Integer(0x2be00));
        symbols.put("memchr",new Integer(0x36800));
        symbols.put("umask",new Integer(0x3ec94));
        symbols.put("lstat",new Integer(0x41800));
        symbols.put("IsAlpha",new Integer(0x2e800));
        symbols.put("setgid",new Integer(0x46000));
        symbols.put("signal",new Integer(0x54000));
        symbols.put("read",new Integer(0x3ac00));
        symbols.put("strncmp",new Integer(0x54e00));
        symbols.put("strncpy",new Integer(0x55000));
        symbols.put("sync",new Integer(0x47400));
        symbols.put("StrCaseCmp",new Integer(0x2bc00));
        symbols.put("sendto",new Integer(0x44c00));
        symbols.put("IsAlNum",new Integer(0x2ea00));
        symbols.put("realloc",new Integer(0x37600));
        symbols.put("listen",new Integer(0x44800));
        symbols.put("Internal",new Integer(0x27200));
        symbols.put("xrealloc",new Integer(0x2c400));
        symbols.put("fork",new Integer(0x58e00));
        symbols.put("sscanf",new Integer(0x54a00));
        symbols.put("getgrent",new Integer(0x49000));
        symbols.put("sigaction",new Integer(0x47800));
        symbols.put("inet_aton",new Integer(0x4b400));
        symbols.put("IsSpace",new Integer(0x2f000));
        symbols.put("symlink",new Integer(0x40a00));
        symbols.put("fopen",new Integer(0x33800));
        symbols.put("memset",new Integer(0x3e5ec));
        symbols.put("main",new Integer(0x27c00));
        symbols.put("fclose",new Integer(0x30a00));
        symbols.put("inet_ntoa",new Integer(0x48000));
        symbols.put("getppid",new Integer(0x3e7bc));
        symbols.put("opendir",new Integer(0x47a00));
        symbols.put("getgroups",new Integer(0x45600));
        symbols.put("getgrouplist",new Integer(0x4ba00));
        symbols.put("seteuid",new Integer(0x45e00));
        symbols.put("putc",new Integer(0x37400));
        symbols.put("herror",new Integer(0x48600));
        symbols.put("strcmp",new Integer(0x39600));
        symbols.put("shutdown",new Integer(0x44a00));
        symbols.put("ttyname",new Integer(0x47600));
        symbols.put("vfiprintf",new Integer(0x5aa00));
        symbols.put("getpwuid",new Integer(0x49800));
        symbols.put("dup",new Integer(0x41c00));
        symbols.put("InvArg",new Integer(0x2a600));
        symbols.put("getcwd",new Integer(0x40600));
        symbols.put("gethostbyname",new Integer(0x48a00));
        symbols.put("getpwnam",new Integer(0x49600));
        symbols.put("Error",new Integer(0x27000));
        symbols.put("getservbyname",new Integer(0x48200));
        symbols.put("fgetc",new Integer(0x31600));
        symbols.put("gethostname",new Integer(0x4b000));
        symbols.put("sprintf",new Integer(0x5d200));
        symbols.put("strtof",new Integer(0x5f200));
        symbols.put("atexit",new Integer(0x30200));
        symbols.put("ParaVirtHooks",new Integer(0x29a00));
        symbols.put("setlocale",new Integer(0x50600));
        symbols.put("getpeername",new Integer(0x45a00));
        symbols.put("nanf",new Integer(0x5ce00));
        symbols.put("vfork",new Integer(0x42000));
        symbols.put("fsync",new Integer(0x46800));
        symbols.put("fputc",new Integer(0x34000));
        symbols.put("getsockopt",new Integer(0x44200));
        symbols.put("StrCopy",new Integer(0x2ba00));
        symbols.put("hstrerror",new Integer(0x48400));
        symbols.put("localeconv",new Integer(0x50800));
        symbols.put("LongOption",new Integer(0x2ac00));
        symbols.put("fwrite",new Integer(0x35600));
        symbols.put("xvsprintf",new Integer(0x2e600));
        symbols.put("access",new Integer(0x3f600));
        symbols.put("MakeFilename",new Integer(0x2b600));
        symbols.put("getdents",new Integer(0x41a00));
        symbols.put("exit",new Integer(0x30600));
        symbols.put("klogctl",new Integer(0x42c00));
        symbols.put("getgrnam",new Integer(0x48c00));
        symbols.put("FindCPU",new Integer(0x2b000));
        symbols.put("GetArg",new Integer(0x2aa00));
        symbols.put("Warning",new Integer(0x26e00));
        symbols.put("ParaVirtInit",new Integer(0x29800));
        symbols.put("AbEnd",new Integer(0x29c00));
        symbols.put("getpwent",new Integer(0x49a00));
        symbols.put("xsprintf",new Integer(0x2e400));
        symbols.put("daemon",new Integer(0x4b200));
        symbols.put("strlen",new Integer(0x10ee4));
        symbols.put("open",new Integer(0x3aa00));
        symbols.put("IsAscii",new Integer(0x2ec00));
        symbols.put("xvsnprintf",new Integer(0x2d600));
        symbols.put("IsXDigit",new Integer(0x2fc00));
        symbols.put("fputs",new Integer(0x4e800));
        symbols.put("NMIRequest",new Integer(0x26600));
        symbols.put("setsid",new Integer(0x46600));
        symbols.put("setegid",new Integer(0x46200));
        symbols.put("closedir",new Integer(0x47e00));
        symbols.put("vasprintf",new Integer(0x4a200));
        symbols.put("xsnprintf",new Integer(0x2e200));
        symbols.put("setuid",new Integer(0x45c00));
        symbols.put("mkdir",new Integer(0x3f400));
        symbols.put("wcrtomb",new Integer(0x63000));
        symbols.put("close",new Integer(0x3a800));
        symbols.put("_call_helper",new Integer(0x10f00));
        symbols.put("vfprintf",new Integer(0x3d600));
        symbols.put("IsLower",new Integer(0x2f400));
        symbols.put("fputwc",new Integer(0x5c000));
        symbols.put("raise",new Integer(0x53e00));
        symbols.put("free",new Integer(0x35c00));
        symbols.put("FindName",new Integer(0x2b400));
        symbols.put("getsockname",new Integer(0x45800));
    }
    public int lookupSymbol(String symbol) { Integer i = (Integer) symbols.get(symbol); return i==null ? -1 : i.intValue(); }

}
