/* This file was generated from cl65 by Mips2Java on Wed Nov 02 05:01:53 UTC 2016 */
package org.cc65;

public final class cl65 extends org.ibex.nestedvm.Runtime {
    /* program counter */
    private int pc = 0;

    /* General Purpose registers */
    private final static int r0 = 0;
    private int      r1,  r2,  r3,  r4,  r5,  r6,  r7,
                r8,  r9,  r10, r11, r12, r13, r14, r15,
                r16, r17, r18, r19, r20, r21, r22, r23,
                r24, r25, r26, r27, r28, r29, r30, r31,
                hi = 0, lo = 0;
    /* FP registers */
    private int f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,
                f8,  f9,  f10, f11, f12, f13, f14, f15,
                f16, f17, f18, f19, f20, f21, f22, f23,
                f24, f25, f26, f27, f28, f29, f30, f31;
    /* FP Control Register */
    private int fcsr = 0;

    private final void run_10000() throws ExecutionException { /* 0x10000 - 0x10200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10010;
                        pc=0x10010;
                        continue;
                    }
                case 0x10010:
                    /* Next insn is delay slot */ 
                    r31=0x10018;
                    pc=0x101ac;
                    continue;
                case 0x10018:
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10020;
                        pc=0x10020;
                        continue;
                    }
                case 0x10020:
                    /* Next insn is delay slot */ 
                    r31=0x10028;
                    pc=0x10e84;
                    run_10e00(); return;
                case 0x10028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10038:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10048;
                        pc=0x10048;
                        continue;
                    }
                case 0x10048:
                    /* Next insn is delay slot */ 
                    r31=0x10050;
                    pc=0x100e4;
                    continue;
                case 0x10050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10060:
                    r4 = 6 << 16;
                    r2 = 6 << 16;
                    r4 = r4 + 11528;
                    r2 = r2 + 11531;
                    r2 = r2 - r4;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x10088;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x10080:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10088:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10080;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x1009c:
                    r4 = 6 << 16;
                    r2 = 6 << 16;
                    r4 = r4 + 11528;
                    r2 = r2 + 11528;
                    r2 = r2 - r4;
                    r2 = r2 >> 2;
                    r3 = r2 >>> 31;
                    r2 = r3 + r2;
                    r5 = r2 >> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x100d0;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x100c8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x100d0:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x100c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x100e4:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = 6 << 16;
                    addr=r19+11920;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                        pc=0x10190;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = 6 << 16;
                    r17 = 6 << 16;
                    r18 = r18 + -11768;
                    r17 = r17 + -11764;
                    r16 = 6 << 16;
                    r17 = r17 - r18;
                    r2 = readPages[(r16+11924)>>>12][((r16+11924)>>>2)&0x3ff];
                    r17 = r17 >> 2;
                    r17 = r17 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10164;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10138:
                    r3 = r2 << 2;
                    r3 = r18 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r16+11924)>>>12][((r16+11924)>>>2)&0x3ff] = r2;
                    pc=r3;
                    r31=0x10150;
                    return;
                case 0x10150:
                    r2 = readPages[(r16+11924)>>>12][((r16+11924)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10138;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10164:
                    /* Next insn is delay slot */ 
                    r31=0x1016c;
                    pc=0x10060;
                    continue;
                case 0x1016c:
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x1018c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r4 = 6 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 9264;
                    r31=0x10188;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10188:
                    r2 = r0 + 1;
                case 0x1018c:
                    addr=r19+11920;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x10190:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x101ac:
                    r2 = 0 << 16;
                    r29 = r29 + -24;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                        pc=0x101d4;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = 6 << 16;
                    r5 = 6 << 16;
                    r4 = r4 + 9264;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 11928;
                    r31=0x101d4;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x101d4:
                    r4 = 6 << 16;
                    r2 = readPages[(r4+9268)>>>12][((r4+9268)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 0 << 16;
                        pc=0x101fc;
                        continue;
                    }
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x101fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r4 + 9268;
                    pc=r2;
                    r31=0x101fc;
                    return;
                case 0x101fc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                case 0x10200:
                    pc=0x10200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10200() throws ExecutionException { /* 0x10200 - 0x10400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10200:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=0x1009c;
                    run_10000(); return;
                case 0x10208:
                    r8 = r7 + r0;
                    r3 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r4 + r0;
                        pc=0x10360;
                        continue;
                    }
                    r9 = r4 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x103d8;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 256 << 16;
                        pc=0x10548;
                        run_10400(); return;
                    }
                    r2 = 256 << 16;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r10 = r0 + 8;
                        pc=0x107e0;
                        run_10600(); return;
                    }
                    r10 = r0 + 8;
                    r10 = r0 + r0;
                case 0x10240:
                    r2 = 6 << 16;
                    r10 = r7 >>> (r10&0x1f);
                    r2 = r2 + 1660;
                    r2 = r10 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r2 + r6;
                    r2 = r0 + 32;
                    r2 = r2 - r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r2&0x1f);
                        pc=0x1027c;
                        continue;
                    }
                    r4 = r4 << (r2&0x1f);
                    r6 = r5 >>> (r6&0x1f);
                    r8 = r7 << (r2&0x1f);
                    r9 = r4 | r6;
                    r3 = r5 << (r2&0x1f);
                case 0x1027c:
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x1028c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1028c:
                    r10 = r8 & 65535;
                    r5 = r3 >>> 16;
                    r6 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r5 = r7 | r5;
                    { long hilo = (long)(r6) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102c0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102c0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x102e8;
                        continue;
                    }
                    r5 = r5 + r8;
                    r7 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r6 + -1;
                        pc=0x102e4;
                        continue;
                    }
                    r9 = r6 + -1;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -2;
                        pc=0x10834;
                        run_10800(); return;
                    }
                    r6 = r6 + -2;
                case 0x102e4:
                    r6 = r9 + r0;
                case 0x102e8:
                    r4 = r5 - r4;
                    r9 = r3 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102fc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102fc:
                    r5 = lo;
                    r11 = hi;
                    r3 = r11 << 16;
                    r3 = r3 | r9;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10328;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10328:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10350;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r5 + -1;
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r2 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10350:
                    r3 = r6 << 16;
                    r3 = r5 | r3;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10360:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1052c;
                        run_10400(); return;
                    }
                    r3 = r0 + r0;
                    r2 = 1 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10534;
                        run_10400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 24;
                        pc=0x107ac;
                        run_10600(); return;
                    }
                    r8 = r0 + 24;
                    r8 = r0 + 16;
                    r9 = r0 + 16;
                case 0x10394:
                    r3 = 6 << 16;
                    r8 = r6 >>> (r8&0x1f);
                    r3 = r3 + 1660;
                    r3 = r8 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r9;
                    r9 = r0 + 32;
                    r9 = r9 - r2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 >>> (r2&0x1f);
                        pc=0x10574;
                        run_10400(); return;
                    }
                    r3 = r7 >>> (r2&0x1f);
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                        pc=0x107e8;
                        run_10600(); return;
                    }
                    r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r3 = r7 ^ 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x103d8:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                        pc=0x103fc;
                        continue;
                    }
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x103f0;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x103f0:
                    r8 = lo;
                    r2 = 1 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x103fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10560;
                        run_10400(); return;
                    }
                case 0x10400:
                    pc=0x10400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10400() throws ExecutionException { /* 0x10400 - 0x10600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10400:
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 24;
                        pc=0x107cc;
                        run_10600(); return;
                    }
                    r6 = r0 + 24;
                    r6 = r0 + 16;
                    r9 = r0 + 16;
                case 0x1041c:
                    r2 = 6 << 16;
                    r6 = r8 >>> (r6&0x1f);
                    r2 = r2 + 1660;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + 32;
                    r9 = r2 + r9;
                    r7 = r7 - r9;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r4 >>> (r9&0x1f);
                        pc=0x10680;
                        run_10600(); return;
                    }
                    r11 = r4 >>> (r9&0x1f);
                    r5 = r4 - r8;
                    r6 = r8 >>> 16;
                    r10 = r8 & 65535;
                    r2 = r0 + 1;
                case 0x10454:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10460;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10460:
                    r7 = r3 >>> 16;
                    r9 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r7 = r11 | r7;
                    { long hilo = (long)(r9) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r11 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10490;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10490:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x104b8;
                        continue;
                    }
                    r7 = r7 + r8;
                    r5 = ((r7 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r9 + -1;
                        pc=0x104b4;
                        continue;
                    }
                    r11 = r9 + -1;
                    r5 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r9 + -2;
                        pc=0x1082c;
                        run_10800(); return;
                    }
                    r9 = r9 + -2;
                case 0x104b4:
                    r9 = r11 + r0;
                case 0x104b8:
                    r4 = r7 - r4;
                    r11 = r3 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104cc;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104cc:
                    r5 = lo;
                    r12 = hi;
                    r3 = r12 << 16;
                    r3 = r3 | r11;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104f8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104f8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10520;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r5 + -1;
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r4 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10520:
                    r3 = r9 << 16;
                    /* Next insn is delay slot */ 
                    r3 = r5 | r3;
                    pc=r31;
                    return;
                case 0x1052c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10534:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107b4;
                        run_10600(); return;
                    }
                    r8 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x10394;
                    run_10200(); return;
                case 0x10548:
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107c0;
                        run_10600(); return;
                    }
                    r10 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 16;
                    pc=0x10240;
                    run_10200(); return;
                case 0x10560:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107d4;
                        run_10600(); return;
                    }
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x1041c;
                    continue;
                case 0x10574:
                    r6 = r6 << (r9&0x1f);
                    r6 = r6 | r3;
                    r12 = r4 >>> (r2&0x1f);
                    r8 = r6 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10590;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10590:
                    r14 = r6 & 65535;
                    r2 = r5 >>> (r2&0x1f);
                    r4 = r4 << (r9&0x1f);
                    r4 = r4 | r2;
                    r15 = r4 >>> 16;
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r15;
                    { long hilo = (long)(r13) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x105d0;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x105d0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r7 << (r9&0x1f);
                        pc=0x105ec;
                        continue;
                    }
                    r2 = r7 << (r9&0x1f);
                    r11 = r11 + r6;
                    r3 = ((r11 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r13 + -1;
                        pc=0x10808;
                        run_10800(); return;
                    }
                    r7 = r13 + -1;
                case 0x105e8:
                    r13 = r7 + r0;
                case 0x105ec:
                    r10 = r11 - r10;
                    r4 = r4 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10600;
                        run_10600(); return;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10600:
                    pc=0x10600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10600() throws ExecutionException { /* 0x10600 - 0x10800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10600:
                    r3 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r4 = r7 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1062c;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1062c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10648;
                        continue;
                    }
                    r4 = r4 + r6;
                    r7 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + -1;
                        pc=0x107f4;
                        continue;
                    }
                    r8 = r3 + -1;
                case 0x10644:
                    r3 = r8 + r0;
                case 0x10648:
                    r13 = r13 << 16;
                    r13 = r3 | r13;
                    r4 = r4 - r11;
                    { long hilo = (r13 & 0xffffffffL) * (r2 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r2 = hi;
                    r6 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r3 = lo;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107a0;
                        continue;
                    }
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x10790;
                        continue;
                    }
                case 0x10674:
                    r3 = r13 + r0;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10680:
                    r8 = r8 << (r7&0x1f);
                    r6 = r8 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10694;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10694:
                    r10 = r8 & 65535;
                    r4 = r4 << (r7&0x1f);
                    r9 = r5 >>> (r9&0x1f);
                    r4 = r4 | r9;
                    r9 = r4 >>> 16;
                    r3 = r5 << (r7&0x1f);
                    r13 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r9;
                    { long hilo = (long)(r13) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x106d8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x106d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10704;
                        continue;
                    }
                    r12 = r12 + r8;
                    r2 = ((r12 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r13 + -1;
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r5 = r13 + -1;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r13 = r13 + -2;
                    r12 = r12 + r8;
                case 0x10704:
                    r7 = r12 - r7;
                    r4 = r4 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10718;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10718:
                    r2 = lo;
                    r9 = hi;
                    r9 = r9 << 16;
                    r9 = r9 | r4;
                    { long hilo = (long)(r2) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10744;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10744:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10770;
                        continue;
                    }
                    r9 = r9 + r8;
                    r4 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r2 + -1;
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r7 = r2 + -1;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r2 = r2 + -2;
                    r9 = r9 + r8;
                case 0x10770:
                    r13 = r13 << 16;
                    r5 = r9 - r5;
                    /* Next insn is delay slot */ 
                    r2 = r2 | r13;
                    pc=0x10454;
                    run_10400(); return;
                case 0x10780:
                    /* Next insn is delay slot */ 
                    r5 = r4 + r0;
                    pc=0x10520;
                    run_10400(); return;
                case 0x10788:
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    pc=0x10350;
                    run_10200(); return;
                case 0x10790:
                    r5 = r5 << (r9&0x1f);
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10674;
                        continue;
                    }
                case 0x107a0:
                    r3 = r13 + -1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107ac:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107b4:
                    r8 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107c0:
                    r10 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107cc:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107d4:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107e0:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107e8:
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107f4:
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -2;
                        pc=0x10644;
                        continue;
                    }
                    r3 = r3 + -2;
                case 0x10800:
                    pc=0x10800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10800() throws ExecutionException { /* 0x10800 - 0x10a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10800:
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10648;
                    run_10600(); return;
                case 0x10808:
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r13 + -2;
                        pc=0x105e8;
                        run_10400(); return;
                    }
                    r13 = r13 + -2;
                    /* Next insn is delay slot */ 
                    r11 = r11 + r6;
                    pc=0x105ec;
                    run_10400(); return;
                case 0x1081c:
                    /* Next insn is delay slot */ 
                    r2 = r7 + r0;
                    pc=0x10770;
                    run_10600(); return;
                case 0x10824:
                    /* Next insn is delay slot */ 
                    r13 = r5 + r0;
                    pc=0x10704;
                    run_10600(); return;
                case 0x1082c:
                    /* Next insn is delay slot */ 
                    r7 = r7 + r8;
                    pc=0x104b8;
                    run_10400(); return;
                case 0x10834:
                    /* Next insn is delay slot */ 
                    r5 = r5 + r8;
                    pc=0x102e8;
                    run_10200(); return;
                case 0x1083c:
                    r8 = r7 + r0;
                    r9 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r4 + r0;
                        pc=0x1098c;
                        continue;
                    }
                    r2 = r4 + r0;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 1 << 16;
                        pc=0x10a18;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 256 << 16;
                        pc=0x10b80;
                        run_10a00(); return;
                    }
                    r3 = 256 << 16;
                    r3 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e18;
                        run_10e00(); return;
                    }
                    r10 = r0 + r0;
                case 0x10874:
                    r3 = 6 << 16;
                    r6 = r7 >>> (r6&0x1f);
                    r3 = r3 + 1660;
                    r3 = r6 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r12 = r0 + 32;
                    r10 = r3 + r10;
                    r12 = r12 - r10;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r12&0x1f);
                        pc=0x10cdc;
                        run_10c00(); return;
                    }
                    r4 = r4 << (r12&0x1f);
                    r10 = r5 >>> (r10&0x1f);
                    r8 = r7 << (r12&0x1f);
                    r2 = r4 | r10;
                    r9 = r5 << (r12&0x1f);
                case 0x108ac:
                    r10 = r8 >>> 16;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108bc;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108bc:
                    r13 = r8 & 65535;
                    r11 = r9 >>> 16;
                    r7 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r11 = r3 | r11;
                    { long hilo = (long)(r7) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108f0;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108f0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r11 = r11 + r8;
                    r2 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e5c;
                        run_10e00(); return;
                    }
                case 0x10914:
                    r2 = r11 - r7;
                case 0x10918:
                    r9 = r9 & 65535;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10928;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10928:
                    r3 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r4 = r4 | r9;
                    { long hilo = (long)(r3) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10954;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10954:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                case 0x1097c:
                    r3 = r4 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x1098c:
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b60;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b6c;
                        run_10a00(); return;
                    }
                    r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = 256 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r0 + 24;
                        pc=0x10df0;
                        run_10c00(); return;
                    }
                    r9 = r0 + 24;
                    r9 = r0 + 16;
                    r10 = r0 + 16;
                case 0x109c0:
                    r8 = 6 << 16;
                    r9 = r6 >>> (r9&0x1f);
                    r8 = r8 + 1660;
                    r8 = r9 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 + r10;
                    r10 = r0 + 32;
                    r10 = r10 - r3;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        r13 = r4 >>> (r3&0x1f);
                        pc=0x10bac;
                        run_10a00(); return;
                    }
                    r13 = r4 >>> (r3&0x1f);
                    r3 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r5 - r7;
                        pc=0x10a08;
                        run_10a00(); return;
                    }
                    r3 = r5 - r7;
                    r3 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                case 0x10a00:
                    pc=0x10a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10a00() throws ExecutionException { /* 0x10a00 - 0x10c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10a00:
                    r3 = r5 - r7;
                case 0x10a08:
                    r4 = r4 - r6;
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r5;
                    pc=r31;
                    return;
                case 0x10a18:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x10a38;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x10a30;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a30:
                    r8 = lo;
                    r2 = 1 << 16;
                case 0x10a38:
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b98;
                        continue;
                    }
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 24;
                        pc=0x10e10;
                        run_10e00(); return;
                    }
                    r3 = r0 + 24;
                    r3 = r0 + 16;
                    r6 = r0 + 16;
                case 0x10a5c:
                    r2 = 6 << 16;
                    r3 = r8 >>> (r3&0x1f);
                    r2 = r2 + 1660;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r12 = r0 + 32;
                    r6 = r2 + r6;
                    r12 = r12 - r6;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 >>> (r6&0x1f);
                        pc=0x10ce4;
                        run_10c00(); return;
                    }
                    r10 = r4 >>> (r6&0x1f);
                    r6 = r4 - r8;
                    r2 = r8 >>> 16;
                    r7 = r8 & 65535;
                case 0x10a90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10a9c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a9c:
                    r10 = r9 >>> 16;
                    r4 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r10 = r3 | r10;
                    { long hilo = (long)(r4) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10acc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10acc:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10aec;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10aec;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e54;
                        run_10e00(); return;
                    }
                case 0x10aec:
                    r4 = r10 - r4;
                    r9 = r9 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b00;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b00:
                    r3 = lo;
                    r5 = hi;
                    r5 = r5 << 16;
                    r9 = r5 | r9;
                    { long hilo = (long)(r3) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b2c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b2c:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r9 = r9 + r8;
                    r2 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r2 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e4c;
                        run_10e00(); return;
                    }
                case 0x10b50:
                    r3 = r9 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x10b60:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10b6c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10de4;
                        run_10c00(); return;
                    }
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r10 = r0 + r0;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10b80:
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10df8;
                        run_10c00(); return;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 16;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10b98:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e04;
                        run_10e00(); return;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x10a5c;
                    continue;
                case 0x10bac:
                    r2 = r7 >>> (r3&0x1f);
                    r6 = r6 << (r10&0x1f);
                    r6 = r6 | r2;
                    r9 = r6 >>> 16;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10bc8;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10bc8:
                    r2 = r6 & 65535;
                    r11 = r5 >>> (r3&0x1f);
                    r4 = r4 << (r10&0x1f);
                    r4 = r4 | r11;
                    r15 = r4 >>> 16;
                    r7 = r7 << (r10&0x1f);
                    r14 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r15;
                    { long hilo = (long)(r14) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                case 0x10c00:
                    pc=0x10c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10c00() throws ExecutionException { /* 0x10c00 - 0x10e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10c00:
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c0c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c0c:
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 << (r10&0x1f);
                        pc=0x10c28;
                        continue;
                    }
                    r5 = r5 << (r10&0x1f);
                    r12 = r12 + r6;
                    r8 = ((r12 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r14 + -1;
                        pc=0x10e38;
                        run_10e00(); return;
                    }
                    r13 = r14 + -1;
                case 0x10c24:
                    r14 = r13 + r0;
                case 0x10c28:
                    r11 = r12 - r11;
                    r4 = r4 & 65535;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c3c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c3c:
                    r8 = lo;
                    r13 = hi;
                    { long hilo = (long)(r8) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r13 << 16;
                    r4 = r2 | r4;
                    r12 = lo;
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c70;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c70:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c8c;
                        continue;
                    }
                    r4 = r4 + r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r8 + -1;
                        pc=0x10e24;
                        run_10e00(); return;
                    }
                    r9 = r8 + -1;
                case 0x10c88:
                    r8 = r9 + r0;
                case 0x10c8c:
                    r14 = r14 << 16;
                    r8 = r8 | r14;
                    r4 = r4 - r12;
                    { long hilo = (r8 & 0xffffffffL) * (r7 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r8 = hi;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    r9 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        continue;
                    }
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        r2 = r4 - r8;
                        pc=0x10e6c;
                        run_10e00(); return;
                    }
                    r2 = r4 - r8;
                    r7 = lo;
                case 0x10cbc:
                    r7 = r5 - r7;
                    r5 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r2 - r5;
                    r3 = r2 << (r3&0x1f);
                    r7 = r7 >>> (r10&0x1f);
                    r2 = r2 >>> (r10&0x1f);
                    /* Next insn is delay slot */ 
                    r3 = r3 | r7;
                    pc=r31;
                    return;
                case 0x10cdc:
                    /* Next insn is delay slot */ 
                    r12 = r0 + r0;
                    pc=0x108ac;
                    run_10800(); return;
                case 0x10ce4:
                    r8 = r8 << (r12&0x1f);
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10cf8;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10cf8:
                    r7 = r8 & 65535;
                    r6 = r5 >>> (r6&0x1f);
                    r4 = r4 << (r12&0x1f);
                    r6 = r4 | r6;
                    r3 = r6 >>> 16;
                    r9 = r5 << (r12&0x1f);
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r3;
                    { long hilo = (long)(r13) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d3c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d3c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                    r3 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10d60;
                        continue;
                    }
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                case 0x10d60:
                    r5 = r11 - r5;
                    r3 = r6 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d74;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d74:
                    r6 = lo;
                    r10 = hi;
                    r10 = r10 << 16;
                    r10 = r10 | r3;
                    { long hilo = (long)(r6) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10da0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10da0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10dc4;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                case 0x10dc4:
                    /* Next insn is delay slot */ 
                    r6 = r10 - r6;
                    pc=0x10a90;
                    run_10a00(); return;
                case 0x10dcc:
                    r7 = r9 - r7;
                    r6 = r8 - r6;
                    r2 = ((r9 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=0x10cbc;
                    continue;
                case 0x10de4:
                    r9 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df0:
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df8:
                    r6 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e00:
                    pc=0x10e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10e00() throws ExecutionException { /* 0x10e00 - 0x11000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10e00:
                    r10 = r0 + 24;
                case 0x10e04:
                    r3 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e10:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e18:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e24:
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + -2;
                        pc=0x10c88;
                        run_10c00(); return;
                    }
                    r8 = r8 + -2;
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10c8c;
                    run_10c00(); return;
                case 0x10e38:
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r14 = r14 + -2;
                        pc=0x10c24;
                        run_10c00(); return;
                    }
                    r14 = r14 + -2;
                    /* Next insn is delay slot */ 
                    r12 = r12 + r6;
                    pc=0x10c28;
                    run_10c00(); return;
                case 0x10e4c:
                    /* Next insn is delay slot */ 
                    r9 = r9 + r8;
                    pc=0x10b50;
                    run_10a00(); return;
                case 0x10e54:
                    /* Next insn is delay slot */ 
                    r10 = r10 + r8;
                    pc=0x10aec;
                    run_10a00(); return;
                case 0x10e5c:
                    /* Next insn is delay slot */ 
                    r11 = r11 + r8;
                    pc=0x10914;
                    run_10800(); return;
                case 0x10e64:
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10e6c:
                    r2 = ((r5 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        run_10c00(); return;
                    }
                    r7 = lo;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x10cbc;
                    run_10c00(); return;
                case 0x10e84:
                    r2 = 6 << 16;
                    r2 = readPages[(r2+-11776)>>>12][((r2+-11776)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x10edc;
                        continue;
                    }
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r16 + -11780;
                    r17 = r0 + -1;
                case 0x10eb4:
                    /* Next insn is delay slot */ 
                    r16 = r16 + -4;
                    pc=r2;
                    r31=0x10ebc;
                    return;
                case 0x10ebc:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x10eb4;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                case 0x10edc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10ee4:
                    r2 = r4 + 1;
                case 0x10ee8:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x10ee8;
                        continue;
                    }
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=r31;
                    return;
                case 0x10f00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x10f28;
                    return;
                case 0x10f28:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    pc = 0x10f30;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f34;
                        return;
                    }
                case 0x10f34:
                    r2 = r0 + 1;
                    r3 = r0 + 1;
                    pc = 0x10f3c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f40;
                        return;
                    }
                case 0x10f40:
                case 0x11000:
                    pc=0x11000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11000() throws ExecutionException { /* 0x11000 - 0x11200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r28 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1107c;
                        continue;
                    }
                case 0x11018:
                    writePages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x11024;
                    pc=0x10000;
                    run_10000(); return;
                case 0x11024:
                    r4 = 1 << 16;
                    r4 = r4 + 56;
                    /* Next insn is delay slot */ 
                    r31=0x11034;
                    pc=0x28000;
                    run_28000(); return;
                case 0x11034:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1108c;
                        continue;
                    }
                    r2 = r16 + 4;
                    r4 = r0 + r0;
                case 0x1104c:
                    r2 = r2 + 4;
                    r6 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1104c;
                        continue;
                    }
                case 0x11060:
                    r6 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11070;
                    pc=0x1a400;
                    run_1a400(); return;
                case 0x11070:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1107c;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1107c:
                    r2 = 7 << 16;
                    r28 = r2 + -21232;
                    /* Next insn is delay slot */ 
                    pc=0x11018;
                    continue;
                case 0x1108c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11060;
                    continue;
                case 0x11200:
                    pc=0x11200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11200() throws ExecutionException { /* 0x11200 - 0x11400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11200:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + -8192;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11240;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x11240:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11258;
                    pc=0x36000;
                    run_36000(); return;
                case 0x11258:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x112c0;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x112ac:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x112c0:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11324;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x11324;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11324:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x11330;
                    pc=0x36200;
                    run_36200(); return;
                case 0x11330:
                    /* Next insn is delay slot */ 
                    pc=0x112ac;
                    continue;
                case 0x11400:
                    pc=0x11400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11400() throws ExecutionException { /* 0x11400 - 0x11600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11400:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + -8192;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11440;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x11440:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11458;
                    pc=0x36000;
                    run_36000(); return;
                case 0x11458:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x114b8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x114ac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x114b8;
                    pc=0x28800;
                    run_28800(); return;
                case 0x114b8:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11510;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x11510;
                        continue;
                    }
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x114ac;
                    continue;
                case 0x11510:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x1151c;
                    pc=0x36200;
                    run_36200(); return;
                case 0x1151c:
                    /* Next insn is delay slot */ 
                    pc=0x114ac;
                    continue;
                case 0x11600:
                    pc=0x11600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11600() throws ExecutionException { /* 0x11600 - 0x11800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11600:
                    r29 = r29 + -32;
                    r2 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + -8184;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11640;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x11640:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11658;
                    pc=0x36000;
                    run_36000(); return;
                case 0x11658:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x116b8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x116ac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x116b8;
                    pc=0x28800;
                    run_28800(); return;
                case 0x116b8:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11710;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x11710;
                        continue;
                    }
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x116ac;
                    continue;
                case 0x11710:
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x1171c;
                    pc=0x36200;
                    run_36200(); return;
                case 0x1171c:
                    /* Next insn is delay slot */ 
                    pc=0x116ac;
                    continue;
                case 0x11800:
                    pc=0x11800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11800() throws ExecutionException { /* 0x11800 - 0x11a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11800:
                    r2 = r0 + 1;
                    writePages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11a00:
                    pc=0x11a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11a00() throws ExecutionException { /* 0x11a00 - 0x11c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11a00:
                    r2 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11a28;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff] = r5;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11a28:
                    r4 = 6 << 16;
                    r4 = r4 + -8160;
                    /* Next insn is delay slot */ 
                    r31=0x11a38;
                    pc=0x11400;
                    run_11400(); return;
                case 0x11a38:
                case 0x11c00:
                    pc=0x11c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11c00() throws ExecutionException { /* 0x11c00 - 0x11e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11c00:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11c24;
                    pc=0x21800;
                    run_21800(); return;
                case 0x11c24:
                    r5 = 6 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + -8124;
                    r6 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11c40;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x11c40:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11c4c;
                    pc=0x28800;
                    run_28800(); return;
                case 0x11c4c:
                case 0x11e00:
                    pc=0x11e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11e00() throws ExecutionException { /* 0x11e00 - 0x12000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11e00:
                    r4 = 6 << 16;
                    r5 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r4 = r4 + -8116;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11e1c;
                    pc=0x2f600;
                    run_2f600(); return;
                case 0x11e1c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11e28;
                    pc=0x28800;
                    run_28800(); return;
                case 0x11e28:
                case 0x12000:
                    pc=0x12000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12000() throws ExecutionException { /* 0x12000 - 0x12200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12000:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1201c;
                    pc=0x21200;
                    run_21200(); return;
                case 0x1201c:
                    r3 = r0 + -1;
                    writePages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff] = r2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1204c;
                        continue;
                    }
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x12060;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1204c:
                    r4 = 6 << 16;
                    r4 = r4 + -4472;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12060;
                    pc=0x11400;
                    run_11400(); return;
                case 0x12060:
                    r4 = 6 << 16;
                    r4 = r4 + -4444;
                    /* Next insn is delay slot */ 
                    r31=0x12070;
                    pc=0x11400;
                    run_11400(); return;
                case 0x12070:
                case 0x12200:
                    pc=0x12200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12200() throws ExecutionException { /* 0x12200 - 0x12400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12200:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = 6 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x1221c;
                    pc=0x1da00;
                    run_1da00(); return;
                case 0x1221c:
                    r5 = 6 << 16;
                    r4 = r2 + r0;
                    r6 = r17 + -4380;
                    r5 = r5 + -4392;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12238;
                    pc=0x1e000;
                    run_1e000(); return;
                case 0x12238:
                    r5 = 6 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -4372;
                    /* Next insn is delay slot */ 
                    r31=0x1224c;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1224c:
                    r4 = r16 + r0;
                    r5 = r17 + -4380;
                    /* Next insn is delay slot */ 
                    r31=0x1225c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1225c:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1226c;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1226c:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12278;
                    pc=0x30200;
                    run_30200(); return;
                case 0x12278:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12284;
                    pc=0x28800;
                    run_28800(); return;
                case 0x12284:
                case 0x12400:
                    pc=0x12400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12400() throws ExecutionException { /* 0x12400 - 0x12600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r0 + r0;
                    r17 = r0 + 29;
                case 0x12418:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12424;
                    pc=0x21600;
                    run_21600(); return;
                case 0x12424:
                    r4 = r2 + r0;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x12434;
                    pc=0x30200;
                    run_30200(); return;
                case 0x12434:
                    if(r16 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x12418;
                        continue;
                    }
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12448;
                    pc=0x28800;
                    run_28800(); return;
                case 0x12448:
                case 0x12600:
                    pc=0x12600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12600() throws ExecutionException { /* 0x12600 - 0x12800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12600:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r17 = r5 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r4 + r0;
                    r19 = r5 + r0;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r21 = r0 + 44;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12660;
                        continue;
                    }
                case 0x12644:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x12660;
                        continue;
                    }
                    r17 = r17 + 1;
                case 0x12650:
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12644;
                        continue;
                    }
                case 0x12660:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r18 = r17 + -1;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r18 = r18 - r19;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x126f8;
                        continue;
                    }
                    r20 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1267c:
                    r3 = r3 << 2;
                    r4 = r18 + 1;
                    r20 = r20 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x12690;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x12690:
                    r4 = r2 + r0;
                    r6 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x126a4;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x126a4:
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x12744;
                        continue;
                    }
                    r19 = r17 + r0;
                    r17 = r17 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x12650;
                    continue;
                case 0x126f8:
                    r22 = r2 + 10;
                    r4 = r22 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x12708;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x12708:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12724;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x12724:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12730;
                    pc=0x22000;
                    run_22000(); return;
                case 0x12730:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r20;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r22;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1267c;
                    continue;
                case 0x12744:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12800:
                    pc=0x12800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12800() throws ExecutionException { /* 0x12800 - 0x12a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12800:
                    r4 = 6 << 16;
                    r4 = r4 + 12036;
                    /* Next insn is delay slot */ 
                    pc=0x12600;
                    run_12600(); return;
                case 0x12a00:
                    pc=0x12a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12a00() throws ExecutionException { /* 0x12a00 - 0x12c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12a00:
                    r4 = 6 << 16;
                    r4 = r4 + 12064;
                    /* Next insn is delay slot */ 
                    pc=0x12600;
                    run_12600(); return;
                case 0x12c00:
                    pc=0x12c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12c00() throws ExecutionException { /* 0x12c00 - 0x12e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12c00:
                    r4 = 6 << 16;
                    r4 = r4 + 11980;
                    /* Next insn is delay slot */ 
                    pc=0x12600;
                    run_12600(); return;
                case 0x12e00:
                    pc=0x12e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12e00() throws ExecutionException { /* 0x12e00 - 0x13000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12e00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = 6 << 16;
                    r20 = r20 + 11980;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    r18 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12f0c;
                        continue;
                    }
                    r21 = readPages[(r20+24)>>>12][((r20+24)>>>2)&0x3ff];
                case 0x12e40:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12ef0;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12ea8;
                        continue;
                    }
                    r16 = r21 + r0;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12e70;
                    continue;
                case 0x12e60:
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r17 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x12ea8;
                        continue;
                    }
                case 0x12e70:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12e80;
                    pc=0x32800;
                    run_32800(); return;
                case 0x12e80:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12e60;
                        continue;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + -4352;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12e9c;
                    pc=0x11200;
                    run_11200(); return;
                case 0x12e9c:
                    r21 = readPages[(r20+24)>>>12][((r20+24)>>>2)&0x3ff];
                    r18 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                case 0x12ea8:
                    r2 = r18 + 1;
                    r4 = r19 + r0;
                    r18 = r18 << 2;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x12ec4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x12ec4:
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                case 0x12ec8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12ef0:
                    r2 = r18 + 1;
                    r18 = r18 << 2;
                    r21 = r21 + r18;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x12ec8;
                    continue;
                case 0x12f0c:
                    r18 = r18 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x12f1c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x12f1c:
                    r6 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    r5 = readPages[(r20+24)>>>12][((r20+24)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12f38;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x12f38:
                    r4 = readPages[(r20+24)>>>12][((r20+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12f44;
                    pc=0x22000;
                    run_22000(); return;
                case 0x12f44:
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r18;
                    writePages[(r20+24)>>>12][((r20+24)>>>2)&0x3ff] = r21;
                    r18 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x12e40;
                    continue;
                case 0x13000:
                    pc=0x13000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13000() throws ExecutionException { /* 0x13000 - 0x13200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13000:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x130ac;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1303c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13084;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x13060;
                    pc=0x22200;
                    run_22200(); return;
                case 0x13060:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13084:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x130ac:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x130bc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x130bc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x130d8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x130d8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x130e4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x130e4:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1303c;
                    continue;
                case 0x13200:
                    pc=0x13200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13200() throws ExecutionException { /* 0x13200 - 0x13400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13200:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x132ac;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1323c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13284;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x13260;
                    pc=0x22200;
                    run_22200(); return;
                case 0x13260:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13284:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x132ac:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x132bc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x132bc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x132d8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x132d8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x132e4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x132e4:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1323c;
                    continue;
                case 0x13400:
                    pc=0x13400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13400() throws ExecutionException { /* 0x13400 - 0x13600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13400:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r18 = r6 + r0;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r31=0x13430;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x13430:
                    r4 = r18 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13440;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x13440:
                    r2 = r17 + r2;
                    r4 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x13450;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x13450:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13464;
                    pc=0x32200;
                    run_32200(); return;
                case 0x13464:
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13474;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x13474:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13480;
                    pc=0x22200;
                    run_22200(); return;
                case 0x13480:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x134fc;
                        continue;
                    }
                case 0x1349c:
                    r4 = r2 + 1;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r2 = r2 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x134ec;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r3 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x134c4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x134c4:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x134c8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x22000;
                    run_22000(); return;
                case 0x134ec:
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x134c8;
                    continue;
                case 0x134fc:
                    r18 = r3 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1350c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1350c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13528;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x13528:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13534;
                    pc=0x22000;
                    run_22000(); return;
                case 0x13534:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1349c;
                    continue;
                case 0x13600:
                    pc=0x13600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13600() throws ExecutionException { /* 0x13600 - 0x13800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13600:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x136ac;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1363c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13684;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x13660;
                    pc=0x22200;
                    run_22200(); return;
                case 0x13660:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13684:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x136ac:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x136bc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x136bc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x136d8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x136d8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x136e4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x136e4:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1363c;
                    continue;
                case 0x13800:
                    pc=0x13800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13800() throws ExecutionException { /* 0x13800 - 0x13a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13800:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x13828;
                    pc=0x21600;
                    run_21600(); return;
                case 0x13828:
                    r17 = r2 + r0;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13948;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x13848:
                    r2 = r3 + 1;
                    r4 = 6 << 16;
                    r3 = r3 << 2;
                    r4 = r4 + -4312;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r18 = r18 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x13868;
                    pc=0x22200;
                    run_22200(); return;
                case 0x13868:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x138f8;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x13888:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x138d0;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x138ac;
                    pc=0x22200;
                    run_22200(); return;
                case 0x138ac:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x138d0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x138f8:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x13908;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x13908:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13924;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x13924:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13930;
                    pc=0x22000;
                    run_22000(); return;
                case 0x13930:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13888;
                    continue;
                case 0x13948:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x13958;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x13958:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13974;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x13974:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13980;
                    pc=0x22000;
                    run_22000(); return;
                case 0x13980:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13848;
                    continue;
                case 0x13a00:
                    pc=0x13a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13a00() throws ExecutionException { /* 0x13a00 - 0x13c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13a00:
                    addr=r28+-32492;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ad4;
                        continue;
                    }
                case 0x13a28:
                    r16 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    r17 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13a3c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x13a3c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13bf4;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ab0;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r29 + 16;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13a60;
                    pc=0x38e00;
                    run_38e00(); return;
                case 0x13a60:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b80;
                        continue;
                    }
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r6 & 255;
                    r2 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ba8;
                        continue;
                    }
                case 0x13a80:
                    r4 = r2 >> 8;
                    r4 = r4 & 255;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13bc0;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13ab0:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13ac0;
                    pc=0x28600;
                    run_28600(); return;
                case 0x13ac0:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13bc8;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13a80;
                    continue;
                case 0x13ad4:
                    r4 = 6 << 16;
                    r4 = r4 + -4308;
                    /* Next insn is delay slot */ 
                    r31=0x13ae4;
                    pc=0x2f600;
                    run_2f600(); return;
                case 0x13ae4:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r18 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b6c;
                        continue;
                    }
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b6c;
                        continue;
                    }
                    r19 = 6 << 16;
                    r16 = r0 + r0;
                    r19 = r19 + -4296;
                    /* Next insn is delay slot */ 
                    pc=0x13b48;
                    continue;
                case 0x13b2c:
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b6c;
                        continue;
                    }
                case 0x13b48:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13b58;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x13b58:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b2c;
                        continue;
                    }
                case 0x13b6c:
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x13b78;
                    pc=0x2fe00;
                    run_2fe00(); return;
                case 0x13b78:
                    /* Next insn is delay slot */ 
                    pc=0x13a28;
                    continue;
                case 0x13b80:
                    /* Next insn is delay slot */ 
                    r31=0x13b88;
                    pc=0x28400;
                    run_28400(); return;
                case 0x13b88:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13b94;
                    pc=0x33200;
                    run_33200(); return;
                case 0x13b94:
                    r4 = 6 << 16;
                    r4 = r4 + -4252;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13ba8;
                    pc=0x11400;
                    run_11400(); return;
                case 0x13ba8:
                    r4 = 6 << 16;
                    r4 = r4 + -4216;
                    r5 = r16 + r0;
                    r6 = r6 & 127;
                    /* Next insn is delay slot */ 
                    r31=0x13bc0;
                    pc=0x11400;
                    run_11400(); return;
                case 0x13bc0:
                    /* Next insn is delay slot */ 
                    r31=0x13bc8;
                    pc=0x28800;
                    run_28800(); return;
                case 0x13bc8:
                    /* Next insn is delay slot */ 
                    r31=0x13bd0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x13bd0:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13bdc;
                    pc=0x33200;
                    run_33200(); return;
                case 0x13bdc:
                    r4 = 6 << 16;
                    r4 = r4 + -4276;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13bf4;
                    pc=0x11400;
                    run_11400(); return;
                case 0x13bf4:
                    /* Next insn is delay slot */ 
                    r31=0x13bfc;
                    pc=0x28400;
                    run_28400(); return;
                case 0x13bfc:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x13c00:
                    pc=0x13c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13c00() throws ExecutionException { /* 0x13c00 - 0x13e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13c00:
                    /* Next insn is delay slot */ 
                    r31=0x13c08;
                    pc=0x33200;
                    run_33200(); return;
                case 0x13c08:
                    r4 = 6 << 16;
                    r4 = r4 + -4292;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13c1c;
                    pc=0x11400;
                    run_11400(); return;
                case 0x13c1c:
                case 0x13e00:
                    pc=0x13e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13e00() throws ExecutionException { /* 0x13e00 - 0x14000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13e00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13f3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x13e3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4176;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x13e5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x13e5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13eec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x13e7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ec4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x13ea0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x13ea0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13ec4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13eec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x13efc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x13efc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13f18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x13f18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13f24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x13f24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13e7c;
                    continue;
                case 0x13f3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x13f4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x13f4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13f68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x13f68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13f74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x13f74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x13e3c;
                    continue;
                case 0x14000:
                    pc=0x14000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14000() throws ExecutionException { /* 0x14000 - 0x14200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14000:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1413c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1403c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4160;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1405c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1405c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x140ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1407c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x140c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x140a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x140a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x140c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x140ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x140fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x140fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14118;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14118:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14124;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14124:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1407c;
                    continue;
                case 0x1413c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1414c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1414c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14168;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14168:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14174;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14174:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1403c;
                    continue;
                case 0x14200:
                    pc=0x14200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14200() throws ExecutionException { /* 0x14200 - 0x14400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14200:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1433c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1423c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4148;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1425c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1425c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x142ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1427c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x142c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x142a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x142a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x142c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x142ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x142fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x142fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14318;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14318:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14324;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14324:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1427c;
                    continue;
                case 0x1433c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1434c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1434c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14368;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14368:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14374;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14374:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1423c;
                    continue;
                case 0x14400:
                    pc=0x14400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14400() throws ExecutionException { /* 0x14400 - 0x14600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14400:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1453c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1443c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4132;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1445c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1445c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x144ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1447c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x144c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x144a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x144a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x144c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x144ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x144fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x144fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14518;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14518:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14524;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14524:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1447c;
                    continue;
                case 0x1453c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1454c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1454c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14568;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14568:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14574;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14574:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1443c;
                    continue;
                case 0x14600:
                    pc=0x14600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14600() throws ExecutionException { /* 0x14600 - 0x14800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14600:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1473c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1463c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4112;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1465c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1465c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x146ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1467c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x146c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x146a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x146a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x146c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x146ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x146fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x146fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14718;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14718:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14724;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14724:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1467c;
                    continue;
                case 0x1473c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1474c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1474c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14768;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14768:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14774;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14774:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1463c;
                    continue;
                case 0x14800:
                    pc=0x14800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14800() throws ExecutionException { /* 0x14800 - 0x14a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14800:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1493c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1483c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4096;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1485c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1485c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1487c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x148a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x148a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x148c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x148ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x148fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x148fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14918;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14918:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14924;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14924:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1487c;
                    continue;
                case 0x1493c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1494c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1494c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14968;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14968:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14974;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14974:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1483c;
                    continue;
                case 0x14a00:
                    pc=0x14a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14a00() throws ExecutionException { /* 0x14a00 - 0x14c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14a00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a74;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x14a34:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r3 = r3 << 2;
                    r4 = r4 + -4092;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x14a54;
                    pc=0x22200;
                    run_22200(); return;
                case 0x14a54:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14a74:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x14a84;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x14a84:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14aa0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14aa0:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14aac;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14aac:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x14a34;
                    continue;
                case 0x14c00:
                    pc=0x14c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14c00() throws ExecutionException { /* 0x14c00 - 0x14e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14c00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c74;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x14c34:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r3 = r3 << 2;
                    r4 = r4 + -4088;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x14c54;
                    pc=0x22200;
                    run_22200(); return;
                case 0x14c54:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14c74:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x14c84;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x14c84:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14ca0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14ca0:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14cac;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14cac:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x14c34;
                    continue;
                case 0x14e00:
                    pc=0x14e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14e00() throws ExecutionException { /* 0x14e00 - 0x15000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14e00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14e74;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x14e34:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r3 = r3 << 2;
                    r4 = r4 + -4072;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x14e54;
                    pc=0x22200;
                    run_22200(); return;
                case 0x14e54:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14e74:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x14e84;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x14e84:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x14ea0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x14ea0:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14eac;
                    pc=0x22000;
                    run_22000(); return;
                case 0x14eac:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x14e34;
                    continue;
                case 0x15000:
                    pc=0x15000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15000() throws ExecutionException { /* 0x15000 - 0x15200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15000:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15074;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x15034:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r3 = r3 << 2;
                    r4 = r4 + -4068;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x15054;
                    pc=0x22200;
                    run_22200(); return;
                case 0x15054:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15074:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x15084;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x15084:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x150a0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x150a0:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x150ac;
                    pc=0x22000;
                    run_22000(); return;
                case 0x150ac:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15034;
                    continue;
                case 0x15200:
                    pc=0x15200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15200() throws ExecutionException { /* 0x15200 - 0x15400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15200:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15274;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x15234:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r3 = r3 << 2;
                    r4 = r4 + -4064;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x15254;
                    pc=0x22200;
                    run_22200(); return;
                case 0x15254:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15274:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x15284;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x15284:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x152a0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x152a0:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x152ac;
                    pc=0x22000;
                    run_22000(); return;
                case 0x152ac:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15234;
                    continue;
                case 0x15400:
                    pc=0x15400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15400() throws ExecutionException { /* 0x15400 - 0x15600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15400:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1553c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1543c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4060;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1545c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1545c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1547c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x154a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x154a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x154c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x154ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x154fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x154fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15518;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15518:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15524;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15524:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1547c;
                    continue;
                case 0x1553c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1554c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1554c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15568;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15568:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15574;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15574:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1543c;
                    continue;
                case 0x15600:
                    pc=0x15600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15600() throws ExecutionException { /* 0x15600 - 0x15800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15600:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1573c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1563c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4048;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1565c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1565c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1567c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x156a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x156a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x156c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x156ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x156fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x156fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15718;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15718:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15724;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15724:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1567c;
                    continue;
                case 0x1573c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1574c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1574c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15768;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15768:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15774;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15774:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1563c;
                    continue;
                case 0x15800:
                    pc=0x15800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15800() throws ExecutionException { /* 0x15800 - 0x15a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15800:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1593c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1583c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4028;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1585c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1585c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1587c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x158a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x158a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x158c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x158ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x158fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x158fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15918;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15918:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15924;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15924:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1587c;
                    continue;
                case 0x1593c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1594c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1594c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15968;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15968:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15974;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15974:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1583c;
                    continue;
                case 0x15a00:
                    pc=0x15a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15a00() throws ExecutionException { /* 0x15a00 - 0x15c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15a00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15b3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x15a3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4024;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x15a5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x15a5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15aec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x15a7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ac4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x15aa0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x15aa0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15ac4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15aec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x15afc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x15afc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15b18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15b18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15b24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15b24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15a7c;
                    continue;
                case 0x15b3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x15b4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x15b4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15b68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15b68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15b74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15b74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x15a3c;
                    continue;
                case 0x15c00:
                    pc=0x15c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15c00() throws ExecutionException { /* 0x15c00 - 0x15e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15c00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x15c3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4020;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x15c5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x15c5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15cec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x15c7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15cc4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x15ca0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x15ca0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15cc4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15cec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x15cfc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x15cfc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15d18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15d18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15d24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15d24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15c7c;
                    continue;
                case 0x15d3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x15d4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x15d4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15d68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15d68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15d74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15d74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x15c3c;
                    continue;
                case 0x15e00:
                    pc=0x15e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15e00() throws ExecutionException { /* 0x15e00 - 0x16000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15e00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x15e3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4016;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x15e5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x15e5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15eec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x15e7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ec4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x15ea0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x15ea0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15ec4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15eec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x15efc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x15efc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15f18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15f18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15f24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15f24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15e7c;
                    continue;
                case 0x15f3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x15f4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x15f4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15f68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x15f68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15f74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x15f74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x15e3c;
                    continue;
                case 0x16000:
                    pc=0x16000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16000() throws ExecutionException { /* 0x16000 - 0x16200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16000:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x160c8;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x16038:
                    r4 = r3 + 1;
                    r17 = 6 << 16;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -4000;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x16058;
                    pc=0x22200;
                    run_22200(); return;
                case 0x16058:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16118;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x16080:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -4000;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1609c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1609c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r28+-32492;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x160c8:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x160d8;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x160d8:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x160f4;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x160f4:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16100;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16100:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16038;
                    continue;
                case 0x16118:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x16128;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x16128:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16144;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16144:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16150;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16150:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16080;
                    continue;
                case 0x16200:
                    pc=0x16200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16200() throws ExecutionException { /* 0x16200 - 0x16400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16200:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1633c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1623c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3996;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1625c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1625c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x162ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1627c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x162c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x162a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x162a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x162c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x162ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x162fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x162fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16318;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16318:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16324;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16324:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1627c;
                    continue;
                case 0x1633c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1634c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1634c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16368;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16368:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16374;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16374:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1623c;
                    continue;
                case 0x16400:
                    pc=0x16400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16400() throws ExecutionException { /* 0x16400 - 0x16600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16400:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1653c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1643c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3984;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1645c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1645c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x164ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1647c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x164c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x164a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x164a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x164c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x164ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x164fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x164fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16518;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16518:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16524;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16524:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1647c;
                    continue;
                case 0x1653c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1654c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1654c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16568;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16568:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16574;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16574:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1643c;
                    continue;
                case 0x16600:
                    pc=0x16600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16600() throws ExecutionException { /* 0x16600 - 0x16800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16600:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1673c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1663c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3976;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1665c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1665c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x166ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1667c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x166c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x166a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x166a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x166c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x166ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x166fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x166fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16718;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16718:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16724;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16724:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1667c;
                    continue;
                case 0x1673c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1674c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1674c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16768;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16768:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16774;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16774:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1663c;
                    continue;
                case 0x16800:
                    pc=0x16800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16800() throws ExecutionException { /* 0x16800 - 0x16a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16800:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1693c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1683c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3964;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1685c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1685c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1687c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x168c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x168a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x168a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x168c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x168ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x168fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x168fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16918;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16918:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16924;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16924:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1687c;
                    continue;
                case 0x1693c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1694c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1694c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16968;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16968:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16974;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16974:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1683c;
                    continue;
                case 0x16a00:
                    pc=0x16a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16a00() throws ExecutionException { /* 0x16a00 - 0x16c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16a00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16b3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x16a3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3960;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16a5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x16a5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16aec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x16a7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ac4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x16aa0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x16aa0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16ac4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16aec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x16afc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x16afc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16b18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16b18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16b24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16b24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16a7c;
                    continue;
                case 0x16b3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x16b4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x16b4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16b68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16b68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16b74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16b74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x16a3c;
                    continue;
                case 0x16c00:
                    pc=0x16c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16c00() throws ExecutionException { /* 0x16c00 - 0x16e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16c00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16d3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x16c3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3952;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16c5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x16c5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16cec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x16c7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16cc4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x16ca0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x16ca0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16cc4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16cec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x16cfc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x16cfc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16d18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16d18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16d24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16d24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16c7c;
                    continue;
                case 0x16d3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x16d4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x16d4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16d68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16d68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16d74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16d74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x16c3c;
                    continue;
                case 0x16e00:
                    pc=0x16e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16e00() throws ExecutionException { /* 0x16e00 - 0x17000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16e00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x16e3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3948;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x16e5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x16e5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16eec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x16e7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ec4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x16ea0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x16ea0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16ec4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16eec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x16efc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x16efc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16f18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16f18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16f24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16f24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16e7c;
                    continue;
                case 0x16f3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x16f4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x16f4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16f68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x16f68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16f74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x16f74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x16e3c;
                    continue;
                case 0x17000:
                    pc=0x17000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17000() throws ExecutionException { /* 0x17000 - 0x17200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17000:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1713c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1703c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4096;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1705c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1705c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x170ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1707c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x170c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x170a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x170a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x170c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x170ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x170fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x170fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17118;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17118:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17124;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17124:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1707c;
                    continue;
                case 0x1713c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1714c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1714c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17168;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17168:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17174;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17174:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1703c;
                    continue;
                case 0x17200:
                    pc=0x17200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17200() throws ExecutionException { /* 0x17200 - 0x17400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17200:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1733c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1723c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3936;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1725c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1725c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x172ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1727c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x172c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x172a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x172a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x172c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x172ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x172fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x172fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17318;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17318:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17324;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17324:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1727c;
                    continue;
                case 0x1733c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1734c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1734c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17368;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17368:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17374;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17374:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1723c;
                    continue;
                case 0x17400:
                    pc=0x17400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17400() throws ExecutionException { /* 0x17400 - 0x17600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17400:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17504;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17438:
                    r4 = r3 + 1;
                    r17 = 6 << 16;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -3924;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x17458;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17458:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x175a4;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17480:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -3924;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1749c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1749c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17554;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x174c4:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -3924;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x174e0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x174e0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17504:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17514;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17514:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17530;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17530:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1753c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1753c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17438;
                    continue;
                case 0x17554:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17564;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17564:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17580;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17580:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1758c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1758c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x174c4;
                    continue;
                case 0x175a4:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x175b4;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x175b4:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x175d0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x175d0:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x175dc;
                    pc=0x22000;
                    run_22000(); return;
                case 0x175dc:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17480;
                    continue;
                case 0x17600:
                    pc=0x17600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17600() throws ExecutionException { /* 0x17600 - 0x17800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17600:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17748;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17638:
                    r4 = r3 + 1;
                    r17 = 6 << 16;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -3920;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x17658;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17658:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17838;
                        run_17800(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17680:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -3920;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1769c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1769c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x177e8;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x176c4:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -3920;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x176e0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x176e0:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 11980;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17798;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17708:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    r4 = r17 + -3920;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x17724;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17724:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17748:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17758;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17758:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17774;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17774:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17780;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17780:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17638;
                    continue;
                case 0x17798:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x177a8;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x177a8:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x177c4;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x177c4:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x177d0;
                    pc=0x22000;
                    run_22000(); return;
                case 0x177d0:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17708;
                    continue;
                case 0x177e8:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x177f8;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x177f8:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17800:
                    pc=0x17800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17800() throws ExecutionException { /* 0x17800 - 0x17a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17800:
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17814;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17814:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17820;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17820:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x176c4;
                    run_17600(); return;
                case 0x17838:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17848;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17848:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17864;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17864:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17870;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17870:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17680;
                    run_17600(); return;
                case 0x17a00:
                    pc=0x17a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17a00() throws ExecutionException { /* 0x17a00 - 0x17c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17a00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17b3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17a3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3916;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17a5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17a5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17aec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17a7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ac4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x17aa0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17aa0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17ac4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17aec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17afc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17afc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17b18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17b18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17b24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17b24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17a7c;
                    continue;
                case 0x17b3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17b4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17b4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17b68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17b68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17b74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17b74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x17a3c;
                    continue;
                case 0x17c00:
                    pc=0x17c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17c00() throws ExecutionException { /* 0x17c00 - 0x17e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17c00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17d3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17c3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3900;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17c5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17c5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17cec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17c7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17cc4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x17ca0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17ca0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17cc4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17cec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17cfc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17cfc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17d18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17d18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17d24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17d24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17c7c;
                    continue;
                case 0x17d3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17d4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17d4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17d68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17d68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17d74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17d74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x17c3c;
                    continue;
                case 0x17e00:
                    pc=0x17e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17e00() throws ExecutionException { /* 0x17e00 - 0x18000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17e00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f3c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17e3c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3888;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x17e5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17e5c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17eec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x17e7c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ec4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x17ea0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x17ea0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17ec4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17eec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17efc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17efc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17f18;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17f18:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17f24;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17f24:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x17e7c;
                    continue;
                case 0x17f3c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x17f4c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x17f4c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17f68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x17f68:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17f74;
                    pc=0x22000;
                    run_22000(); return;
                case 0x17f74:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x17e3c;
                    continue;
                case 0x18000:
                    pc=0x18000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18000() throws ExecutionException { /* 0x18000 - 0x18200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18000:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1813c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1803c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3876;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1805c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1805c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x180ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1807c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x180c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x180a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x180a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x180c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x180ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x180fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x180fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18118;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18118:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18124;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18124:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1807c;
                    continue;
                case 0x1813c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1814c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1814c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18168;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18168:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18174;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18174:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1803c;
                    continue;
                case 0x18200:
                    pc=0x18200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18200() throws ExecutionException { /* 0x18200 - 0x18400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18200:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1833c;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1823c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -4024;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1825c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1825c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x182ec;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1827c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x182c4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x182a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x182a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x182c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x182ec:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x182fc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x182fc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18318;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18318:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18324;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18324:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1827c;
                    continue;
                case 0x1833c:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1834c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1834c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18368;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18368:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18374;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18374:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1823c;
                    continue;
                case 0x18400:
                    pc=0x18400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18400() throws ExecutionException { /* 0x18400 - 0x18600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18400:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18544;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1843c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3856;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1845c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1845c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x184f4;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1847c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x184c8;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x184a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x184a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x184c8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x184f4:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18504;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18504:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18520;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18520:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1852c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1852c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1847c;
                    continue;
                case 0x18544:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18554;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18554:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18570;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18570:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1857c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1857c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1843c;
                    continue;
                case 0x18600:
                    pc=0x18600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18600() throws ExecutionException { /* 0x18600 - 0x18800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18600:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18744;
                        continue;
                    }
                    r18 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1863c:
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3836;
                    r3 = r3 << 2;
                    r18 = r18 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1865c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1865c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x186f4;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x1867c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x186c8;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x186a0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x186a0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x186c8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x186f4:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18704;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18704:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18720;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18720:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1872c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1872c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1867c;
                    continue;
                case 0x18744:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18754;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18754:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18770;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18770:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1877c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1877c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1863c;
                    continue;
                case 0x18800:
                    pc=0x18800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18800() throws ExecutionException { /* 0x18800 - 0x18a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18800:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ad0;
                        run_18a00(); return;
                    }
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x18840:
                    r18 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r18 + -3820;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18860;
                    pc=0x22200;
                    run_22200(); return;
                case 0x18860:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a80;
                        run_18a00(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x18880:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18954;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x188a4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x188a4:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1897c;
                        continue;
                    }
                case 0x188c8:
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = r3 + 1;
                    r4 = r18 + -3820;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x188e8;
                    pc=0x22200;
                    run_22200(); return;
                case 0x188e8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x189f8;
                        continue;
                    }
                case 0x18904:
                    r4 = r3 + 1;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a54;
                        run_18a00(); return;
                    }
                case 0x1891c:
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1892c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1892c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18954:
                    r16 = 6 << 16;
                    r2 = r2 + r3;
                    r16 = r16 + 12008;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188c8;
                        continue;
                    }
                case 0x1897c:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1898c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1898c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x189a8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x189a8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x189b4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x189b4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    r2 = r3 + 1;
                    r4 = r18 + -3820;
                    r3 = r3 << 2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x189dc;
                    pc=0x22200;
                    run_22200(); return;
                case 0x189dc:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18904;
                        continue;
                    }
                case 0x189f8:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                case 0x18a00:
                    pc=0x18a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18a00() throws ExecutionException { /* 0x18a00 - 0x18c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18a00:
                    /* Next insn is delay slot */ 
                    r31=0x18a08;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18a08:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18a24;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18a24:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18a30;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18a30:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    r4 = r3 + 1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r2 = r18 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1891c;
                        run_18800(); return;
                    }
                case 0x18a54:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18a80:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18a90;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18a90:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18aac;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18aac:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18ab8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18ab8:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18880;
                    run_18800(); return;
                case 0x18ad0:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18ae0;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18ae0:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18afc;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18afc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18b08;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18b08:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x18840;
                    run_18800(); return;
                case 0x18c00:
                    pc=0x18c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18c00() throws ExecutionException { /* 0x18c00 - 0x18e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18c00:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ed0;
                        run_18e00(); return;
                    }
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x18c40:
                    r18 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r18 + -3808;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18c60;
                    pc=0x22200;
                    run_22200(); return;
                case 0x18c60:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e80;
                        run_18e00(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x18c80:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d54;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x18ca4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x18ca4:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d7c;
                        continue;
                    }
                case 0x18cc8:
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = r3 + 1;
                    r4 = r18 + -3808;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18ce8;
                    pc=0x22200;
                    run_22200(); return;
                case 0x18ce8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18df8;
                        continue;
                    }
                case 0x18d04:
                    r4 = r3 + 1;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e54;
                        run_18e00(); return;
                    }
                case 0x18d1c:
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x18d2c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x18d2c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18d54:
                    r16 = 6 << 16;
                    r2 = r2 + r3;
                    r16 = r16 + 12064;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18cc8;
                        continue;
                    }
                case 0x18d7c:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18d8c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18d8c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18da8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18da8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18db4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18db4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    r2 = r3 + 1;
                    r4 = r18 + -3808;
                    r3 = r3 << 2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x18ddc;
                    pc=0x22200;
                    run_22200(); return;
                case 0x18ddc:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d04;
                        continue;
                    }
                case 0x18df8:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                case 0x18e00:
                    pc=0x18e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18e00() throws ExecutionException { /* 0x18e00 - 0x19000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18e00:
                    /* Next insn is delay slot */ 
                    r31=0x18e08;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18e08:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18e24;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18e24:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18e30;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18e30:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    r4 = r3 + 1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r2 = r18 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d1c;
                        run_18c00(); return;
                    }
                case 0x18e54:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18e80:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18e90;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18e90:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18eac;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18eac:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18eb8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18eb8:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18c80;
                    run_18c00(); return;
                case 0x18ed0:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x18ee0;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18ee0:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18efc;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x18efc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18f08;
                    pc=0x22000;
                    run_22000(); return;
                case 0x18f08:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x18c40;
                    run_18c00(); return;
                case 0x19000:
                    pc=0x19000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19000() throws ExecutionException { /* 0x19000 - 0x19200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19000:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x192d0;
                        run_19200(); return;
                    }
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x19040:
                    r18 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r18 + -3800;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19060;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19060:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19280;
                        run_19200(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x19080:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19154;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x190a4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x190a4:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1917c;
                        continue;
                    }
                case 0x190c8:
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = r3 + 1;
                    r4 = r18 + -3800;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x190e8;
                    pc=0x22200;
                    run_22200(); return;
                case 0x190e8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x191f8;
                        continue;
                    }
                case 0x19104:
                    r4 = r3 + 1;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19254;
                        run_19200(); return;
                    }
                case 0x1911c:
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1912c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1912c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19154:
                    r16 = 6 << 16;
                    r2 = r2 + r3;
                    r16 = r16 + 12008;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x190c8;
                        continue;
                    }
                case 0x1917c:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1918c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1918c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x191a8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x191a8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x191b4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x191b4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    r2 = r3 + 1;
                    r4 = r18 + -3800;
                    r3 = r3 << 2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x191dc;
                    pc=0x22200;
                    run_22200(); return;
                case 0x191dc:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19104;
                        continue;
                    }
                case 0x191f8:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                case 0x19200:
                    pc=0x19200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19200() throws ExecutionException { /* 0x19200 - 0x19400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19200:
                    /* Next insn is delay slot */ 
                    r31=0x19208;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19208:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19224;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x19224:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19230;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19230:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    r4 = r3 + 1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r2 = r18 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1911c;
                        run_19000(); return;
                    }
                case 0x19254:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19280:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19290;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19290:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x192ac;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x192ac:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x192b8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x192b8:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19080;
                    run_19000(); return;
                case 0x192d0:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x192e0;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x192e0:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x192fc;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x192fc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19308;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19308:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19040;
                    run_19000(); return;
                case 0x19400:
                    pc=0x19400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19400() throws ExecutionException { /* 0x19400 - 0x19600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19400:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x196d0;
                        run_19600(); return;
                    }
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x19440:
                    r18 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r18 + -3788;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19460;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19460:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19680;
                        run_19600(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x19480:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19554;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x194a4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x194a4:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12008;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1957c;
                        continue;
                    }
                case 0x194c8:
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = r3 + 1;
                    r4 = r18 + -3788;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x194e8;
                    pc=0x22200;
                    run_22200(); return;
                case 0x194e8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x195f8;
                        continue;
                    }
                case 0x19504:
                    r4 = r3 + 1;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19654;
                        run_19600(); return;
                    }
                case 0x1951c:
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1952c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1952c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19554:
                    r16 = 6 << 16;
                    r2 = r2 + r3;
                    r16 = r16 + 12008;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x194c8;
                        continue;
                    }
                case 0x1957c:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1958c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1958c:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x195a8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x195a8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x195b4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x195b4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    r2 = r3 + 1;
                    r4 = r18 + -3788;
                    r3 = r3 << 2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x195dc;
                    pc=0x22200;
                    run_22200(); return;
                case 0x195dc:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19504;
                        continue;
                    }
                case 0x195f8:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                case 0x19600:
                    pc=0x19600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19600() throws ExecutionException { /* 0x19600 - 0x19800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19600:
                    /* Next insn is delay slot */ 
                    r31=0x19608;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19608:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19624;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x19624:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19630;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19630:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    r4 = r3 + 1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r2 = r18 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1951c;
                        run_19400(); return;
                    }
                case 0x19654:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19680:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19690;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19690:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x196ac;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x196ac:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x196b8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x196b8:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19480;
                    run_19400(); return;
                case 0x196d0:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x196e0;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x196e0:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x196fc;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x196fc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19708;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19708:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19440;
                    run_19400(); return;
                case 0x19800:
                    pc=0x19800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19800() throws ExecutionException { /* 0x19800 - 0x19a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19800:
                    r29 = r29 + -40;
                    r4 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1982c;
                    pc=0x1d600;
                    run_1d600(); return;
                case 0x1982c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19b8c;
                        run_19a00(); return;
                    }
                    r3 = r0 + 2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19b78;
                        run_19a00(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 12036;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19aa8;
                        run_19a00(); return;
                    }
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r18 = 6 << 16;
                    r5 = r3 + 1;
                    r4 = r18 + -3716;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x19888;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19888:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b28;
                        run_19a00(); return;
                    }
                case 0x198a4:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x198a8:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1997c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x198cc;
                    pc=0x22200;
                    run_22200(); return;
                case 0x198cc:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r16 = r16 + 12064;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x199a4;
                        continue;
                    }
                case 0x198f0:
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = r3 + 1;
                    r4 = r18 + -3716;
                    r3 = r3 << 2;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x19910;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19910:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a20;
                        run_19a00(); return;
                    }
                case 0x1992c:
                    r4 = r3 + 1;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a7c;
                        run_19a00(); return;
                    }
                case 0x19944:
                    r4 = r17 + r0;
                    r16 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x19954;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19954:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1997c:
                    r16 = 6 << 16;
                    r2 = r2 + r3;
                    r16 = r16 + 12064;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x198f0;
                        continue;
                    }
                case 0x199a4:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x199b4;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x199b4:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x199d0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x199d0:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x199dc;
                    pc=0x22000;
                    run_22000(); return;
                case 0x199dc:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    r5 = r3 + 1;
                    r4 = r18 + -3716;
                    r3 = r3 << 2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x19a04;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19a00:
                    pc=0x19a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19a00() throws ExecutionException { /* 0x19a00 - 0x19c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19a00:
                case 0x19a04:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1992c;
                        run_19800(); return;
                    }
                case 0x19a20:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19a30;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19a30:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19a4c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x19a4c:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19a58;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19a58:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    r4 = r3 + 1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r2 = r18 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19944;
                        run_19800(); return;
                    }
                case 0x19a7c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19aa8:
                    r18 = r2 + 10;
                    r4 = r18 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19ab8;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19ab8:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19ad4;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x19ad4:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19ae0;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19ae0:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r18 = 6 << 16;
                    r5 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    r3 = r3 << 2;
                    r4 = r18 + -3716;
                    r19 = r19 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x19b0c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19b0c:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x198a4;
                        run_19800(); return;
                    }
                case 0x19b28:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19b38;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19b38:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19b54;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x19b54:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19b60;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19b60:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x198a8;
                    run_19800(); return;
                case 0x19b78:
                    r4 = 6 << 16;
                    r4 = r4 + -3748;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19b8c;
                    pc=0x11400;
                    run_11400(); return;
                case 0x19b8c:
                    r4 = 6 << 16;
                    r4 = r4 + -3776;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19ba0;
                    pc=0x11400;
                    run_11400(); return;
                case 0x19ba0:
                case 0x19c00:
                    pc=0x19c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19c00() throws ExecutionException { /* 0x19c00 - 0x19e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19c00:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r16 + 12036;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19c3c;
                    pc=0x21600;
                    run_21600(); return;
                case 0x19c3c:
                    r19 = r2 + r0;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19fd4;
                        run_19e00(); return;
                    }
                    r20 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x19c5c:
                    r4 = 6 << 16;
                    r5 = r3 + 1;
                    r4 = r4 + -4312;
                    r3 = r3 << 2;
                    r20 = r20 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x19c7c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19c7c:
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19f84;
                        run_19e00(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x19c9c:
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r3 = r3 << 2;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19e5c;
                        run_19e00(); return;
                    }
                    r4 = r19 + r0;
                    r20 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x19cc0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19cc0:
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19e74;
                        run_19e00(); return;
                    }
                case 0x19cd4:
                    r19 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19d60;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a020;
                        run_1a000(); return;
                    }
                    r20 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3708;
                    r3 = r3 << 2;
                    r20 = r20 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19d20;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19d20:
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a0a0;
                        run_1a000(); return;
                    }
                case 0x19d3c:
                    r20 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x19d40:
                    r2 = r3 + 1;
                    r4 = r19 + r0;
                    r3 = r3 << 2;
                    r20 = r20 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x19d5c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19d5c:
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                case 0x19d60:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19ebc;
                        run_19e00(); return;
                    }
                case 0x19d78:
                    r3 = r5 + 1;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r5 = r5 << 2;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19f18;
                        run_19e00(); return;
                    }
                case 0x19d90:
                    r4 = r18 + r0;
                    r19 = r2 + r5;
                    /* Next insn is delay slot */ 
                    r31=0x19da0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x19da0:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19f34;
                        run_19e00(); return;
                    }
                case 0x19dbc:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x19dc0:
                    r5 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    r4 = r16 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x19de0;
                    pc=0x13a00;
                    run_13a00(); return;
                case 0x19de0:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19e34;
                        run_19e00(); return;
                    }
                case 0x19df4:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                case 0x19e00:
                    pc=0x19e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19e00() throws ExecutionException { /* 0x19e00 - 0x1a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19e00:
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19e14;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19e14:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r3 = r4 + r3;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19df4;
                        run_19c00(); return;
                    }
                case 0x19e34:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19e5c:
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19cd4;
                        run_19c00(); return;
                    }
                case 0x19e74:
                    r5 = 6 << 16;
                    r5 = r5 + -3712;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19e88;
                    pc=0x1d400;
                    run_1d400(); return;
                case 0x19e88:
                    r19 = r2 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19e98;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x19e98:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19ea4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19ea4:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19d78;
                        run_19c00(); return;
                    }
                case 0x19ebc:
                    r20 = r2 + 10;
                    r4 = r20 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19ecc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19ecc:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19ee8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x19ee8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19ef4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19ef4:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r19;
                    r3 = r5 + 1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r20;
                    r2 = r19 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r5 = r5 << 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19d90;
                        run_19c00(); return;
                    }
                case 0x19f18:
                    r2 = r2 + r5;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19dbc;
                        run_19c00(); return;
                    }
                case 0x19f34:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19f44;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19f44:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19f60;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x19f60:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19f6c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19f6c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19dc0;
                    run_19c00(); return;
                case 0x19f84:
                    r21 = r2 + 10;
                    r4 = r21 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19f94;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19f94:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19fb0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x19fb0:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19fbc;
                    pc=0x22000;
                    run_22000(); return;
                case 0x19fbc:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r20;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r21;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19c9c;
                    run_19c00(); return;
                case 0x19fd4:
                    r21 = r2 + 10;
                    r4 = r21 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x19fe4;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x19fe4:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a000;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1a000:
                    pc=0x1a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a000() throws ExecutionException { /* 0x1a000 - 0x1a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a000:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a00c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1a00c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r20;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r21;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19c5c;
                    run_19c00(); return;
                case 0x1a020:
                    r21 = r2 + 10;
                    r4 = r21 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1a030;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1a030:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a04c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1a04c:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a058;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1a058:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = 6 << 16;
                    r2 = r3 + 1;
                    r4 = r4 + -3708;
                    r3 = r3 << 2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r20;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r21;
                    r20 = r20 + r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1a084;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1a084:
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19d3c;
                        run_19c00(); return;
                    }
                case 0x1a0a0:
                    r21 = r2 + 10;
                    r4 = r21 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1a0b0;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1a0b0:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a0cc;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1a0cc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a0d8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1a0d8:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r20;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r21;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19d40;
                    run_19c00(); return;
                case 0x1a200:
                    pc=0x1a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a200() throws ExecutionException { /* 0x1a200 - 0x1a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a200:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a224;
                    pc=0x33800;
                    run_33800(); return;
                case 0x1a224:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a2c4;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a288;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r29 + 16;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a248;
                    pc=0x38e00;
                    run_38e00(); return;
                case 0x1a248:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a2ec;
                        continue;
                    }
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r6 & 255;
                    r2 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a314;
                        continue;
                    }
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 >> 8;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 & 255;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a288:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a298;
                    pc=0x28600;
                    run_28600(); return;
                case 0x1a298:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a32c;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 >> 8;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 & 255;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a2c4:
                    /* Next insn is delay slot */ 
                    r31=0x1a2cc;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1a2cc:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a2d8;
                    pc=0x33200;
                    run_33200(); return;
                case 0x1a2d8:
                    r4 = 6 << 16;
                    r4 = r4 + -4292;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a2ec;
                    pc=0x11400;
                    run_11400(); return;
                case 0x1a2ec:
                    /* Next insn is delay slot */ 
                    r31=0x1a2f4;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1a2f4:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a300;
                    pc=0x33200;
                    run_33200(); return;
                case 0x1a300:
                    r4 = 6 << 16;
                    r4 = r4 + -4252;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a314;
                    pc=0x11400;
                    run_11400(); return;
                case 0x1a314:
                    r4 = 6 << 16;
                    r4 = r4 + -4216;
                    r5 = r16 + r0;
                    r6 = r6 & 127;
                    /* Next insn is delay slot */ 
                    r31=0x1a32c;
                    pc=0x11400;
                    run_11400(); return;
                case 0x1a32c:
                    /* Next insn is delay slot */ 
                    r31=0x1a334;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1a334:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a340;
                    pc=0x33200;
                    run_33200(); return;
                case 0x1a340:
                    r4 = 6 << 16;
                    r4 = r4 + -4276;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a358;
                    pc=0x11400;
                    run_11400(); return;
                case 0x1a358:
                case 0x1a400:
                    pc=0x1a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a400() throws ExecutionException { /* 0x1a400 - 0x1a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a400:
                    r29 = r29 + -80;
                    r6 = 6 << 16;
                    r6 = r6 + -3696;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r4;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r5;
                    r4 = r29 + 80;
                    r5 = r29 + 84;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r30;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r23;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r22;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r21;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x1a44c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x1a44c:
                    r2 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa88;
                        run_1aa00(); return;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + -8164;
                    /* Next insn is delay slot */ 
                    r31=0x1a46c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1a46c:
                    r16 = r2 + r0;
                case 0x1a470:
                    r20 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = r20 + 12064;
                    r5 = r16 + r0;
                    r6 = r6 + -3688;
                    /* Next insn is delay slot */ 
                    r31=0x1a48c;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1a48c:
                    r19 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = r19 + 12036;
                    r5 = r16 + r0;
                    r6 = r6 + -3680;
                    /* Next insn is delay slot */ 
                    r31=0x1a4a8;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1a4a8:
                    r21 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = r21 + 12008;
                    r5 = r16 + r0;
                    r6 = r6 + -3672;
                    /* Next insn is delay slot */ 
                    r31=0x1a4c4;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1a4c4:
                    r2 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = r2 + 11980;
                    r5 = r16 + r0;
                    r6 = r6 + -3664;
                    /* Next insn is delay slot */ 
                    r31=0x1a4e0;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1a4e0:
                    r22 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = r22 + 11952;
                    r5 = r16 + r0;
                    r6 = r6 + -3656;
                    /* Next insn is delay slot */ 
                    r31=0x1a4fc;
                    pc=0x13400;
                    run_13400(); return;
                case 0x1a4fc:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a508;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1a508:
                    r3 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    r2 = r0 + 7;
                    writePages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff] = r2;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a71c;
                        run_1a600(); return;
                    }
                    r23 = 6 << 16;
                    r18 = 6 << 16;
                    r23 = r23 + -3092;
                    r18 = r18 + -3116;
                case 0x1a538:
                    r3 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa34;
                        run_1aa00(); return;
                    }
                    r2 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa7c;
                        run_1aa00(); return;
                    }
                case 0x1a56c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a578;
                    pc=0x1ce00;
                    run_1ce00(); return;
                case 0x1a578:
                    r3 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa68;
                        run_1aa00(); return;
                    }
                    r2 = r2 << 2;
                    r2 = r18 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1a59c:
                    r30 = r22 + 11952;
                    r5 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r17 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a5b4;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1a5b4:
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac54;
                        run_1ac00(); return;
                    }
                case 0x1a5cc:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    r2 = r2 << 2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + r2;
                    r4 = r16 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1a5f4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1a5f4:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                case 0x1a600:
                    pc=0x1a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a600() throws ExecutionException { /* 0x1a600 - 0x1a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a600:
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aca8;
                        run_1ac00(); return;
                    }
                case 0x1a614:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r5;
                    r4 = r30 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a63c;
                    pc=0x13a00;
                    run_13a00(); return;
                case 0x1a63c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a690;
                        continue;
                    }
                case 0x1a650:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a670;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1a670:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 << 2;
                    r4 = r5 + r4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    r4 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a650;
                        continue;
                    }
                case 0x1a690:
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a700;
                        continue;
                    }
                    r5 = 6 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -3620;
                    /* Next insn is delay slot */ 
                    r31=0x1a6b4;
                    pc=0x1d400;
                    run_1d400(); return;
                case 0x1a6b4:
                    r16 = r2 + r0;
                    r2 = r19 + 12036;
                    r5 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a6cc;
                    pc=0x19c00;
                    run_19c00(); return;
                case 0x1a6cc:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a6d8;
                    pc=0x31600;
                    run_31600(); return;
                case 0x1a6d8:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b3ac;
                        run_1b200(); return;
                    }
                case 0x1a6e0:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a6ec;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1a6ec:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    continue;
                case 0x1a6f4:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a700;
                    pc=0x12e00;
                    run_12e00(); return;
                case 0x1a700:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a538;
                        run_1a400(); return;
                    }
                case 0x1a71c:
                    r2 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb88;
                        run_1ba00(); return;
                    }
                case 0x1a72c:
                    r2 = readPages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a754;
                        continue;
                    }
                    r2 = 6 << 16;
                    r16 = r2 + 11980;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b574;
                        run_1b400(); return;
                    }
                case 0x1a754:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r30 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r23 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r22 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a78c:
                    r30 = r20 + 12064;
                    r5 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r17 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a7a4;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1a7a4:
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aac4;
                        run_1aa00(); return;
                    }
                    r2 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b4f0;
                        run_1b400(); return;
                    }
                case 0x1a7c4:
                    r2 = readPages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1adc8;
                        run_1ac00(); return;
                    }
                    r7 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1adc8;
                        run_1ac00(); return;
                    }
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b954;
                        run_1b800(); return;
                    }
                case 0x1a7fc:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                case 0x1a800:
                    pc=0x1a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a800() throws ExecutionException { /* 0x1a800 - 0x1aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a800:
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r2 = r2 << 2;
                    r4 = 6 << 16;
                    r5 = r5 + r2;
                    r4 = r4 + -3636;
                    /* Next insn is delay slot */ 
                    pc=0x1ab0c;
                    run_1aa00(); return;
                case 0x1a824:
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    r30 = r21 + 12008;
                    r17 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8e0;
                        continue;
                    }
                    r7 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8e0;
                        continue;
                    }
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b208;
                        run_1b200(); return;
                    }
                case 0x1a85c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r2 = r2 << 2;
                    r4 = 6 << 16;
                    r5 = r5 + r2;
                    r4 = r4 + -3708;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1a88c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1a88c:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b154;
                        run_1b000(); return;
                    }
                case 0x1a8ac:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    r2 = r2 << 2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + r2;
                    r4 = r7 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1a8d4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1a8d4:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                case 0x1a8e0:
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1acfc;
                        run_1ac00(); return;
                    }
                case 0x1a8f8:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    r2 = r2 << 2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + r2;
                    r4 = r16 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1a920;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1a920:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad50;
                        run_1ac00(); return;
                    }
                case 0x1a940:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r5;
                    r4 = r30 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a968;
                    pc=0x13a00;
                    run_13a00(); return;
                case 0x1a968:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a690;
                        run_1a600(); return;
                    }
                case 0x1a97c:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a99c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1a99c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 << 2;
                    r4 = r5 + r4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    r4 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a97c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a690;
                    run_1a600(); return;
                case 0x1a9c4:
                    r2 = readPages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a700;
                        run_1a600(); return;
                    }
                    r17 = r19 + 12036;
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r30 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a9fc;
                        continue;
                    }
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b810;
                        run_1b800(); return;
                    }
                case 0x1a9fc:
                    r30 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                case 0x1aa00:
                    pc=0x1aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1aa00() throws ExecutionException { /* 0x1aa00 - 0x1ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1aa00:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa1c;
                        continue;
                    }
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b438;
                        run_1b400(); return;
                    }
                case 0x1aa1c:
                    r5 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aa2c;
                    pc=0x19c00;
                    run_19c00(); return;
                case 0x1aa2c:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1aa34:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + -45;
                    r2 = r2 & 255;
                    r3 = (r2&0xffffffffL) < (74&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2f8;
                        run_1b200(); return;
                    }
                    r2 = r2 << 2;
                    r2 = r23 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1aa68:
                    r4 = 6 << 16;
                    r4 = r4 + -3576;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aa7c;
                    pc=0x11400;
                    run_11400(); return;
                case 0x1aa7c:
                    writePages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x1a56c;
                    run_1a400(); return;
                case 0x1aa88:
                    r2 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1aa9c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1aa9c:
                    r4 = r2 + r0;
                    r5 = r0 + 47;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aab0;
                    pc=0x33600;
                    run_33600(); return;
                case 0x1aab0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ada4;
                        run_1ac00(); return;
                    }
                case 0x1aab8:
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1a470;
                    run_1a400(); return;
                case 0x1aac4:
                    r7 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab70;
                        continue;
                    }
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b1ac;
                        run_1b000(); return;
                    }
                case 0x1aaec:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r2 = r2 << 2;
                    r4 = 6 << 16;
                    r5 = r5 + r2;
                    r4 = r4 + -3708;
                case 0x1ab0c:
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1ab1c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1ab1c:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b3e0;
                        run_1b200(); return;
                    }
                case 0x1ab3c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    r2 = r2 << 2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + r2;
                    r4 = r7 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1ab64;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1ab64:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                case 0x1ab70:
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b304;
                        run_1b200(); return;
                    }
                case 0x1ab88:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    r2 = r2 << 2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + r2;
                    r4 = r16 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1abb0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1abb0:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b358;
                        run_1b200(); return;
                    }
                case 0x1abd0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r5;
                    r4 = r30 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x1abf8;
                    pc=0x13a00;
                    run_13a00(); return;
                case 0x1abf8:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                case 0x1ac00:
                    pc=0x1ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ac00() throws ExecutionException { /* 0x1ac00 - 0x1ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ac00:
                    r4 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a690;
                        run_1a600(); return;
                    }
                case 0x1ac0c:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1ac2c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ac2c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 << 2;
                    r4 = r5 + r4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    r4 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac0c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a690;
                    run_1a600(); return;
                case 0x1ac54:
                    r7 = r2 + 10;
                    r4 = r7 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1ac68;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1ac68:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1ac80;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1ac80:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ac90;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ac90:
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r8;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    pc=0x1a5cc;
                    run_1a400(); return;
                case 0x1aca8:
                    r7 = r2 + 10;
                    r4 = r7 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1acbc;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1acbc:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1acd4;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1acd4:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ace4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ace4:
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r8;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    pc=0x1a614;
                    run_1a600(); return;
                case 0x1acfc:
                    r7 = r2 + 10;
                    r4 = r7 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1ad10;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1ad10:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1ad28;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1ad28:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ad38;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ad38:
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r8;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    pc=0x1a8f8;
                    run_1a800(); return;
                case 0x1ad50:
                    r7 = r2 + 10;
                    r4 = r7 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1ad64;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1ad64:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1ad7c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1ad7c:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ad8c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ad8c:
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r8;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    pc=0x1a940;
                    run_1a800(); return;
                case 0x1ada4:
                    r4 = r16 + r0;
                    r5 = r0 + 92;
                    /* Next insn is delay slot */ 
                    r31=0x1adb4;
                    pc=0x33600;
                    run_33600(); return;
                case 0x1adb4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aab8;
                        run_1aa00(); return;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1a470;
                    run_1a400(); return;
                case 0x1adc8:
                    r5 = 6 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -3712;
                    /* Next insn is delay slot */ 
                    r31=0x1addc;
                    pc=0x1d400;
                    run_1d400(); return;
                case 0x1addc:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b900;
                        run_1b800(); return;
                    }
                case 0x1adf8:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                case 0x1ae00:
                    pc=0x1ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ae00() throws ExecutionException { /* 0x1ae00 - 0x1b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ae00:
                    r4 = r2 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r2 = r2 << 2;
                    r4 = 6 << 16;
                    r5 = r5 + r2;
                    r4 = r4 + -3636;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1ae24;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1ae24:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b8ac;
                        run_1b800(); return;
                    }
                case 0x1ae44:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b4cc;
                        run_1b400(); return;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    r2 = r2 << 2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + r2;
                    r4 = r3 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1ae7c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1ae7c:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                case 0x1ae88:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1ae94;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ae94:
                    /* Next insn is delay slot */ 
                    pc=0x1ab70;
                    run_1aa00(); return;
                case 0x1ae9c:
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 97;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b9ec;
                        run_1b800(); return;
                    }
                    r3 = r0 + 99;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b708;
                        run_1b600(); return;
                    }
                    r3 = r0 + 108;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1aed4;
                        continue;
                    }
                    addr=r16+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bae4;
                        run_1ba00(); return;
                    }
                case 0x1aed4:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1aee4;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1aee4:
                    r4 = 6 << 16;
                    r4 = r4 + -3644;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1aef8;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1aef8:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1af04;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1af04:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1af0c:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1af1c;
                    pc=0x17400;
                    run_17400(); return;
                case 0x1af1c:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1af24:
                    r4 = 6 << 16;
                    r4 = r4 + -4068;
                    /* Next insn is delay slot */ 
                    r31=0x1af34;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1af34:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1af3c:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1af4c;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1af4c:
                    r4 = 6 << 16;
                    r16 = r2 + r0;
                    r4 = r4 + -4020;
                    /* Next insn is delay slot */ 
                    r31=0x1af60;
                    pc=0x13600;
                    run_13600(); return;
                case 0x1af60:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1af6c;
                    pc=0x13600;
                    run_13600(); return;
                case 0x1af6c:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1af74:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1af84;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1af84:
                    r4 = 6 << 16;
                    r16 = r2 + r0;
                    r4 = r4 + -4096;
                    /* Next insn is delay slot */ 
                    r31=0x1af98;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1af98:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1afa4;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1afa4:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1afac:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1afbc;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1afbc:
                    writePages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1afc8:
                    r2 = 6 << 16;
                    r4 = r2 + -4064;
                    /* Next insn is delay slot */ 
                    r31=0x1afd8;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1afd8:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1afe0:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1aff0;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1aff0:
                    r5 = r2 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b000;
                    pc=0x12000;
                    run_12000(); return;
                case 0x1b000:
                    pc=0x1b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b000() throws ExecutionException { /* 0x1b000 - 0x1b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b000:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b008:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b018;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1b018:
                    r4 = 6 << 16;
                    r16 = r2 + r0;
                    r4 = r4 + -3952;
                    /* Next insn is delay slot */ 
                    r31=0x1b02c;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b02c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b038;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b038:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b040:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b050;
                    pc=0x11e00;
                    run_11e00(); return;
                case 0x1b050:
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 108;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b54c;
                        run_1b400(); return;
                    }
                case 0x1b060:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b070;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1b070:
                    r3 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbf0;
                        run_1ba00(); return;
                    }
                    writePages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b08c:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b09c;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1b09c:
                    r4 = 6 << 16;
                    r16 = r2 + r0;
                    r4 = r4 + -4028;
                    /* Next insn is delay slot */ 
                    r31=0x1b0b0;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1b0b0:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b0bc;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1b0bc:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b0c4:
                    r4 = r29 + 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b0d4;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1b0d4:
                    r4 = 6 << 16;
                    r16 = r2 + r0;
                    r4 = r4 + -4024;
                    /* Next insn is delay slot */ 
                    r31=0x1b0e8;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1b0e8:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b0f4;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1b0f4:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b0fc:
                    r5 = 6 << 16;
                    r4 = r29 + 16;
                    r5 = r5 + -2796;
                    r6 = r0 + 51;
                    /* Next insn is delay slot */ 
                    r31=0x1b114;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1b114:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b11c:
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 109;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba24;
                        run_1ba00(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b13c;
                    pc=0x17600;
                    run_17600(); return;
                case 0x1b13c:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b144:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b154;
                    pc=0x11c00;
                    run_11c00(); return;
                case 0x1b154:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1b168;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b168:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b180;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b180:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b190;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b190:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r9;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r8;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1a8ac;
                    run_1a800(); return;
                case 0x1b1ac:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1b1c4;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b1c4:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b1dc;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b1dc:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b1ec;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b1ec:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r9;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r8;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x1b200:
                    pc=0x1b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b200() throws ExecutionException { /* 0x1b200 - 0x1b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b200:
                    /* Next insn is delay slot */ 
                    pc=0x1aaec;
                    run_1aa00(); return;
                case 0x1b208:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1b220;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b220:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b238;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b238:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b248;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b248:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r9;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r8;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1a85c;
                    run_1a800(); return;
                case 0x1b264:
                    writePages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b270:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b280;
                    pc=0x16000;
                    run_16000(); return;
                case 0x1b280:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b288:
                    writePages[(r28+-32764)>>>12][((r28+-32764)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32760)>>>12][((r28+-32760)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b298:
                    r4 = 6 << 16;
                    r4 = r4 + -4092;
                    /* Next insn is delay slot */ 
                    r31=0x1b2a8;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1b2a8:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b2b0:
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 110;
                    r4 = r29 + 16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b508;
                        run_1b400(); return;
                    }
                case 0x1b2c4:
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b2d0;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1b2d0:
                    r4 = 6 << 16;
                    r16 = r2 + r0;
                    r4 = r4 + -3976;
                    /* Next insn is delay slot */ 
                    r31=0x1b2e4;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b2e4:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b2f0;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b2f0:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b2f8:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b304;
                    pc=0x1c200;
                    run_1c200(); return;
                case 0x1b304:
                    r7 = r2 + 10;
                    r4 = r7 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1b318;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b318:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b330;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b330:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b340;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b340:
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r8;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    pc=0x1ab88;
                    run_1aa00(); return;
                case 0x1b358:
                    r7 = r2 + 10;
                    r4 = r7 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1b36c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b36c:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b384;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b384:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b394;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b394:
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r8;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    pc=0x1abd0;
                    run_1aa00(); return;
                case 0x1b3ac:
                    /* Next insn is delay slot */ 
                    r31=0x1b3b4;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1b3b4:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b3c0;
                    pc=0x33200;
                    run_33200(); return;
                case 0x1b3c0:
                    r4 = 6 << 16;
                    r4 = r4 + -3616;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b3d8;
                    pc=0x11200;
                    run_11200(); return;
                case 0x1b3d8:
                    /* Next insn is delay slot */ 
                    pc=0x1a6e0;
                    run_1a600(); return;
                case 0x1b3e0:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1b3f4;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b3f4:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                case 0x1b400:
                    pc=0x1b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b400() throws ExecutionException { /* 0x1b400 - 0x1b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b400:
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b40c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b40c:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b41c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b41c:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r9;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r8;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1ab3c;
                    run_1aa00(); return;
                case 0x1b438:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6b4;
                        run_1b600(); return;
                    }
                case 0x1b450:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r4;
                    r2 = r2 << 2;
                    r4 = 6 << 16;
                    r5 = r5 + r2;
                    r4 = r4 + -3856;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1b47c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1b47c:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b660;
                        run_1b600(); return;
                    }
                case 0x1b49c:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    r2 = r2 << 2;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r5;
                    r17 = r4 + r2;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b4c0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1b4c0:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1aa1c;
                    run_1aa00(); return;
                case 0x1b4cc:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r5;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ae88;
                    run_1ae00(); return;
                case 0x1b4f0:
                    r2 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a7c4;
                        run_1a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ab70;
                    run_1aa00(); return;
                case 0x1b508:
                    addr=r16+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2c4;
                        run_1b200(); return;
                    }
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x1b524;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1b524:
                    r4 = 6 << 16;
                    r16 = r2 + r0;
                    r4 = r4 + -3648;
                    /* Next insn is delay slot */ 
                    r31=0x1b538;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b538:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b544;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b544:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b54c:
                    addr=r16+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b060;
                        run_1b000(); return;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + -4072;
                    /* Next insn is delay slot */ 
                    r31=0x1b56c;
                    pc=0x13000;
                    run_13000(); return;
                case 0x1b56c:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b574:
                    r17 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb10;
                        run_1ba00(); return;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + -3708;
                    /* Next insn is delay slot */ 
                    r31=0x1b594;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b594:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b5a0;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b5a0:
                    r17 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bba0;
                        run_1ba00(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc00;
                        run_1bc00(); return;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + -3492;
                    /* Next insn is delay slot */ 
                    r31=0x1b5c8;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b5c8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b5d4;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b5d4:
                    r4 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b7b0;
                        run_1b600(); return;
                    }
                case 0x1b5e4:
                    r17 = r0 + r0;
                case 0x1b5e8:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b9b0;
                        run_1b800(); return;
                    }
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                case 0x1b600:
                    pc=0x1b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b600() throws ExecutionException { /* 0x1b600 - 0x1b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b600:
                    r2 = r17 << 2;
                    r2 = r3 + r2;
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b740;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b788;
                        continue;
                    }
                case 0x1b62c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r19 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    r4 = r18 + r0;
                    r2 = r2 << 2;
                    r19 = r19 + r2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1b650;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1b650:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r17 = r17 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1b5e8;
                    run_1b400(); return;
                case 0x1b660:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1b674;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b674:
                    r6 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b68c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b68c:
                    r4 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b69c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b69c:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r9;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x1b49c;
                    run_1b400(); return;
                case 0x1b6b4:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1b6c8;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b6c8:
                    r6 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b6e0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b6e0:
                    r4 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b6f0;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b6f0:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r9;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x1b450;
                    run_1b400(); return;
                case 0x1b708:
                    addr=r16+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aed4;
                        run_1ae00(); return;
                    }
                    r4 = r29 + 16;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x1b728;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1b728:
                    r5 = r2 + r0;
                    r4 = r20 + 12064;
                    /* Next insn is delay slot */ 
                    r31=0x1b738;
                    pc=0x12600;
                    run_12600(); return;
                case 0x1b738:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1b740:
                    r19 = r2 + 10;
                    r4 = r19 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b750;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b750:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b76c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b76c:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b778;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b778:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r20;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b62c;
                        continue;
                    }
                case 0x1b788:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r17 = r17 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b5e8;
                    run_1b400(); return;
                case 0x1b7b0:
                    /* Next insn is delay slot */ 
                    r31=0x1b7b8;
                    pc=0x21600;
                    run_21600(); return;
                case 0x1b7b8:
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b7c8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1b7c8:
                    r4 = r2 + 5;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b7d8;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b7d8:
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b7f0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b7f0:
                    r5 = 6 << 16;
                    r4 = r2 + r17;
                    r5 = r5 + -3488;
                    r6 = r0 + 5;
                case 0x1b800:
                    pc=0x1b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b800() throws ExecutionException { /* 0x1b800 - 0x1ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b800:
                    /* Next insn is delay slot */ 
                    r31=0x1b808;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b808:
                    /* Next insn is delay slot */ 
                    pc=0x1b5e4;
                    run_1b400(); return;
                case 0x1b810:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba90;
                        run_1ba00(); return;
                    }
                case 0x1b824:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r4;
                    r2 = r2 << 2;
                    r4 = 6 << 16;
                    r5 = r5 + r2;
                    r4 = r4 + -3836;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1b850;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1b850:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba3c;
                        run_1ba00(); return;
                    }
                case 0x1b870:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    r2 = r2 << 2;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r4;
                    r3 = r5 + r2;
                    r4 = r30 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x1b898;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1b898:
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1a9fc;
                    run_1a800(); return;
                case 0x1b8ac:
                    r7 = r2 + 10;
                    r4 = r7 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1b8c0;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b8c0:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b8d8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b8d8:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b8e8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b8e8:
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r8;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    pc=0x1ae44;
                    run_1ae00(); return;
                case 0x1b900:
                    r7 = r2 + 10;
                    r4 = r7 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1b914;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b914:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b92c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b92c:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b93c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b93c:
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r8;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    pc=0x1adf8;
                    run_1ac00(); return;
                case 0x1b954:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1b96c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1b96c:
                    r6 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r5 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1b984;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1b984:
                    r4 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1b994;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1b994:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r9;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r8;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1a7fc;
                    run_1a600(); return;
                case 0x1b9b0:
                    r4 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b9c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1b9c8;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b9c8:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b9d4;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1b9d4:
                    r3 = 6 << 16;
                    r4 = r3 + 11980;
                    /* Next insn is delay slot */ 
                    r31=0x1b9e4;
                    pc=0x13a00;
                    run_13a00(); return;
                case 0x1b9e4:
                    /* Next insn is delay slot */ 
                    pc=0x1a754;
                    run_1a600(); return;
                case 0x1b9ec:
                    addr=r16+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aed4;
                        run_1ae00(); return;
                    }
                    r4 = r29 + 16;
                case 0x1ba00:
                    pc=0x1ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ba00() throws ExecutionException { /* 0x1ba00 - 0x1bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ba00:
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x1ba0c;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1ba0c:
                    r5 = r2 + r0;
                    r4 = r19 + 12036;
                    /* Next insn is delay slot */ 
                    r31=0x1ba1c;
                    pc=0x12600;
                    run_12600(); return;
                case 0x1ba1c:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1ba24:
                    r3 = 6 << 16;
                    r4 = r3 + -3640;
                    /* Next insn is delay slot */ 
                    r31=0x1ba34;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1ba34:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1ba3c:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1ba50;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1ba50:
                    r6 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1ba68;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1ba68:
                    r4 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1ba78;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ba78:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r9;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x1b870;
                    run_1b800(); return;
                case 0x1ba90:
                    r8 = r2 + 10;
                    r4 = r8 << 2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x1baa4;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1baa4:
                    r6 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x1babc;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1babc:
                    r4 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1bacc;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1bacc:
                    r9 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r8 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r9;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x1b824;
                    run_1b800(); return;
                case 0x1bae4:
                    r4 = r29 + 16;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x1baf4;
                    pc=0x1ca00;
                    run_1ca00(); return;
                case 0x1baf4:
                    r3 = 6 << 16;
                    r4 = r3 + 11980;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bb08;
                    pc=0x12600;
                    run_12600(); return;
                case 0x1bb08:
                    /* Next insn is delay slot */ 
                    pc=0x1a700;
                    run_1a600(); return;
                case 0x1bb10:
                    r4 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b5a0;
                        run_1b400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1bb28;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1bb28:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b5a0;
                        run_1b400(); return;
                    }
                    r2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbc4;
                        continue;
                    }
                    r5 = 6 << 16;
                    r5 = r5 + -3704;
                case 0x1bb48:
                    r4 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1bb54;
                    pc=0x1d400;
                    run_1d400(); return;
                case 0x1bb54:
                    r4 = 6 << 16;
                    r17 = r2 + r0;
                    r4 = r4 + -3708;
                    /* Next insn is delay slot */ 
                    r31=0x1bb68;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1bb68:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bb74;
                    pc=0x13200;
                    run_13200(); return;
                case 0x1bb74:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bb80;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1bb80:
                    /* Next insn is delay slot */ 
                    pc=0x1b5a0;
                    run_1b400(); return;
                case 0x1bb88:
                    r4 = 6 << 16;
                    r4 = r4 + -3544;
                    /* Next insn is delay slot */ 
                    r31=0x1bb98;
                    pc=0x11200;
                    run_11200(); return;
                case 0x1bb98:
                    /* Next insn is delay slot */ 
                    pc=0x1a72c;
                    run_1a600(); return;
                case 0x1bba0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbd4;
                        continue;
                    }
                    r3 = 6 << 16;
                    r4 = r3 + 11980;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1bbbc;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1bbbc:
                    /* Next insn is delay slot */ 
                    pc=0x1b5d4;
                    run_1b400(); return;
                case 0x1bbc4:
                    r5 = 6 << 16;
                    r5 = r5 + -8164;
                    /* Next insn is delay slot */ 
                    pc=0x1bb48;
                    continue;
                case 0x1bbd4:
                    r2 = 6 << 16;
                    r5 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    r4 = r2 + 11980;
                    /* Next insn is delay slot */ 
                    r31=0x1bbe8;
                    pc=0x13800;
                    run_13800(); return;
                case 0x1bbe8:
                    /* Next insn is delay slot */ 
                    pc=0x1b5d4;
                    run_1b400(); return;
                case 0x1bbf0:
                    r4 = 6 << 16;
                    r4 = r4 + -8160;
                    /* Next insn is delay slot */ 
                    r31=0x1bc00;
                    pc=0x11400;
                    run_11400(); return;
                case 0x1bc00:
                    pc=0x1bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1bc00() throws ExecutionException { /* 0x1bc00 - 0x1be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1bc00:
                    r4 = 6 << 16;
                    r4 = r4 + -3528;
                    /* Next insn is delay slot */ 
                    r31=0x1bc10;
                    pc=0x11400;
                    run_11400(); return;
                case 0x1bc10:
                case 0x1be00:
                    pc=0x1be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1be00() throws ExecutionException { /* 0x1be00 - 0x1c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1be00:
                    r29 = r29 + -296;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r18;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = 6 << 16;
                    r5 = r5 + 2592;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r19;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x1be38;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x1be38:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bfd0;
                        continue;
                    }
                case 0x1be44:
                    r4 = r29 + 16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1be58;
                    pc=0x29800;
                    run_29800(); return;
                case 0x1be58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf44;
                        continue;
                    }
                case 0x1be60:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1be6c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1be6c:
                    r17 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1bf74;
                    continue;
                case 0x1be80:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf74;
                        continue;
                    }
                    r17 = r16 + r0;
                case 0x1be8c:
                    r16 = r17 + -1;
                    r2 = r29 + 16;
                    r3 = r2 + r16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1bea4;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x1bea4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be80;
                        continue;
                    }
                case 0x1beac:
                    r2 = r29 + 16;
                    r17 = r2 + r17;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1bec8;
                    continue;
                case 0x1bec4:
                    r16 = r16 + 1;
                case 0x1bec8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1bed4;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x1bed4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bec4;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be44;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bef8;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1bef8:
                    r4 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = r2 + r0;
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf80;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x1bf14:
                    r5 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r5;
                    r4 = r29 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf3c;
                    pc=0x29800;
                    run_29800(); return;
                case 0x1bf3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be60;
                        continue;
                    }
                case 0x1bf44:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bf50;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x1bf50:
                    r31 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r20 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r19 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r18 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r17 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r16 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r29 = r29 + 296;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1bf74:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1beac;
                    continue;
                case 0x1bf80:
                    r20 = r4 << 1;
                    r4 = r4 << 3;
                    /* Next insn is delay slot */ 
                    r31=0x1bf90;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1bf90:
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bfac;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1bfac:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1bfb8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1bfb8:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r17;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1bf14;
                    continue;
                case 0x1bfd0:
                    /* Next insn is delay slot */ 
                    r31=0x1bfd8;
                    pc=0x28400;
                    run_28400(); return;
                case 0x1bfd8:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1bfe4;
                    pc=0x33200;
                    run_33200(); return;
                case 0x1bfe4:
                    r4 = 6 << 16;
                    r4 = r4 + -2184;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bffc;
                    pc=0x24200;
                    run_24200(); return;
                case 0x1bffc:
                case 0x1c000:
                    pc=0x1c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c000() throws ExecutionException { /* 0x1c000 - 0x1c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c000:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    r20 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c154;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x1c048;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x1c048:
                    writePages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c154;
                        continue;
                    }
                case 0x1c05c:
                    r2 = r0 + 8;
                    r4 = r0 + 32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c074;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1c074:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c188;
                        continue;
                    }
                    r16 = r0 + r0;
                    r21 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x1c0bc;
                    continue;
                case 0x1c094:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1c098:
                    r4 = r3 + 1;
                    r16 = r16 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    r2 = r6 < r16 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c184;
                        continue;
                    }
                case 0x1c0bc:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c0e8;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x1c160;
                        continue;
                    }
                case 0x1c0e8:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c094;
                        continue;
                    }
                    r4 = r2 << 3;
                    r22 = r2 << 1;
                    /* Next insn is delay slot */ 
                    r31=0x1c110;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1c110:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c12c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1c12c:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c138;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1c138:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1c098;
                    continue;
                case 0x1c154:
                    writePages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x1c05c;
                    continue;
                case 0x1c160:
                    r4 = r29 + 16;
                    r5 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1c170;
                    pc=0x1be00;
                    run_1be00(); return;
                case 0x1c170:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = r6 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c0bc;
                        continue;
                    }
                case 0x1c184:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1c188:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff] = r2;
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r3;
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c200:
                    pc=0x1c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c200() throws ExecutionException { /* 0x1c200 - 0x1c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c200:
                    r5 = r4 + r0;
                    r4 = 6 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -2160;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1c21c;
                    pc=0x24200;
                    run_24200(); return;
                case 0x1c21c:
                case 0x1c400:
                    pc=0x1c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c400() throws ExecutionException { /* 0x1c400 - 0x1c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c400:
                    r5 = r4 + r0;
                    r4 = 6 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -2140;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1c41c;
                    pc=0x24200;
                    run_24200(); return;
                case 0x1c41c:
                case 0x1c600:
                    pc=0x1c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c600() throws ExecutionException { /* 0x1c600 - 0x1c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c600:
                    r2 = r4 + r0;
                    r4 = 6 << 16;
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r4 = r4 + -2108;
                    r5 = r2 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1c624;
                    pc=0x24200;
                    run_24200(); return;
                case 0x1c624:
                case 0x1c800:
                    pc=0x1c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c800() throws ExecutionException { /* 0x1c800 - 0x1ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c800:
                    r5 = r4 + r0;
                    r4 = 6 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -2076;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1c81c;
                    pc=0x24200;
                    run_24200(); return;
                case 0x1c81c:
                case 0x1ca00:
                    pc=0x1ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ca00() throws ExecutionException { /* 0x1ca00 - 0x1cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ca00:
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r3 = r3 + r2;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r7 + r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca44;
                        continue;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r6 = r6 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca54;
                        continue;
                    }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r6;
                case 0x1ca44:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ca54:
                    r4 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ca60;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x1ca60:
                case 0x1cc00:
                    pc=0x1cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1cc00() throws ExecutionException { /* 0x1cc00 - 0x1ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1cc00:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    r21 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    r2 = r21 << 2;
                    r19 = r19 + r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r20 = r4 + r0;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    r18 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cce0;
                    continue;
                case 0x1cc50:
                    r17 = r17 + -1;
                    r16 = r16 + 12;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cce0;
                        continue;
                    }
                case 0x1cc60:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cc70;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1cc70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc50;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cccc;
                        continue;
                    }
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r21;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ccec;
                        continue;
                    }
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                case 0x1cca4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x1cccc:
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1cca4;
                    continue;
                case 0x1cce0:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ccec;
                    pc=0x1c200;
                    run_1c200(); return;
                case 0x1ccec:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ccf8;
                    pc=0x1c400;
                    run_1c400(); return;
                case 0x1ccf8:
                case 0x1ce00:
                    pc=0x1ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ce00() throws ExecutionException { /* 0x1ce00 - 0x1d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ce00:
                    r5 = 6 << 16;
                    r29 = r29 + -24;
                    r5 = r5 + -2048;
                    r6 = r0 + 30;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1ce1c;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1ce1c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce38;
                        continue;
                    }
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                case 0x1ce28:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ce38:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1ce28;
                    continue;
                case 0x1d000:
                    pc=0x1d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d000() throws ExecutionException { /* 0x1d000 - 0x1d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d018;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1d018:
                    r3 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0c8;
                        continue;
                    }
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0a4;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 46;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0b4;
                        continue;
                    }
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0c8;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0c8;
                        continue;
                    }
                    r4 = r0 + 46;
                    r5 = r0 + 92;
                    r6 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x1d094;
                    continue;
                case 0x1d074:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0b4;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0c8;
                        continue;
                    }
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0c8;
                        continue;
                    }
                case 0x1d094:
                    r2 = r2 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d074;
                        continue;
                    }
                case 0x1d0a4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 46;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0c8;
                        continue;
                    }
                case 0x1d0b4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d0c8:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d200:
                    pc=0x1d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d200() throws ExecutionException { /* 0x1d200 - 0x1d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d218;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1d218:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d27c;
                        continue;
                    }
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1d27c;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1d27c;
                        continue;
                    }
                    r4 = r0 + 92;
                    r5 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x1d26c;
                    continue;
                case 0x1d250:
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1d27c;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1d27c;
                        continue;
                    }
                case 0x1d26c:
                    r2 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d250;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x1d27c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d400:
                    pc=0x1d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d400() throws ExecutionException { /* 0x1d400 - 0x1d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d400:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d428;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1d428:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d534;
                        continue;
                    }
                    r6 = r17 + -1;
                    r6 = r16 + r6;
                    r2 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4b8;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4c8;
                        continue;
                    }
                    r2 = r0 + 92;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d534;
                        continue;
                    }
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d534;
                        continue;
                    }
                    r7 = r0 + 46;
                    r8 = r0 + 92;
                    r9 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x1d4a8;
                    continue;
                case 0x1d488:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4c8;
                        continue;
                    }
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1d534;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x1d534;
                        continue;
                    }
                case 0x1d4a8:
                    r6 = r6 + -1;
                    r3 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d488;
                        continue;
                    }
                case 0x1d4b8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d534;
                        continue;
                    }
                case 0x1d4c8:
                    r4 = r18 + r0;
                    r19 = r6 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x1d4d8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1d4d8:
                    r2 = r2 + 1;
                    r4 = r2 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x1d4e8;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1d4e8:
                    r17 = r2 + r0;
                    r5 = r16 + r0;
                    r6 = r19 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d500;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1d500:
                    r4 = r17 + r19;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d510;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x1d510:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d534:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d540;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1d540:
                    r4 = r17 + 1;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x1d550;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1d550:
                    r4 = r2 + r0;
                    r5 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d564;
                    pc=0x32200;
                    run_32200(); return;
                case 0x1d564:
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d574;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x1d574:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d600:
                    pc=0x1d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d600() throws ExecutionException { /* 0x1d600 - 0x1d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + -1808;
                    r5 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1d624;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1d624:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d680;
                        continue;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + -1800;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d640;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1d640:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d68c;
                        continue;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + -1796;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1d65c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1d65c:
                    r3 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d698;
                        continue;
                    }
                case 0x1d668:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d680:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1d668;
                    continue;
                case 0x1d68c:
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1d668;
                    continue;
                case 0x1d698:
                    r3 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x1d668;
                    continue;
                case 0x1d800:
                    pc=0x1d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d800() throws ExecutionException { /* 0x1d800 - 0x1da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d800:
                    r2 = r0 + 1;
                    writePages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff] = r4;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d850;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d834;
                        continue;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d838;
                        continue;
                    }
                    r2 = r0 + 1;
                    addr=r28+-32756;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d834:
                    r2 = r0 + 3;
                case 0x1d838:
                    addr=r28+-32748;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r28+-32752;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r28+-32756;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d850:
                    r2 = r0 + 3;
                    addr=r28+-32748;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 2;
                    addr=r28+-32752;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r28+-32756;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1da00:
                    pc=0x1da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1da00() throws ExecutionException { /* 0x1da00 - 0x1dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1da00:
                    /* Next insn is delay slot */ 
                    pc=0x26400;
                    run_26400(); return;
                case 0x1dc00:
                    pc=0x1dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1dc00() throws ExecutionException { /* 0x1dc00 - 0x1de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1dc00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dccc;
                        continue;
                    }
                    r18 = r4 + r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dc30;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1dc30:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcb0;
                        continue;
                    }
                    r3 = r2 + -1;
                    r2 = r17 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r0 + 92;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcbc;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcbc;
                        continue;
                    }
                    r4 = r16 + 1;
                case 0x1dc64:
                    /* Next insn is delay slot */ 
                    r31=0x1dc6c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1dc6c:
                    r4 = r2 + r0;
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dc80;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1dc80:
                    r16 = r2 + r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x1dcb0:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1dc64;
                    continue;
                case 0x1dcbc:
                    r4 = r16 + r0;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1dc64;
                    continue;
                case 0x1dccc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1de00:
                    pc=0x1de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1de00() throws ExecutionException { /* 0x1de00 - 0x1e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1de00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x1de24;
                    pc=0x2d400;
                    run_2d400(); return;
                case 0x1de24:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ded8;
                        continue;
                    }
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1de3c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1de3c:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1debc;
                        continue;
                    }
                    r3 = r2 + -1;
                    r2 = r17 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r0 + 92;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1dec8;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1dec8;
                        continue;
                    }
                    r4 = r16 + 1;
                case 0x1de70:
                    /* Next insn is delay slot */ 
                    r31=0x1de78;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1de78:
                    r4 = r2 + r0;
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1de8c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1de8c:
                    r16 = r2 + r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x1debc:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1de70;
                    continue;
                case 0x1dec8:
                    r4 = r16 + r0;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1de70;
                    continue;
                case 0x1ded8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e000:
                    pc=0x1e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e000() throws ExecutionException { /* 0x1e000 - 0x1e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e000:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e038;
                    pc=0x2d400;
                    run_2d400(); return;
                case 0x1e038:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e15c;
                        continue;
                    }
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e050;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1e050:
                    r6 = r2 + r0;
                    r4 = r29 + 16;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e064;
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x1e064:
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e09c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 92;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e09c;
                        continue;
                    }
                    r3 = r0 + 47;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1d8;
                        continue;
                    }
                case 0x1e09c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e0a8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1e0a8:
                    r6 = r2 + r0;
                    r5 = r17 + r0;
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e0bc;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x1e0bc:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e0c8;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x1e0c8:
                    r17 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e150;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e0e4;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1e0e4:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e178;
                        continue;
                    }
                    r3 = r2 + -1;
                    r2 = r17 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r0 + 92;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1c8;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1c8;
                        continue;
                    }
                    r4 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1e120;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1e120:
                    r4 = r2 + r0;
                    r6 = r16 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e134;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1e134:
                    r16 = r2 + r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e150;
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x1e150:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e15c;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1e15c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e178:
                    r4 = r0 + 1;
                case 0x1e17c:
                    /* Next insn is delay slot */ 
                    r31=0x1e184;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1e184:
                    r4 = r2 + r0;
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e198;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1e198:
                    r16 = r2 + r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e1b4;
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x1e1b4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1e1c0;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1e1c0:
                    /* Next insn is delay slot */ 
                    pc=0x1e15c;
                    continue;
                case 0x1e1c8:
                    r4 = r16 + r0;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e17c;
                    continue;
                case 0x1e1d8:
                    r4 = r29 + 16;
                    r5 = r0 + 47;
                    /* Next insn is delay slot */ 
                    r31=0x1e1e8;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x1e1e8:
                    /* Next insn is delay slot */ 
                    pc=0x1e09c;
                    continue;
                case 0x1e200:
                    pc=0x1e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e200() throws ExecutionException { /* 0x1e200 - 0x1e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e400:
                    pc=0x1e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e400() throws ExecutionException { /* 0x1e400 - 0x1e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e400:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e42c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1e42c:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4fc;
                        continue;
                    }
                    r3 = r2 + -1;
                    r2 = r18 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r0 + 92;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4ec;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4ec;
                        continue;
                    }
                    r4 = r16 + 1;
                case 0x1e460:
                    /* Next insn is delay slot */ 
                    r31=0x1e468;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1e468:
                    r17 = r2 + r0;
                    r6 = r16 + r0;
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    r16 = r17 + r16;
                    /* Next insn is delay slot */ 
                    r31=0x1e484;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1e484:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4b4;
                        continue;
                    }
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1e4ac;
                    pc=0x32800;
                    run_32800(); return;
                case 0x1e4ac:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e508;
                        continue;
                    }
                case 0x1e4b4:
                    r4 = r19 + r0;
                    r5 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e4c8;
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x1e4c8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e4ec:
                    r4 = r16 + r0;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1e460;
                    continue;
                case 0x1e4fc:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1e460;
                    continue;
                case 0x1e508:
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1e518;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1e518:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e600:
                    pc=0x1e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e600() throws ExecutionException { /* 0x1e600 - 0x1e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e600:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e64c;
                        continue;
                    }
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1e630;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1e630:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x1e64c:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + -1788;
                    r6 = r6 + -1768;
                    r7 = r0 + 129;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1e670;
                    return;
                case 0x1e670:
                case 0x1e800:
                    pc=0x1e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e800() throws ExecutionException { /* 0x1e800 - 0x1ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e800:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e82c;
                        continue;
                    }
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e82c:
                    r2 = 6 << 16;
                    r2 = r2 + -8164;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ea00:
                    pc=0x1ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ea00() throws ExecutionException { /* 0x1ea00 - 0x1ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ea00:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb04;
                        continue;
                    }
                    r20 = r5 + r0;
                    r16 = r0 + r0;
                    r17 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x1eaa8;
                    continue;
                case 0x1ea50:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ea5c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1ea5c:
                    r6 = r2 + r0;
                    r5 = r20 + r0;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ea70;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x1ea70:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ea7c;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x1ea7c:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ea8c;
                    pc=0x38000;
                    run_38000(); return;
                case 0x1ea8c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb40;
                        continue;
                    }
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb08;
                        continue;
                    }
                case 0x1eaa8:
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1eac8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1eac8:
                    r6 = r2 + r0;
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1eadc;
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x1eadc:
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea50;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r0 + 47;
                    /* Next insn is delay slot */ 
                    r31=0x1eafc;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x1eafc:
                    /* Next insn is delay slot */ 
                    pc=0x1ea50;
                    continue;
                case 0x1eb04:
                    r17 = r29 + 16;
                case 0x1eb08:
                    r16 = r0 + r0;
                case 0x1eb0c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1eb18;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1eb18:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1eb40:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1eb4c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1eb4c:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1eb0c;
                    continue;
                case 0x1ec00:
                    pc=0x1ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ec00() throws ExecutionException { /* 0x1ec00 - 0x1ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ec00:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ec28;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1ec28:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r2 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ee00:
                    pc=0x1ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ee00() throws ExecutionException { /* 0x1ee00 - 0x1f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ee00:
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee18;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ee18:
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x22000;
                    run_22000(); return;
                case 0x1f000:
                    pc=0x1f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f000() throws ExecutionException { /* 0x1f000 - 0x1f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f000:
                    r29 = r29 + -24;
                    r4 = r0 + 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1f014;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1f014:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f200:
                    pc=0x1f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f200() throws ExecutionException { /* 0x1f200 - 0x1f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f264;
                        continue;
                    }
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f240;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x22000;
                    run_22000(); return;
                case 0x1f240:
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1f24c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1f24c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x22000;
                    run_22000(); return;
                case 0x1f264:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f400:
                    pc=0x1f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f400() throws ExecutionException { /* 0x1f400 - 0x1f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f400:
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f484;
                        continue;
                    }
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1f430;
                    continue;
                case 0x1f42c:
                    r16 = r16 << 1;
                case 0x1f430:
                    r2 = ((r16 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f42c;
                        continue;
                    }
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f490;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f450;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1f450:
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f464;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1f464:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f484:
                    r16 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x1f430;
                    continue;
                case 0x1f490:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f4a0;
                    pc=0x21e00;
                    run_21e00(); return;
                case 0x1f4a0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f600:
                    pc=0x1f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f600() throws ExecutionException { /* 0x1f600 - 0x1f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f600:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f638;
                        continue;
                    }
                    r5 = r2 - r5;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    r2 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f630;
                        continue;
                    }
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                case 0x1f630:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f638:
                    r29 = r29 + -24;
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + -1752;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + -1736;
                    r7 = r0 + 206;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1f664;
                    return;
                case 0x1f664:
                case 0x1f800:
                    pc=0x1f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f800() throws ExecutionException { /* 0x1f800 - 0x1fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r3 = r4 + 1;
                    r2 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f854;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f854:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f8c4;
                        continue;
                    }
                    r16 = r5 + r0;
                case 0x1f860:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f860;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f8dc;
                        continue;
                    }
                case 0x1f878:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f884;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1f884:
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f898;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1f898:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x1f89c:
                    r4 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r16;
                    r4 = r2 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f8c4:
                    r2 = (r3&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f860;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1f878;
                    continue;
                case 0x1f8dc:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f8ec;
                    pc=0x21e00;
                    run_21e00(); return;
                case 0x1f8ec:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1f89c;
                    continue;
                case 0x1fa00:
                    pc=0x1fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fa00() throws ExecutionException { /* 0x1fa00 - 0x1fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fa00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r18 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa48;
                        continue;
                    }
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa68;
                        continue;
                    }
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                case 0x1fa3c:
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fa48;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1fa48:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fa68:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fac8;
                        continue;
                    }
                    r17 = r3 + r0;
                case 0x1fa74:
                    r17 = r17 << 1;
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa74;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1faa0;
                        continue;
                    }
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1fa9c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1fa9c:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1faa0:
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1fab0;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1fab0:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r17;
                    r4 = r2 + r0;
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1fa3c;
                    continue;
                case 0x1fac8:
                    r2 = (r6&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r17 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa74;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1faa0;
                    continue;
                case 0x1fc00:
                    pc=0x1fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fc00() throws ExecutionException { /* 0x1fc00 - 0x1fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fc00:
                    r29 = r29 + -40;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r3 + 1;
                    r2 = ((r4 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fc6c;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r17;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fc6c:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fce8;
                        continue;
                    }
                    r16 = r4 + r0;
                case 0x1fc78:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fc78;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fd00;
                        continue;
                    }
                case 0x1fc90:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fc9c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1fc9c:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fcb0;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1fcb0:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                case 0x1fcb4:
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r16;
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r17;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fce8:
                    r2 = (r17&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fc78;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1fc90;
                    continue;
                case 0x1fd00:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fd10;
                    pc=0x21e00;
                    run_21e00(); return;
                case 0x1fd10:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1fcb4;
                    continue;
                case 0x1fe00:
                    pc=0x1fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fe00() throws ExecutionException { /* 0x1fe00 - 0x20000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fe00:
                    r29 = r29 + -40;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r6 + r3;
                    r2 = ((r4 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r19 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe80;
                        continue;
                    }
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x1fe44:
                    r5 = r20 + r0;
                    r6 = r19 + r0;
                    r4 = r4 + r3;
                    /* Next insn is delay slot */ 
                    r31=0x1fe58;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1fe58:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r17;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fe80:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fedc;
                        continue;
                    }
                    r16 = r4 + r0;
                case 0x1fe8c:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe8c;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fef4;
                        continue;
                    }
                case 0x1fea4:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1feb0;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x1feb0:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1fec4;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x1fec4:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x1fecc:
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1fe44;
                    continue;
                case 0x1fedc:
                    r2 = (r17&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1fea4;
                    continue;
                case 0x1fef4:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ff04;
                    pc=0x21e00;
                    run_21e00(); return;
                case 0x1ff04:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1fecc;
                    continue;
                case 0x20000:
                    pc=0x20000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20000() throws ExecutionException { /* 0x20000 - 0x20200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20000:
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r20 = r5 + r0;
                    r19 = r6 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x200a4;
                        continue;
                    }
                    r3 = r6 + r7;
                    r3 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r17 = r7 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20050;
                        continue;
                    }
                    r17 = r2 - r6;
                case 0x20050:
                    r3 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x200d0;
                        continue;
                    }
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x20068:
                    r5 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r5 = r5 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x2007c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x2007c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r17;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x200a4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x200d0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20128;
                        continue;
                    }
                    r16 = r3 + r0;
                case 0x200dc:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x200dc;
                        continue;
                    }
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20140;
                        continue;
                    }
                case 0x200f4:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20100;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x20100:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20114;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x20114:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x20068;
                    continue;
                case 0x20128:
                    r2 = (r17&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x200dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x200f4;
                    continue;
                case 0x20140:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20150;
                    pc=0x21e00;
                    run_21e00(); return;
                case 0x20150:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x20068;
                    continue;
                case 0x20200:
                    pc=0x20200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20200() throws ExecutionException { /* 0x20200 - 0x20400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20200:
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20230;
                        continue;
                    }
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20230;
                    pc=0x22000;
                    run_22000(); return;
                case 0x20230:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x20244;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x20244:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20400:
                    pc=0x20400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20400() throws ExecutionException { /* 0x20400 - 0x20600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20400:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    r19 = r0 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20488;
                        continue;
                    }
                case 0x20434:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x20440;
                    pc=0x25200;
                    run_25200(); return;
                case 0x20440:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20470;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 3;
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x204a8;
                        continue;
                    }
                case 0x2046c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x20470:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20434;
                        continue;
                    }
                case 0x20488:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x204a8:
                    r2 = r2 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2046c;
                    continue;
                case 0x20600:
                    pc=0x20600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20600() throws ExecutionException { /* 0x20600 - 0x20800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20600:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r18 = r4 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    r19 = r0 + 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20688;
                        continue;
                    }
                case 0x20634:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x20640;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20640:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20670;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 3;
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x206a8;
                        continue;
                    }
                case 0x2066c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x20670:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20634;
                        continue;
                    }
                case 0x20688:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x206a8:
                    r2 = r2 + -32;
                    /* Next insn is delay slot */ 
                    pc=0x2066c;
                    continue;
                case 0x20800:
                    pc=0x20800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20800() throws ExecutionException { /* 0x20800 - 0x20a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20800:
                    r6 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r5 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20844;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2082c;
                    pc=0x2ec00;
                    run_2ec00(); return;
                case 0x2082c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20888;
                        continue;
                    }
                case 0x20834:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20844:
                    r3 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20878;
                        continue;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2085c;
                    pc=0x2ec00;
                    run_2ec00(); return;
                case 0x2085c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20834;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20878:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x2ec00;
                    run_2ec00(); return;
                case 0x20888:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x20834;
                    continue;
                case 0x20a00:
                    pc=0x20a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20a00() throws ExecutionException { /* 0x20a00 - 0x20c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x20a20;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x20a20:
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x20a40;
                    pc=0x2ec00;
                    run_2ec00(); return;
                case 0x20a40:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20aa8;
                        continue;
                    }
                case 0x20a48:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20a5c:
                    r3 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a94;
                        continue;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20a74;
                    pc=0x2ec00;
                    run_2ec00(); return;
                case 0x20a74:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a48;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20a94:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2ec00;
                    run_2ec00(); return;
                case 0x20aa8:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x20a48;
                    continue;
                case 0x20c00:
                    pc=0x20c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20c00() throws ExecutionException { /* 0x20c00 - 0x20e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20c00:
                    r29 = r29 + -40;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    r19 = r6 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r6 = r20 + r0;
                    r7 = r19 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x20c40;
                    pc=0x23000;
                    run_23000(); return;
                case 0x20c40:
                    r18 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20d08;
                        continue;
                    }
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r3 = ((r18 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20c8c;
                        continue;
                    }
                case 0x20c60:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r18;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20c8c:
                    r4 = r18 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20cfc;
                        continue;
                    }
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20ca8;
                    continue;
                case 0x20ca4:
                    r16 = r16 << 1;
                case 0x20ca8:
                    r3 = ((r16 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ca4;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20cc8;
                        continue;
                    }
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20cc8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x20cc8:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20cd4;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x20cd4:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r16;
                    r4 = r2 + r0;
                    r5 = r16 + r0;
                    r6 = r20 + r0;
                    r7 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20cf4;
                    pc=0x23000;
                    run_23000(); return;
                case 0x20cf4:
                    /* Next insn is delay slot */ 
                    pc=0x20c60;
                    continue;
                case 0x20cfc:
                    r16 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x20ca8;
                    continue;
                case 0x20d08:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + -1720;
                    r6 = r6 + -1736;
                    r7 = r0 + 468;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x20d2c;
                    return;
                case 0x20d2c:
                case 0x20e00:
                    pc=0x20e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20e00() throws ExecutionException { /* 0x20e00 - 0x21000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20e00:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r6 = r29 + 40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x20e20;
                    pc=0x20c00;
                    run_20c00(); return;
                case 0x20e20:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21000:
                    pc=0x21000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21000() throws ExecutionException { /* 0x21000 - 0x21200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21000:
                    /* Next insn is delay slot */ 
                    pc=0x32800;
                    run_32800(); return;
                case 0x21200:
                    pc=0x21200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21200() throws ExecutionException { /* 0x21200 - 0x21400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21200:
                    r2 = 2 << 16;
                    r29 = r29 + -32;
                    r2 = r2 + 4096;
                    r5 = 6 << 16;
                    r5 = r5 + -940;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r6 = r0 + 30;
                    r7 = r0 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2122c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x2122c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21248;
                        continue;
                    }
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                case 0x21238:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21248:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x21238;
                    continue;
                case 0x21400:
                    pc=0x21400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21400() throws ExecutionException { /* 0x21400 - 0x21600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21400:
                    r2 = (r4&0xffffffffL) < (29&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2142c;
                        continue;
                    }
                    r2 = r4 << 3;
                    r4 = r4 << 5;
                    r4 = r4 - r2;
                    r2 = 6 << 16;
                    r2 = r2 + -1636;
                    r2 = r2 + r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2142c:
                    r29 = r29 + -24;
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + -1688;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + -1652;
                    r7 = r0 + 250;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x21458;
                    return;
                case 0x21458:
                case 0x21600:
                    pc=0x21600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21600() throws ExecutionException { /* 0x21600 - 0x21800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21600:
                    r2 = (r4&0xffffffffL) < (29&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2162c;
                        continue;
                    }
                    r2 = r4 << 3;
                    r4 = r4 << 5;
                    r4 = r4 - r2;
                    r2 = 6 << 16;
                    r2 = r2 + -1636;
                    r2 = r2 + r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2162c:
                    r29 = r29 + -24;
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + -1688;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + -1652;
                    r7 = r0 + 250;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x21658;
                    return;
                case 0x21658:
                case 0x21800:
                    pc=0x21800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21800() throws ExecutionException { /* 0x21800 - 0x21a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21800:
                    r29 = r29 + -32;
                    r2 = r0 + 15;
                    r6 = 6 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r16 + 12092;
                    r5 = r0 + 60;
                    r6 = r6 + 564;
                    r7 = r0 + 2;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x21834;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x21834:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 12092;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21a00:
                    pc=0x21a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21a00() throws ExecutionException { /* 0x21a00 - 0x21c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21a00:
                    r2 = r0 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21c00:
                    pc=0x21c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21c00() throws ExecutionException { /* 0x21c00 - 0x21e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c3c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x21c20;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x21c20:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c54;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21c3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21c54:
                    r4 = 6 << 16;
                    r4 = r4 + 572;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21c68;
                    pc=0x24200;
                    run_24200(); return;
                case 0x21c68:
                case 0x21e00:
                    pc=0x21e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21e00() throws ExecutionException { /* 0x21e00 - 0x22000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21e18;
                    pc=0x30400;
                    run_30400(); return;
                case 0x21e18:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e34;
                        continue;
                    }
                case 0x21e20:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21e34:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e20;
                        continue;
                    }
                    r4 = 6 << 16;
                    r4 = r4 + 616;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21e50;
                    pc=0x24200;
                    run_24200(); return;
                case 0x21e50:
                case 0x22000:
                    pc=0x22000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22000() throws ExecutionException { /* 0x22000 - 0x22200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22000:
                    /* Next insn is delay slot */ 
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x22200:
                    pc=0x22200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22200() throws ExecutionException { /* 0x22200 - 0x22400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2228c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x22224;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x22224:
                    r16 = r2 + 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22268;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2223c;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x2223c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x222a8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x22268:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x2228c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x222a8:
                    r4 = 6 << 16;
                    r4 = r4 + 572;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x222bc;
                    pc=0x24200;
                    run_24200(); return;
                case 0x222bc:
                case 0x22400:
                    pc=0x22400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22400() throws ExecutionException { /* 0x22400 - 0x22600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22458;
                        continue;
                    }
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2242c;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x2242c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2247c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x22458:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x2247c:
                    r4 = 6 << 16;
                    r4 = r4 + 572;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22490;
                    pc=0x24200;
                    run_24200(); return;
                case 0x22490:
                case 0x22600:
                    pc=0x22600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22600() throws ExecutionException { /* 0x22600 - 0x22800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22600:
                    r29 = r29 + -64;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r2 = r4 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r23;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    r18 = r7 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22984;
                        run_22800(); return;
                    }
                    r23 = 6 << 16;
                    r23 = r23 + 672;
                case 0x2264c:
                    r2 = r4 & 128;
                    writePages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff] = r23;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22688;
                        continue;
                    }
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x22688;
                        continue;
                    }
                    r18 = r0 - r18;
                    r2 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r17 = r0 - r17;
                    r17 = r17 - r2;
                    r2 = r0 + 45;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x226ac;
                    continue;
                case 0x22688:
                    r2 = r4 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22994;
                        run_22800(); return;
                    }
                    r2 = r4 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22aac;
                        run_22a00(); return;
                    }
                    r2 = r0 + 32;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                case 0x226ac:
                    r2 = r17 | r18;
                    r22 = r16 + 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b1c;
                        run_22a00(); return;
                    }
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x226d0;
                    continue;
                case 0x226cc:
                    r23 = readPages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff];
                case 0x226d0:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r7 = r20 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x226e8;
                    pc=0x1083c;
                    run_10800(); return;
                case 0x226e8:
                    r23 = r23 + r3;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r19 = r19 + 1;
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22714;
                    pc=0x10208;
                    run_10200(); return;
                case 0x22714:
                    r17 = r2 + r0;
                    r2 = r3 | r2;
                    r18 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x226cc;
                        continue;
                    }
                    r4 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r19 = r19 - r22;
                case 0x22730:
                    r2 = r4 & 64;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a90;
                        run_22a00(); return;
                    }
                    r3 = readPages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff];
                case 0x22744:
                    r2 = r4 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2276c;
                        continue;
                    }
                    r2 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r5 = r0 + 16;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x22ab8;
                        run_22a00(); return;
                    }
                    r5 = r0 + 8;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x22af4;
                        run_22a00(); return;
                    }
                case 0x2276c:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a84;
                        run_22a00(); return;
                    }
                    r3 = r0 + r0;
                case 0x2277c:
                    r2 = r4 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x229f8;
                        run_22800(); return;
                    }
                    r7 = r3 + r21;
                    r19 = r7 + r19;
                    r7 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r2 = r19 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x229f8;
                        run_22800(); return;
                    }
                    r4 = r4 & 17;
                    r7 = r7 - r19;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x229a8;
                        run_22800(); return;
                    }
                case 0x227b4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22870;
                        run_22800(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x227f0;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x227f0:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22870;
                        run_22800(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x22800:
                    pc=0x22800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22800() throws ExecutionException { /* 0x22800 - 0x22a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22800:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22830;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x22830:
                    r21 = (r21&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22870;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+18;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22870;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x22870:
                    r2 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r2 = r2 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x228d8;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x228d4;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 48;
                case 0x22898:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x228c8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x228c8:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x22898;
                        continue;
                    }
                case 0x228d4:
                    r7 = r0 + r0;
                case 0x228d8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22928;
                        continue;
                    }
                    r3 = r3 + -1;
                    r8 = r0 + 48;
                    r6 = r0 + -1;
                case 0x228ec:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2291c;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2291c:
                    r3 = r3 + -1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x228ec;
                        continue;
                    }
                case 0x22928:
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                case 0x22930:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a04;
                        run_22a00(); return;
                    }
                    r2 = r2 + -1;
                    r3 = r16 + r2;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r2;
                    addr=r3+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22930;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x22930;
                    continue;
                case 0x22984:
                    r23 = 6 << 16;
                    r23 = r23 + 692;
                    /* Next insn is delay slot */ 
                    pc=0x2264c;
                    run_22600(); return;
                case 0x22994:
                    r2 = r0 + 43;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x226ac;
                    run_22600(); return;
                case 0x229a8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x229f8;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 32;
                case 0x229bc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x229ec;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x229ec:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x229bc;
                        continue;
                    }
                case 0x229f8:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x227b4;
                    run_22600(); return;
                case 0x22a00:
                    pc=0x22a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22a00() throws ExecutionException { /* 0x22a00 - 0x22c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22a00:
                case 0x22a04:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a54;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x22a18:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a48;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x22a48:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x22a18;
                        continue;
                    }
                case 0x22a54:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r23 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22a84:
                    r3 = r3 - r19;
                    /* Next insn is delay slot */ 
                    pc=0x2277c;
                    run_22600(); return;
                case 0x22a90:
                    r4 = r4 | 64;
                    r2 = r0 + 1;
                    writePages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff] = r4;
                    writePages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff] = r2;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x22744;
                    run_22600(); return;
                case 0x22aac:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x226ac;
                    run_22600(); return;
                case 0x22ab8:
                    r6 = r29 + 16;
                    r5 = r6 + r21;
                    r6 = r0 + 48;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r4 & 256;
                    r2 = r21 + 1;
                    r21 = r21 + 2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b28;
                        continue;
                    }
                    r5 = r0 + 88;
                case 0x22ae0:
                    r6 = r29 + 16;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2276c;
                    run_22600(); return;
                case 0x22af4:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a84;
                        continue;
                    }
                    r2 = r29 + r21;
                    r3 = r0 + 48;
                    addr=r2+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r21 + 1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2277c;
                    run_22600(); return;
                case 0x22b1c:
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22730;
                    run_22600(); return;
                case 0x22b28:
                    r5 = r0 + 120;
                    /* Next insn is delay slot */ 
                    pc=0x22ae0;
                    continue;
                case 0x22c00:
                    pc=0x22c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22c00() throws ExecutionException { /* 0x22c00 - 0x22e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22c00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r2 = r19 & 64;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d94;
                        continue;
                    }
                    r18 = readPages[(r4+292)>>>12][((r4+292)>>>2)&0x3ff];
                    r4 = r5 + r0;
                    r6 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22c48;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x22c48:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c54;
                        continue;
                    }
                    r18 = r2 - r17;
                case 0x22c54:
                    r2 = r19 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cd4;
                        continue;
                    }
                    r2 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r3 = r18 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cd4;
                        continue;
                    }
                    r19 = r19 & 1;
                    r2 = r2 - r18;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cd8;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cd4;
                        continue;
                    }
                    r3 = r2 + -1;
                    r6 = r0 + 32;
                    r2 = r0 + -1;
                case 0x22c98:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cc8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x22cc8:
                    r3 = r3 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22c98;
                        continue;
                    }
                case 0x22cd4:
                    r2 = r0 + r0;
                case 0x22cd8:
                    r6 = r17 + r18;
                case 0x22cdc:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x22d24;
                        continue;
                    }
                case 0x22ce4:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cdc;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r17 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x22ce4;
                        continue;
                    }
                case 0x22d24:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d74;
                        continue;
                    }
                    r2 = r2 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x22d38:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d68;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x22d68:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x22d38;
                        continue;
                    }
                case 0x22d74:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22d94:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22da0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x22da0:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22c54;
                    continue;
                case 0x22e00:
                    pc=0x22e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22e00() throws ExecutionException { /* 0x22e00 - 0x23000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22e00:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ed8;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 956;
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x22e2c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22e4c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22e6c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r3 = r3 & r2;
                    r2 = r3 + 8;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22e94:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 >> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22eb8:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22ed8:
                    r29 = r29 + -24;
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 712;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 744;
                    r7 = r0 + 179;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x22f04;
                    return;
                case 0x22f04:
                case 0x23000:
                    pc=0x23000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23000() throws ExecutionException { /* 0x23000 - 0x23200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23000:
                    r29 = r29 + -360;
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r22;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r21;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r20;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r19;
                    writePages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff] = r18;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r17;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r31;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r23;
                    writePages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff] = r16;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r22 = 6 << 16;
                    r18 = 6 << 16;
                    r19 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    r20 = r0 + r0;
                    r22 = r22 + 984;
                    r18 = r18 + 1240;
                    r21 = 6 << 16;
                    r19 = r19 + 1052;
                    r17 = r6 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230b8;
                        continue;
                    }
                case 0x23068:
                    r2 = r0 + 37;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23118;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x230a4:
                    r6 = r17 + r0;
                case 0x230a8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r17 = r6 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23068;
                        continue;
                    }
                case 0x230b8:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230e4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x230e4:
                    r31 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    r23 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r22 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r21 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    r20 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r19 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r18 = readPages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff];
                    r17 = readPages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff];
                    r16 = readPages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r29 = r29 + 360;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23118:
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x234c4;
                        run_23400(); return;
                    }
                    r2 = r6 + 3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r17 = r2 + -1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23184;
                        continue;
                    }
                case 0x23140:
                    r3 = r16 + -32;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (17&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x232e4;
                        run_23200(); return;
                    }
                    r3 = r3 << 2;
                    r3 = r22 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x2316c:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 16;
                    r2 = r2 + 1;
                case 0x23178:
                    r17 = r2 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23140;
                        continue;
                    }
                case 0x23184:
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r0 + r0;
                case 0x2318c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23198;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x23198:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23500;
                        run_23400(); return;
                    }
                    r3 = r0 + 46;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23338;
                        run_23200(); return;
                    }
                case 0x231b0:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r2 | 64;
                    r4 = r0 + 42;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r3;
                    if(r16 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23718;
                        run_23600(); return;
                    }
                    r4 = r16 + r0;
                    r23 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x231d8;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x231d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x236d4;
                        run_23600(); return;
                    }
                    r16 = r16 + -48;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2320c;
                    run_23200(); return;
                case 0x231f0:
                    r2 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                case 0x23200:
                    pc=0x23200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23200() throws ExecutionException { /* 0x23200 - 0x23400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23200:
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                case 0x2320c:
                    r23 = r23 + 1;
                    addr=r23+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23224;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x23224:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x231f0;
                        run_23000(); return;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                case 0x23234:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23354;
                        continue;
                    }
                case 0x23250:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    r5 = r0 + 2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23390;
                        continue;
                    }
                case 0x23264:
                    r3 = r0 + -5;
                    r2 = r2 & r3;
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x233a0;
                        continue;
                    }
                case 0x23280:
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x233a0;
                    continue;
                case 0x23294:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 1;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23178;
                    run_23000(); return;
                case 0x232a8:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 2;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23178;
                    run_23000(); return;
                case 0x232bc:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 8;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23178;
                    run_23000(); return;
                case 0x232d0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 4;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23178;
                    run_23000(); return;
                case 0x232e4:
                    r2 = r0 + 42;
                    r3 = r17 + r0;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r16 + r0;
                    if(r16 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2318c;
                        run_23000(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2374c;
                        run_23600(); return;
                    }
                case 0x2331c:
                    r2 = r5 | 32;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 1;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x2332c:
                    r3 = r0 + 46;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x231b0;
                        run_23000(); return;
                    }
                case 0x23338:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23250;
                        continue;
                    }
                case 0x23354:
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x2336c:
                    r3 = r0 + 5;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 5;
                case 0x23380:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23264;
                        continue;
                    }
                case 0x23390:
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23280;
                        continue;
                    }
                case 0x233a0:
                    r3 = r2 & 64;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x233b8;
                        continue;
                    }
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x233b8:
                    r16 = r16 + -88;
                    r16 = r16 & 255;
                    r3 = (r16&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x236f4;
                        run_23600(); return;
                    }
                    r16 = r16 << 2;
                    r16 = r18 + r16;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x233e4:
                    r3 = r0 + 6;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x23380;
                    continue;
                case 0x23400:
                    pc=0x23400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23400() throws ExecutionException { /* 0x23400 - 0x23600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23400:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 108;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x237b8;
                        run_23600(); return;
                    }
                    r3 = r0 + 3;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x23380;
                    run_23200(); return;
                case 0x23428:
                    r3 = r0 + 4;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x23380;
                    run_23200(); return;
                case 0x23444:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 104;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x237d4;
                        run_23600(); return;
                    }
                    r3 = r0 + 1;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23380;
                    run_23200(); return;
                case 0x2346c:
                    r3 = r0 + 7;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x23380;
                    run_23200(); return;
                case 0x23488:
                    r2 = r2 | 384;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x23490:
                    r2 = r0 + 16;
                case 0x23494:
                    r4 = r29 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x234a4;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x234a4:
                    r6 = r2 + r0;
                    r4 = r29 + 16;
                    r7 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x234b8;
                    pc=0x22600;
                    run_22600(); return;
                case 0x234b8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x230a8;
                    run_23000(); return;
                case 0x234c4:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r6 + 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a4;
                        run_23000(); return;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r3 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x230a8;
                    run_23000(); return;
                case 0x23500:
                    r23 = r23 + -48;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r23;
                    /* Next insn is delay slot */ 
                    pc=0x2352c;
                    continue;
                case 0x23510:
                    r2 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r16;
                case 0x2352c:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23544;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x23544:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23510;
                        continue;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r2 | 32;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2332c;
                    run_23200(); return;
                case 0x23564:
                    r20 = r0 + 1;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x230a8;
                    run_23000(); return;
                case 0x23574:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23794;
                        run_23600(); return;
                    }
                    r2 = 6 << 16;
                    r5 = r5 << 2;
                    r2 = r2 + 1372;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x235a0:
                    r2 = r0 + 10;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a1c;
                        run_23a00(); return;
                    }
                    r5 = r5 << 2;
                    r2 = r21 + 1400;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x235d0:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x23494;
                    continue;
                case 0x235e4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a40;
                        run_23a00(); return;
                    }
                case 0x23600:
                    pc=0x23600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23600() throws ExecutionException { /* 0x23600 - 0x23800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23600:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x23610;
                    pc=0x22c00;
                    run_22c00(); return;
                case 0x23610:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x230a8;
                    run_23000(); return;
                case 0x2361c:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239d8;
                        run_23800(); return;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a64;
                        run_23a00(); return;
                    }
                    r4 = r2 & 64;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23820;
                        run_23800(); return;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2366c;
                        continue;
                    }
                case 0x23668:
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                case 0x2366c:
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2367c;
                    pc=0x22c00;
                    run_22c00(); return;
                case 0x2367c:
                    r20 = r0 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x230a8;
                    run_23000(); return;
                case 0x2368c:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x23494;
                    run_23400(); return;
                case 0x236a0:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    r3 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r29 + 316;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    addr=r29+316;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+317;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x236c8;
                    pc=0x22c00;
                    run_22c00(); return;
                case 0x236c8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x230a8;
                    run_23000(); return;
                case 0x236d4:
                    r2 = r0 + 45;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23834;
                        run_23800(); return;
                    }
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23234;
                    run_23200(); return;
                case 0x236f4:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 872;
                    r6 = r6 + 744;
                    r7 = r0 + 616;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x23718;
                    return;
                case 0x23718:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r4 + 4;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x239c4;
                        run_23800(); return;
                    }
                    r2 = r3 + r0;
                case 0x2373c:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x23338;
                    run_23200(); return;
                case 0x2374c:
                    r2 = r0 - r2;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    r5 = r5 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x2331c;
                    run_23200(); return;
                case 0x23760:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x23768:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                case 0x2377c:
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x23794:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 816;
                    r6 = r6 + 744;
                    r7 = r0 + 362;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x237b8;
                    return;
                case 0x237b8:
                    r3 = r0 + 3;
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 2;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x23380;
                    run_23200(); return;
                case 0x237d4:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r0;
                    r17 = r17 + 2;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23380;
                    run_23200(); return;
                case 0x237ec:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x23800:
                    pc=0x23800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23800() throws ExecutionException { /* 0x23800 - 0x23a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23800:
                    r6 = r7 >> 31;
                case 0x23808:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x23814;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23814:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x230a8;
                    run_23000(); return;
                case 0x23820:
                    r2 = r2 | 64;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23668;
                    run_23600(); return;
                case 0x23834:
                    r17 = r17 + 2;
                case 0x23838:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23850;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x23850:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23838;
                        continue;
                    }
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r0 + -65;
                    r2 = r3 & r2;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23338;
                    run_23200(); return;
                case 0x23870:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x23878:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x23768;
                    run_23600(); return;
                case 0x23898:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2377c;
                    run_23600(); return;
                case 0x238a4:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x238ac:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x23878;
                    continue;
                case 0x238cc:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x238d4:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x238ac;
                    continue;
                case 0x238f4:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x238fc:
                    r2 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x238d4;
                    continue;
                case 0x2391c:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x238fc;
                    continue;
                case 0x23940:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23808;
                    continue;
                case 0x23968:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23808;
                    continue;
                case 0x23984:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x23808;
                    continue;
                case 0x239a4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x23808;
                    continue;
                case 0x239c4:
                    r3 = r0 + -65;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2373c;
                    run_23600(); return;
                case 0x239d8:
                    r2 = r2 | 192;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                    r2 = r0 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                case 0x23a00:
                    pc=0x23a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23a00() throws ExecutionException { /* 0x23a00 - 0x23c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23a00:
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x23a10;
                    pc=0x22600;
                    run_22600(); return;
                case 0x23a10:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x230a8;
                    run_23000(); return;
                case 0x23a1c:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 764;
                    r6 = r6 + 744;
                    r7 = r0 + 160;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x23a40;
                    return;
                case 0x23a40:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 796;
                    r6 = r6 + 744;
                    r7 = r0 + 571;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x23a64;
                    return;
                case 0x23a64:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 808;
                    r6 = r6 + 744;
                    r7 = r0 + 580;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x23a88;
                    return;
                case 0x23a88:
                case 0x23c00:
                    pc=0x23c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23c00() throws ExecutionException { /* 0x23c00 - 0x23e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23c00:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x23c1c;
                    pc=0x23000;
                    run_23000(); return;
                case 0x23c1c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23e00:
                    pc=0x23e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23e00() throws ExecutionException { /* 0x23e00 - 0x24000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23e00:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x23e24;
                    pc=0x23000;
                    run_23000(); return;
                case 0x23e24:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e50;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e50;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23e50:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 912;
                    r6 = r6 + 744;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x23e74;
                    return;
                case 0x23e74:
                case 0x24000:
                    pc=0x24000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24000() throws ExecutionException { /* 0x24000 - 0x24200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x24018;
                    pc=0x23000;
                    run_23000(); return;
                case 0x24018:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24044;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24044;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24044:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 912;
                    r6 = r6 + 744;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x24068;
                    return;
                case 0x24068:
                case 0x24200:
                    pc=0x24200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24200() throws ExecutionException { /* 0x24200 - 0x24400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24200:
                    r29 = r29 + -32;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 6 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + -8192;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x24238;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x24238:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r29 + 36;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x24254;
                    pc=0x36000;
                    run_36000(); return;
                case 0x24254:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x24268;
                    pc=0x2be00;
                    run_2be00(); return;
                case 0x24268:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x24274;
                    pc=0x28800;
                    run_28800(); return;
                case 0x24274:
                case 0x24400:
                    pc=0x24400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24400() throws ExecutionException { /* 0x24400 - 0x24600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24400:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + -33;
                    r2 = r4 & r2;
                    r2 = r2 + -65;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24600:
                    pc=0x24600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24600() throws ExecutionException { /* 0x24600 - 0x24800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24600:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24628;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24628:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24800:
                    pc=0x24800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24800() throws ExecutionException { /* 0x24800 - 0x24a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24800:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = ~(r0 | r4);
                    r2 = r2 >>> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24a00:
                    pc=0x24a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24a00() throws ExecutionException { /* 0x24a00 - 0x24c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24a00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24a24;
                        continue;
                    }
                    r4 = r4 ^ 9;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24a24:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24c00:
                    pc=0x24c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24c00() throws ExecutionException { /* 0x24c00 - 0x24e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24c00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24c28;
                        continue;
                    }
                    r2 = r4 + -9;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24c28:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24e00:
                    pc=0x24e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24e00() throws ExecutionException { /* 0x24e00 - 0x25000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24e00:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25000:
                    pc=0x25000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25000() throws ExecutionException { /* 0x25000 - 0x25200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25000:
                    r4 = r4 + -97;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25200:
                    pc=0x25200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25200() throws ExecutionException { /* 0x25200 - 0x25400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25200:
                    r4 = r4 + -65;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25400:
                    pc=0x25400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25400() throws ExecutionException { /* 0x25400 - 0x25600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25400:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25600:
                    pc=0x25600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25600() throws ExecutionException { /* 0x25600 - 0x25800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25600:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25800:
                    pc=0x25800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25800() throws ExecutionException { /* 0x25800 - 0x25a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25800:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25828;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25828:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25a00:
                    pc=0x25a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25a00() throws ExecutionException { /* 0x25a00 - 0x25c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25a00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 34;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25a24;
                        continue;
                    }
                    r4 = r4 ^ 39;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25a24:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25c00:
                    pc=0x25c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25c00() throws ExecutionException { /* 0x25c00 - 0x25e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25c00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + 1428;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x25c34;
                    pc=0x24200;
                    run_24200(); return;
                case 0x25c34:
                case 0x25e00:
                    pc=0x25e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25e00() throws ExecutionException { /* 0x25e00 - 0x26000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25e00:
                    r29 = r29 + -64;
                    r2 = r5 < r6 ? 1 : 0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r22 = r5 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r6;
                    r20 = r7 + r0;
                    r19 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25f1c;
                        continue;
                    }
                case 0x25e50:
                    r18 = r22 << 2;
                    r30 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r16 = r22 + 1;
                    r18 = r21 + r18;
                case 0x25e60:
                    r2 = r30 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25ea4;
                        continue;
                    }
                    r17 = r16 << 2;
                    r17 = r21 + r17;
                case 0x25e74:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x25e88;
                    return;
                case 0x25e88:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x25f50;
                        continue;
                    }
                    r16 = r16 + 1;
                    r2 = r30 < r16 ? 1 : 0;
                    r17 = r17 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e74;
                        continue;
                    }
                case 0x25ea4:
                    if(r30 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x25ec8;
                        continue;
                    }
                    r2 = r30 << 2;
                    r2 = r21 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                case 0x25ec8:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    r2 = r3 + r22;
                    r4 = r2 >>> 31;
                    r2 = r4 + r2;
                    r2 = r2 >> 1;
                    r2 = r2 < r30 ? 1 : 0;
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25fbc;
                        continue;
                    }
                    r5 = r30 + 1;
                    r6 = r3 + r0;
                    r30 = r30 + -1;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25f08;
                    pc=0x25e00;
                    continue;
                case 0x25f08:
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r30;
                    r3 = r30 + r0;
                case 0x25f10:
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e50;
                        continue;
                    }
                case 0x25f1c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25f50:
                    r2 = r30 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25ea4;
                        continue;
                    }
                    r7 = r30 << 2;
                    r23 = r21 + r7;
                    /* Next insn is delay slot */ 
                    pc=0x25f80;
                    continue;
                case 0x25f6c:
                    r30 = r30 + -1;
                    r2 = r30 < r16 ? 1 : 0;
                    r23 = r23 + -4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25ea4;
                        continue;
                    }
                case 0x25f80:
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r6 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x25f94;
                    return;
                case 0x25f94:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x25f6c;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r30 = r30 + -1;
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x25e60;
                    continue;
                case 0x25fbc:
                    r5 = r22 + r0;
                    r6 = r30 + -1;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25fd0;
                    pc=0x25e00;
                    continue;
                case 0x25fd0:
                    r22 = r30 + 1;
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x25f10;
                    continue;
                case 0x26000:
                    pc=0x26000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26000() throws ExecutionException { /* 0x26000 - 0x26200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26000:
                    r2 = r4 + r0;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26200:
                    pc=0x26200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26200() throws ExecutionException { /* 0x26200 - 0x26400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26200:
                    r4 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x22000;
                    run_22000(); return;
                case 0x26400:
                    pc=0x26400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26400() throws ExecutionException { /* 0x26400 - 0x26600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26400:
                    r29 = r29 + -24;
                    r4 = r0 + 12;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x26414;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x26414:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26600:
                    pc=0x26600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26600() throws ExecutionException { /* 0x26600 - 0x26800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2661c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x2661c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x22000;
                    run_22000(); return;
                case 0x26800:
                    pc=0x26800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26800() throws ExecutionException { /* 0x26800 - 0x26a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26800:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r2 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26860;
                        continue;
                    }
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    r4 = r5 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x26834;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x26834:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x26850;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x26850:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2685c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x2685c:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r17;
                case 0x26860:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26a00:
                    pc=0x26a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26a00() throws ExecutionException { /* 0x26a00 - 0x26c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26a00:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 + r0;
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r2 = ((r6 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26b20;
                        continue;
                    }
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r19 = r5 + r0;
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26a5c;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ad0;
                        continue;
                    }
                    r3 = r2 << 1;
                    r4 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26b44;
                        continue;
                    }
                case 0x26a5c:
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x26a60:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x26ac4;
                        continue;
                    }
                    r4 = r17 + 1;
                    r4 = r4 << 2;
                    r18 = r4 + -4;
                    r6 = r6 - r17;
                    r4 = r5 + r4;
                    r6 = r6 << 2;
                    r5 = r5 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x26a8c;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x26a8c:
                    r17 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x26a94:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = r5 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26ac4:
                    r18 = r17 << 2;
                    /* Next insn is delay slot */ 
                    pc=0x26a94;
                    continue;
                case 0x26ad0:
                    r4 = r0 + 16;
                    r3 = r0 + 4;
                case 0x26ad8:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x26ae4;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x26ae4:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x26b00;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x26b00:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26b0c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x26b0c:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26a60;
                    continue;
                case 0x26b20:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 1516;
                    r6 = r6 + 1536;
                    r7 = r0 + 138;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x26b44;
                    return;
                case 0x26b44:
                    r4 = r2 << 3;
                    /* Next insn is delay slot */ 
                    pc=0x26ad8;
                    continue;
                case 0x26c00:
                    pc=0x26c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26c00() throws ExecutionException { /* 0x26c00 - 0x26e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26c00:
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c58;
                        continue;
                    }
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x26c6c;
                        continue;
                    }
                    r3 = r3 + 4;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26c4c;
                    continue;
                case 0x26c38:
                    r3 = r3 + 4;
                    r4 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x26c64;
                        continue;
                    }
                case 0x26c4c:
                    r2 = r2 + 1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x26c38;
                        continue;
                    }
                case 0x26c58:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26c64:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26c6c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26e00:
                    pc=0x26e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26e00() throws ExecutionException { /* 0x26e00 - 0x27000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26e00:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e40;
                        continue;
                    }
                    r2 = r2 + -1;
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r4 = r5 << 2;
                    r6 = r4 + 4;
                    r2 = r2 - r5;
                    r4 = r3 + r4;
                    r5 = r3 + r6;
                    r6 = r2 << 2;
                    /* Next insn is delay slot */ 
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x26e40:
                    r29 = r29 + -24;
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + -1788;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 1536;
                    r7 = r0 + 268;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x26e6c;
                    return;
                case 0x26e6c:
                case 0x27000:
                    pc=0x27000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27000() throws ExecutionException { /* 0x27000 - 0x27200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27000:
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2705c;
                        continue;
                    }
                    r8 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x270b8;
                        continue;
                    }
                    r3 = r8 + 4;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27050;
                    continue;
                case 0x2703c:
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x27080;
                        continue;
                    }
                case 0x27050:
                    r2 = r2 + 1;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2703c;
                        continue;
                    }
                case 0x2705c:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 1552;
                    r6 = r6 + 1536;
                    r7 = r0 + 284;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x27080;
                    return;
                case 0x27080:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2705c;
                        continue;
                    }
                    r3 = r2 << 2;
                    r5 = r3 + 4;
                case 0x27090:
                    r7 = r7 + -1;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r7 - r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r7;
                    r5 = r8 + r5;
                    r4 = r8 + r3;
                    r6 = r6 << 2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x270b8:
                    r5 = r0 + 4;
                    r3 = r0 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27090;
                    continue;
                case 0x27200:
                    pc=0x27200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27200() throws ExecutionException { /* 0x27200 - 0x27400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27200:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 + r0;
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r2 = ((r17 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x272e8;
                        continue;
                    }
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x272dc;
                        continue;
                    }
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27254;
                    continue;
                case 0x27250:
                    r2 = r2 << 1;
                case 0x27254:
                    r3 = ((r17 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27250;
                        continue;
                    }
                    r4 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27318;
                        continue;
                    }
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x27270:
                    r3 = ((r6 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x272a8;
                        continue;
                    }
                    r7 = r6 << 2;
                    r4 = r17 - r6;
                    r3 = r0 + r0;
                case 0x27288:
                    r2 = r2 + r7;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    r7 = r7 + 4;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x27288;
                        continue;
                    }
                    r6 = r17 + r0;
                case 0x272a8:
                    r3 = r6 + 1;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r2 = r2 + r6;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x272dc:
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x27254;
                    continue;
                case 0x272e8:
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = r17 << 2;
                    r17 = r2 + r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r5;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27318:
                    r4 = r2 << 2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x27328;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x27328:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27344;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x27344:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27350;
                    pc=0x22000;
                    run_22000(); return;
                case 0x27350:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r19;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27270;
                    continue;
                case 0x27400:
                    pc=0x27400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27400() throws ExecutionException { /* 0x27400 - 0x27600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27400:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2759c;
                        continue;
                    }
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r5 = r5 << 2;
                    r4 = r3 + r5;
                    r17 = r6 + r0;
                    r5 = r5 + 4;
                    r6 = r2 - r18;
                    r19 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r3 + r5;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r6 = r6 << 2;
                    r18 = ((r18 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r31=0x27468;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x27468:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27474;
                        continue;
                    }
                    r17 = r17 + -1;
                case 0x27474:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = ((r6 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27578;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x274b4;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27528;
                        continue;
                    }
                    r3 = r2 << 1;
                    r4 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x275c0;
                        continue;
                    }
                case 0x274b4:
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x274b8:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2751c;
                        continue;
                    }
                    r4 = r17 + 1;
                    r4 = r4 << 2;
                    r18 = r4 + -4;
                    r6 = r6 - r17;
                    r4 = r5 + r4;
                    r6 = r6 << 2;
                    r5 = r5 + r18;
                    /* Next insn is delay slot */ 
                    r31=0x274e4;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x274e4:
                    r17 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x274ec:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r5 = r5 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r19;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2751c:
                    r18 = r17 << 2;
                    /* Next insn is delay slot */ 
                    pc=0x274ec;
                    continue;
                case 0x27528:
                    r4 = r0 + 16;
                    r3 = r0 + 4;
                case 0x27530:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x2753c;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x2753c:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27558;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x27558:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27564;
                    pc=0x22000;
                    run_22000(); return;
                case 0x27564:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x274b8;
                    continue;
                case 0x27578:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 1516;
                    r6 = r6 + 1536;
                    r7 = r0 + 138;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2759c;
                    return;
                case 0x2759c:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + -1788;
                    r6 = r6 + -1768;
                    r7 = r0 + 129;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x275c0;
                    return;
                case 0x275c0:
                    r4 = r2 << 3;
                    /* Next insn is delay slot */ 
                    pc=0x27530;
                    continue;
                case 0x27600:
                    pc=0x27600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27600() throws ExecutionException { /* 0x27600 - 0x27800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27600:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    r3 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27798;
                        continue;
                    }
                    r20 = r5 + r6;
                    r3 = ((r2 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    r18 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27798;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r17 = r7 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27798;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27738;
                        continue;
                    }
                    if(r5 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x27738;
                        continue;
                    }
                    r22 = r6 << 2;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27684;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x27684:
                    r5 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r23 = r16 << 2;
                    r4 = r2 + r0;
                    r5 = r5 + r23;
                    r6 = r22 + r0;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x276a4;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x276a4:
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27768;
                        continue;
                    }
                    r20 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x277bc;
                        continue;
                    }
                    r16 = r17 - r16;
                    r6 = r16 - r18;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r5 = r17 - r6;
                    r5 = r5 << 2;
                    r4 = r2 + r23;
                    r5 = r2 + r5;
                    r6 = r6 << 2;
                    r17 = r17 - r18;
                    /* Next insn is delay slot */ 
                    r31=0x276e8;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x276e8:
                    r20 = r17 << 2;
                case 0x276ec:
                    r4 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r5 = r21 + r0;
                    r4 = r4 + r20;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27704;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x27704:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x22000;
                    run_22000(); return;
                case 0x27738:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27768:
                    r5 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r18 = r18 + r17;
                    r20 = r17 << 2;
                    r4 = r18 << 2;
                    r6 = r16 - r17;
                    r4 = r5 + r4;
                    r6 = r6 << 2;
                    r5 = r5 + r20;
                    /* Next insn is delay slot */ 
                    r31=0x27790;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x27790:
                    /* Next insn is delay slot */ 
                    pc=0x276ec;
                    continue;
                case 0x27798:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 1564;
                    r6 = r6 + 1536;
                    r7 = r0 + 378;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x277bc;
                    return;
                case 0x277bc:
                    r5 = 6 << 16;
                    r6 = 6 << 16;
                    r4 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r5 = r5 + 1632;
                    r6 = r6 + 1536;
                    r7 = r0 + 407;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x277e0;
                    return;
                case 0x277e0:
                case 0x27800:
                    pc=0x27800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27800() throws ExecutionException { /* 0x27800 - 0x27a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27800:
                    r29 = r29 + -32;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r6 + r3;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r17 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27880;
                        continue;
                    }
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                case 0x2783c:
                    r3 = r3 << 2;
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x27854;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x27854:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27880:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r4 = r4 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x27890;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x27890:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x278ac;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x278ac:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x278b8;
                    pc=0x22000;
                    run_22000(); return;
                case 0x278b8:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2783c;
                    continue;
                case 0x27a00:
                    pc=0x27a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27a00() throws ExecutionException { /* 0x27a00 - 0x27c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27a00:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27a3c;
                        continue;
                    }
                    r29 = r29 + -32;
                    r7 = r5 + r0;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    r6 = r2 + -1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x27a34;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x27a34:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                case 0x27a3c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27c00:
                    pc=0x27c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27c00() throws ExecutionException { /* 0x27c00 - 0x27e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27c00:
                    /* Next insn is delay slot */ 
                    pc=0x32800;
                    run_32800(); return;
                case 0x27e00:
                    pc=0x27e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27e00() throws ExecutionException { /* 0x27e00 - 0x28000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27e00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r17 = r5 + r0;
                    r16 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27e20;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x27e20:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e64;
                        continue;
                    }
                    r3 = 2 << 16;
                    r3 = r3 + 31744;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r4 = r2 + 1;
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x27e4c;
                    pc=0x28200;
                    run_28200(); return;
                case 0x27e4c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27e64:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e4c;
                    continue;
                case 0x28000:
                    pc=0x28000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28000() throws ExecutionException { /* 0x28000 - 0x28200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28000:
                    r5 = r4 + r0;
                    r6 = r0 + r0;
                    r4 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44a00;
                    run_44a00(); return;
                case 0x28200:
                    pc=0x28200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28200() throws ExecutionException { /* 0x28200 - 0x28400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28200:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r6 + r0;
                    r23 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x282ac;
                        continue;
                    }
                    r20 = r7 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x282ac;
                        continue;
                    }
                    r21 = r4 + r0;
                    r22 = r5 + r0;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x28270;
                    continue;
                case 0x28258:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x282e0;
                        continue;
                    }
                    r17 = r16 + 1;
                    r2 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x282ac;
                        continue;
                    }
                case 0x28270:
                    r16 = r18 + r17;
                    r16 = r16 >>> 1;
                    { long hilo = (long)(r16) * ((long)r20); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r21 + r0;
                    r19 = lo;
                    r19 = r22 + r19;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=r23;
                    r31=0x28294;
                    return;
                case 0x28294:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28258;
                        continue;
                    }
                    r18 = r16 + r0;
                    r2 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28270;
                        continue;
                    }
                case 0x282ac:
                    r2 = r0 + r0;
                case 0x282b0:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x282e0:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x282b0;
                    continue;
                case 0x28400:
                    pc=0x28400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28400() throws ExecutionException { /* 0x28400 - 0x28600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28400:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28600:
                    pc=0x28600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28600() throws ExecutionException { /* 0x28600 - 0x28800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28600:
                    r29 = r29 + -4136;
                    writePages[(r29+4112)>>>12][((r29+4112)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + 2560;
                    writePages[(r29+4116)>>>12][((r29+4116)>>>2)&0x3ff] = r18;
                    writePages[(r29+4108)>>>12][((r29+4108)>>>2)&0x3ff] = r16;
                    writePages[(r29+4132)>>>12][((r29+4132)>>>2)&0x3ff] = r31;
                    writePages[(r29+4128)>>>12][((r29+4128)>>>2)&0x3ff] = r21;
                    writePages[(r29+4124)>>>12][((r29+4124)>>>2)&0x3ff] = r20;
                    writePages[(r29+4120)>>>12][((r29+4120)>>>2)&0x3ff] = r19;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28638;
                    pc=0x2d400;
                    run_2d400(); return;
                case 0x28638:
                    r16 = r2 + r0;
                    r4 = r17 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28660;
                        continue;
                    }
                    r5 = r0 + 47;
                    /* Next insn is delay slot */ 
                    r31=0x28654;
                    pc=0x32600;
                    run_32600(); return;
                case 0x28654:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28694;
                        continue;
                    }
                    r4 = r17 + r0;
                case 0x28660:
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2866c;
                    pc=0x47200;
                    run_47200(); return;
                case 0x2866c:
                    r31 = readPages[(r29+4132)>>>12][((r29+4132)>>>2)&0x3ff];
                    r21 = readPages[(r29+4128)>>>12][((r29+4128)>>>2)&0x3ff];
                    r20 = readPages[(r29+4124)>>>12][((r29+4124)>>>2)&0x3ff];
                    r19 = readPages[(r29+4120)>>>12][((r29+4120)>>>2)&0x3ff];
                    r18 = readPages[(r29+4116)>>>12][((r29+4116)>>>2)&0x3ff];
                    r17 = readPages[(r29+4112)>>>12][((r29+4112)>>>2)&0x3ff];
                    r16 = readPages[(r29+4108)>>>12][((r29+4108)>>>2)&0x3ff];
                    r29 = r29 + 4136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28694:
                    r20 = 6 << 16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r21 = r0 + 58;
                    r19 = r0 + 47;
                    r20 = r20 + 2568;
                case 0x286a8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28750;
                        continue;
                    }
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x287f0;
                        continue;
                    }
                    r6 = r16 + r0;
                    r2 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x286d0;
                    continue;
                case 0x286c8:
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x286ec;
                        continue;
                    }
                case 0x286d0:
                    r2 = r2 + 1;
                    r6 = r6 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x286c8;
                        continue;
                    }
                case 0x286ec:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2876c;
                        continue;
                    }
                case 0x28700:
                    r4 = r29 + 16;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28710;
                    pc=0x32400;
                    run_32400(); return;
                case 0x28710:
                    r4 = r29 + 16;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28720;
                    pc=0x47200;
                    run_47200(); return;
                case 0x28720:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28740;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x287cc;
                    continue;
                case 0x28734:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x2875c;
                        continue;
                    }
                    r16 = r16 + 1;
                case 0x28740:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28734;
                        continue;
                    }
                case 0x28750:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2866c;
                    continue;
                case 0x2875c:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x286a8;
                    continue;
                case 0x2876c:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x28778;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x28778:
                    r3 = r29 + 16;
                    r2 = r3 + r2;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x28700;
                        continue;
                    }
                    r4 = r3 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x287a0;
                    pc=0x32400;
                    run_32400(); return;
                case 0x287a0:
                    r4 = r29 + 16;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x287b0;
                    pc=0x32400;
                    run_32400(); return;
                case 0x287b0:
                    r4 = r29 + 16;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x287c0;
                    pc=0x47200;
                    run_47200(); return;
                case 0x287c0:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28740;
                        continue;
                    }
                case 0x287cc:
                    /* Next insn is delay slot */ 
                    r31=0x287d4;
                    pc=0x28400;
                    run_28400(); return;
                case 0x287d4:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28740;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2866c;
                    continue;
                case 0x287f0:
                    r2 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x286ec;
                    continue;
                case 0x28800:
                    pc=0x28800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28800() throws ExecutionException { /* 0x28800 - 0x28a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28800:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2881c;
                    pc=0x44c00;
                    run_44c00(); return;
                case 0x2881c:
                    r4 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2883c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2883c;
                    return;
                case 0x2883c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28848;
                    pc=0x36800;
                    run_36800(); return;
                case 0x28848:
                case 0x28a00:
                    pc=0x28a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28a00() throws ExecutionException { /* 0x28a00 - 0x28c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28a00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a4c;
                        continue;
                    }
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a3c;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28b38;
                        continue;
                    }
                case 0x28a3c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a6c;
                        continue;
                    }
                case 0x28a4c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28a6c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28a7c;
                    pc=0x29200;
                    run_29200(); return;
                case 0x28a7c:
                    r3 = readPages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28aa4;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x28a9c;
                    return;
                case 0x28a9c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28b48;
                        continue;
                    }
                case 0x28aa4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28b54;
                        continue;
                    }
                case 0x28ab8:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28ae4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28ae0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28ae0;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x28ae0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x28ae4:
                    r5 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28b04;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28b00;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x28b00:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                case 0x28b04:
                    /* Next insn is delay slot */ 
                    r31=0x28b0c;
                    pc=0x2a800;
                    run_2a800(); return;
                case 0x28b0c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x28b18;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x28b18:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28b38:
                    /* Next insn is delay slot */ 
                    r31=0x28b40;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x28b40:
                    /* Next insn is delay slot */ 
                    pc=0x28a3c;
                    continue;
                case 0x28b48:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x28aa4;
                    continue;
                case 0x28b54:
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28b64;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x28b64:
                    /* Next insn is delay slot */ 
                    pc=0x28ab8;
                    continue;
                case 0x28c00:
                    pc=0x28c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28c00() throws ExecutionException { /* 0x28c00 - 0x28e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28c00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x28e00:
                    pc=0x28e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28e00() throws ExecutionException { /* 0x28e00 - 0x29000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28e00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r17 = r5 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f40;
                        continue;
                    }
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 | 2048;
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28ff4;
                        continue;
                    }
                case 0x28e44:
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f1c;
                        continue;
                    }
                    r2 = r2 & 65535;
                    r4 = r2 & 4096;
                    r16 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2900c;
                        run_29000(); return;
                    }
                    r6 = readPages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff];
                case 0x28e70:
                    r2 = r2 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28ea4;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r6 = r6 - r2;
                    r2 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28ea4;
                        continue;
                    }
                    r2 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    r6 = r6 - r2;
                case 0x28ea4:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x28eb8;
                    return;
                case 0x28eb8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x29044;
                        run_29000(); return;
                    }
                case 0x28ec4:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r4 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r3 = r3 & 63487;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 & 4096;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x290c8;
                        run_29000(); return;
                    }
                case 0x28ef0:
                    r5 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f1c;
                        continue;
                    }
                    r2 = r17 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28f18;
                        continue;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x28f18;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x28f18:
                    writePages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff] = r0;
                case 0x28f1c:
                    r2 = r0 + r0;
                case 0x28f20:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28f40:
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f1c;
                        continue;
                    }
                    r16 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 & 3;
                    r16 = r16 - r18;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28fe8;
                        continue;
                    }
                    r2 = readPages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff];
                case 0x28f70:
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r16 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x28f1c;
                    continue;
                case 0x28f84:
                    r16 = r16 - r2;
                    r18 = r18 + r2;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f1c;
                        continue;
                    }
                case 0x28f94:
                    r2 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r6 = r18 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x28fb0;
                    return;
                case 0x28fb0:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f84;
                        continue;
                    }
                case 0x28fb8:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28fe8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x28f70;
                    continue;
                case 0x28ff4:
                    r3 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28e44;
                        continue;
                    }
                case 0x29000:
                    pc=0x29000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29000() throws ExecutionException { /* 0x29000 - 0x29200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29000:
                    /* Next insn is delay slot */ 
                    pc=0x28f1c;
                    run_28e00(); return;
                case 0x2900c:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r4 = r19 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x29024;
                    return;
                case 0x29024:
                    r6 = r2 + r0;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29090;
                        continue;
                    }
                case 0x29034:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x28e70;
                    run_28e00(); return;
                case 0x29044:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28ec4;
                        run_28e00(); return;
                    }
                    r2 = r0 + 29;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2906c;
                        continue;
                    }
                    r2 = r0 + 22;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28fb8;
                        run_28e00(); return;
                    }
                case 0x2906c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    r2 = r2 & 63487;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x28ef0;
                    run_28e00(); return;
                case 0x29090:
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29034;
                        continue;
                    }
                    r3 = r0 + 29;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x290b8;
                        continue;
                    }
                    r3 = r0 + 22;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28fb8;
                        run_28e00(); return;
                    }
                case 0x290b8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x28f20;
                    run_28e00(); return;
                case 0x290c8:
                    writePages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x28ef0;
                    run_28e00(); return;
                case 0x29200:
                    pc=0x29200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29200() throws ExecutionException { /* 0x29200 - 0x29400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29228;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29268;
                        continue;
                    }
                case 0x29228:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29250;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29250:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x29268:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x29274;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x29274:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x29228;
                    continue;
                case 0x29400:
                    pc=0x29400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29400() throws ExecutionException { /* 0x29400 - 0x29600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29400:
                    r5 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29418;
                        continue;
                    }
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x29200;
                    run_29200(); return;
                case 0x29418:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r5 = r5 + -28160;
                    /* Next insn is delay slot */ 
                    pc=0x2d000;
                    run_2d000(); return;
                case 0x29600:
                    pc=0x29600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29600() throws ExecutionException { /* 0x29600 - 0x29800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29600:
                    r2 = r6 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x297a4;
                        continue;
                    }
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r21 = r4 + r0;
                    r22 = r5 + r0;
                    r17 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29654;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29740;
                        continue;
                    }
                case 0x29654:
                    r18 = r6 + -1;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x296d0;
                    continue;
                case 0x29664:
                    r2 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29678;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x29678:
                    r4 = r20 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2968c;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x2968c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29758;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 - r16;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r2 = r2 + r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r6 = r16 + r0;
                    r18 = r18 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x296c4;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x296c4:
                    r19 = r19 + r16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2970c;
                        continue;
                    }
                case 0x296d0:
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29664;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x296f0;
                    pc=0x31000;
                    run_31000(); return;
                case 0x296f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29704;
                        continue;
                    }
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x29664;
                    continue;
                case 0x29704:
                    if(r19 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x29798;
                        continue;
                    }
                case 0x2970c:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                case 0x29714:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29740:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x2974c;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2974c:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x29654;
                    continue;
                case 0x29758:
                    r2 = r2 + 1;
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r16 = r2 - r20;
                    r3 = r3 - r16;
                    r6 = r16 + r0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    r5 = r20 + r0;
                    r16 = r19 + r16;
                    /* Next insn is delay slot */ 
                    r31=0x29788;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x29788:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29714;
                    continue;
                case 0x29798:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29714;
                    continue;
                case 0x297a4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29800:
                    pc=0x29800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29800() throws ExecutionException { /* 0x29800 - 0x29a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29600;
                    run_29600(); return;
                case 0x29a00:
                    pc=0x29a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29a00() throws ExecutionException { /* 0x29a00 - 0x29c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29a00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29c00:
                    pc=0x29c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29c00() throws ExecutionException { /* 0x29c00 - 0x29e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29c00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29e00:
                    pc=0x29e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29e00() throws ExecutionException { /* 0x29e00 - 0x2a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29e00:
                    r5 = 3 << 16;
                    r5 = r5 + -29696;
                    /* Next insn is delay slot */ 
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x2a000:
                    pc=0x2a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a000() throws ExecutionException { /* 0x2a000 - 0x2a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a000:
                    r29 = r29 + -32;
                    r2 = r5 << 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r5 << 4;
                    r18 = r18 - r2;
                    r18 = r18 + r5;
                    r18 = r18 << 3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r5 + r0;
                    r5 = r18 + 12;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2a038;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x2a038:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a064;
                        continue;
                    }
                    r4 = r2 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r5 = r0 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a064;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x2a064:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a200:
                    pc=0x2a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a200() throws ExecutionException { /* 0x2a200 - 0x2a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a200:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r5 = r5 + -29696;
                    /* Next insn is delay slot */ 
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x2a400:
                    pc=0x2a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a400() throws ExecutionException { /* 0x2a400 - 0x2a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a400:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a57c;
                        continue;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -25088;
                    writePages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    r16 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r4+740)>>>12][((r4+740)>>>2)&0x3ff] = r2;
                    r2 = r4 + 748;
                    writePages[(r4+744)>>>12][((r4+744)>>>2)&0x3ff] = r2;
                    r22 = r0 + 1;
                    r2 = r0 + 4;
                    r21 = 3 << 16;
                    r20 = 3 << 16;
                    r19 = 3 << 16;
                    r18 = 3 << 16;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r22;
                    writePages[(r4+736)>>>12][((r4+736)>>>2)&0x3ff] = r0;
                    r21 = r21 + 6144;
                    r4 = r16 + 92;
                    r20 = r20 + 7168;
                    r19 = r19 + 7680;
                    r18 = r18 + 8192;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2a4bc;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x2a4bc:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r4 = r16 + 92;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r22&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2a510;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x2a510:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r0 + 18;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2a568;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x2a568:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                case 0x2a57c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a600:
                    pc=0x2a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a600() throws ExecutionException { /* 0x2a600 - 0x2a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a600:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a700;
                        continue;
                    }
                case 0x2a62c:
                    r18 = r18 + 736;
                    r17 = r0 + -1;
                case 0x2a634:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a660;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2a6e4;
                    continue;
                case 0x2a650:
                    r2 = r2 + -1;
                    r16 = r16 + 104;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6e4;
                        continue;
                    }
                case 0x2a660:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a650;
                        continue;
                    }
                    r2 = r0 + -1;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2a6b0;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x2a6b0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    writePages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x2a6c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a6e4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a714;
                        continue;
                    }
                case 0x2a6f4:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a634;
                    continue;
                case 0x2a700:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a70c;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2a70c:
                    /* Next insn is delay slot */ 
                    pc=0x2a62c;
                    continue;
                case 0x2a714:
                    r4 = r19 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x2a724;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x2a724:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6f4;
                        continue;
                    }
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a6c4;
                    continue;
                case 0x2a800:
                    pc=0x2a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a800() throws ExecutionException { /* 0x2a800 - 0x2aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a800:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aa00:
                    pc=0x2aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2aa00() throws ExecutionException { /* 0x2aa00 - 0x2ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2aa00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ac00:
                    pc=0x2ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ac00() throws ExecutionException { /* 0x2ac00 - 0x2ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ac00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ae00:
                    pc=0x2ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ae00() throws ExecutionException { /* 0x2ae00 - 0x2b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ae00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b000:
                    pc=0x2b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b000() throws ExecutionException { /* 0x2b000 - 0x2b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b000:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r5 + -26112;
                    /* Next insn is delay slot */ 
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x2b200:
                    pc=0x2b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b200() throws ExecutionException { /* 0x2b200 - 0x2b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b200:
                    r5 = 3 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r5 + -25600;
                    /* Next insn is delay slot */ 
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x2b400:
                    pc=0x2b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b400() throws ExecutionException { /* 0x2b400 - 0x2b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b400:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r19 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b430;
                    pc=0x47400;
                    run_47400(); return;
                case 0x2b430:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b4f4;
                        continue;
                    }
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b448;
                    pc=0x2a600;
                    run_2a600(); return;
                case 0x2b448:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b4f4;
                        continue;
                    }
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    r7 = r0 + 438;
                    /* Next insn is delay slot */ 
                    r31=0x2b46c;
                    pc=0x36820;
                    run_36800(); return;
                case 0x2b46c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b4e0;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 3 << 16;
                    r2 = r2 + 6144;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + 7168;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + 7680;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 8192;
                    r17 = r17 & 256;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b518;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b4e0:
                    /* Next insn is delay slot */ 
                    r31=0x2b4e8;
                    pc=0x2a800;
                    run_2a800(); return;
                case 0x2b4e8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x2b4f4;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x2b4f4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b518:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x2b530;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x2b530:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b600:
                    pc=0x2b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b600() throws ExecutionException { /* 0x2b600 - 0x2b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b400;
                    run_2b400(); return;
                case 0x2b800:
                    pc=0x2b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b800() throws ExecutionException { /* 0x2b800 - 0x2ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b800:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2b81c;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x2b81c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ba00:
                    pc=0x2ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ba00() throws ExecutionException { /* 0x2ba00 - 0x2bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ba00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r7 = r29 + 40;
                    r5 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2ba30;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x2ba30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2bc00:
                    pc=0x2bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2bc00() throws ExecutionException { /* 0x2bc00 - 0x2be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2bc00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc40;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc40;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x2bc38;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2bc38:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2bc40:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f800;
                    run_2f800(); return;
                case 0x2be00:
                    pc=0x2be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2be00() throws ExecutionException { /* 0x2be00 - 0x2c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2be00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be5c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be44;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x2be3c;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2be3c:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x2be44:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f800;
                    run_2f800(); return;
                case 0x2be5c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f800;
                    run_2f800(); return;
                case 0x2c000:
                    pc=0x2c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c000() throws ExecutionException { /* 0x2c000 - 0x2c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c000:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = 6 << 16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r18 + 10336;
                    /* Next insn is delay slot */ 
                    r31=0x2c034;
                    pc=0x36b80;
                    run_36a00(); return;
                case 0x2c034:
                    r4 = r17 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c044;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x2c044:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    r5 = r19 - r20;
                    r5 = r5 + -17;
                    r5 = r5 + r16;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        if(r16!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                        }
                        pc=0x2c070;
                        continue;
                    }
                    if(r16!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x2c070:
                    r20 = lo;
                    r20 = r20 + -1;
                    { long hilo = (long)(r20) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r20 = lo;
                    r16 = r20 < r16 ? 1 : 0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0b4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c0a0;
                    pc=0x36920;
                    run_36800(); return;
                case 0x2c0a0:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0e8;
                        continue;
                    }
                case 0x2c0b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c0c0;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2c0c0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c0e8:
                    r4 = r17 + r0;
                    r5 = r0 - r20;
                    /* Next insn is delay slot */ 
                    r31=0x2c0f8;
                    pc=0x36920;
                    run_36800(); return;
                case 0x2c0f8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c158;
                        continue;
                    }
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = r19 - r20;
                    r19 = r19 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    r2 = 6 << 16;
                    r3 = readPages[(r2+12152)>>>12][((r2+12152)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = r3 - r20;
                    writePages[(r2+12152)>>>12][((r2+12152)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    r31=0x2c130;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2c130:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c158:
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c168;
                    pc=0x36920;
                    run_36800(); return;
                case 0x2c168:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r2 - r3;
                    r5 = r4 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0b4;
                        continue;
                    }
                    r5 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r4 = r4 | 1;
                    r2 = r2 - r5;
                    r5 = 6 << 16;
                    writePages[(r5+12152)>>>12][((r5+12152)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x2c0b4;
                    continue;
                case 0x2c200:
                    pc=0x2c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c200() throws ExecutionException { /* 0x2c200 - 0x2c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c3a0;
                        continue;
                    }
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c228;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x2c228:
                    r8 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r6 = r16 + -8;
                    r2 = r8 & r2;
                    r3 = r6 + r2;
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = 6 << 16;
                    r4 = r0 + -4;
                    r7 = r7 + 10336;
                    r5 = r5 & r4;
                    r4 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c444;
                        run_2c400(); return;
                    }
                    r8 = r8 & 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r5;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c364;
                        continue;
                    }
                    r4 = r0 + r0;
                case 0x2c274:
                    r8 = r3 + r5;
                    r8 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    r8 = r8 & 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c2ac;
                        continue;
                    }
                    r2 = r2 + r5;
                    r5 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c40c;
                        run_2c400(); return;
                    }
                case 0x2c29c:
                    r3 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r5;
                case 0x2c2ac:
                    r3 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r3 = r6 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c348;
                        continue;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c3b8;
                        continue;
                    }
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c4b8;
                        run_2c400(); return;
                    }
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r8 = r4 << 1;
                case 0x2c2ec:
                    r8 = r8 << 2;
                    r8 = r7 + r8;
                    r3 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x2c4d4;
                        run_2c400(); return;
                    }
                    r4 = r0 + -4;
                case 0x2c308:
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r5 = r5 & r4;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c330;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c308;
                        continue;
                    }
                case 0x2c330:
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                case 0x2c338:
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r2;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r6;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                case 0x2c348:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2c364:
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r8 = 6 << 16;
                    r6 = r6 - r4;
                    r2 = r2 + r4;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r8 = r8 + 10344;
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x2c4ac;
                        run_2c400(); return;
                    }
                    r8 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r8;
                    writePages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c274;
                    continue;
                case 0x2c3a0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c3b8:
                    r2 = r2 >>> 3;
                    r3 = r2 >> 2;
                    r4 = r0 + 1;
                    r3 = r4 << (r3&0x1f);
                    r4 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r3 = r3 | r4;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r3;
                    r7 = r7 + r2;
                    r2 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r7;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r6;
                case 0x2c400:
                    pc=0x2c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c400() throws ExecutionException { /* 0x2c400 - 0x2c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c400:
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2c40c:
                    r8 = 6 << 16;
                    r8 = r8 + 10344;
                    if(r5 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x2c29c;
                        run_2c200(); return;
                    }
                    r3 = r2 | 1;
                    writePages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff] = r6;
                    writePages[(r7+16)>>>12][((r7+16)>>>2)&0x3ff] = r6;
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r5;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r5;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r6 = r6 + r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2c348;
                    run_2c200(); return;
                case 0x2c444:
                    r8 = r8 & 1;
                    r2 = r5 + r2;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c478;
                        continue;
                    }
                    r3 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r6 = r6 - r3;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r3 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x2c478:
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r3 = r2 | 1;
                    r2 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c348;
                        run_2c200(); return;
                    }
                    r5 = readPages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c4a4;
                    pc=0x2c000;
                    run_2c000(); return;
                case 0x2c4a4:
                    /* Next insn is delay slot */ 
                    pc=0x2c348;
                    run_2c200(); return;
                case 0x2c4ac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2c274;
                    run_2c200(); return;
                case 0x2c4b8:
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c4fc;
                        continue;
                    }
                    r4 = r3 + 91;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2c2ec;
                    run_2c200(); return;
                case 0x2c4d4:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r2;
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c338;
                    run_2c200(); return;
                case 0x2c4fc:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c51c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2c2ec;
                    run_2c200(); return;
                case 0x2c51c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c53c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2c2ec;
                    run_2c200(); return;
                case 0x2c53c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c55c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2c2ec;
                    run_2c200(); return;
                case 0x2c55c:
                    r8 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x2c2ec;
                    run_2c200(); return;
                case 0x2c600:
                    pc=0x2c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c600() throws ExecutionException { /* 0x2c600 - 0x2c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c600:
                    r29 = r29 + -120;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r21;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r23;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r20;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    r21 = r6 + r0;
                    r18 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c650;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c830;
                        run_2c800(); return;
                    }
                case 0x2c650:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c84c;
                        run_2c800(); return;
                    }
                case 0x2c664:
                    r19 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb88;
                        run_2ca00(); return;
                    }
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c7c4;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c6d4;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c6d4;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x2c69c:
                    r20 = r0 + -1;
                case 0x2c6a0:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r23 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r22 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r21 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r20 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 120;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c6d4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r20 = r0 + r0;
                case 0x2c6e0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb24;
                        run_2ca00(); return;
                    }
                case 0x2c6e8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 2074;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c724;
                        continue;
                    }
                    r2 = r2 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8b8;
                        run_2c800(); return;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + 7680;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c864;
                        run_2c800(); return;
                    }
                case 0x2c71c:
                    r3 = r3 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2c724:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c734;
                    pc=0x29200;
                    run_29200(); return;
                case 0x2c734:
                    r20 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c69c;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x2c758;
                    return;
                case 0x2c758:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c69c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c790;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c78c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c78c;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2c78c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2c790:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r16 + 92;
                    r2 = r2 & 63455;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2c7bc;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x2c7bc:
                    /* Next insn is delay slot */ 
                    pc=0x2c6a0;
                    continue;
                case 0x2c7c4:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c7d4;
                    pc=0x29200;
                    run_29200(); return;
                case 0x2c7d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 4096;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cae4;
                        run_2ca00(); return;
                    }
                    r20 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x2c7ec:
                    r3 = r2 & 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c9a0;
                        run_2c800(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c9c8;
                        run_2c800(); return;
                    }
                case 0x2c800:
                    pc=0x2c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c800() throws ExecutionException { /* 0x2c800 - 0x2ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c800:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c81c;
                        continue;
                    }
                    r3 = r3 - r2;
                    r20 = r20 + r3;
                case 0x2c81c:
                    r21 = r21 + r20;
                    r22 = r0 + 1;
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c6e0;
                    run_2c600(); return;
                case 0x2c830:
                    /* Next insn is delay slot */ 
                    r31=0x2c838;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2c838:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c664;
                        run_2c600(); return;
                    }
                case 0x2c84c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c85c;
                    pc=0x29200;
                    run_29200(); return;
                case 0x2c85c:
                    /* Next insn is delay slot */ 
                    pc=0x2c664;
                    run_2c600(); return;
                case 0x2c864:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c71c;
                        run_2c600(); return;
                    }
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2c884;
                    pc=0x36960;
                    run_36800(); return;
                case 0x2c884:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb18;
                        run_2ca00(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 | 32768;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb18;
                        run_2ca00(); return;
                    }
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2c8b8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c9d4;
                        continue;
                    }
                    r23 = r21 + r0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca04;
                        run_2ca00(); return;
                    }
                case 0x2c8cc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb3c;
                        run_2ca00(); return;
                    }
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x2c8e4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r20 = r2 - r3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb68;
                        run_2ca00(); return;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r6;
                case 0x2c904:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r20 + r3;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r6 + r2;
                case 0x2c91c:
                    r3 = r23 < r20 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca20;
                        run_2ca00(); return;
                    }
                    r3 = r20 + r2;
                    r3 = ((r23 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca20;
                        run_2ca00(); return;
                    }
                    r20 = r23 - r20;
                    r4 = r4 + r20;
                    r2 = r2 - r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c970;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c96c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2c96c;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2c96c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2c970:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2c980:
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2c994;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x2c994:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c6a0;
                    run_2c600(); return;
                case 0x2c9a0:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r20 = r20 - r2;
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c9c8;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r2;
                case 0x2c9c8:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2c81c;
                    continue;
                case 0x2c9d4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2c9e8;
                    pc=0x36960;
                    run_36800(); return;
                case 0x2c9e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c724;
                        run_2c600(); return;
                    }
                    r23 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r21 + r23;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8cc;
                        continue;
                    }
                case 0x2ca00:
                    pc=0x2ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ca00() throws ExecutionException { /* 0x2ca00 - 0x2cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ca00:
                case 0x2ca04:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb68;
                        continue;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2c904;
                    run_2c800(); return;
                case 0x2ca20:
                    r20 = readPages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r20 = r0 - r20;
                    r20 = r23 & r20;
                    r4 = r17 + r0;
                    r6 = r20 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x2ca44;
                    return;
                case 0x2ca44:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c724;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca84;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca80;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ca80;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2ca80:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2ca84:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r23 = r23 - r20;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c980;
                        run_2c800(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2caac;
                    pc=0x31000;
                    run_31000(); return;
                case 0x2caac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c724;
                        run_2c600(); return;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c724;
                        run_2c600(); return;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 - r23;
                    r3 = r3 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2c980;
                    run_2c800(); return;
                case 0x2cae4:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x2cafc;
                    return;
                case 0x2cafc:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c69c;
                        run_2c600(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2c7ec;
                    run_2c600(); return;
                case 0x2cb18:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2c71c;
                    run_2c600(); return;
                case 0x2cb24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2cb34;
                    pc=0x2da00;
                    run_2da00(); return;
                case 0x2cb34:
                    /* Next insn is delay slot */ 
                    pc=0x2c6e8;
                    run_2c600(); return;
                case 0x2cb3c:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x2cb54;
                    return;
                case 0x2cb54:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8e4;
                        run_2c800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c724;
                    run_2c600(); return;
                case 0x2cb68:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x2c91c;
                    run_2c800(); return;
                case 0x2cb88:
                    r2 = r0 + 29;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r20 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2c6a0;
                    run_2c600(); return;
                case 0x2cc00:
                    pc=0x2cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2cc00() throws ExecutionException { /* 0x2cc00 - 0x2ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2cc00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x2ce00:
                    pc=0x2ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ce00() throws ExecutionException { /* 0x2ce00 - 0x2d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ce00:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cecc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r20 = r0 + r0;
                    r18 = r0 + -1;
                case 0x2ce38:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce90;
                        continue;
                    }
                case 0x2ce4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce80;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce80;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x2ce7c;
                    return;
                case 0x2ce7c:
                    r20 = r20 | r2;
                case 0x2ce80:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce4c;
                        continue;
                    }
                case 0x2ce90:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce38;
                        continue;
                    }
                case 0x2cea0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2cecc:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2cea0;
                    continue;
                case 0x2d000:
                    pc=0x2d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d000() throws ExecutionException { /* 0x2d000 - 0x2d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d000:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d0dc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r22 = r0 + r0;
                    r18 = r0 + -1;
                case 0x2d040:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d09c;
                        continue;
                    }
                case 0x2d054:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d08c;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2d08c;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x2d088;
                    return;
                case 0x2d088:
                    r22 = r22 | r2;
                case 0x2d08c:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2d054;
                        continue;
                    }
                case 0x2d09c:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d040;
                        continue;
                    }
                case 0x2d0ac:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r22 + r0;
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d0dc:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d0ac;
                    continue;
                case 0x2d200:
                    pc=0x2d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d200() throws ExecutionException { /* 0x2d200 - 0x2d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2d400:
                    pc=0x2d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d400() throws ExecutionException { /* 0x2d400 - 0x2d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d400:
                    r29 = r29 + -32;
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2d41c;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2d41c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d600:
                    pc=0x2d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d600() throws ExecutionException { /* 0x2d600 - 0x2d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d600:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    r21 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d638;
                    pc=0x46e00;
                    run_46e00(); return;
                case 0x2d638:
                    r16 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6f0;
                        continue;
                    }
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d754;
                        continue;
                    }
                    r5 = r0 + 61;
                    r2 = r18 + r0;
                    r4 = r0 + 61;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d67c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2d6f0;
                    continue;
                case 0x2d674:
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6f0;
                        continue;
                    }
                case 0x2d67c:
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d674;
                        continue;
                    }
                    r17 = r2 - r18;
                case 0x2d694:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6f0;
                        continue;
                    }
                    r22 = r0 + 61;
                case 0x2d6a8:
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d6b8;
                    pc=0x33400;
                    run_33400(); return;
                case 0x2d6b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6dc;
                        continue;
                    }
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r19 = r19 + r17;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x2d72c;
                        continue;
                    }
                case 0x2d6dc:
                    r16 = r16 + 4;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6a8;
                        continue;
                    }
                case 0x2d6f0:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2d6fc;
                    pc=0x47000;
                    run_47000(); return;
                case 0x2d6fc:
                    r2 = r0 + r0;
                case 0x2d700:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d72c:
                    r2 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r16 = r16 - r2;
                    r16 = r16 >> 2;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x2d748;
                    pc=0x47000;
                    run_47000(); return;
                case 0x2d748:
                    r2 = r19 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2d700;
                    continue;
                case 0x2d754:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d694;
                    continue;
                case 0x2d800:
                    pc=0x2d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d800() throws ExecutionException { /* 0x2d800 - 0x2da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d800:
                    r29 = r29 + -32;
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2d814;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2d814:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2da00:
                    pc=0x2da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2da00() throws ExecutionException { /* 0x2da00 - 0x2dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2da00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -104;
                    r3 = r2 & 65535;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r3 & 2;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r31;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db30;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r17 = r4 + r0;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2daf0;
                        continue;
                    }
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2da4c;
                    pc=0x36960;
                    run_36800(); return;
                case 0x2da4c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dae4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 | 32768;
                    r2 = r2 & 61440;
                    r19 = r2 ^ 8192;
                    r19 = (r19&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2db70;
                        continue;
                    }
                case 0x2da70:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2da80:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2da90;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x2da90:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db14;
                        continue;
                    }
                    r3 = 3 << 16;
                    r3 = r3 + -25088;
                    writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r3 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r18;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dba4;
                        continue;
                    }
                case 0x2dac4:
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2dae4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                case 0x2daf0:
                    r3 = r3 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db64;
                        continue;
                    }
                    r18 = r0 + 1024;
                case 0x2db00:
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2da80;
                    continue;
                case 0x2db14:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 512;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dac4;
                        continue;
                    }
                    r2 = r2 | 2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2db30:
                    r2 = r16 + 67;
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2db64:
                    r18 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x2db00;
                    continue;
                case 0x2db70:
                    r2 = 3 << 16;
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r2 + 7680;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2da70;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2da80;
                    continue;
                case 0x2dba4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2dbb4;
                    pc=0x44800;
                    run_44800(); return;
                case 0x2dbb4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dac4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2dac4;
                    continue;
                case 0x2dc00:
                    pc=0x2dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2dc00() throws ExecutionException { /* 0x2dc00 - 0x2de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2dc00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x2de00:
                    pc=0x2de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2de00() throws ExecutionException { /* 0x2de00 - 0x2e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2de00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2e000:
                    pc=0x2e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e000() throws ExecutionException { /* 0x2e000 - 0x2e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e000:
                    r2 = r5 + 11;
                    r29 = r29 + -64;
                    r3 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e104;
                        continue;
                    }
                    r17 = r0 + -8;
                    r17 = r2 & r17;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e114;
                        continue;
                    }
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e114;
                        continue;
                    }
                case 0x2e05c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e068;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x2e068:
                    r2 = (r17&0xffffffffL) < (504&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e128;
                        continue;
                    }
                    r18 = 6 << 16;
                    r18 = r18 + 10336;
                    r2 = r18 + r17;
                    r16 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = r17 >>> 3;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6d8;
                        run_2e600(); return;
                    }
                case 0x2e090:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r3 & r2;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x2e0b0:
                    r2 = r16 + r2;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = r3 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x2e0cc;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2e0cc:
                    r2 = r16 + 8;
                case 0x2e0d0:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e104:
                    r17 = r0 + 16;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e05c;
                        continue;
                    }
                case 0x2e114:
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2e0d0;
                    continue;
                case 0x2e128:
                    r2 = r17 >>> 9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e34c;
                        run_2e200(); return;
                    }
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e5b8;
                        run_2e400(); return;
                    }
                    r8 = r17 >>> 6;
                    r8 = r8 + 56;
                    r6 = r8 << 1;
                case 0x2e14c:
                    r18 = 6 << 16;
                    r6 = r6 << 2;
                    r18 = r18 + 10336;
                    r6 = r18 + r6;
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1d0;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 - r17;
                    r2 = r4 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e35c;
                        run_2e200(); return;
                    }
                    r7 = r0 + -4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e368;
                    run_2e200(); return;
                case 0x2e19c:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r7;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e35c;
                        run_2e200(); return;
                    }
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e368;
                        run_2e200(); return;
                    }
                case 0x2e1c0:
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2e19c;
                        continue;
                    }
                case 0x2e1d0:
                    r7 = r8 + 1;
                case 0x2e1d4:
                    r9 = 6 << 16;
                    r16 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r9 = r9 + 10344;
                    if(r16 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6b0;
                        run_2e600(); return;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r3 & r2;
                    r3 = r2 - r17;
                    r4 = r3 < 16 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e66c;
                        run_2e600(); return;
                    }
                case 0x2e200:
                    pc=0x2e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e200() throws ExecutionException { /* 0x2e200 - 0x2e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e200:
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r9;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r9;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e0b0;
                        run_2e000(); return;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e5e4;
                        run_2e400(); return;
                    }
                    r3 = r2 >>> 3;
                    r2 = r3 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r2&0x1f);
                    r3 = r3 << 3;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = r18 + r3;
                    r2 = r4 | r2;
                    r4 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r16;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r16;
                case 0x2e258:
                    r3 = r7 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r3&0x1f);
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3a0;
                        continue;
                    }
                    r3 = r2 & r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e298;
                        continue;
                    }
                    r3 = r0 + -4;
                    r7 = r7 & r3;
                case 0x2e284:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e284;
                        continue;
                    }
                case 0x2e298:
                    r8 = r0 + -4;
                case 0x2e29c:
                    r10 = r7 << 3;
                    r10 = r18 + r10;
                    r6 = r10 + r0;
                    r11 = r7 + r0;
                case 0x2e2ac:
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2e2dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e6bc;
                    run_2e600(); return;
                case 0x2e2c4:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6f4;
                        run_2e600(); return;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6bc;
                        run_2e600(); return;
                    }
                case 0x2e2dc:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r8;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e2c4;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r17;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    r4 = r2 | 1;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r9;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r9;
                    r3 = r3 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e340;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2e340:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2e0d0;
                    run_2e000(); return;
                case 0x2e34c:
                    r6 = r0 + 126;
                    r8 = r0 + 63;
                    /* Next insn is delay slot */ 
                    pc=0x2e14c;
                    run_2e000(); return;
                case 0x2e35c:
                    r8 = r8 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2e1d0;
                    run_2e000(); return;
                case 0x2e368:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r3;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2e394;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2e394:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2e0d0;
                    run_2e000(); return;
                case 0x2e3a0:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r21 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 & r2;
                    r2 = ((r21 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3d0;
                        continue;
                    }
                    r2 = r21 - r17;
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e588;
                        run_2e400(); return;
                    }
                case 0x2e3d0:
                    r22 = readPages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2e3dc;
                    pc=0x36b80;
                    run_36a00(); return;
                case 0x2e3dc:
                    r3 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r22 = r22 + 16;
                    r23 = r2 + r0;
                    r2 = r0 + -1;
                    r30 = r16 + r21;
                    r22 = r22 + r17;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e40c;
                        run_2e400(); return;
                    }
                    r2 = r22 + -1;
                case 0x2e400:
                    pc=0x2e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e400() throws ExecutionException { /* 0x2e400 - 0x2e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e400:
                    r2 = r2 + r23;
                    r22 = r0 - r23;
                    r22 = r22 & r2;
                case 0x2e40c:
                    r4 = r19 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e41c;
                    pc=0x36920;
                    run_36800(); return;
                case 0x2e41c:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e558;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e754;
                        run_2e600(); return;
                    }
                case 0x2e438:
                    r3 = 6 << 16;
                    r2 = readPages[(r3+12152)>>>12][((r3+12152)>>>2)&0x3ff];
                    r4 = r23 + -1;
                    r2 = r22 + r2;
                    writePages[(r3+12152)>>>12][((r3+12152)>>>2)&0x3ff] = r2;
                    if(r30 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x2e8ac;
                        run_2e800(); return;
                    }
                case 0x2e454:
                    r6 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    r5 = r0 + -1;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2e8d0;
                        run_2e800(); return;
                    }
                    r30 = r20 - r30;
                    r2 = r2 + r30;
                    writePages[(r3+12152)>>>12][((r3+12152)>>>2)&0x3ff] = r2;
                case 0x2e470:
                    r2 = r20 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e810;
                        run_2e800(); return;
                    }
                    r5 = r0 + 8;
                    r2 = r5 - r2;
                    r20 = r20 + r2;
                case 0x2e488:
                    r22 = r20 + r22;
                    r2 = r2 + r23;
                    r4 = r22 & r4;
                    r22 = r2 - r4;
                    r5 = r22 + r0;
                    r4 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x2e4ac;
                    pc=0x36920;
                    run_36800(); return;
                case 0x2e4ac:
                    r4 = r0 + -1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2e8fc;
                        run_2e800(); return;
                    }
                    r2 = r2 - r20;
                    r4 = r22 + r2;
                    r4 = r4 | 1;
                case 0x2e4c8:
                    r2 = readPages[(r3+12152)>>>12][((r3+12152)>>>2)&0x3ff];
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r2 = r22 + r2;
                    writePages[(r3+12152)>>>12][((r3+12152)>>>2)&0x3ff] = r2;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r4;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2e528;
                        continue;
                    }
                    r3 = (r21&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e844;
                        run_2e800(); return;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -12;
                    r3 = r0 + -8;
                    r3 = r21 & r3;
                    r4 = r4 & 1;
                    r4 = r3 | r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r5 = r0 + 5;
                    r4 = r16 + r3;
                    r3 = (r3&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e8dc;
                        run_2e800(); return;
                    }
                case 0x2e528:
                    r3 = readPages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e540;
                        continue;
                    }
                    writePages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff] = r2;
                case 0x2e540:
                    r3 = readPages[(r28+-32444)>>>12][((r28+-32444)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e558;
                        continue;
                    }
                    writePages[(r28+-32444)>>>12][((r28+-32444)>>>2)&0x3ff] = r2;
                case 0x2e558:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r2;
                case 0x2e56c:
                    r2 = r3 - r17;
                    r3 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7d8;
                        run_2e600(); return;
                    }
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7d8;
                        run_2e600(); return;
                    }
                case 0x2e588:
                    r3 = r17 | 1;
                    r2 = r2 | 1;
                    r17 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r17;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2e5ac;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2e5ac:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2e0d0;
                    run_2e000(); return;
                case 0x2e5b8:
                    r3 = (r2&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e730;
                        run_2e600(); return;
                    }
                    r3 = (r2&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7f0;
                        run_2e600(); return;
                    }
                    r8 = r17 >>> 12;
                    r8 = r8 + 110;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e14c;
                    run_2e000(); return;
                case 0x2e5e4:
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e740;
                        run_2e600(); return;
                    }
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e87c;
                        run_2e800(); return;
                    }
                case 0x2e600:
                    pc=0x2e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e600() throws ExecutionException { /* 0x2e600 - 0x2e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e600:
                    r4 = r3 + 91;
                    r5 = r4 << 1;
                case 0x2e608:
                    r5 = r5 << 2;
                    r5 = r18 + r5;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2e81c;
                        run_2e800(); return;
                    }
                    r6 = r0 + -4;
                case 0x2e624:
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 & r6;
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e64c;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2e624;
                        continue;
                    }
                case 0x2e64c:
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                case 0x2e654:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r16;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2e258;
                    run_2e200(); return;
                case 0x2e66c:
                    r2 = r16 + r17;
                    r4 = r3 | 1;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r9;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r9;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e6a4;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2e6a4:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2e0d0;
                    run_2e000(); return;
                case 0x2e6b0:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2e258;
                    run_2e200(); return;
                case 0x2e6bc:
                    r11 = r11 + 1;
                    r2 = r11 & 3;
                    r6 = r6 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e2ac;
                        run_2e200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e778;
                    continue;
                case 0x2e6d8:
                    r2 = r16 + 8;
                    r16 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r7 = r7 + 2;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1d4;
                        run_2e000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e090;
                    run_2e000(); return;
                case 0x2e6f4:
                    r3 = r16 + r3;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x2e724;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2e724:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2e0d0;
                    run_2e000(); return;
                case 0x2e730:
                    r8 = r2 + 91;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e14c;
                    run_2e000(); return;
                case 0x2e740:
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e608;
                    continue;
                case 0x2e754:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x2e558;
                        run_2e400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e438;
                    run_2e400(); return;
                case 0x2e764:
                    r2 = r10 + -8;
                    r10 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    r7 = r7 + -1;
                    if(r10 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e95c;
                        run_2e800(); return;
                    }
                case 0x2e778:
                    r2 = r7 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e764;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = ~(r0 | r4);
                    r2 = r3 & r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                case 0x2e794:
                    r4 = r4 << 1;
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3a0;
                        run_2e200(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3a0;
                        run_2e200(); return;
                    }
                    r3 = r2 & r4;
                    r7 = r11 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e29c;
                        run_2e200(); return;
                    }
                case 0x2e7bc:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7bc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2e29c;
                    run_2e200(); return;
                case 0x2e7d8:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2e7e4;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x2e7e4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2e0d0;
                    run_2e000(); return;
                case 0x2e7f0:
                    r3 = (r2&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e85c;
                        run_2e800(); return;
                    }
                    r8 = r17 >>> 15;
                case 0x2e800:
                    pc=0x2e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e800() throws ExecutionException { /* 0x2e800 - 0x2ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e800:
                    r8 = r8 + 119;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e14c;
                    run_2e000(); return;
                case 0x2e810:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2e488;
                    run_2e400(); return;
                case 0x2e81c:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2e654;
                    run_2e600(); return;
                case 0x2e844:
                    r2 = r0 + 1;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r16 = r20 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2e56c;
                    run_2e400(); return;
                case 0x2e85c:
                    r2 = (r2&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e89c;
                        continue;
                    }
                    r8 = r17 >>> 18;
                    r8 = r8 + 124;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e14c;
                    run_2e000(); return;
                case 0x2e87c:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e90c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e608;
                    run_2e600(); return;
                case 0x2e89c:
                    r6 = r0 + 252;
                    r8 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x2e14c;
                    run_2e000(); return;
                case 0x2e8ac:
                    r5 = r30 & r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e454;
                        run_2e400(); return;
                    }
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r22 + r21;
                    r4 = r4 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x2e528;
                    run_2e400(); return;
                case 0x2e8d0:
                    writePages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x2e470;
                    run_2e400(); return;
                case 0x2e8dc:
                    r4 = r19 + r0;
                    r5 = r16 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2e8ec;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x2e8ec:
                    r2 = 6 << 16;
                    r2 = readPages[(r2+12152)>>>12][((r2+12152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2e528;
                    run_2e400(); return;
                case 0x2e8fc:
                    r4 = r0 + 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2e4c8;
                    run_2e400(); return;
                case 0x2e90c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e92c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e608;
                    run_2e600(); return;
                case 0x2e92c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e94c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e608;
                    run_2e600(); return;
                case 0x2e94c:
                    r5 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x2e608;
                    run_2e600(); return;
                case 0x2e95c:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2e794;
                    run_2e600(); return;
                case 0x2ea00:
                    pc=0x2ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ea00() throws ExecutionException { /* 0x2ea00 - 0x2ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ea00:
                    r2 = r4 & 3;
                    r7 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea5c;
                        continue;
                    }
                    r2 = r6 + -1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2eab0;
                    continue;
                case 0x2ea24:
                    r4 = r4 + 1;
                    r3 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea60;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eab0;
                        continue;
                    }
                    r2 = r2 + -1;
                case 0x2ea40:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea24;
                        continue;
                    }
                case 0x2ea50:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ea5c:
                    r2 = r6 + r0;
                case 0x2ea60:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eabc;
                        continue;
                    }
                case 0x2ea6c:
                    r5 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eab0;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea50;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2eaa4;
                    continue;
                case 0x2ea94:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea50;
                        continue;
                    }
                case 0x2eaa4:
                    r4 = r4 + 1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea94;
                        continue;
                    }
                case 0x2eab0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eabc:
                    r5 = r5 & 255;
                    r3 = r5 << 8;
                    r3 = r3 | r5;
                    r9 = r3 << 16;
                    r8 = 65278 << 16;
                    r6 = 32896 << 16;
                    r9 = r9 | r3;
                    r8 = r8 | 65279;
                    r6 = r6 | 32896;
                case 0x2eae0:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r9 ^ r3;
                    r5 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r5 & r3;
                    r3 = r3 & r6;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea6c;
                        continue;
                    }
                    r2 = r2 + -4;
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eae0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ea6c;
                    continue;
                case 0x2ec00:
                    pc=0x2ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ec00() throws ExecutionException { /* 0x2ec00 - 0x2ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ec00:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec9c;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec70;
                        continue;
                    }
                case 0x2ec1c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r7 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ecac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ec54;
                    continue;
                case 0x2ec40:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + 1;
                    if(r7 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ecac;
                        continue;
                    }
                case 0x2ec54:
                    r4 = r4 + 1;
                    r5 = r5 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec40;
                        continue;
                    }
                case 0x2ec64:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ec70:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec9c;
                        continue;
                    }
                    r6 = r6 + -4;
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec70;
                        continue;
                    }
                case 0x2ec9c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ec64;
                    continue;
                case 0x2ecac:
                    r2 = r7 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ee00:
                    pc=0x2ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ee00() throws ExecutionException { /* 0x2ee00 - 0x2f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ee00:
                    r3 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r2 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee50;
                        continue;
                    }
                    r7 = r5 + r6;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee50;
                        continue;
                    }
                    r3 = r4 + r6;
                    r5 = r3 - r6;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef48;
                        continue;
                    }
                case 0x2ee30:
                    r7 = r7 + -1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ee50:
                    r3 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef50;
                        continue;
                    }
                    r3 = r2 | r5;
                    r3 = r3 & 3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef64;
                        continue;
                    }
                    r7 = r5 + r0;
                    r3 = r2 + r0;
                    r4 = r6 + r0;
                case 0x2ee78:
                    r8 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r7 = r7 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-12)>>>12][((r7+-12)>>>2)&0x3ff];
                    r3 = r3 + 16;
                    writePages[(r3+-12)>>>12][((r3+-12)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-8)>>>12][((r7+-8)>>>2)&0x3ff];
                    r4 = r4 + -16;
                    writePages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff];
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r8;
                    r8 = (r4&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee78;
                        continue;
                    }
                    r4 = r6 + -16;
                    r4 = r4 >>> 4;
                    r4 = r4 + 1;
                    r4 = r4 << 4;
                    r10 = r6 & 15;
                    r3 = r2 + r4;
                    r5 = r5 + r4;
                    r4 = (r10&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef78;
                        continue;
                    }
                    r8 = r5 + r0;
                    r7 = r3 + r0;
                    r4 = r10 + r0;
                case 0x2eee8:
                    r8 = r8 + 4;
                    r9 = readPages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    r4 = r4 + -4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r9;
                    r9 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eee8;
                        continue;
                    }
                    r4 = r10 + -4;
                    r4 = r4 >>> 2;
                    r4 = r4 + 1;
                    r4 = r4 << 2;
                    r6 = r6 & 3;
                    r3 = r3 + r4;
                    r5 = r5 + r4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef70;
                        continue;
                    }
                case 0x2ef2c:
                    r6 = r3 + r6;
                case 0x2ef30:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef30;
                        continue;
                    }
                case 0x2ef48:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ef50:
                    r3 = r2 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ef70;
                    continue;
                case 0x2ef64:
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ef2c;
                    continue;
                case 0x2ef70:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ef78:
                    r6 = r10 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ef70;
                    continue;
                case 0x2f000:
                    pc=0x2f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f000() throws ExecutionException { /* 0x2f000 - 0x2f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f200:
                    pc=0x2f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f200() throws ExecutionException { /* 0x2f200 - 0x2f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f400:
                    pc=0x2f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f400() throws ExecutionException { /* 0x2f400 - 0x2f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f400:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2f428;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x2f428:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f600:
                    pc=0x2f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f600() throws ExecutionException { /* 0x2f600 - 0x2f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f600:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r6 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 36;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x2f630;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x2f630:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f800:
                    pc=0x2f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f800() throws ExecutionException { /* 0x2f800 - 0x2fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f828;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f8c8;
                        continue;
                    }
                case 0x2f828:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f874;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                case 0x2f854:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f874:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f8e8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2f854;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36200;
                    run_36200(); return;
                case 0x2f8c8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x2f8d8;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2f8d8:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f828;
                    continue;
                case 0x2f8e8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36200;
                    run_36200(); return;
                case 0x2fa00:
                    pc=0x2fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fa00() throws ExecutionException { /* 0x2fa00 - 0x2fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fa00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fa34;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2facc;
                        continue;
                    }
                case 0x2fa34:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fa84;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                case 0x2fa60:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fa84:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fadc;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2fa60;
                        continue;
                    }
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x2fae4;
                    continue;
                case 0x2facc:
                    /* Next insn is delay slot */ 
                    r31=0x2fad4;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2fad4:
                    /* Next insn is delay slot */ 
                    pc=0x2fa34;
                    continue;
                case 0x2fadc:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r17 + r0;
                case 0x2fae4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x36200;
                    run_36200(); return;
                case 0x2fc00:
                    pc=0x2fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fc00() throws ExecutionException { /* 0x2fc00 - 0x2fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fc00:
                    r6 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f800;
                    run_2f800(); return;
                case 0x2fe00:
                    pc=0x2fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fe00() throws ExecutionException { /* 0x2fe00 - 0x30000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fe00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2f800;
                    run_2f800(); return;
                case 0x30000:
                    pc=0x30000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30000() throws ExecutionException { /* 0x30000 - 0x30200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30000:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30024;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x30024:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r29 + 16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = 6 << 16;
                    r3 = r3 + 5336;
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    addr=r2+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = r3 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30088;
                        continue;
                    }
                    r3 = r3 | 8192;
                    r4 = readPages[(r2+100)>>>12][((r2+100)>>>2)&0x3ff];
                    addr=r2+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    writePages[(r2+100)>>>12][((r2+100)>>>2)&0x3ff] = r3;
                case 0x30088:
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r29 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x3009c;
                    pc=0x47a00;
                    run_47a00(); return;
                case 0x3009c:
                    r3 = r0 + 10;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x300c4;
                        continue;
                    }
                case 0x300a8:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r17 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r16 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x300c4:
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x300a8;
                    continue;
                case 0x30200:
                    pc=0x30200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30200() throws ExecutionException { /* 0x30200 - 0x30400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x30000;
                    run_30000(); return;
                case 0x30400:
                    pc=0x30400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30400() throws ExecutionException { /* 0x30400 - 0x30600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30600;
                    run_30600(); return;
                case 0x30600:
                    pc=0x30600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30600() throws ExecutionException { /* 0x30600 - 0x30800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30600:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    r20 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3094c;
                        run_30800(); return;
                    }
                    r21 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30648;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x30648:
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r20 + 11;
                    r17 = r0 + -4;
                    r4 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    r19 = r16 + -8;
                    r17 = r3 & r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3078c;
                        continue;
                    }
                    r4 = r0 + 16;
                    r18 = r0 + 16;
                case 0x30670:
                    r2 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x307a0;
                        continue;
                    }
                    r2 = r17 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x307e0;
                        continue;
                    }
                    r23 = 6 << 16;
                    r23 = r23 + 10336;
                    r5 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r2 = r19 + r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30984;
                        run_30800(); return;
                    }
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r0 + -2;
                    r7 = r6 & r7;
                    r7 = r2 + r7;
                    r7 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r7 = r7 & 1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x307b4;
                        continue;
                    }
                    r6 = r0 + r0;
                    r2 = r0 + r0;
                case 0x306cc:
                    r3 = r3 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x308a4;
                        run_30800(); return;
                    }
                    r22 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r22 = r19 - r22;
                    r7 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r3 = r7 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30a98;
                        run_30a00(); return;
                    }
                    r3 = r3 + r17;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x30aa4;
                        run_30a00(); return;
                    }
                    r23 = r6 + r3;
                    r5 = r23 < r4 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30894;
                        run_30800(); return;
                    }
                    r3 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x30728:
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30a70;
                        run_30a00(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x309e4;
                        run_30800(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30bc0;
                        run_30a00(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x309e8;
                    run_30800(); return;
                case 0x3078c:
                    r18 = r0 + -8;
                    r18 = r2 & r18;
                    r4 = r18 + r0;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x30670;
                        continue;
                    }
                case 0x307a0:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30820;
                    run_30800(); return;
                case 0x307b4:
                    r7 = r0 + -4;
                    r6 = r6 & r7;
                    r7 = r6 + r17;
                    r8 = r7 < r4 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x306cc;
                        continue;
                    }
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r17 = r7 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                case 0x307e0:
                    r6 = r17 - r18;
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30854;
                        run_30800(); return;
                    }
                    r3 = r3 & 1;
                    r3 = r3 | r17;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r17 = r19 + r17;
                case 0x30800:
                    pc=0x30800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30800() throws ExecutionException { /* 0x30800 - 0x30a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30800:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                case 0x30810:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3081c;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x3081c:
                    r2 = r16 + r0;
                case 0x30820:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30854:
                    r3 = r3 & 1;
                    r5 = r19 + r18;
                    r2 = r6 | 1;
                    r18 = r3 | r18;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r18;
                    r6 = r5 + r6;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x3088c;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x3088c:
                    /* Next insn is delay slot */ 
                    pc=0x30810;
                    continue;
                case 0x30894:
                    r23 = r3 + r0;
                case 0x30898:
                    r4 = r23 < r4 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30728;
                        run_30600(); return;
                    }
                case 0x308a4:
                    r5 = r20 + r0;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x308b4;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x308b4:
                    r20 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30c8c;
                        run_30c00(); return;
                    }
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r2 + -8;
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    r2 = r19 + r2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30ba8;
                        run_30a00(); return;
                    }
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30a58;
                        run_30a00(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x309b0;
                        continue;
                    }
                    r2 = r20 + r0;
                    r3 = r16 + r0;
                case 0x30900:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                case 0x30924:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30934;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x30934:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30940;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x30940:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30820;
                    continue;
                case 0x3094c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r6 + r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x30984:
                    r6 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r6 = r6 & r2;
                    r2 = r6 + r17;
                    r7 = r18 + 16;
                    r7 = r2 < r7 ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30a1c;
                        run_30a00(); return;
                    }
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x306cc;
                    run_30600(); return;
                case 0x309b0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30b74;
                        run_30a00(); return;
                    }
                    r2 = r20 + 8;
                    r3 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x30900;
                    continue;
                case 0x309e4:
                    r3 = r19 + r0;
                case 0x309e8:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x30a00:
                    pc=0x30a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30a00() throws ExecutionException { /* 0x30a00 - 0x30c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30a00:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r16 = r19 + r0;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x307e0;
                    run_30600(); return;
                case 0x30a1c:
                    r2 = r2 - r18;
                    r19 = r19 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r19;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x30a4c;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x30a4c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30820;
                    run_30800(); return;
                case 0x30a58:
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30a68;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x30a68:
                    /* Next insn is delay slot */ 
                    pc=0x30924;
                    run_30800(); return;
                case 0x30a70:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30a80;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x30a80:
                    r16 = r19 + r0;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x307e0;
                    run_30600(); return;
                case 0x30a98:
                    r23 = r3 + r17;
                    /* Next insn is delay slot */ 
                    pc=0x30898;
                    run_30800(); return;
                case 0x30aa4:
                    r30 = r6 + r3;
                    r2 = r18 + 16;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30894;
                        run_30800(); return;
                    }
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30c40;
                        run_30c00(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30c34;
                        run_30c00(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30c58;
                        run_30c00(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                case 0x30b14:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x30b38:
                    r2 = r30 - r18;
                    r3 = r22 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x30b68;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x30b68:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30820;
                    run_30800(); return;
                case 0x30b74:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30bf4;
                        continue;
                    }
                    r2 = r20 + 16;
                    r3 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x30900;
                    run_30800(); return;
                case 0x30ba8:
                    r4 = readPages[(r20+-4)>>>12][((r20+-4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r4 & r2;
                    r17 = r17 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x307e0;
                    run_30600(); return;
                case 0x30bc0:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30c14;
                        run_30c00(); return;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x309e8;
                    run_30800(); return;
                case 0x30bf4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r16 + 24;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                case 0x30c00:
                    pc=0x30c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30c00() throws ExecutionException { /* 0x30c00 - 0x30e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30c00:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r20 + 24;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x30900;
                    run_30800(); return;
                case 0x30c14:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x309e8;
                    run_30800(); return;
                case 0x30c34:
                    r3 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30b14;
                    run_30a00(); return;
                case 0x30c40:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30c50;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x30c50:
                    /* Next insn is delay slot */ 
                    pc=0x30b38;
                    run_30a00(); return;
                case 0x30c58:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30ca4;
                        continue;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x30b14;
                    run_30a00(); return;
                case 0x30c8c:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x30c98;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x30c98:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30820;
                    run_30800(); return;
                case 0x30ca4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x30b14;
                    run_30a00(); return;
                case 0x30e00:
                    pc=0x30e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30e00() throws ExecutionException { /* 0x30e00 - 0x31000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30e00:
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 9;
                    r3 = r3 & 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30e20;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30e20:
                    /* Next insn is delay slot */ 
                    pc=0x29400;
                    run_29400(); return;
                case 0x31000:
                    pc=0x31000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31000() throws ExecutionException { /* 0x31000 - 0x31200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31000:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31038;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x311a0;
                        continue;
                    }
                case 0x31038:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3106c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x3106c:
                    r4 = r2 & 32;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3117c;
                        continue;
                    }
                    r4 = r2 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3113c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x310c4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x310b0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x310b0;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x310b0:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3126c;
                        run_31200(); return;
                    }
                case 0x310c4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31298;
                        run_31200(); return;
                    }
                case 0x310d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r19 = tmp;
                    r18 = r19 & 65535;
                    r2 = r18 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x311b0;
                        continue;
                    }
                case 0x310ec:
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r6;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3110c;
                    return;
                case 0x3110c:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31164;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x3111c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3113c:
                    r4 = r2 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x312b0;
                        run_31200(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3122c;
                        run_31200(); return;
                    }
                    r3 = r3 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x310c4;
                    continue;
                case 0x31164:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x311f8;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3117c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x311a0:
                    /* Next insn is delay slot */ 
                    r31=0x311a8;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x311a8:
                    /* Next insn is delay slot */ 
                    pc=0x31038;
                    continue;
                case 0x311b0:
                    r2 = r0 + 1;
                    r4 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r5 = 3 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + 3584;
                    /* Next insn is delay slot */ 
                    r31=0x311cc;
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x311cc:
                    r18 = r18 & 9;
                    r2 = r0 + 9;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r19&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x310ec;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x311f0;
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x311f0:
                    /* Next insn is delay slot */ 
                    pc=0x310ec;
                    continue;
                case 0x311f8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x31200:
                    pc=0x31200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31200() throws ExecutionException { /* 0x31200 - 0x31400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31200:
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3122c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3123c;
                    pc=0x29200;
                    run_29200(); return;
                case 0x3123c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3117c;
                        run_31000(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r3 = r3 & 65527;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    r3 = r3 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x310c4;
                    run_31000(); return;
                case 0x3126c:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31298:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x312a8;
                    pc=0x2da00;
                    run_2da00(); return;
                case 0x312a8:
                    /* Next insn is delay slot */ 
                    pc=0x310d4;
                    run_31000(); return;
                case 0x312b0:
                    r2 = r0 + 9;
                    r3 = r3 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3111c;
                    run_31000(); return;
                case 0x31400:
                    pc=0x31400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31400() throws ExecutionException { /* 0x31400 - 0x31600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31400:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31410;
                    pc=0x36b90;
                    run_36a00(); return;
                case 0x31410:
                    r2 = r2 + 1;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r0 - r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31600:
                    pc=0x31600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31600() throws ExecutionException { /* 0x31600 - 0x31800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31600:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31618;
                    pc=0x36b90;
                    run_36a00(); return;
                case 0x31618:
                    r2 = r2 + 1;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r0 - r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31800:
                    pc=0x31800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31800() throws ExecutionException { /* 0x31800 - 0x31a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3181c;
                    pc=0x368a0;
                    run_36800(); return;
                case 0x3181c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31844;
                        continue;
                    }
                    r3 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r3;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31844:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31a00:
                    pc=0x31a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31a00() throws ExecutionException { /* 0x31a00 - 0x31c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31a00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31c00:
                    pc=0x31c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31c00() throws ExecutionException { /* 0x31c00 - 0x31e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31c00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    r18 = r6 + r0;
                    r17 = r7 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31c50;
                        continue;
                    }
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x31c4c;
                    pc=0x369a0;
                    run_36800(); return;
                case 0x31c4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                case 0x31c50:
                    r3 = r0 + -4097;
                    r2 = r2 & r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r19 + r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x368e0;
                    run_36800(); return;
                case 0x31e00:
                    pc=0x31e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31e00() throws ExecutionException { /* 0x31e00 - 0x32000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31e1c;
                    pc=0x369a0;
                    run_36800(); return;
                case 0x31e1c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x31e4c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 | 4096;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31e4c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32000:
                    pc=0x32000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32000() throws ExecutionException { /* 0x32000 - 0x32200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32000:
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x36860;
                    run_36800(); return;
                case 0x32200:
                    pc=0x32200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32200() throws ExecutionException { /* 0x32200 - 0x32400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32200:
                    r3 = r5 | r4;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x322a4;
                        continue;
                    }
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r7 = 32896 << 16;
                    r4 = r6 & r4;
                    r7 = r7 | 32896;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x322a4;
                        continue;
                    }
                case 0x32240:
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x322a4;
                        continue;
                    }
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32240;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x322a4;
                    continue;
                case 0x322a0:
                    r2 = r4 + r0;
                case 0x322a4:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x322a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32400:
                    pc=0x32400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32400() throws ExecutionException { /* 0x32400 - 0x32600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32400:
                    r29 = r29 + -24;
                    r2 = r4 & 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3246c;
                        continue;
                    }
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = 65278 << 16;
                    r9 = r9 | 65279;
                    r3 = r2 + r9;
                    r8 = 32896 << 16;
                    r2 = ~(r0 | r2);
                    r2 = r3 & r2;
                    r8 = r8 | 32896;
                    r2 = r2 & r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3246c;
                        continue;
                    }
                case 0x32448:
                    r4 = r4 + 4;
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r7 = r6 + r9;
                    r6 = ~(r0 | r6);
                    r6 = r7 & r6;
                    r6 = r6 & r8;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32448;
                        continue;
                    }
                case 0x3246c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32490;
                        continue;
                    }
                case 0x3247c:
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3247c;
                        continue;
                    }
                case 0x32490:
                    /* Next insn is delay slot */ 
                    r31=0x32498;
                    pc=0x32a00;
                    run_32a00(); return;
                case 0x32498:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32600:
                    pc=0x32600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32600() throws ExecutionException { /* 0x32600 - 0x32800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32600:
                    r3 = r5 & 255;
                    r2 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32704;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32640;
                        continue;
                    }
                case 0x32618:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x326f8;
                        continue;
                    }
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x327a0;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32618;
                        continue;
                    }
                case 0x32640:
                    r5 = r5 & 255;
                    r8 = r5 << 8;
                    r5 = r8 | r5;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r8 = r5 << 16;
                    r8 = r8 | r5;
                    r6 = 65278 << 16;
                    r5 = r2 ^ r8;
                    r6 = r6 | 65279;
                    r7 = ~(r0 | r5);
                    r5 = r5 + r6;
                    r5 = r7 & r5;
                    r7 = ~(r0 | r2);
                    r2 = r2 + r6;
                    r2 = r7 & r2;
                    r9 = 32896 << 16;
                    r2 = r5 | r2;
                    r9 = r9 | 32896;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x326cc;
                        continue;
                    }
                case 0x32694:
                    r4 = r4 + 4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r8 ^ r2;
                    r7 = ~(r0 | r5);
                    r5 = r5 + r6;
                    r5 = r7 & r5;
                    r7 = ~(r0 | r2);
                    r2 = r2 + r6;
                    r2 = r7 & r2;
                    r2 = r5 | r2;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32694;
                        continue;
                    }
                case 0x326cc:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x326f8;
                        continue;
                    }
                case 0x326dc:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x327a0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x326dc;
                        continue;
                    }
                case 0x326f8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32704:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3272c;
                        continue;
                    }
                case 0x3270c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x327a0;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3270c;
                        continue;
                    }
                case 0x3272c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = 65278 << 16;
                    r6 = r6 | 65279;
                    r3 = ~(r0 | r2);
                    r5 = 32896 << 16;
                    r2 = r2 + r6;
                    r2 = r3 & r2;
                    r5 = r5 | 32896;
                    r2 = r2 & r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3277c;
                        continue;
                    }
                case 0x32758:
                    r4 = r4 + 4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + r6;
                    r2 = ~(r0 | r2);
                    r2 = r3 & r2;
                    r2 = r2 & r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32758;
                        continue;
                    }
                case 0x3277c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x327a0;
                        continue;
                    }
                case 0x3278c:
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3278c;
                        continue;
                    }
                case 0x327a0:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32800:
                    pc=0x32800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32800() throws ExecutionException { /* 0x32800 - 0x32a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32800:
                    r2 = r4 | r5;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32868;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x32844;
                    continue;
                case 0x3281c:
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32854;
                        continue;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3288c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3288c;
                        continue;
                    }
                case 0x32844:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3281c;
                        continue;
                    }
                case 0x32854:
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32860:
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32854;
                        continue;
                    }
                case 0x32868:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32860;
                        continue;
                    }
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3288c:
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32a00:
                    pc=0x32a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32a00() throws ExecutionException { /* 0x32a00 - 0x32c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32a00:
                    r3 = r4 | r5;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a90;
                        continue;
                    }
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r10 = 65278 << 16;
                    r10 = r10 | 65279;
                    r4 = ~(r0 | r6);
                    r3 = r6 + r10;
                    r9 = 32896 << 16;
                    r3 = r4 & r3;
                    r9 = r9 | 32896;
                    r3 = r3 & r9;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a90;
                        continue;
                    }
                    r3 = r2 + r0;
                case 0x32a44:
                    r3 = r3 + 4;
                    r5 = r5 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = ~(r0 | r6);
                    r7 = r6 + r10;
                    r7 = r8 & r7;
                    r7 = r7 & r9;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a44;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32a90:
                    r3 = r2 + r0;
                case 0x32a94:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32c00:
                    pc=0x32c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32c00() throws ExecutionException { /* 0x32c00 - 0x32e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32c00:
                    r29 = r29 + -24;
                    r2 = (r5&0xffffffffL) < (143&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x330dc;
                        run_33000(); return;
                    }
                    r2 = 6 << 16;
                    r3 = r5 << 2;
                    r2 = r2 + 4152;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x32c34:
                    r2 = 6 << 16;
                    r2 = r2 + 2584;
                case 0x32c3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32c4c:
                    r2 = 6 << 16;
                    r2 = r2 + 2576;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32c5c:
                    r2 = 6 << 16;
                    r2 = r2 + 4052;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32c6c:
                    r2 = 6 << 16;
                    r2 = r2 + 4028;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32c7c:
                    r2 = 6 << 16;
                    r2 = r2 + 4008;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32c8c:
                    r2 = 6 << 16;
                    r2 = r2 + 1632;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32c9c:
                    r2 = 6 << 16;
                    r2 = r2 + 3956;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32cac:
                    r2 = 6 << 16;
                    r2 = r2 + 3980;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32cbc:
                    r2 = 6 << 16;
                    r2 = r2 + 3560;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32ccc:
                    r2 = 6 << 16;
                    r2 = r2 + 4108;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32cdc:
                    r2 = 6 << 16;
                    r2 = r2 + 2800;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32cec:
                    r2 = 6 << 16;
                    r2 = r2 + 2744;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32cfc:
                    r2 = 6 << 16;
                    r2 = r2 + 3008;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d0c:
                    r2 = 6 << 16;
                    r2 = r2 + 3220;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d1c:
                    r2 = 6 << 16;
                    r2 = r2 + 2992;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d2c:
                    r2 = 6 << 16;
                    r2 = r2 + 4128;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d3c:
                    r2 = 6 << 16;
                    r2 = r2 + 3076;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d4c:
                    r2 = 6 << 16;
                    r2 = r2 + 3428;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d5c:
                    r2 = 6 << 16;
                    r2 = r2 + 3920;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d6c:
                    r2 = 6 << 16;
                    r2 = r2 + 3896;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d7c:
                    r2 = 6 << 16;
                    r2 = r2 + 3876;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d8c:
                    r2 = 6 << 16;
                    r2 = r2 + 3852;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32d9c:
                    r2 = 6 << 16;
                    r2 = r2 + 3820;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32dac:
                    r2 = 6 << 16;
                    r2 = r2 + 3788;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32dbc:
                    r2 = 6 << 16;
                    r2 = r2 + 3740;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32dcc:
                    r2 = 6 << 16;
                    r2 = r2 + 3712;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32ddc:
                    r2 = 6 << 16;
                    r2 = r2 + 4072;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32dec:
                    r2 = 6 << 16;
                    r2 = r2 + 3688;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    continue;
                case 0x32dfc:
                    r2 = 6 << 16;
                case 0x32e00:
                    pc=0x32e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32e00() throws ExecutionException { /* 0x32e00 - 0x33000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32e00:
                    r2 = r2 + 3660;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e0c:
                    r2 = 6 << 16;
                    r2 = r2 + 3640;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e1c:
                    r2 = 6 << 16;
                    r2 = r2 + 3612;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e2c:
                    r2 = 6 << 16;
                    r2 = r2 + 3600;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e3c:
                    r2 = 6 << 16;
                    r2 = r2 + 3580;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e4c:
                    r2 = 6 << 16;
                    r2 = r2 + 3544;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e5c:
                    r2 = 6 << 16;
                    r2 = r2 + 3520;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e6c:
                    r2 = 6 << 16;
                    r2 = r2 + 3500;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e7c:
                    r2 = 6 << 16;
                    r2 = r2 + 3476;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e8c:
                    r2 = 6 << 16;
                    r2 = r2 + 3460;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32e9c:
                    r2 = 6 << 16;
                    r2 = r2 + 3452;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32eac:
                    r2 = 6 << 16;
                    r2 = r2 + 3416;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32ebc:
                    r2 = 6 << 16;
                    r2 = r2 + 3396;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32ecc:
                    r2 = 6 << 16;
                    r2 = r2 + 3368;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32edc:
                    r2 = 6 << 16;
                    r2 = r2 + 3348;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32eec:
                    r2 = 6 << 16;
                    r2 = r2 + 3332;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32efc:
                    r2 = 6 << 16;
                    r2 = r2 + 3320;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f0c:
                    r2 = 6 << 16;
                    r2 = r2 + 3304;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f1c:
                    r2 = 6 << 16;
                    r2 = r2 + 3280;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f2c:
                    r2 = 6 << 16;
                    r2 = r2 + 3264;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f3c:
                    r2 = 6 << 16;
                    r2 = r2 + 3240;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f4c:
                    r2 = 6 << 16;
                    r2 = r2 + 3204;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f5c:
                    r2 = 6 << 16;
                    r2 = r2 + 3188;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f6c:
                    r2 = 6 << 16;
                    r2 = r2 + 3164;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f7c:
                    r2 = 6 << 16;
                    r2 = r2 + 3144;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f8c:
                    r2 = 6 << 16;
                    r2 = r2 + 3112;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32f9c:
                    r2 = 6 << 16;
                    r2 = r2 + 3056;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32fac:
                    r2 = 6 << 16;
                    r2 = r2 + 3040;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32fbc:
                    r2 = 6 << 16;
                    r2 = r2 + 2976;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32fcc:
                    r2 = 6 << 16;
                    r2 = r2 + 2960;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32fdc:
                    r2 = 6 << 16;
                    r2 = r2 + 2940;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32fec:
                    r2 = 6 << 16;
                    r2 = r2 + 2928;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x32ffc:
                    r2 = 6 << 16;
                case 0x33000:
                    pc=0x33000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33000() throws ExecutionException { /* 0x33000 - 0x33200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33000:
                    r2 = r2 + 2904;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3300c:
                    r2 = 6 << 16;
                    r2 = r2 + 2892;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3301c:
                    r2 = 6 << 16;
                    r2 = r2 + 2872;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3302c:
                    r2 = 6 << 16;
                    r2 = r2 + 2852;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3303c:
                    r2 = 6 << 16;
                    r2 = r2 + 2832;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3304c:
                    r2 = 6 << 16;
                    r2 = r2 + 2788;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3305c:
                    r2 = 6 << 16;
                    r2 = r2 + 2772;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3306c:
                    r2 = 6 << 16;
                    r2 = r2 + 2724;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3307c:
                    r2 = 6 << 16;
                    r2 = r2 + 2704;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3308c:
                    r2 = 6 << 16;
                    r2 = r2 + 2676;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x3309c:
                    r2 = 6 << 16;
                    r2 = r2 + 2664;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x330ac:
                    r2 = 6 << 16;
                    r2 = r2 + 2640;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x330bc:
                    r2 = 6 << 16;
                    r2 = r2 + 2624;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x330cc:
                    r2 = 6 << 16;
                    r2 = r2 + 2596;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x330dc:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33110;
                        continue;
                    }
                case 0x330e4:
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x330f8;
                    pc=0x33a00;
                    run_33a00(); return;
                case 0x330f8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32c3c;
                        run_32c00(); return;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -8164;
                    /* Next insn is delay slot */ 
                    pc=0x32c3c;
                    run_32c00(); return;
                case 0x33110:
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x330e4;
                    continue;
                case 0x33200:
                    pc=0x33200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33200() throws ExecutionException { /* 0x33200 - 0x33400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x32c00;
                    run_32c00(); return;
                case 0x33400:
                    pc=0x33400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33400() throws ExecutionException { /* 0x33400 - 0x33600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33400:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33498;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x334a4;
                        continue;
                    }
                case 0x33418:
                    r6 = r6 + -1;
                case 0x3341c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33558;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33498;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33498;
                        continue;
                    }
                    r2 = r4 + 1;
                    r5 = r5 + 1;
                    r4 = r4 + r6;
                    /* Next insn is delay slot */ 
                    pc=0x3346c;
                    continue;
                case 0x33454:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x33498;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33498;
                        continue;
                    }
                    r2 = r2 + 1;
                    r5 = r5 + 1;
                case 0x3346c:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x33454;
                        continue;
                    }
                case 0x33480:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33498:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x334a4:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33418;
                        continue;
                    }
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33418;
                        continue;
                    }
                    r2 = r6 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33498;
                        continue;
                    }
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = r3 + r8;
                    r7 = 32896 << 16;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r7 = r7 | 32896;
                    r3 = r3 & r7;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33538;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x33498;
                    continue;
                case 0x33500:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x33564;
                        continue;
                    }
                    r2 = r2 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33498;
                        continue;
                    }
                    r6 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r3 = r3 & r7;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33498;
                        continue;
                    }
                case 0x33538:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33500;
                        continue;
                    }
                    r6 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3341c;
                        continue;
                    }
                case 0x33558:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33480;
                    continue;
                case 0x33564:
                    r6 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3341c;
                    continue;
                case 0x33600:
                    pc=0x33600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33600() throws ExecutionException { /* 0x33600 - 0x33800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33668;
                        continue;
                    }
                    r3 = r4 + r0;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33634;
                    continue;
                case 0x3362c:
                    r3 = r2 + 1;
                    r17 = r2 + r0;
                case 0x33634:
                    r4 = r3 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33644;
                    pc=0x32600;
                    run_32600(); return;
                case 0x33644:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3362c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33668:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x32600;
                    run_32600(); return;
                case 0x33800:
                    pc=0x33800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33800() throws ExecutionException { /* 0x33800 - 0x33a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33800:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36cd0;
                    run_36c00(); return;
                case 0x33a00:
                    pc=0x33a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33a00() throws ExecutionException { /* 0x33a00 - 0x33c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33a00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33c00:
                    pc=0x33c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33c00() throws ExecutionException { /* 0x33c00 - 0x33e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33c00:
                    r29 = r29 + -1328;
                    writePages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff] = r31;
                    writePages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff] = r22;
                    writePages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff] = r21;
                    r22 = r5 + r0;
                    r21 = r4 + r0;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r6;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r7;
                    writePages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff] = r30;
                    writePages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff] = r23;
                    writePages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff] = r20;
                    writePages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff] = r19;
                    writePages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff] = r18;
                    writePages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff] = r17;
                    writePages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x33c44;
                    pc=0x48c00;
                    run_48c00(); return;
                case 0x33c44:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x33c5c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x33c5c:
                    writePages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff] = r2;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33c78;
                        continue;
                    }
                    r2 = readPages[(r21+56)>>>12][((r21+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fec;
                        run_33e00(); return;
                    }
                case 0x33c78:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33cac;
                        continue;
                    }
                    r4 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x33cac:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e58;
                        run_33e00(); return;
                    }
                    r4 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e58;
                        run_33e00(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x33e88;
                        run_33e00(); return;
                    }
                case 0x33cd8:
                    r3 = r29 + 40;
                    r2 = 6 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r3;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r0;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = r0;
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = r0;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r0;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r0;
                    r8 = r3 + r0;
                    r19 = r2 + 5120;
                case 0x33d0c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x344a4;
                        run_34400(); return;
                    }
                case 0x33d24:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x33d44;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x33db0;
                    continue;
                case 0x33d3c:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x33d58;
                        continue;
                    }
                case 0x33d44:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33d3c;
                        continue;
                    }
                case 0x33d58:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33db0;
                        continue;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f80;
                        run_33e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x33da0:
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r3;
                case 0x33db0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fa8;
                        run_33e00(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x33de0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x33de8:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a10;
                        run_34a00(); return;
                    }
                    r4 = 6 << 16;
                    r2 = r2 << 2;
                case 0x33e00:
                    pc=0x33e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33e00() throws ExecutionException { /* 0x33e00 - 0x34000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33e00:
                    r4 = r4 + 4748;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x33e18:
                    r17 = r17 | 16;
                case 0x33e1c:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x33e28:
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a00;
                        run_34a00(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                case 0x33e48:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x33e58:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33e68;
                    pc=0x36600;
                    run_36600(); return;
                case 0x33e68:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f48;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x33cd8;
                        run_33c00(); return;
                    }
                case 0x33e88:
                    addr=r22+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x33cd8;
                        run_33c00(); return;
                    }
                    addr=r29+1078;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+36)>>>12][((r22+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r29 + 40;
                    r6 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r7 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r2;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1064;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r2;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r2;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x33ef4;
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x33ef4:
                    r16 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f18;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    r31=0x33f10;
                    pc=0x29200;
                    run_29200(); return;
                case 0x33f10:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f78;
                        run_35e00(); return;
                    }
                case 0x33f18:
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f3c;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x33f3c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33f4c;
                    continue;
                case 0x33f48:
                    r2 = r0 + -1;
                case 0x33f4c:
                    r31 = readPages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff];
                    r30 = readPages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff];
                    r23 = readPages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff];
                    r22 = readPages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff];
                    r21 = readPages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff];
                    r20 = readPages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff];
                    r19 = readPages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff];
                    r18 = readPages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff];
                    r17 = readPages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff];
                    r16 = readPages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff];
                    r29 = r29 + 1328;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33f80:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x33f94;
                    pc=0x52000;
                    run_52000(); return;
                case 0x33f94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        continue;
                    }
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x33da0;
                    run_33c00(); return;
                case 0x33fa8:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x33fcc;
                    pc=0x52000;
                    run_52000(); return;
                case 0x33fcc:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f48;
                        continue;
                    }
                    r2 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x33f4c;
                    continue;
                case 0x33fec:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33ff8;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x33ff8:
                    /* Next insn is delay slot */ 
                    pc=0x33c78;
                    run_33c00(); return;
                case 0x34000:
                    pc=0x34000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34000() throws ExecutionException { /* 0x34000 - 0x34200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34000:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x34010:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35aa4;
                        run_35a00(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35984;
                        run_35800(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x34050;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x34050:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35c38;
                        run_35c00(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3587c;
                        run_35800(); return;
                    }
                case 0x34070:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x359a0;
                        run_35800(); return;
                    }
                case 0x34080:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                case 0x34094:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x340ac;
                        continue;
                    }
                case 0x3409c:
                    r2 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                case 0x340ac:
                    r4 = r17 & 2;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x340cc;
                        continue;
                    }
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                case 0x340cc:
                    r2 = r17 & 132;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a64;
                        run_34a00(); return;
                    }
                    r4 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a64;
                        run_34a00(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x359ac;
                        run_35800(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3412c;
                    continue;
                case 0x34118:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34188;
                        continue;
                    }
                case 0x3412c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34118;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34164;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34164:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3412c;
                        continue;
                    }
                case 0x34188:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x350e4;
                        run_35000(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x341b8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x341f4;
                        continue;
                    }
                    r3 = r29 + 1206;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f60;
                        run_34e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x341f4:
                    r3 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34238;
                        run_34200(); return;
                    }
                case 0x34200:
                    pc=0x34200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34200() throws ExecutionException { /* 0x34200 - 0x34400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34200:
                    r3 = r29 + 1204;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f34;
                        run_34e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x34238:
                    r4 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34dcc;
                        run_34c00(); return;
                    }
                case 0x34248:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34318;
                        continue;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3570c;
                        run_35600(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 5104;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x34294;
                    continue;
                case 0x34280:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x342f0;
                        continue;
                    }
                case 0x34294:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34280;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x342cc;
                    pc=0x52000;
                    run_52000(); return;
                case 0x342cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34294;
                        continue;
                    }
                case 0x342f0:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f08;
                        run_34e00(); return;
                    }
                    r8 = r8 + 8;
                case 0x34318:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c64;
                        run_34c00(); return;
                    }
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b68;
                        run_34a00(); return;
                    }
                case 0x34350:
                    r8 = r8 + 8;
                case 0x34354:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34450;
                        run_34400(); return;
                    }
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34450;
                        run_34400(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35ae8;
                        run_35a00(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x343ac;
                    continue;
                case 0x34398:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34408;
                        run_34400(); return;
                    }
                case 0x343ac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r6 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34398;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x343e4;
                    pc=0x52000;
                    run_52000(); return;
                case 0x343e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x34400:
                    pc=0x34400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34400() throws ExecutionException { /* 0x34400 - 0x34600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34400:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x343ac;
                        run_34200(); return;
                    }
                case 0x34408:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34450;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34444;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34444:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                case 0x34450:
                    r3 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3446c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x3446c:
                    r4 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b94;
                        run_34a00(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                case 0x3448c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33d24;
                        run_33c00(); return;
                    }
                case 0x344a4:
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x33db0;
                    run_33c00(); return;
                case 0x344b0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e1c;
                        run_33e00(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x344c8:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x344d8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x35efc;
                        run_35e00(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3452c;
                        continue;
                    }
                case 0x344fc:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x344fc;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x358d8;
                        run_35800(); return;
                    }
                case 0x3452c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de8;
                    run_33c00(); return;
                case 0x34538:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3498c;
                        run_34800(); return;
                    }
                case 0x34550:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x3456c:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3457c;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x3457c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34bc0;
                        run_34a00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34bc0;
                        run_34a00(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34fb4;
                        run_34e00(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34fb4;
                        run_34e00(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r16 = r29 + 1103;
                case 0x345b4:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x345cc;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x345cc:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x34094;
                    run_34000(); return;
                case 0x345dc:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x349d0;
                        run_34800(); return;
                    }
                case 0x345f4:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x34600:
                    pc=0x34600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34600() throws ExecutionException { /* 0x34600 - 0x34800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34600:
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x34618:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x34620:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34620;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x33de8;
                    run_33c00(); return;
                case 0x34650:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x348bc;
                        run_34800(); return;
                    }
                case 0x34668:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x3467c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35434;
                        run_35400(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x34694:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x346a4:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x346b4:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r3 = 6 << 16;
                    r3 = r3 + 692;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x34708:
                    r2 = r17 & 8;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35668;
                        run_35600(); return;
                    }
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x3472c:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x34764;
                    pc=0x4ba00;
                    run_4ba00(); return;
                case 0x34764:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x35450;
                        run_35400(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x35b44;
                        run_35a00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x3479c:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x358c8;
                        run_35800(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 4724;
                case 0x347b0:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x34094;
                    run_34000(); return;
                case 0x347d8:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x347e8:
                    r2 = 6 << 16;
                    r2 = r2 + 672;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                case 0x34800:
                    pc=0x34800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34800() throws ExecutionException { /* 0x34800 - 0x34a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34800:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34904;
                        continue;
                    }
                case 0x3480c:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x34820:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34fc4;
                        run_34e00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34fc4;
                        run_34e00(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x34858:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x34878:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=0x340ac;
                    run_34000(); return;
                case 0x348a0:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34668;
                        run_34600(); return;
                    }
                case 0x348bc:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3569c;
                        run_35600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3467c;
                    run_34600(); return;
                case 0x348e0:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = 6 << 16;
                    r3 = r3 + 692;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3480c;
                        continue;
                    }
                case 0x34904:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35654;
                        run_35600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x34820;
                    continue;
                case 0x34928:
                    r2 = r17 & 16;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a34;
                        run_34a00(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a34;
                        run_34a00(); return;
                    }
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x33d0c;
                    run_33c00(); return;
                case 0x34978:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34550;
                        run_34400(); return;
                    }
                case 0x3498c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3567c;
                        run_35600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x349bc:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x345f4;
                        run_34400(); return;
                    }
                case 0x349d0:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x356b0;
                        run_35600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x34a00:
                    pc=0x34a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34a00() throws ExecutionException { /* 0x34a00 - 0x34c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34a00:
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x34a10:
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fa8;
                        run_33e00(); return;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x34878;
                    run_34800(); return;
                case 0x34a34:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x33d0c;
                    run_33c00(); return;
                case 0x34a64:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x341b8;
                    run_34000(); return;
                case 0x34a70:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34eb0;
                        run_34e00(); return;
                    }
                case 0x34a94:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3538c;
                        run_35200(); return;
                    }
                    r8 = r8 + 8;
                case 0x34ab4:
                    r4 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x353bc;
                        run_35200(); return;
                    }
                    r8 = r8 + 8;
                case 0x34ae4:
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x35114;
                        run_35000(); return;
                    }
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x34b20:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34ed8;
                        run_34e00(); return;
                    }
                case 0x34b38:
                    r8 = r8 + 8;
                case 0x34b3c:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r29 + 1188;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x34b50:
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34350;
                        run_34200(); return;
                    }
                case 0x34b68:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34b7c;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34b7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34354;
                    run_34200(); return;
                case 0x34b94:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34ba8;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34ba8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3448c;
                    run_34400(); return;
                case 0x34bc0:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x34f8c;
                        run_34e00(); return;
                    }
                    r6 = r29 + 1104;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x34c14;
                        run_34c00(); return;
                    }
                    r5 = readPages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff];
                case 0x34be4:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34be4;
                        continue;
                    }
                case 0x34c00:
                    pc=0x34c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34c00() throws ExecutionException { /* 0x34c00 - 0x34e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34c00:
                case 0x34c04:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x345b4;
                    run_34400(); return;
                case 0x34c14:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c14;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c04;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34c04;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x345b4;
                    run_34400(); return;
                case 0x34c64:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a70;
                        run_34a00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34fd8;
                        run_34e00(); return;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 804;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35720;
                        run_35600(); return;
                    }
                    r8 = r8 + 8;
                case 0x34ccc:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34cf0;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34354;
                        run_34200(); return;
                    }
                case 0x34cf0:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35918;
                        run_35800(); return;
                    }
                    r8 = r8 + 8;
                case 0x34d2c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34354;
                        run_34200(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x351b0;
                        run_35000(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 5104;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x34d78;
                    continue;
                case 0x34d64:
                    r8 = r8 + 8;
                case 0x34d68:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x351bc;
                        run_35000(); return;
                    }
                case 0x34d78:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d64;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34db0;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34db0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34d68;
                    continue;
                case 0x34dcc:
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34248;
                        run_34200(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35bb8;
                        run_35a00(); return;
                    }
                    r4 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 5104;
                    r7 = r0 + 16;
                case 0x34e00:
                    pc=0x34e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34e00() throws ExecutionException { /* 0x34e00 - 0x35000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34e00:
                    /* Next insn is delay slot */ 
                    pc=0x34e1c;
                    continue;
                case 0x34e08:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34e80;
                        continue;
                    }
                case 0x34e1c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34e08;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x34e58;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34e58:
                    r7 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34e1c;
                        continue;
                    }
                case 0x34e80:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35408;
                        run_35400(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x34248;
                    run_34200(); return;
                case 0x34eb0:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a94;
                        run_34a00(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b38;
                        run_34a00(); return;
                    }
                case 0x34ed8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34eec;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34eec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34b3c;
                    run_34a00(); return;
                case 0x34f08:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34f1c;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34f1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34318;
                    run_34200(); return;
                case 0x34f34:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34f48;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34f48:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34238;
                    run_34200(); return;
                case 0x34f60:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x34f74;
                    pc=0x52000;
                    run_52000(); return;
                case 0x34f74:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x341f4;
                    run_34000(); return;
                case 0x34f8c:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x351d0;
                        run_35000(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r16 = r29 + 1103;
                    /* Next insn is delay slot */ 
                    pc=0x345b4;
                    run_34400(); return;
                case 0x34fb4:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=0x345b4;
                    run_34400(); return;
                case 0x34fc4:
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x34fd8:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3574c;
                        run_35600(); return;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35008;
                        run_35000(); return;
                    }
                case 0x35000:
                    pc=0x35000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35000() throws ExecutionException { /* 0x35000 - 0x35200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35000:
                    r20 = r4 + r0;
                case 0x35008:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3503c;
                        continue;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x359cc;
                        run_35800(); return;
                    }
                    r8 = r8 + 8;
                case 0x3503c:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x359c0;
                        run_35800(); return;
                    }
                case 0x35044:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35238;
                        run_35200(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x356d0;
                        run_35600(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 5104;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x35090;
                    continue;
                case 0x3507c:
                    r8 = r8 + 8;
                case 0x35080:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x356dc;
                        run_35600(); return;
                    }
                case 0x35090:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3507c;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x350c8;
                    pc=0x52000;
                    run_52000(); return;
                case 0x350c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x35080;
                    continue;
                case 0x350e4:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x350f8;
                    pc=0x52000;
                    run_52000(); return;
                case 0x350f8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x341b8;
                    run_34000(); return;
                case 0x35114:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b3c;
                        run_34a00(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x353ec;
                        run_35200(); return;
                    }
                    r4 = 6 << 16;
                    r23 = r4 + 5104;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3515c;
                    continue;
                case 0x35148:
                    r8 = r8 + 8;
                case 0x3514c:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x353f4;
                        run_35200(); return;
                    }
                case 0x3515c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35148;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35194;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35194:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3514c;
                    continue;
                case 0x351b0:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 5104;
                case 0x351bc:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x34b50;
                    run_34a00(); return;
                case 0x351d0:
                    r6 = r29 + 1104;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x351dc:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x351e8;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x351e8:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x351dc;
                        continue;
                    }
                case 0x35200:
                    pc=0x35200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35200() throws ExecutionException { /* 0x35200 - 0x35400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35200:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x345b4;
                    run_34400(); return;
                case 0x35214:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35228;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35228:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x35238:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35264;
                        continue;
                    }
                    r4 = r17 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35298;
                        continue;
                    }
                case 0x35264:
                    r4 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r5 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x359f8;
                        run_35800(); return;
                    }
                    r8 = r8 + 8;
                case 0x35298:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x352b8;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x352b8:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x352ec;
                        continue;
                    }
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35a6c;
                        run_35a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x352ec:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35a60;
                        run_35a00(); return;
                    }
                case 0x352f4:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34354;
                        run_34200(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x351b0;
                        run_35000(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 5104;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x35338;
                    continue;
                case 0x35324:
                    r8 = r8 + 8;
                case 0x35328:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x351bc;
                        run_35000(); return;
                    }
                case 0x35338:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35324;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35370;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35370:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x35328;
                    continue;
                case 0x3538c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x353a0;
                    pc=0x52000;
                    run_52000(); return;
                case 0x353a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34ab4;
                    run_34a00(); return;
                case 0x353bc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x353d0;
                    pc=0x52000;
                    run_52000(); return;
                case 0x353d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34ae4;
                    run_34a00(); return;
                case 0x353ec:
                    r5 = 6 << 16;
                    r23 = r5 + 5104;
                case 0x353f4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                case 0x35400:
                    pc=0x35400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35400() throws ExecutionException { /* 0x35400 - 0x35600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35400:
                    /* Next insn is delay slot */ 
                    pc=0x34b20;
                    run_34a00(); return;
                case 0x35408:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3541c;
                    pc=0x52000;
                    run_52000(); return;
                case 0x3541c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34248;
                    run_34200(); return;
                case 0x35434:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x35450:
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x35464;
                    pc=0x4ba00;
                    run_4ba00(); return;
                case 0x35464:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35888;
                        run_35800(); return;
                    }
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35df4;
                        run_35c00(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35d14;
                        run_35c00(); return;
                    }
                case 0x35490:
                    r2 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35d68;
                        run_35c00(); return;
                    }
                    f0 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = f0;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = f1;
                case 0x354b8:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35b68;
                        run_35a00(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35b68;
                        run_35a00(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35d5c;
                        run_35c00(); return;
                    }
                    r5 = r30 + r0;
                case 0x354e0:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r5;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x35520;
                    pc=0x45400;
                    run_45400(); return;
                case 0x35520:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35544;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35550;
                        continue;
                    }
                case 0x35544:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35e00;
                        run_35e00(); return;
                    }
                case 0x35550:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35bd8;
                        run_35a00(); return;
                    }
                case 0x35560:
                    f0 = r0;
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x35bcc;
                        run_35a00(); return;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x355bc;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x3559c:
                    r3 = r2 + 1;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3559c;
                        continue;
                    }
                case 0x355bc:
                    r2 = r2 - r16;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35b18;
                        run_35a00(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35fa0;
                        run_35e00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35e0c;
                        run_35e00(); return;
                    }
                case 0x355f0:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                case 0x35600:
                    pc=0x35600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35600() throws ExecutionException { /* 0x35600 - 0x35800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35600:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35d90;
                        run_35c00(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35dc8;
                        run_35c00(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35fbc;
                        run_35e00(); return;
                    }
                case 0x35620:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                case 0x3562c:
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35af8;
                        run_35a00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34094;
                    run_34000(); return;
                case 0x35654:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x34820;
                    run_34800(); return;
                case 0x35668:
                    r2 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x3472c;
                    run_34600(); return;
                case 0x3567c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x3569c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3467c;
                    run_34600(); return;
                case 0x356b0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3456c;
                    run_34400(); return;
                case 0x356d0:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 5104;
                case 0x356dc:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35214;
                        run_35200(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x35238;
                    run_35200(); return;
                case 0x3570c:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 5104;
                    /* Next insn is delay slot */ 
                    pc=0x342f0;
                    run_34200(); return;
                case 0x35720:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35734;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35734:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34ccc;
                    run_34c00(); return;
                case 0x3574c:
                    r4 = 6 << 16;
                    r4 = r4 + 804;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x358e8;
                        run_35800(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x35788:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x357ac;
                        continue;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x357ac;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34354;
                        run_34200(); return;
                    }
                case 0x357ac:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35d28;
                        run_35c00(); return;
                    }
                    r8 = r8 + 8;
                case 0x357e8:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3596c;
                        run_35800(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35a28;
                        run_35a00(); return;
                    }
                case 0x35800:
                    pc=0x35800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35800() throws ExecutionException { /* 0x35800 - 0x35a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35800:
                    r5 = 6 << 16;
                    r23 = r5 + 5104;
                    r20 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x35828;
                    continue;
                case 0x35814:
                    r8 = r8 + 8;
                case 0x35818:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35a30;
                        run_35a00(); return;
                    }
                case 0x35828:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35814;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35860;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35860:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x35818;
                    continue;
                case 0x3587c:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x34070;
                    run_34000(); return;
                case 0x35888:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35b58;
                        run_35a00(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 4732;
                case 0x3589c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x34094;
                    run_34000(); return;
                case 0x358c8:
                    r16 = 6 << 16;
                    r16 = r16 + 4728;
                    /* Next insn is delay slot */ 
                    pc=0x347b0;
                    run_34600(); return;
                case 0x358d8:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de8;
                    run_33c00(); return;
                case 0x358e8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x358fc;
                    pc=0x52000;
                    run_52000(); return;
                case 0x358fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x35788;
                    run_35600(); return;
                case 0x35918:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x3592c;
                    pc=0x52000;
                    run_52000(); return;
                case 0x3592c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x34d2c;
                    run_34c00(); return;
                case 0x35944:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35958;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35958:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x3596c:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x34b50;
                    run_34a00(); return;
                case 0x35984:
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x35990;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x35990:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34080;
                        run_34000(); return;
                    }
                case 0x359a0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34080;
                    run_34000(); return;
                case 0x359ac:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x34188;
                    run_34000(); return;
                case 0x359c0:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35044;
                    run_35000(); return;
                case 0x359cc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x359e0;
                    pc=0x52000;
                    run_52000(); return;
                case 0x359e0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x3503c;
                    run_35000(); return;
                case 0x359f8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                case 0x35a00:
                    pc=0x35a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35a00() throws ExecutionException { /* 0x35a00 - 0x35c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35a00:
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35a0c;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35a0c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x35298;
                    run_35200(); return;
                case 0x35a28:
                    r4 = 6 << 16;
                    r23 = r4 + 5104;
                case 0x35a30:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35944;
                        run_35800(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3596c;
                    run_35800(); return;
                case 0x35a60:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x352f4;
                    run_35200(); return;
                case 0x35a6c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35a80;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35a80:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x352ec;
                    run_35200(); return;
                case 0x35aa4:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35ab8;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x35ab8:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35ef0;
                        run_35e00(); return;
                    }
                case 0x35ac4:
                    r16 = 6 << 16;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r16 + 4740;
                    /* Next insn is delay slot */ 
                    pc=0x340ac;
                    run_34000(); return;
                case 0x35ae8:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x34408;
                    run_34400(); return;
                case 0x35af8:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3409c;
                    run_34000(); return;
                case 0x35b18:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35c58;
                        run_35c00(); return;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35c58;
                        run_35c00(); return;
                    }
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x355f0;
                    run_35400(); return;
                case 0x35b44:
                    r2 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x3479c;
                    run_34600(); return;
                case 0x35b58:
                    r16 = 6 << 16;
                    r16 = r16 + 4736;
                    /* Next insn is delay slot */ 
                    pc=0x3589c;
                    run_35800(); return;
                case 0x35b68:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x35ba4;
                    pc=0x45400;
                    run_45400(); return;
                case 0x35ba4:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x35550;
                    run_35400(); return;
                case 0x35bb8:
                    r5 = 6 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 5104;
                    /* Next insn is delay slot */ 
                    pc=0x34e80;
                    run_34e00(); return;
                case 0x35bcc:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x355bc;
                    run_35400(); return;
                case 0x35bd8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35bfc;
                        continue;
                    }
                case 0x35be8:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x35560;
                    run_35400(); return;
                case 0x35bfc:
                    f0 = r0;
                case 0x35c00:
                    pc=0x35c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35c00() throws ExecutionException { /* 0x35c00 - 0x35e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35c00:
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x35be8;
                        run_35a00(); return;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x35560;
                    run_35400(); return;
                case 0x35c38:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r30;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x34094;
                    run_34000(); return;
                case 0x35c58:
                    r18 = r18 + -2;
                case 0x35c5c:
                    r2 = r2 + -1;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    addr=r29+1188;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f3c;
                        run_35e00(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x35c78:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35e38;
                        run_35e00(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+1191;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1190;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 1192;
                    r4 = r29 + 1188;
                case 0x35c9c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35ce8;
                        continue;
                    }
                case 0x35cc0:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35d04;
                        continue;
                    }
                case 0x35cdc:
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3562c;
                    run_35600(); return;
                case 0x35ce8:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35cc0;
                        continue;
                    }
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35cdc;
                        continue;
                    }
                case 0x35d04:
                    r2 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3562c;
                    run_35600(); return;
                case 0x35d14:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35490;
                        run_35400(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x35490;
                    run_35400(); return;
                case 0x35d28:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x35d3c;
                    pc=0x52000;
                    run_52000(); return;
                case 0x35d3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33fcc;
                        run_33e00(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x357e8;
                    run_35600(); return;
                case 0x35d5c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x354e0;
                    run_35400(); return;
                case 0x35d68:
                    r3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = r2;
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = r4;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x354b8;
                    run_35400(); return;
                case 0x35d90:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f2c;
                        run_35e00(); return;
                    }
                    r2 = r0 + 1;
                case 0x35da4:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35de4;
                        continue;
                    }
                case 0x35dbc:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x3562c;
                    run_35600(); return;
                case 0x35dc8:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35dbc;
                        continue;
                    }
                case 0x35de4:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x3562c;
                    run_35600(); return;
                case 0x35df4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x35490;
                    run_35400(); return;
                case 0x35e00:
                    pc=0x35e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35e00() throws ExecutionException { /* 0x35e00 - 0x36000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35e00:
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x355bc;
                    run_35400(); return;
                case 0x35e0c:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f50;
                        continue;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35ecc;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35ecc;
                        continue;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3562c;
                    run_35600(); return;
                case 0x35e38:
                    r6 = r29 + 1187;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x35e44:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x35e50;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x35e50:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35e44;
                        continue;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35fac;
                        continue;
                    }
                    r2 = r29 + 1190;
                    /* Next insn is delay slot */ 
                    pc=0x35ea0;
                    continue;
                case 0x35e9c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x35ea0:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x35e9c;
                        continue;
                    }
                    r4 = r29 + 1188;
                    r2 = r4 - r3;
                    r3 = r29 + 1190;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x35c9c;
                    run_35c00(); return;
                case 0x35ecc:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3562c;
                        run_35600(); return;
                    }
                case 0x35ee4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3562c;
                    run_35600(); return;
                case 0x35ef0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35ac4;
                    run_35a00(); return;
                case 0x35efc:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a00;
                        run_34a00(); return;
                    }
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33de0;
                    run_33c00(); return;
                case 0x35f2c:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x35da4;
                    run_35c00(); return;
                case 0x35f3c:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x35c78;
                    run_35c00(); return;
                case 0x35f50:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f84;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f84;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x3562c;
                    run_35600(); return;
                case 0x35f78:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x33f18;
                    run_33e00(); return;
                case 0x35f84:
                    r30 = r30 + 2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3562c;
                        run_35600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x35ee4;
                    continue;
                case 0x35fa0:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x35c5c;
                    run_35c00(); return;
                case 0x35fac:
                    r2 = r29 + 1190;
                    r4 = r29 + 1188;
                    /* Next insn is delay slot */ 
                    pc=0x35c9c;
                    run_35c00(); return;
                case 0x35fbc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35620;
                    run_35600(); return;
                case 0x36000:
                    pc=0x36000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36000() throws ExecutionException { /* 0x36000 - 0x36200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x36200:
                    pc=0x36200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36200() throws ExecutionException { /* 0x36200 - 0x36400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36238;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x363e4;
                        continue;
                    }
                case 0x36238:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x363b8;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x363b8;
                        continue;
                    }
                case 0x3626c:
                    r3 = r3 & 8192;
                    r18 = r18 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x362f4;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36324;
                        continue;
                    }
                case 0x36294:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x36368;
                        continue;
                    }
                case 0x362c0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3638c;
                        continue;
                    }
                case 0x362d4:
                    r2 = r18 + r0;
                case 0x362d8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x362f4:
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36294;
                        continue;
                    }
                case 0x36324:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36334;
                    pc=0x29200;
                    run_29200(); return;
                case 0x36334:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36380;
                        continue;
                    }
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x362c0;
                        continue;
                    }
                case 0x36368:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36378;
                    pc=0x29200;
                    run_29200(); return;
                case 0x36378:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x362d4;
                        continue;
                    }
                case 0x36380:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x362d8;
                    continue;
                case 0x3638c:
                    r2 = r0 + 10;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x362d4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x363a8;
                    pc=0x29200;
                    run_29200(); return;
                case 0x363a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x362d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x36380;
                    continue;
                case 0x363b8:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x363c8;
                    pc=0x36600;
                    run_36600(); return;
                case 0x363c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36380;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r2 & 65535;
                    /* Next insn is delay slot */ 
                    pc=0x3626c;
                    continue;
                case 0x363e4:
                    /* Next insn is delay slot */ 
                    r31=0x363ec;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x363ec:
                    /* Next insn is delay slot */ 
                    pc=0x36238;
                    continue;
                case 0x36400:
                    pc=0x36400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36400() throws ExecutionException { /* 0x36400 - 0x36600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36200;
                    run_36200(); return;
                case 0x36600:
                    pc=0x36600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36600() throws ExecutionException { /* 0x36600 - 0x36800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36634;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36744;
                        continue;
                    }
                case 0x36634:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                    r2 = r6 & 65535;
                    r3 = r2 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x366a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x366d4;
                        continue;
                    }
                case 0x3665c:
                    r4 = r2 & 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36704;
                        continue;
                    }
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36754;
                        continue;
                    }
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                case 0x36680:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3671c;
                        continue;
                    }
                case 0x36688:
                    r2 = r0 + r0;
                case 0x3668c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x366a4:
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x367b0;
                        continue;
                    }
                    r2 = r2 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36764;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x366c0:
                    r2 = r6 | 8;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 65535;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3665c;
                        continue;
                    }
                case 0x366d4:
                    r5 = r2 & 640;
                    r4 = r0 + 512;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3665c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x366f4;
                    pc=0x2da00;
                    run_2da00(); return;
                case 0x366f4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3665c;
                    continue;
                case 0x36704:
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r0 - r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36688;
                        continue;
                    }
                case 0x3671c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + r0;
                    r4 = r3 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3668c;
                        continue;
                    }
                    r3 = r3 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3668c;
                    continue;
                case 0x36744:
                    /* Next insn is delay slot */ 
                    r31=0x3674c;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x3674c:
                    /* Next insn is delay slot */ 
                    pc=0x36634;
                    continue;
                case 0x36754:
                    r2 = r0 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x36680;
                    continue;
                case 0x36764:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36794;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x36790;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3678c;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x3678c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                case 0x36790:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x36794:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -37;
                    r6 = r6 & r2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x366c0;
                    continue;
                case 0x367b0:
                    r2 = r0 + 9;
                    r6 = r6 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r6&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3668c;
                    continue;
                case 0x36800:
                    pc=0x36800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36800() throws ExecutionException { /* 0x36800 - 0x36a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36800:
                    r2 = r0 + 1;
                    pc = 0x36804;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36808;
                        return;
                    }
                case 0x36808:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36810:
                    r2 = r0 + 2;
                    pc = 0x36814;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36818;
                        return;
                    }
                case 0x36818:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36820:
                    r2 = r0 + 3;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36834;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36838;
                        return;
                    }
                case 0x36838:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36850;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36850:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36860:
                    r2 = r0 + 4;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36874;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36878;
                        return;
                    }
                case 0x36878:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36890;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36890:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x368a0:
                    r2 = r0 + 5;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x368b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x368b8;
                        return;
                    }
                case 0x368b8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x368d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x368d0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x368e0:
                    r2 = r0 + 6;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x368f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x368f8;
                        return;
                    }
                case 0x368f8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36910;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36910:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36920:
                    r2 = r0 + 7;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36934;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36938;
                        return;
                    }
                case 0x36938:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36950;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36950:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36960:
                    r2 = r0 + 8;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36974;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36978;
                        return;
                    }
                case 0x36978:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36990;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36990:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x369a0:
                    r2 = r0 + 10;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x369b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x369b8;
                        return;
                    }
                case 0x369b8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x369d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x369d0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x369e0:
                    r2 = r0 + 11;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x369f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x369f8;
                        return;
                    }
                case 0x369f8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                case 0x36a00:
                    pc=0x36a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36a00() throws ExecutionException { /* 0x36a00 - 0x36c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36a00:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36a10;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36a10:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36a20:
                    r2 = r0 + 12;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36a34;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36a38;
                        return;
                    }
                case 0x36a38:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36a50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36a50:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36a60:
                    r2 = r0 + 13;
                    pc = 0x36a64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36a68;
                        return;
                    }
                case 0x36a68:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36a70:
                    r2 = r0 + 14;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36a84;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36a88;
                        return;
                    }
                case 0x36a88:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36aa0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36aa0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36ab0:
                    r2 = r0 + 15;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36ac4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36ac8;
                        return;
                    }
                case 0x36ac8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36ae0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36ae0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36af0:
                    r2 = r0 + 16;
                    pc = 0x36af4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36af8;
                        return;
                    }
                case 0x36af8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36b00:
                    r2 = r0 + 17;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36b14;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36b18;
                        return;
                    }
                case 0x36b18:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36b30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36b30:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36b40:
                    r2 = r0 + 18;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36b54;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36b58;
                        return;
                    }
                case 0x36b58:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36b70;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36b70:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36b80:
                    r2 = r0 + 19;
                    pc = 0x36b84;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36b88;
                        return;
                    }
                case 0x36b88:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36b90:
                    r2 = r0 + 20;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36ba4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36ba8;
                        return;
                    }
                case 0x36ba8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36bc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36bc0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36bd0:
                    r2 = r0 + 21;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36be4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36be8;
                        return;
                    }
                case 0x36be8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c00;
                        run_36c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36c00:
                    pc=0x36c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36c00() throws ExecutionException { /* 0x36c00 - 0x36e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36c00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36c10:
                    r2 = r0 + 22;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36c24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36c28;
                        return;
                    }
                case 0x36c28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36c40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36c50:
                    r2 = r0 + 23;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36c64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36c68;
                        return;
                    }
                case 0x36c68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36c80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36c90:
                    r2 = r0 + 24;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36ca4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36ca8;
                        return;
                    }
                case 0x36ca8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36cc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36cc0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36cd0:
                    r2 = r0 + 25;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36ce4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36ce8;
                        return;
                    }
                case 0x36ce8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36d00;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36d00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36d10:
                    r2 = r0 + 26;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36d24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36d28;
                        return;
                    }
                case 0x36d28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36d40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36d40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36d50:
                    r2 = r0 + 27;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36d64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36d68;
                        return;
                    }
                case 0x36d68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36d80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36d80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36d90:
                    r2 = r0 + 28;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36da4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36da8;
                        return;
                    }
                case 0x36da8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36dc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36dc0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36dd0:
                    r2 = r0 + 29;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36de4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36de8;
                        return;
                    }
                case 0x36de8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e00;
                        run_36e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36e00:
                    pc=0x36e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36e00() throws ExecutionException { /* 0x36e00 - 0x37000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36e00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36e10:
                    r2 = r0 + 30;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36e24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36e28;
                        return;
                    }
                case 0x36e28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36e40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36e50:
                    r2 = r0 + 31;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36e64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36e68;
                        return;
                    }
                case 0x36e68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36e80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36e90:
                    r2 = r0 + 32;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36ea4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36ea8;
                        return;
                    }
                case 0x36ea8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36ec0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36ec0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36ed0:
                    r2 = r0 + 33;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36ee4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36ee8;
                        return;
                    }
                case 0x36ee8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36f00;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36f00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36f10:
                    r2 = r0 + 34;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36f24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36f28;
                        return;
                    }
                case 0x36f28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36f40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36f40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36f50:
                    r2 = r0 + 35;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x36f64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36f68;
                        return;
                    }
                case 0x36f68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36f80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36f80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36f90:
                    r2 = r0 + 36;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x36fb0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36fb4;
                        return;
                    }
                case 0x36fb4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36fcc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36fcc:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x36fdc:
                    r2 = r0 + 37;
                    pc = 0x36fe0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36fe4;
                        return;
                    }
                case 0x36fe4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36fec:
                    r2 = r0 + 38;
                    pc = 0x36ff0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x36ff4;
                        return;
                    }
                case 0x36ff4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36ffc:
                    r2 = r0 + 39;
                case 0x37000:
                    pc=0x37000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37000() throws ExecutionException { /* 0x37000 - 0x37200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37000:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37010;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37014;
                        return;
                    }
                case 0x37014:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3702c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3702c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x3703c:
                    r2 = r0 + 40;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37050;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37054;
                        return;
                    }
                case 0x37054:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3706c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3706c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x3707c:
                    r2 = r0 + 41;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37090;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37094;
                        return;
                    }
                case 0x37094:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x370ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x370ac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x370bc:
                    r2 = r0 + 42;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x370d0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x370d4;
                        return;
                    }
                case 0x370d4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x370ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x370ec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x370fc:
                    r2 = r0 + 43;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37110;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37114;
                        return;
                    }
                case 0x37114:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3712c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3712c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x3713c:
                    r2 = r0 + 44;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37150;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37154;
                        return;
                    }
                case 0x37154:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3716c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3716c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x3717c:
                    r2 = r0 + 45;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37190;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37194;
                        return;
                    }
                case 0x37194:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x371ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x371ac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x371bc:
                    r2 = r0 + 46;
                    pc = 0x371c0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x371c4;
                        return;
                    }
                case 0x371c4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x371cc:
                    r2 = r0 + 47;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x371e0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x371e4;
                        return;
                    }
                case 0x371e4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x371fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x371fc:
                    r4 = r10 + r0;
                case 0x37200:
                    pc=0x37200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37200() throws ExecutionException { /* 0x37200 - 0x37400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37200:
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x3720c:
                    r2 = r0 + 51;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37220;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37224;
                        return;
                    }
                case 0x37224:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3723c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3723c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x3724c:
                    r2 = r0 + 52;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37260;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37264;
                        return;
                    }
                case 0x37264:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3727c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3727c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x3728c:
                    r2 = r0 + 53;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x372ac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x372b0;
                        return;
                    }
                case 0x372b0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x372c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x372c8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x372d8:
                    r2 = r0 + 55;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x372ec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x372f0;
                        return;
                    }
                case 0x372f0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37308;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37308:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37318:
                    r2 = r0 + 54;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3732c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37330;
                        return;
                    }
                case 0x37330:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37348;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37348:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37358:
                    r2 = r0 + 56;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3736c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37370;
                        return;
                    }
                case 0x37370:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37388;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37388:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37398:
                    r2 = r0 + 57;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x373ac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x373b0;
                        return;
                    }
                case 0x373b0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x373c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x373c8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x373d8:
                    r2 = r0 + 58;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x373ec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x373f0;
                        return;
                    }
                case 0x373f0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37408;
                        run_37400(); return;
                    }
                case 0x37400:
                    pc=0x37400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37400() throws ExecutionException { /* 0x37400 - 0x37600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37400:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37408:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37418:
                    r2 = r0 + 59;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x3742c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37430;
                        return;
                    }
                case 0x37430:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37448;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37448:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37458:
                    r2 = r0 + 60;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x37478;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3747c;
                        return;
                    }
                case 0x3747c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37494;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37494:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x374a4:
                    r2 = r0 + 61;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x374c4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x374c8;
                        return;
                    }
                case 0x374c8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x374e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x374e0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x374f0:
                    r2 = r0 + 62;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37504;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37508;
                        return;
                    }
                case 0x37508:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37520;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37520:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37530:
                    r2 = r0 + 63;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37544;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37548;
                        return;
                    }
                case 0x37548:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37560;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37560:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37570:
                    r2 = r0 + 64;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37584;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37588;
                        return;
                    }
                case 0x37588:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x375a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x375a0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x375b0:
                    r2 = r0 + 65;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x375d0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x375d4;
                        return;
                    }
                case 0x375d4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x375ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x375ec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x375fc:
                    r2 = r0 + 66;
                case 0x37600:
                    pc=0x37600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37600() throws ExecutionException { /* 0x37600 - 0x37800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37600:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x3761c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37620;
                        return;
                    }
                case 0x37620:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37638;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37638:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37648:
                    r2 = r0 + 67;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x37668;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3766c;
                        return;
                    }
                case 0x3766c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37684;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37684:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37694:
                    r2 = r0 + 73;
                    pc = 0x37698;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3769c;
                        return;
                    }
                case 0x3769c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x376a4:
                    r2 = r0 + 68;
                    pc = 0x376a8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x376ac;
                        return;
                    }
                case 0x376ac:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x376b4:
                    r2 = r0 + 70;
                    pc = 0x376b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x376bc;
                        return;
                    }
                case 0x376bc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x376c4:
                    r2 = r0 + 69;
                    pc = 0x376c8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x376cc;
                        return;
                    }
                case 0x376cc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x376d4:
                    r2 = r0 + 71;
                    pc = 0x376d8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x376dc;
                        return;
                    }
                case 0x376dc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x376e4:
                    r2 = r0 + 82;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x376f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x376fc;
                        return;
                    }
                case 0x376fc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37714;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37714:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37724:
                    r2 = r0 + 83;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37738;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3773c;
                        return;
                    }
                case 0x3773c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37754;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37754:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37764:
                    r2 = r0 + 84;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37778;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3777c;
                        return;
                    }
                case 0x3777c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37794;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37794:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x377a4:
                    r2 = r0 + 85;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x377b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x377bc;
                        return;
                    }
                case 0x377bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x377d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x377d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x377e4:
                    r2 = r0 + 80;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x377f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x377fc;
                        return;
                    }
                case 0x377fc:
                    r11 = r2 + 255;
                case 0x37800:
                    pc=0x37800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37800() throws ExecutionException { /* 0x37800 - 0x37a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37800:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37814;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37814:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37824:
                    r2 = r0 + 86;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37838;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3783c;
                        return;
                    }
                case 0x3783c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37854;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37854:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37864:
                    r2 = r0 + 81;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37878;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3787c;
                        return;
                    }
                case 0x3787c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37894;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37894:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x378a4:
                    r2 = r0 + 87;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x378b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x378bc;
                        return;
                    }
                case 0x378bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x378d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x378d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x378e4:
                    r2 = r0 + 88;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x378f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x378fc;
                        return;
                    }
                case 0x378fc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37914;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37914:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37924:
                    r2 = r0 + 78;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37938;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3793c;
                        return;
                    }
                case 0x3793c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37954;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37954:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37964:
                    r2 = r0 + 76;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37978;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x3797c;
                        return;
                    }
                case 0x3797c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37994;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37994:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x379a4:
                    r2 = r0 + 77;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x379b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x379bc;
                        return;
                    }
                case 0x379bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x379d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x379d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x379e4:
                    r2 = r0 + 74;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x379f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x379fc;
                        return;
                    }
                case 0x379fc:
                    r11 = r2 + 255;
                case 0x37a00:
                    pc=0x37a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37a00() throws ExecutionException { /* 0x37a00 - 0x37c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37a00:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37a14:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37a24:
                    r2 = r0 + 75;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37a38;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37a3c;
                        return;
                    }
                case 0x37a3c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37a54:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37a64:
                    r2 = r0 + 79;
                    pc = 0x37a68;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37a6c;
                        return;
                    }
                case 0x37a6c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37a74:
                    r2 = r0 + 72;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37a88;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37a8c;
                        return;
                    }
                case 0x37a8c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37aa4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37aa4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37ab4:
                    r2 = r0 + 90;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37ac8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37acc;
                        return;
                    }
                case 0x37acc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37ae4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37ae4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37af4:
                    r2 = r0 + 89;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37b08;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37b0c;
                        return;
                    }
                case 0x37b0c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37b24;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37b24:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37b34:
                    r2 = r0 + 91;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x37b48;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x37b4c;
                        return;
                    }
                case 0x37b4c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37b64;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37b64:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x37c00:
                    pc=0x37c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37c00() throws ExecutionException { /* 0x37c00 - 0x37e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37c00:
                    r5 = r0 - r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37e00:
                    pc=0x37e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37e00() throws ExecutionException { /* 0x37e00 - 0x38000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36b40;
                    run_36a00(); return;
                case 0x38000:
                    pc=0x38000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38000() throws ExecutionException { /* 0x38000 - 0x38200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37924;
                    run_37800(); return;
                case 0x38200:
                    pc=0x38200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38200() throws ExecutionException { /* 0x38200 - 0x38400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36e10;
                    run_36e00(); return;
                case 0x38400:
                    pc=0x38400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38400() throws ExecutionException { /* 0x38400 - 0x38600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36e50;
                    run_36e00(); return;
                case 0x38600:
                    pc=0x38600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38600() throws ExecutionException { /* 0x38600 - 0x38800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38600:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36c10;
                    run_36c00(); return;
                case 0x38800:
                    pc=0x38800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38800() throws ExecutionException { /* 0x38800 - 0x38a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36bd0;
                    run_36a00(); return;
                case 0x38a00:
                    pc=0x38a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38a00() throws ExecutionException { /* 0x38a00 - 0x38c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38a00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36c50;
                    run_36c00(); return;
                case 0x38c00:
                    pc=0x38c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38c00() throws ExecutionException { /* 0x38c00 - 0x38e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36c90;
                    run_36c00(); return;
                case 0x38e00:
                    pc=0x38e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38e00() throws ExecutionException { /* 0x38e00 - 0x39000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36d10;
                    run_36c00(); return;
                case 0x39000:
                    pc=0x39000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39000() throws ExecutionException { /* 0x39000 - 0x39200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39000:
                    r29 = r29 + -40;
                    r2 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39070;
                        continue;
                    }
                    r6 = r5 + r0;
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39040;
                    pc=0x36d50;
                    run_36c00(); return;
                case 0x39040:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x390c4;
                        continue;
                    }
                case 0x3904c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39070:
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x3907c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39088;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x39088:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x390a0;
                    pc=0x36d50;
                    run_36c00(); return;
                case 0x390a0:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x3904c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x390b4;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x390b4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x3907c;
                        continue;
                    }
                case 0x390c4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39200:
                    pc=0x39200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39200() throws ExecutionException { /* 0x39200 - 0x39400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36d50;
                    run_36c00(); return;
                case 0x39400:
                    pc=0x39400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39400() throws ExecutionException { /* 0x39400 - 0x39600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36f10;
                    run_36e00(); return;
                case 0x39600:
                    pc=0x39600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39600() throws ExecutionException { /* 0x39600 - 0x39800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36e90;
                    run_36e00(); return;
                case 0x39800:
                    pc=0x39800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39800() throws ExecutionException { /* 0x39800 - 0x39a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39800:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37964;
                    run_37800(); return;
                case 0x39a00:
                    pc=0x39a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39a00() throws ExecutionException { /* 0x39a00 - 0x39c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39a00:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x379a4;
                    run_37800(); return;
                case 0x39c00:
                    pc=0x39c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39c00() throws ExecutionException { /* 0x39c00 - 0x39e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39c00:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x370fc;
                    run_37000(); return;
                case 0x39e00:
                    pc=0x39e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39e00() throws ExecutionException { /* 0x39e00 - 0x3a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x379e4;
                    run_37800(); return;
                case 0x3a000:
                    pc=0x3a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a000() throws ExecutionException { /* 0x3a000 - 0x3a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37a24;
                    run_37a00(); return;
                case 0x3a200:
                    pc=0x3a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a200() throws ExecutionException { /* 0x3a200 - 0x3a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36ed0;
                    run_36e00(); return;
                case 0x3a400:
                    pc=0x3a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a400() throws ExecutionException { /* 0x3a400 - 0x3a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a400:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3a430;
                    pc=0x36f90;
                    run_36e00(); return;
                case 0x3a430:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3a600:
                    pc=0x3a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a600() throws ExecutionException { /* 0x3a600 - 0x3a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a600:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36ffc;
                    run_36e00(); return;
                case 0x3a800:
                    pc=0x3a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a800() throws ExecutionException { /* 0x3a800 - 0x3aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r5 = r5 + 5136;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3a828;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x3a828:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3aa00:
                    pc=0x3aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3aa00() throws ExecutionException { /* 0x3aa00 - 0x3ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3aa00:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3703c;
                    run_37000(); return;
                case 0x3ac00:
                    pc=0x3ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ac00() throws ExecutionException { /* 0x3ac00 - 0x3ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ac00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3707c;
                    run_37000(); return;
                case 0x3ae00:
                    pc=0x3ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ae00() throws ExecutionException { /* 0x3ae00 - 0x3b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ae00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r7 = r6 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r7 >> 16;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x370bc;
                    run_37000(); return;
                case 0x3b000:
                    pc=0x3b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b000() throws ExecutionException { /* 0x3b000 - 0x3b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3713c;
                    run_37000(); return;
                case 0x3b200:
                    pc=0x3b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b200() throws ExecutionException { /* 0x3b200 - 0x3b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3717c;
                    run_37000(); return;
                case 0x3b400:
                    pc=0x3b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b400() throws ExecutionException { /* 0x3b400 - 0x3b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x371cc;
                    run_37000(); return;
                case 0x3b600:
                    pc=0x3b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b600() throws ExecutionException { /* 0x3b600 - 0x3b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3720c;
                    run_37200(); return;
                case 0x3b800:
                    pc=0x3b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b800() throws ExecutionException { /* 0x3b800 - 0x3ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3724c;
                    run_37200(); return;
                case 0x3ba00:
                    pc=0x3ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ba00() throws ExecutionException { /* 0x3ba00 - 0x3bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ba00:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3ba40;
                    pc=0x3728c;
                    run_37200(); return;
                case 0x3ba40:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3bc00:
                    pc=0x3bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3bc00() throws ExecutionException { /* 0x3bc00 - 0x3be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3bc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = r0 + 8;
                    r8 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bc64;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bca8;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3bcc8;
                        continue;
                    }
                case 0x3bc44:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3bc64:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r9 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r8 + r0;
                    r7 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3bc94;
                    pc=0x3728c;
                    run_37200(); return;
                case 0x3bc94:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3bca8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3bcc8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 5176;
                    /* Next insn is delay slot */ 
                    r31=0x3bce0;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x3bce0:
                    /* Next insn is delay slot */ 
                    pc=0x3bc44;
                    continue;
                case 0x3be00:
                    pc=0x3be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3be00() throws ExecutionException { /* 0x3be00 - 0x3c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3be00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x372d8;
                    run_37200(); return;
                case 0x3c000:
                    pc=0x3c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c000() throws ExecutionException { /* 0x3c000 - 0x3c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37318;
                    run_37200(); return;
                case 0x3c200:
                    pc=0x3c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c200() throws ExecutionException { /* 0x3c200 - 0x3c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37398;
                    run_37200(); return;
                case 0x3c400:
                    pc=0x3c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c400() throws ExecutionException { /* 0x3c400 - 0x3c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37358;
                    run_37200(); return;
                case 0x3c600:
                    pc=0x3c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c600() throws ExecutionException { /* 0x3c600 - 0x3c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x373d8;
                    run_37200(); return;
                case 0x3c800:
                    pc=0x3c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c800() throws ExecutionException { /* 0x3c800 - 0x3ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37af4;
                    run_37a00(); return;
                case 0x3ca00:
                    pc=0x3ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ca00() throws ExecutionException { /* 0x3ca00 - 0x3cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ca00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37418;
                    run_37400(); return;
                case 0x3cc00:
                    pc=0x3cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3cc00() throws ExecutionException { /* 0x3cc00 - 0x3ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3cc00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3cc38;
                    pc=0x374a4;
                    run_37400(); return;
                case 0x3cc38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ce00:
                    pc=0x3ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ce00() throws ExecutionException { /* 0x3ce00 - 0x3d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ce00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3ce38;
                    pc=0x37458;
                    run_37400(); return;
                case 0x3ce38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d000:
                    pc=0x3d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d000() throws ExecutionException { /* 0x3d000 - 0x3d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37530;
                    run_37400(); return;
                case 0x3d200:
                    pc=0x3d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d200() throws ExecutionException { /* 0x3d200 - 0x3d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x374f0;
                    run_37400(); return;
                case 0x3d400:
                    pc=0x3d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d400() throws ExecutionException { /* 0x3d400 - 0x3d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37570;
                    run_37400(); return;
                case 0x3d600:
                    pc=0x3d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d600() throws ExecutionException { /* 0x3d600 - 0x3d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d600:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3d640;
                    pc=0x375b0;
                    run_37400(); return;
                case 0x3d640:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d800:
                    pc=0x3d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d800() throws ExecutionException { /* 0x3d800 - 0x3da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d800:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3d840;
                    pc=0x375fc;
                    run_37400(); return;
                case 0x3d840:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3da00:
                    pc=0x3da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3da00() throws ExecutionException { /* 0x3da00 - 0x3dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3da00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3da38;
                    pc=0x37648;
                    run_37600(); return;
                case 0x3da38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3dc00:
                    pc=0x3dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3dc00() throws ExecutionException { /* 0x3dc00 - 0x3de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3dc00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3dc30;
                    pc=0x376e4;
                    run_37600(); return;
                case 0x3dc30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3de00:
                    pc=0x3de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3de00() throws ExecutionException { /* 0x3de00 - 0x3e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3de00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3de30;
                    pc=0x37724;
                    run_37600(); return;
                case 0x3de30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e000:
                    pc=0x3e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e000() throws ExecutionException { /* 0x3e000 - 0x3e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37a74;
                    run_37a00(); return;
                case 0x3e200:
                    pc=0x3e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e200() throws ExecutionException { /* 0x3e200 - 0x3e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37764;
                    run_37600(); return;
                case 0x3e400:
                    pc=0x3e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e400() throws ExecutionException { /* 0x3e400 - 0x3e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x377a4;
                    run_37600(); return;
                case 0x3e600:
                    pc=0x3e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e600() throws ExecutionException { /* 0x3e600 - 0x3e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e600:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x377e4;
                    run_37600(); return;
                case 0x3e800:
                    pc=0x3e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e800() throws ExecutionException { /* 0x3e800 - 0x3ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e800:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x37824;
                    run_37800(); return;
                case 0x3ea00:
                    pc=0x3ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ea00() throws ExecutionException { /* 0x3ea00 - 0x3ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ea00:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x37864;
                    run_37800(); return;
                case 0x3ec00:
                    pc=0x3ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ec00() throws ExecutionException { /* 0x3ec00 - 0x3ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ec00:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x378a4;
                    run_37800(); return;
                case 0x3ee00:
                    pc=0x3ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ee00() throws ExecutionException { /* 0x3ee00 - 0x3f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ee00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x378e4;
                    run_37800(); return;
                case 0x3f000:
                    pc=0x3f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f000() throws ExecutionException { /* 0x3f000 - 0x3f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f000:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x37ab4;
                    run_37a00(); return;
                case 0x3f200:
                    pc=0x3f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f200() throws ExecutionException { /* 0x3f200 - 0x3f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x37b34;
                    run_37a00(); return;
                case 0x3f400:
                    pc=0x3f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f400() throws ExecutionException { /* 0x3f400 - 0x3f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36d90;
                    run_36c00(); return;
                case 0x3f600:
                    pc=0x3f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f600() throws ExecutionException { /* 0x3f600 - 0x3f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f600:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f65c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3f62c;
                    pc=0x36d50;
                    run_36c00(); return;
                case 0x3f62c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3f6b4;
                        continue;
                    }
                case 0x3f638:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f65c:
                    r18 = r4 + r0;
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x3f66c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f678;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x3f678:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f690;
                    pc=0x36d50;
                    run_36c00(); return;
                case 0x3f690:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x3f638;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f6a4;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x3f6a4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x3f66c;
                        continue;
                    }
                case 0x3f6b4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f800:
                    pc=0x3f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f800() throws ExecutionException { /* 0x3f800 - 0x3fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f800:
                    r6 = r5 + r0;
                    r7 = r0 + r0;
                    r5 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x36d10;
                    run_36c00(); return;
                case 0x3fa00:
                    pc=0x3fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fa00() throws ExecutionException { /* 0x3fa00 - 0x3fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fa00:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r5 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 5136;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3fa28;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x3fa28:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fc00:
                    pc=0x3fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fc00() throws ExecutionException { /* 0x3fc00 - 0x3fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fc00:
                    r8 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r3 = r0 + 8;
                    r2 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc5c;
                        continue;
                    }
                    r16 = r4 + r0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc74;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r6 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc94;
                        continue;
                    }
                case 0x3fc3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fc5c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x3728c;
                    run_37200(); return;
                case 0x3fc74:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fc94:
                    r3 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 5176;
                    /* Next insn is delay slot */ 
                    r31=0x3fcb0;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x3fcb0:
                    /* Next insn is delay slot */ 
                    pc=0x3fc3c;
                    continue;
                case 0x3fe00:
                    pc=0x3fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fe00() throws ExecutionException { /* 0x3fe00 - 0x40000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fe00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40000:
                    pc=0x40000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40000() throws ExecutionException { /* 0x40000 - 0x40200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40000:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x40010;
                    pc=0x48000;
                    run_48000(); return;
                case 0x40010:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40030;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 6 << 16;
                    r2 = r2 + 5212;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40030:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40200:
                    pc=0x40200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40200() throws ExecutionException { /* 0x40200 - 0x40400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40200:
                    r29 = r29 + -32;
                    r2 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x402b8;
                        continue;
                    }
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40288;
                        continue;
                    }
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x40288;
                        continue;
                    }
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x40250;
                    pc=0x4c600;
                    run_4c600(); return;
                case 0x40250:
                    r17 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40268;
                        continue;
                    }
                case 0x4025c:
                    r2 = r0 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                case 0x40268:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40288:
                    /* Next insn is delay slot */ 
                    r31=0x40290;
                    pc=0x28400;
                    run_28400(); return;
                case 0x40290:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 22;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x402b8:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40268;
                        continue;
                    }
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x402cc;
                    pc=0x4c600;
                    run_4c600(); return;
                case 0x402cc:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x402e0;
                    pc=0x4c600;
                    run_4c600(); return;
                case 0x402e0:
                    /* Next insn is delay slot */ 
                    pc=0x4025c;
                    continue;
                case 0x40400:
                    pc=0x40400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40400() throws ExecutionException { /* 0x40400 - 0x40600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40400:
                    r29 = r29 + -96;
                    r5 = r0 + r0;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x4041c;
                    pc=0x51c00;
                    run_51c00(); return;
                case 0x4041c:
                    r17 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x404ec;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x40438;
                    pc=0x51a00;
                    run_51a00(); return;
                case 0x40438:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x404b4;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 16384;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x404b4;
                        continue;
                    }
                    r4 = r0 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x40460;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x40460:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x404f8;
                        continue;
                    }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r4 = r0 + 4096;
                    /* Next insn is delay slot */ 
                    r31=0x4047c;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x4047c:
                    r3 = r0 + 4096;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40520;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x4049c:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x404b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x404c0;
                    pc=0x51800;
                    run_51800(); return;
                case 0x404c0:
                    /* Next insn is delay slot */ 
                    r31=0x404c8;
                    pc=0x28400;
                    run_28400(); return;
                case 0x404c8:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r0 + 20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x404ec:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4049c;
                    continue;
                case 0x404f8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40504;
                    pc=0x51800;
                    run_51800(); return;
                case 0x40504:
                    /* Next insn is delay slot */ 
                    r31=0x4050c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x4050c:
                    r3 = r0 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4049c;
                    continue;
                case 0x40520:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4052c;
                    pc=0x51800;
                    run_51800(); return;
                case 0x4052c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40538;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x40538:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4049c;
                    continue;
                case 0x40600:
                    pc=0x40600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40600() throws ExecutionException { /* 0x40600 - 0x40800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x40618;
                    pc=0x28400;
                    run_28400(); return;
                case 0x40618:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40684;
                        continue;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x40684;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x4063c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r6;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406c4;
                        continue;
                    }
                    r3 = r5 - r3;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406c4;
                        continue;
                    }
                    r4 = r6 + r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                case 0x40670:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40684:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x406a0;
                    pc=0x36f90;
                    run_36e00(); return;
                case 0x406a0:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x406dc;
                        continue;
                    }
                    r5 = r2 + r0;
                    r6 = r0 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4063c;
                    continue;
                case 0x406c4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x406dc:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40670;
                    continue;
                case 0x40800:
                    pc=0x40800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40800() throws ExecutionException { /* 0x40800 - 0x40a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x40824;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x40824:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x40830;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x40830:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x51800;
                    run_51800(); return;
                case 0x40a00:
                    pc=0x40a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40a00() throws ExecutionException { /* 0x40a00 - 0x40c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40a00:
                    r2 = r4 >>> 16;
                    r29 = r29 + -40;
                    r2 = r2 & 255;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r4 >>> 8;
                    r2 = r2 & 255;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r16 = 6 << 16;
                    r2 = r4 & 255;
                    r7 = r4 + r0;
                    r6 = 6 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r4 = r16 + 17612;
                    r5 = r0 + 18;
                    r6 = r6 + 5228;
                    r7 = r7 >>> 24;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x40a50;
                    pc=0x4ce00;
                    run_4ce00(); return;
                case 0x40a50:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + 17612;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40c00:
                    pc=0x40c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40c00() throws ExecutionException { /* 0x40c00 - 0x40e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40c00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40e00:
                    pc=0x40e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40e00() throws ExecutionException { /* 0x40e00 - 0x41000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40e00:
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40e28;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 5476;
                    r4 = r4 << 2;
                    r4 = r4 + r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40e28:
                    r2 = 6 << 16;
                    r2 = r2 + 5240;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41000:
                    pc=0x41000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41000() throws ExecutionException { /* 0x41000 - 0x41200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41000:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41044;
                        continue;
                    }
                    r3 = 6 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 5476;
                    r2 = r2 + r3;
                    r5 = 6 << 16;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r5 + 5256;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x41044:
                    r7 = 6 << 16;
                    r5 = 6 << 16;
                    r7 = r7 + 5240;
                    r5 = r5 + 5256;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x41200:
                    pc=0x41200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41200() throws ExecutionException { /* 0x41200 - 0x41400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41200:
                    r29 = r29 + -40;
                    r2 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x412d4;
                        continue;
                    }
                    r2 = r0 + 4;
                    r17 = r5 + r0;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x412d4;
                        continue;
                    }
                    r18 = r4 + r0;
                    r5 = r18 + r0;
                    r4 = r29 + 16;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x4124c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x4124c:
                    r5 = r18 + r0;
                    r4 = r28 + -32420;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x41260;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x41260:
                    r18 = 6 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r18 + 17484;
                    r7 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x4127c;
                    pc=0x37af4;
                    run_37a00(); return;
                case 0x4127c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x412f4;
                        continue;
                    }
                    r2 = 6 << 16;
                    r18 = r18 + 17484;
                    writePages[(r2+17464)>>>12][((r2+17464)>>>2)&0x3ff] = r18;
                    r3 = r28 + -32424;
                    r2 = r2 + 17464;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r28 + -32428;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r28 + -32420;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32424)>>>12][((r28+-32424)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff] = r3;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x412d4:
                    r2 = r0 + r0;
                case 0x412d8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x412f4:
                    writePages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x412d8;
                    continue;
                case 0x41400:
                    pc=0x41400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41400() throws ExecutionException { /* 0x41400 - 0x41600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41400:
                    r29 = r29 + -1064;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r2 = r0 + 1024;
                    r5 = r18 + r0;
                    r6 = r29 + 16;
                    r7 = r29 + 1040;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r31;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x41438;
                    pc=0x373d8;
                    run_37200(); return;
                case 0x41438:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4151c;
                        continue;
                    }
                    r17 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r9 = 6 << 16;
                    r9 = r9 + 16440;
                    r4 = r9 + r0;
                    r5 = r29 + 16;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x41460;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x41460:
                    r9 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41540;
                        continue;
                    }
                    r16 = 6 << 16;
                    r3 = r0 + r0;
                    r7 = r0 + r0;
                    r2 = r0 + r0;
                    r16 = r16 + 15412;
                    /* Next insn is delay slot */ 
                    pc=0x4148c;
                    continue;
                case 0x41488:
                    r3 = r2 + r0;
                case 0x4148c:
                    r8 = r16 + r3;
                    r2 = r9 + r2;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    r2 = r3 + 4;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r7 = r7 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41488;
                        continue;
                    }
                case 0x414ac:
                    r2 = r7 << 2;
                    r17 = 6 << 16;
                    r2 = r16 + r2;
                    r4 = r17 + 15284;
                    r5 = r18 + r0;
                    r6 = r0 + 128;
                    r17 = r17 + 15284;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x414d4;
                    pc=0x4d400;
                    run_4d400(); return;
                case 0x414d4:
                    r2 = 6 << 16;
                    writePages[(r2+15264)>>>12][((r2+15264)>>>2)&0x3ff] = r17;
                    r3 = r28 + -32432;
                    r2 = r2 + 15264;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r3 = r0 + 4;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff] = r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4151c:
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41540:
                    r16 = 6 << 16;
                    r7 = r0 + r0;
                    r16 = r16 + 15412;
                    /* Next insn is delay slot */ 
                    pc=0x414ac;
                    continue;
                case 0x41600:
                    pc=0x41600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41600() throws ExecutionException { /* 0x41600 - 0x41800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41600:
                    r29 = r29 + -1088;
                    r5 = 6 << 16;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    r30 = r4 + r0;
                    r4 = 6 << 16;
                    r4 = r4 + 5264;
                    r5 = r5 + 2592;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x41648;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x41648:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41728;
                        continue;
                    }
                    r21 = 6 << 16;
                    r22 = 6 << 16;
                    r21 = r21 + 18656;
                    r23 = 6 << 16;
                    r22 = r22 + 5276;
                    r18 = 6 << 16;
                    r20 = 6 << 16;
                    r19 = r21 + r0;
                case 0x41674:
                    r16 = r0 + 35;
                case 0x41678:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4168c;
                    pc=0x29800;
                    run_29800(); return;
                case 0x4168c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4171c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x41678;
                        continue;
                    }
                    r2 = r23 + 24808;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + 17632;
                    /* Next insn is delay slot */ 
                    r31=0x416c4;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x416c4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4171c;
                        continue;
                    }
                    r16 = r20 + 24800;
                    r2 = r18 + 17632;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r4 = r30 + r0;
                    r2 = r28 + -32416;
                    r5 = r19 + r0;
                    writePages[(r20+24800)>>>12][((r20+24800)>>>2)&0x3ff] = r19;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x416fc;
                    pc=0x32800;
                    run_32800(); return;
                case 0x416fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41674;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x41710;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x41710:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4172c;
                    continue;
                case 0x4171c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x41728;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x41728:
                    r2 = r0 + r0;
                case 0x4172c:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41800:
                    pc=0x41800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41800() throws ExecutionException { /* 0x41800 - 0x41a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41800:
                    r29 = r29 + -1088;
                    r5 = 6 << 16;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    r23 = r4 & 65535;
                    r4 = 6 << 16;
                    r4 = r4 + 5264;
                    r5 = r5 + 2592;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x41848;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x41848:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4191c;
                        continue;
                    }
                    r20 = 6 << 16;
                    r21 = 6 << 16;
                    r20 = r20 + 18656;
                    r22 = 6 << 16;
                    r21 = r21 + 5276;
                    r18 = 6 << 16;
                    r19 = 6 << 16;
                    r30 = r20 + r0;
                case 0x41874:
                    r16 = r0 + 35;
                case 0x41878:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4188c;
                    pc=0x29800;
                    run_29800(); return;
                case 0x4188c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41910;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x41878;
                        continue;
                    }
                    r2 = r22 + 24808;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r21 + r0;
                    r6 = r20 + r0;
                    r7 = r18 + 17632;
                    /* Next insn is delay slot */ 
                    r31=0x418c4;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x418c4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41910;
                        continue;
                    }
                    r16 = r19 + 24800;
                    r2 = r18 + 17632;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r28 + -32416;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r19+24800)>>>12][((r19+24800)>>>2)&0x3ff] = r30;
                    writePages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff] = r0;
                    if(r2 != r23) {
                        /* Next insn is delay slot */ 
                        pc=0x41874;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x41904;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x41904:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41920;
                    continue;
                case 0x41910:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4191c;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x4191c:
                    r2 = r0 + r0;
                case 0x41920:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41a00:
                    pc=0x41a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41a00() throws ExecutionException { /* 0x41a00 - 0x41c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41a00:
                    r6 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    r29 = r29 + -2088;
                    writePages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff] = r31;
                    writePages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff] = r17;
                    writePages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b0c;
                        continue;
                    }
                    r4 = r29 + 1048;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x41a2c;
                    pc=0x29800;
                    run_29800(); return;
                case 0x41a2c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b0c;
                        continue;
                    }
                    addr=r29+1048;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x41abc;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 24808;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 1048;
                case 0x41a54:
                    r5 = 6 << 16;
                    r17 = 6 << 16;
                    r16 = 6 << 16;
                    r5 = r5 + 5276;
                    r6 = r17 + 18656;
                    r7 = r16 + 17632;
                    /* Next insn is delay slot */ 
                    r31=0x41a74;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x41a74:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b0c;
                        continue;
                    }
                    r2 = 6 << 16;
                    r17 = r17 + 18656;
                    writePages[(r2+24800)>>>12][((r2+24800)>>>2)&0x3ff] = r17;
                    r16 = r16 + 17632;
                    r2 = r2 + 24800;
                    r3 = r28 + -32416;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff] = r0;
                case 0x41aa4:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41abc:
                    r6 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b0c;
                        continue;
                    }
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x41adc;
                    pc=0x29800;
                    run_29800(); return;
                case 0x41adc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b0c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x41b28;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 24808;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x41a54;
                    continue;
                case 0x41b0c:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41b28:
                    /* Next insn is delay slot */ 
                    r31=0x41b30;
                    pc=0x41a00;
                    continue;
                case 0x41b30:
                    /* Next insn is delay slot */ 
                    pc=0x41aa4;
                    continue;
                case 0x41c00:
                    pc=0x41c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41c00() throws ExecutionException { /* 0x41c00 - 0x41e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41c00:
                    r4 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x41c1c;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x41c1c:
                    r4 = 6 << 16;
                    r5 = 6 << 16;
                    r4 = r4 + 5264;
                    r5 = r5 + 2592;
                    /* Next insn is delay slot */ 
                    r31=0x41c34;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x41c34:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41e00:
                    pc=0x41e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41e00() throws ExecutionException { /* 0x41e00 - 0x42000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41e00:
                    r4 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41e1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x41e1c;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x41e1c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42000:
                    pc=0x42000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42000() throws ExecutionException { /* 0x42000 - 0x42200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42000:
                    r29 = r29 + -1104;
                    r5 = 6 << 16;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r4 = r4 + 5292;
                    r5 = r5 + 2592;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r31;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r30;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r23;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r22;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x42048;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x42048:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42160;
                        continue;
                    }
                    r20 = 6 << 16;
                    r20 = r20 + 23776;
                    r19 = 6 << 16;
                    r18 = r20 + r0;
                case 0x42064:
                    r16 = r0 + 35;
                case 0x42068:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4207c;
                    pc=0x29800;
                    run_29800(); return;
                case 0x4207c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42154;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x42068;
                        continue;
                    }
                    r3 = 6 << 16;
                    r2 = r3 + 24824;
                    r3 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r22 = r3 + 21728;
                    r8 = 6 << 16;
                    r3 = 6 << 16;
                    r2 = 6 << 16;
                    r2 = r2 + 24826;
                    r21 = r8 + 20704;
                    r30 = r3 + 19680;
                    r5 = 6 << 16;
                    r23 = 6 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 5304;
                    r6 = r20 + r0;
                    r7 = r23 + 22752;
                    /* Next insn is delay slot */ 
                    r31=0x420f0;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x420f0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42154;
                        continue;
                    }
                    r2 = 6 << 16;
                    r4 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r16 = r19 + 24816;
                    r10 = r23 + 22752;
                    r2 = r2 + -8164;
                    r5 = r18 + r0;
                    writePages[(r19+24816)>>>12][((r19+24816)>>>2)&0x3ff] = r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r22;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r21;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x42134;
                    pc=0x32800;
                    run_32800(); return;
                case 0x42134:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42064;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42148;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x42148:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42164;
                    continue;
                case 0x42154:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42160;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x42160:
                    r2 = r0 + r0;
                case 0x42164:
                    r31 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r30 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r23 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r22 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r29 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42200:
                    pc=0x42200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42200() throws ExecutionException { /* 0x42200 - 0x42400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42200:
                    r29 = r29 + -1112;
                    r4 = r4 & 65535;
                    r5 = 6 << 16;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r4;
                    r4 = 6 << 16;
                    r4 = r4 + 5292;
                    r5 = r5 + 2592;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r17;
                    writePages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff] = r31;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r30;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r23;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r22;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r21;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r20;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r19;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r18;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x4224c;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x4224c:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42360;
                        continue;
                    }
                    r19 = 6 << 16;
                    r22 = 6 << 16;
                    r19 = r19 + 23776;
                    r18 = 6 << 16;
                case 0x42268:
                    r16 = r0 + 35;
                case 0x4226c:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42280;
                    pc=0x29800;
                    run_29800(); return;
                case 0x42280:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42354;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4226c;
                        continue;
                    }
                    r2 = r22 + 24824;
                    r3 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r3 + 21728;
                    r8 = 6 << 16;
                    r3 = 6 << 16;
                    r2 = 6 << 16;
                    r2 = r2 + 24826;
                    r23 = r8 + 20704;
                    r30 = r3 + 19680;
                    r5 = 6 << 16;
                    r21 = 6 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r23;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 5304;
                    r6 = r19 + r0;
                    r7 = r21 + 22752;
                    /* Next insn is delay slot */ 
                    r31=0x422f0;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x422f0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42354;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 23776;
                    writePages[(r18+24816)>>>12][((r18+24816)>>>2)&0x3ff] = r2;
                    r2 = 6 << 16;
                    r16 = r18 + 24816;
                    r2 = r2 + -8164;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r10 = r21 + 22752;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r20;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r23;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x42268;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42348;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x42348:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42364;
                    continue;
                case 0x42354:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42360;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x42360:
                    r2 = r0 + r0;
                case 0x42364:
                    r31 = readPages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff];
                    r30 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r23 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r22 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r21 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r20 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r19 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r18 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r17 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r16 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r29 = r29 + 1112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42400:
                    pc=0x42400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42400() throws ExecutionException { /* 0x42400 - 0x42600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42400:
                    r6 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r29 = r29 + -2112;
                    writePages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff] = r31;
                    writePages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff] = r20;
                    writePages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff] = r19;
                    writePages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff] = r18;
                    writePages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff] = r17;
                    writePages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42590;
                        continue;
                    }
                    r4 = r29 + 1064;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x42438;
                    pc=0x29800;
                    run_29800(); return;
                case 0x42438:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42590;
                        continue;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x42510;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 24824;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 6 << 16;
                    r2 = 6 << 16;
                    r17 = 6 << 16;
                    r16 = 6 << 16;
                    r2 = r2 + 24826;
                    r18 = r18 + 21728;
                    r17 = r17 + 20704;
                    r16 = r16 + 19680;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 1064;
                case 0x42490:
                    r5 = 6 << 16;
                    r20 = 6 << 16;
                    r19 = 6 << 16;
                    r5 = r5 + 5304;
                    r6 = r20 + 23776;
                    r7 = r19 + 22752;
                    /* Next insn is delay slot */ 
                    r31=0x424b0;
                    pc=0x4d000;
                    run_4d000(); return;
                case 0x424b0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42590;
                        continue;
                    }
                    r2 = 6 << 16;
                    r20 = r20 + 23776;
                    r3 = 6 << 16;
                    writePages[(r2+24816)>>>12][((r2+24816)>>>2)&0x3ff] = r20;
                    r19 = r19 + 22752;
                    r2 = r2 + 24816;
                    r3 = r3 + -8164;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r18;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r17;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                case 0x424ec:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42510:
                    r6 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42590;
                        continue;
                    }
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x42530;
                    pc=0x29800;
                    run_29800(); return;
                case 0x42530:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42590;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x425b8;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 24824;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 6 << 16;
                    r2 = 6 << 16;
                    r17 = 6 << 16;
                    r16 = 6 << 16;
                    r2 = r2 + 24826;
                    r18 = r18 + 21728;
                    r17 = r17 + 20704;
                    r16 = r16 + 19680;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x42490;
                    continue;
                case 0x42590:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x425b8:
                    /* Next insn is delay slot */ 
                    r31=0x425c0;
                    pc=0x42400;
                    continue;
                case 0x425c0:
                    /* Next insn is delay slot */ 
                    pc=0x424ec;
                    continue;
                case 0x42600:
                    pc=0x42600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42600() throws ExecutionException { /* 0x42600 - 0x42800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42600:
                    r4 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4261c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4261c;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x4261c:
                    r4 = 6 << 16;
                    r5 = 6 << 16;
                    r4 = r4 + 5264;
                    r5 = r5 + 2592;
                    /* Next insn is delay slot */ 
                    r31=0x42634;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x42634:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42800:
                    pc=0x42800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42800() throws ExecutionException { /* 0x42800 - 0x42a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42800:
                    r4 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4281c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4281c;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x4281c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42a00:
                    pc=0x42a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42a00() throws ExecutionException { /* 0x42a00 - 0x42c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42a00:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x42a20;
                    pc=0x47800;
                    run_47800(); return;
                case 0x42a20:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r16 = 6 << 16;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x42a34;
                    pc=0x29400;
                    run_29400(); return;
                case 0x42a34:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r4 = r16 + 14240;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x42a4c;
                    pc=0x29800;
                    run_29800(); return;
                case 0x42a4c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ab8;
                        continue;
                    }
                    r4 = r16 + 14240;
                    /* Next insn is delay slot */ 
                    r31=0x42a60;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x42a60:
                    r17 = r2 + -1;
                    r16 = r16 + 14240;
                    r3 = r16 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 10;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x42a80;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x42a80:
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r17 = r16 + r17;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x42a98;
                    pc=0x2be00;
                    run_2be00(); return;
                case 0x42a98:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42ab8:
                    r17 = r0 + r0;
                    r16 = r16 + 14240;
                    /* Next insn is delay slot */ 
                    pc=0x42a80;
                    continue;
                case 0x42c00:
                    pc=0x42c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42c00() throws ExecutionException { /* 0x42c00 - 0x42e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42c00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r0 + 128;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r18 = r5 + r0;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42c2c;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x42c2c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42cbc;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r0 + 128;
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x42c50;
                    pc=0x53a00;
                    run_53a00(); return;
                case 0x42c50:
                    r3 = r2 < 128 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c78;
                        continue;
                    }
                case 0x42c5c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42c78:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x42c88;
                    pc=0x30400;
                    run_30400(); return;
                case 0x42c88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42cc8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x53e00;
                    run_53e00(); return;
                case 0x42cbc:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x42c5c;
                    continue;
                case 0x42cc8:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x42cd4;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x42cd4:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x42c5c;
                    continue;
                case 0x42e00:
                    pc=0x42e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42e00() throws ExecutionException { /* 0x42e00 - 0x43000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42e00:
                    r4 = 6 << 16;
                    r4 = r4 + 5340;
                    /* Next insn is delay slot */ 
                    pc=0x2d400;
                    run_2d400(); return;
                case 0x43000:
                    pc=0x43000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43000() throws ExecutionException { /* 0x43000 - 0x43200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43000:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x430b4;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x430b4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x43038;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x43038:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4310c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x430e0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x43078;
                    continue;
                case 0x43068:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x430e0;
                        continue;
                    }
                case 0x43078:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x43068;
                        continue;
                    }
                case 0x43084:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x431b4;
                        continue;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 5348;
                case 0x4309c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = 6 << 16;
                    addr=r2+13216;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 13216;
                    /* Next insn is delay slot */ 
                    pc=0x430c4;
                    continue;
                case 0x430b4:
                    r2 = 6 << 16;
                    r3 = r0 + 11776;
                    addr=r2+13216;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 13216;
                case 0x430c4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x430e0:
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x430fc;
                    continue;
                case 0x430ec:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4310c;
                        continue;
                    }
                case 0x430fc:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x430ec;
                        continue;
                    }
                case 0x4310c:
                    r4 = r0 + 47;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x43130;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x43084;
                    continue;
                case 0x43120:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x43140;
                        continue;
                    }
                case 0x43130:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43120;
                        continue;
                    }
                case 0x43140:
                    r2 = r2 - r16;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43198;
                        continue;
                    }
                    r17 = r2 + 1;
                    r18 = 6 << 16;
                    r4 = r18 + 13216;
                    r5 = r16 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43170;
                    pc=0x4d400;
                    run_4d400(); return;
                case 0x43170:
                    r2 = r18 + 13216;
                    r17 = r17 + r2;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43198:
                    /* Next insn is delay slot */ 
                    r31=0x431a0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x431a0:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430c4;
                    continue;
                case 0x431b4:
                    r3 = 6 << 16;
                    r3 = r3 + 2568;
                    /* Next insn is delay slot */ 
                    pc=0x4309c;
                    continue;
                case 0x43200:
                    pc=0x43200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43200() throws ExecutionException { /* 0x43200 - 0x43400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4334c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4334c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x43234;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x43234:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4338c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x432e0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x43274;
                    continue;
                case 0x43264:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x432d4;
                        continue;
                    }
                case 0x43274:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x43264;
                        continue;
                    }
                case 0x43280:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x43374;
                        continue;
                    }
                case 0x43290:
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                case 0x43298:
                    r16 = r2 + 1;
                    r17 = 6 << 16;
                    r6 = r16 + r0;
                    r4 = r17 + 12192;
                    /* Next insn is delay slot */ 
                    r31=0x432b0;
                    pc=0x4d400;
                    run_4d400(); return;
                case 0x432b0:
                    r2 = r17 + 12192;
                    r16 = r16 + r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x432bc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x432d4:
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43290;
                        continue;
                    }
                case 0x432e0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r0 + 47;
                    r5 = r2 + r0;
                    r4 = r0 + 47;
                    if(r6 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x43310;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x43290;
                    continue;
                case 0x43300:
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4331c;
                        continue;
                    }
                case 0x43310:
                    r5 = r5 + -1;
                    if(r5 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x43300;
                        continue;
                    }
                case 0x4331c:
                    r2 = r2 - r5;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43298;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x43338;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43338:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x432bc;
                    continue;
                case 0x4334c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = 6 << 16;
                    r3 = r0 + 11776;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+12192;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 12192;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43374:
                    r2 = 6 << 16;
                    r3 = r0 + 12032;
                    addr=r2+12192;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 12192;
                    /* Next insn is delay slot */ 
                    pc=0x432bc;
                    continue;
                case 0x4338c:
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43280;
                        continue;
                    }
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43298;
                    continue;
                case 0x43400:
                    pc=0x43400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43400() throws ExecutionException { /* 0x43400 - 0x43600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43400:
                    r29 = r29 + -72;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4343c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x4343c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43498;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 5176;
                    /* Next insn is delay slot */ 
                    r31=0x4346c;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x4346c:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x43474:
                    /* Next insn is delay slot */ 
                    r31=0x4347c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x4347c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4385c;
                        run_43800(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x434d0;
                    continue;
                case 0x43498:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x434c0;
                    pc=0x3728c;
                    run_37200(); return;
                case 0x434c0:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x43474;
                        continue;
                    }
                case 0x434cc:
                    r18 = r0 + r0;
                case 0x434d0:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+31;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x434f4;
                    pc=0x28400;
                    run_28400(); return;
                case 0x434f4:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43550;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 5176;
                    /* Next insn is delay slot */ 
                    r31=0x43524;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x43524:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x4352c:
                    /* Next insn is delay slot */ 
                    r31=0x43534;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43534:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43870;
                        run_43800(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x43584;
                    continue;
                case 0x43550:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x43578;
                    pc=0x3728c;
                    run_37200(); return;
                case 0x43578:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4352c;
                        continue;
                    }
                case 0x43584:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+63;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x435a8;
                    pc=0x28400;
                    run_28400(); return;
                case 0x435a8:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43604;
                        run_43600(); return;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 5176;
                    /* Next insn is delay slot */ 
                    r31=0x435d8;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x435d8:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x435e0:
                    /* Next insn is delay slot */ 
                    r31=0x435e8;
                    pc=0x28400;
                    run_28400(); return;
                case 0x435e8:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43884;
                        run_43800(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x43638;
                    run_43600(); return;
                case 0x43600:
                    pc=0x43600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43600() throws ExecutionException { /* 0x43600 - 0x43800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43600:
                case 0x43604:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x4362c;
                    pc=0x3728c;
                    run_37200(); return;
                case 0x4362c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x435e0;
                        run_43400(); return;
                    }
                case 0x43638:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 4;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+95;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4365c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x4365c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = r17 + 96;
                    r19 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x436bc;
                        continue;
                    }
                    r4 = readPages[(r19+12)>>>12][((r19+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 5176;
                    /* Next insn is delay slot */ 
                    r31=0x43690;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x43690:
                    r2 = r0 + 22;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                case 0x43698:
                    /* Next insn is delay slot */ 
                    r31=0x436a0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x436a0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43898;
                        run_43800(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x436f0;
                    continue;
                case 0x436bc:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r19 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x436e4;
                    pc=0x3728c;
                    run_37200(); return;
                case 0x436e4:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x43698;
                        continue;
                    }
                case 0x436f0:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    addr=r17+127;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43760;
                        continue;
                    }
                    r4 = r0 + 32;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x43724;
                    continue;
                case 0x43714:
                    r3 = r3 + -1;
                    r16 = r16 + 1;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x43760;
                        continue;
                    }
                case 0x43724:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 + -9;
                    r5 = r5 & 255;
                    r5 = (r5&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43714;
                        continue;
                    }
                    r2 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x437e4;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x43724;
                        continue;
                    }
                case 0x43760:
                    r2 = r0 + 6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x43780;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43780:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x437f0;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 6 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 5176;
                    /* Next insn is delay slot */ 
                    r31=0x437b0;
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x437b0:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x437b8:
                    /* Next insn is delay slot */ 
                    r31=0x437c0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x437c0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43850;
                        run_43800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x437d8;
                    pc=0x28400;
                    run_28400(); return;
                case 0x437d8:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x43824;
                    run_43800(); return;
                case 0x437e4:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x43714;
                    continue;
                case 0x437f0:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                case 0x43800:
                    pc=0x43800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43800() throws ExecutionException { /* 0x43800 - 0x43a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43800:
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x43818;
                    pc=0x3728c;
                    run_37200(); return;
                case 0x43818:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x437b8;
                        run_43600(); return;
                    }
                case 0x43824:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    addr=r17+159;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r29 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43850:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x43824;
                    continue;
                case 0x4385c:
                    /* Next insn is delay slot */ 
                    r31=0x43864;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43864:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x434cc;
                    run_43400(); return;
                case 0x43870:
                    /* Next insn is delay slot */ 
                    r31=0x43878;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43878:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x43584;
                    run_43400(); return;
                case 0x43884:
                    /* Next insn is delay slot */ 
                    r31=0x4388c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x4388c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x43638;
                    run_43600(); return;
                case 0x43898:
                    /* Next insn is delay slot */ 
                    r31=0x438a0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x438a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x436f0;
                    run_43600(); return;
                case 0x43a00:
                    pc=0x43a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43a00() throws ExecutionException { /* 0x43a00 - 0x43c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43a00:
                    r29 = r29 + -56;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r4 + r0;
                    r2 = r29 + 40;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x43a44;
                    pc=0x3728c;
                    run_37200(); return;
                case 0x43a44:
                    r2 = r2 + 1;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r0 - r2;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43c00:
                    pc=0x43c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43c00() throws ExecutionException { /* 0x43c00 - 0x43e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43c00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r17 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x43c2c;
                    pc=0x33800;
                    run_33800(); return;
                case 0x43c2c:
                    r16 = r2 + r0;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x43c64;
                        continue;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c88;
                        continue;
                    }
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x43c4c;
                    pc=0x37ab4;
                    run_37a00(); return;
                case 0x43c4c:
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x43d3c;
                        continue;
                    }
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d18;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c94;
                        continue;
                    }
                case 0x43c64:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43c88:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43c94;
                    pc=0x36800;
                    run_36800(); return;
                case 0x43c94:
                    r4 = 6 << 16;
                    r4 = r4 + 5352;
                    r5 = r0 + 2;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43cac;
                    pc=0x51c00;
                    run_51c00(); return;
                case 0x43cac:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43c64;
                        continue;
                    }
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43cd0;
                    pc=0x36c90;
                    run_36c00(); return;
                case 0x43cd0:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x43ce4;
                    pc=0x36c90;
                    run_36c00(); return;
                case 0x43ce4:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x43cf8;
                    pc=0x36c90;
                    run_36c00(); return;
                case 0x43cf8:
                    r2 = r17 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c64;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43d10;
                    pc=0x51800;
                    run_51800(); return;
                case 0x43d10:
                    /* Next insn is delay slot */ 
                    pc=0x43c64;
                    continue;
                case 0x43d18:
                    r5 = 6 << 16;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r5 + 2568;
                    /* Next insn is delay slot */ 
                    r31=0x43d2c;
                    pc=0x36c10;
                    run_36c00(); return;
                case 0x43d2c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c64;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x43c94;
                    continue;
                case 0x43d3c:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x43c64;
                    continue;
                case 0x43e00:
                    pc=0x43e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43e00() throws ExecutionException { /* 0x43e00 - 0x44000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43e00:
                    r29 = r29 + -80;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r23;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r21;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r20;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r18;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r23 = r4 + r0;
                    r22 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43e38;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43e38:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43e50;
                    pc=0x4dc00;
                    run_4dc00(); return;
                case 0x43e50:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43e5c;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43e5c:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r0 + 34;
                    r17 = r29 + 16;
                    r19 = r0 + r0;
                    r20 = r0 + 46;
                    r21 = r0 + 3;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                case 0x43e7c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43f44;
                        continue;
                    }
                    if(r4 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x43f24;
                        continue;
                    }
                    r17 = r17 + 4;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                    r23 = r3 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x43ebc;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43ebc:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43ed4;
                    pc=0x4dc00;
                    run_4dc00(); return;
                case 0x43ed4:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x43ee0;
                    pc=0x28400;
                    run_28400(); return;
                case 0x43ee0:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x43e7c;
                        continue;
                    }
                case 0x43ef0:
                    r2 = r0 + r0;
                case 0x43ef4:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r23 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r22 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r20 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43f24:
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r4 = r4 & 255;
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                case 0x43f44:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43fe8;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43f80;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44038;
                        run_44000(); return;
                    }
                case 0x43f68:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4406c;
                        run_44000(); return;
                    }
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x43ef4;
                    continue;
                case 0x43f80:
                    r2 = (r16&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r2 << 24;
                    r2 = r4 | r2;
                    r3 = r3 << 8;
                    r2 = r2 | r3;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x43f68;
                    continue;
                case 0x43fe8:
                    r2 = 1 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x44000:
                    pc=0x44000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44000() throws ExecutionException { /* 0x44000 - 0x44200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44000:
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        run_43e00(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        run_43e00(); return;
                    }
                    r3 = r3 << 16;
                    r2 = r2 << 24;
                    r2 = r3 | r2;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x43f68;
                    run_43e00(); return;
                case 0x44038:
                    r2 = 256 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        run_43e00(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ef0;
                        run_43e00(); return;
                    }
                    r2 = r2 << 24;
                    r16 = r16 | r2;
                    /* Next insn is delay slot */ 
                    pc=0x43f68;
                    run_43e00(); return;
                case 0x4406c:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x43ef4;
                    run_43e00(); return;
                case 0x44200:
                    pc=0x44200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44200() throws ExecutionException { /* 0x44200 - 0x44400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44200:
                    r29 = r29 + -32;
                    r5 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x44214;
                    pc=0x43e00;
                    run_43e00(); return;
                case 0x44214:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44230;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44230:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44400:
                    pc=0x44400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44400() throws ExecutionException { /* 0x44400 - 0x44600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44400:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r5 = r5 & 65535;
                    r2 = r20 < 2 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    r19 = r6 + r0;
                    r22 = r7 + r0;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x445cc;
                        continue;
                    }
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r0 + 2;
                case 0x44454:
                    r4 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4446c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4446c;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x4446c:
                    r4 = 6 << 16;
                    r5 = 6 << 16;
                    r4 = r4 + 5264;
                    r5 = r5 + 2592;
                    /* Next insn is delay slot */ 
                    r31=0x44484;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x44484:
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r2;
                    r21 = r0 + r0;
                case 0x4448c:
                    /* Next insn is delay slot */ 
                    r31=0x44494;
                    pc=0x41a00;
                    run_41a00(); return;
                case 0x44494:
                    r18 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4456c;
                        continue;
                    }
                case 0x444a0:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x444ec;
                        continue;
                    }
                    addr=r2+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4448c;
                        continue;
                    }
                    r8 = r19 + 2;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x444e0;
                    continue;
                case 0x444cc:
                    r8 = r8 + 2;
                    addr=r8+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4448c;
                        continue;
                    }
                case 0x444e0:
                    r3 = r3 + 1;
                    if(r3 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x444cc;
                        continue;
                    }
                case 0x444ec:
                    r23 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4448c;
                        continue;
                    }
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x44524;
                    continue;
                case 0x44510:
                    r23 = r23 + 4;
                    r4 = readPages[(r23+-4)>>>12][((r23+-4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4448c;
                        continue;
                    }
                case 0x44524:
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44530;
                    pc=0x32800;
                    run_32800(); return;
                case 0x44530:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44510;
                        continue;
                    }
                    r2 = r16 < r20 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x445c0;
                        continue;
                    }
                    addr=r18+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r16 << 1;
                    r2 = r19 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x4455c;
                    pc=0x41a00;
                    run_41a00(); return;
                case 0x4455c:
                    r16 = r16 + 1;
                    r18 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x444a0;
                        continue;
                    }
                case 0x4456c:
                    r4 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44584;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x44584;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x44584:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r21 + r0;
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x445c0:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4448c;
                    continue;
                case 0x445cc:
                    r16 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x44454;
                    continue;
                case 0x44600:
                    pc=0x44600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44600() throws ExecutionException { /* 0x44600 - 0x44800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44600:
                    r29 = r29 + -96;
                    r6 = r29 + 16;
                    r7 = r29 + 80;
                    r2 = r0 + 32;
                    r5 = r5 & 65535;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x44624;
                    pc=0x44400;
                    run_44400(); return;
                case 0x44624:
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r5 = tmp;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x44638;
                    pc=0x378e4;
                    run_37800(); return;
                case 0x44638:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44800:
                    pc=0x44800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44800() throws ExecutionException { /* 0x44800 - 0x44a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44800:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48000;
                    run_48000(); return;
                case 0x44a00:
                    pc=0x44a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44a00() throws ExecutionException { /* 0x44a00 - 0x44c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44a00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b30;
                        continue;
                    }
                case 0x44a24:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r8 = r3 < 32 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44aac;
                        continue;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -9216;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a64;
                        continue;
                    }
                case 0x44a48:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44a64:
                    r4 = r0 + 400;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x44a7c;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x44a7c:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a48;
                        continue;
                    }
                    r3 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    r3 = r0 + r0;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r0;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r0;
                case 0x44aac:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ae8;
                        continue;
                    }
                case 0x44ab4:
                    r4 = r3 + 1;
                    r3 = r3 + 2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44ae8:
                    r4 = r3 << 2;
                    r4 = r2 + r4;
                    writePages[(r4+136)>>>12][((r4+136)>>>2)&0x3ff] = r6;
                    r8 = readPages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r6 = r6 << (r3&0x1f);
                    r8 = r8 | r6;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r8;
                    writePages[(r4+264)>>>12][((r4+264)>>>2)&0x3ff] = r7;
                    r4 = r0 + 2;
                    if(r17 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x44ab4;
                        continue;
                    }
                    r4 = readPages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff];
                    r6 = r4 | r6;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x44ab4;
                    continue;
                case 0x44b30:
                    r2 = r16 + 332;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x44a24;
                    continue;
                case 0x44c00:
                    pc=0x44c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44c00() throws ExecutionException { /* 0x44c00 - 0x44e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44c00:
                    r2 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    r2 = r2 + 328;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r0 + 1;
                    r21 = r0 + -1;
                case 0x44c48:
                    r2 = readPages[(r28+-32712)>>>12][((r28+-32712)>>>2)&0x3ff];
                    r23 = readPages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff];
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ccc;
                        continue;
                    }
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x44c64:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44cbc;
                        continue;
                    }
                    r18 = r3 + 1;
                    r17 = r23 + 136;
                    r4 = r16 << 2;
                    r18 = r18 << 2;
                    r17 = r17 + r4;
                    r18 = r23 + r18;
                case 0x44c90:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44d00;
                        continue;
                    }
                    r3 = readPages[(r17+128)>>>12][((r17+128)>>>2)&0x3ff];
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x44d00;
                        continue;
                    }
                case 0x44ca8:
                    r16 = r16 + -1;
                    r17 = r17 + -4;
                    r18 = r18 + -4;
                    if(r16 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x44c90;
                        continue;
                    }
                case 0x44cbc:
                    r2 = 3 << 16;
                    r2 = r2 + -8704;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44db4;
                        continue;
                    }
                case 0x44ccc:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44d00:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    if(r4 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x44d94;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x44d18:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ca8;
                        continue;
                    }
                    r5 = readPages[(r23+392)>>>12][((r23+392)>>>2)&0x3ff];
                    r4 = r20 << (r16&0x1f);
                    r5 = r4 & r5;
                    r22 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44d84;
                        continue;
                    }
                    r5 = readPages[(r23+396)>>>12][((r23+396)>>>2)&0x3ff];
                    r4 = r4 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44da0;
                        continue;
                    }
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x44d5c;
                    return;
                case 0x44d5c:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x44c48;
                        continue;
                    }
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x44ca8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44c48;
                    continue;
                case 0x44d84:
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x44d8c;
                    return;
                case 0x44d8c:
                    /* Next insn is delay slot */ 
                    pc=0x44d5c;
                    continue;
                case 0x44d94:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x44d18;
                    continue;
                case 0x44da0:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x44dac;
                    return;
                case 0x44dac:
                    /* Next insn is delay slot */ 
                    pc=0x44d5c;
                    continue;
                case 0x44db4:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44dfc;
                        continue;
                    }
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44e10;
                        run_44e00(); return;
                    }
                    r4 = r23 + r0;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x44de4;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x44de4:
                    r23 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                case 0x44dec:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c64;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44ccc;
                    continue;
                case 0x44dfc:
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                case 0x44e00:
                    pc=0x44e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44e00() throws ExecutionException { /* 0x44e00 - 0x45000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44e00:
                    r30 = r23 + r0;
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44dec;
                    run_44c00(); return;
                case 0x44e10:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44e00;
                    continue;
                case 0x45000:
                    pc=0x45000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45000() throws ExecutionException { /* 0x45000 - 0x45200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45000:
                    r29 = r29 + -48;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r2 < r17 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45274;
                        run_45200(); return;
                    }
                    r17 = r17 + -1;
                    r12 = r17 << 2;
                    r16 = r5 + 20;
                    r18 = r16 + r12;
                    r19 = r4 + 20;
                    r12 = r19 + r12;
                    r22 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x4506c;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4506c:
                    r22 = lo;
                    r21 = lo;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45168;
                        continue;
                    }
                    r6 = r16 + r0;
                    r3 = r19 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + r0;
                case 0x4508c:
                    r6 = r6 + 4;
                    r11 = readPages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff];
                    r8 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r11 & 65535;
                    { long hilo = (long)(r22) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r10 = lo;
                    r10 = r4 + r10;
                    r4 = r10 >>> 16;
                    { long hilo = (long)(r22) * ((long)r11); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = r10 & 65535;
                    r7 = r2 - r7;
                    r11 = lo;
                    r9 = r4 + r11;
                    r11 = r8 & 65535;
                    r7 = r7 + r11;
                    r4 = r9 >>> 16;
                    r8 = r8 >>> 16;
                    r9 = r9 & 65535;
                    r2 = r7 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r2;
                    r2 = r8 >> 16;
                    r7 = r7 & 65535;
                    r8 = r8 << 16;
                    r7 = r8 | r7;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r7;
                    r7 = ((r18 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4508c;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45168;
                        continue;
                    }
                    r2 = r12 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45164;
                        continue;
                    }
                    r3 = readPages[(r12+-4)>>>12][((r12+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45150;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x45164;
                    continue;
                case 0x45140:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45164;
                        continue;
                    }
                case 0x45150:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45140;
                        continue;
                    }
                case 0x45164:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x45168:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45174;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x45174:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45244;
                        run_45200(); return;
                    }
                    r21 = r22 + 1;
                    r3 = r19 + r0;
                    r8 = r0 + r0;
                case 0x45188:
                    r16 = r16 + 4;
                    r7 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r7 & 65535;
                    r2 = r6 & 65535;
                    r5 = r8 - r5;
                    r5 = r5 + r2;
                    r6 = r6 >>> 16;
                    r7 = r7 >>> 16;
                    r2 = r5 >> 16;
                    r6 = r6 - r7;
                    r6 = r6 + r2;
                    r8 = r6 >> 16;
                    r5 = r5 & 65535;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45188;
                        continue;
                    }
                    r3 = r17 << 2;
                    r3 = r19 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45244;
                        run_45200(); return;
                    }
                    r2 = r3 + -4;
                    r4 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45240;
                        run_45200(); return;
                    }
                case 0x45200:
                    pc=0x45200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45200() throws ExecutionException { /* 0x45200 - 0x45400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45200:
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4522c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x45240;
                    continue;
                case 0x4521c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45240;
                        continue;
                    }
                case 0x4522c:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4521c;
                        continue;
                    }
                case 0x45240:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x45244:
                    r2 = r21 + r0;
                case 0x45248:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45274:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45248;
                    continue;
                case 0x45400:
                    pc=0x45400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45400() throws ExecutionException { /* 0x45400 - 0x45600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45400:
                    r5 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r29 = r29 + -128;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = f20;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = f21;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45470;
                        continue;
                    }
                    r2 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = r3 << (r2&0x1f);
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4546c;
                    pc=0x49400;
                    run_49400(); return;
                case 0x4546c:
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r0;
                case 0x45470:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4557c;
                        continue;
                    }
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                case 0x45488:
                    r2 = 32752 << 16;
                    r3 = r18 & r2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45524;
                        continue;
                    }
                    f20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r0;
                    f21 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x455a0;
                        continue;
                    }
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b6c;
                        run_45a00(); return;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 805;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = 6 << 16;
                    r2 = r2 + 804;
                case 0x454e8:
                    f20 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    f21 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45524:
                    r8 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r9 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 9999;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b0c;
                        run_45a00(); return;
                    }
                case 0x4553c:
                    r2 = 6 << 16;
                    r2 = r2 + 5508;
                case 0x45544:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x454e8;
                        continue;
                    }
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b30;
                        run_45a00(); return;
                    }
                    r3 = r2 + 3;
                case 0x45568:
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x454e8;
                    continue;
                case 0x4557c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = 32767 << 16;
                    r18 = r18 | 65535;
                    r2 = r0 + 1;
                    r18 = r18 & r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x45488;
                    continue;
                case 0x455a0:
                    r2 = r29 + 24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r7 = f20;
                    r2 = r29 + 28;
                    r6 = f21;
                    r4 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x455c4;
                    pc=0x4b000;
                    run_4b000(); return;
                case 0x455c4:
                    r4 = r18 >>> 20;
                    r17 = r2 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b3c;
                        run_45a00(); return;
                    }
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r5 + r4;
                    r2 = r4 < -1041 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461f0;
                        run_46000(); return;
                    }
                    r2 = r0 + -1010;
                    r2 = r2 - r4;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 << (r2&0x1f);
                case 0x45600:
                    pc=0x45600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45600() throws ExecutionException { /* 0x45600 - 0x45800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45600:
                    r2 = r4 + 1042;
                    r2 = r6 >>> (r2&0x1f);
                    r18 = r18 | r2;
                case 0x4560c:
                    f0 = r18;
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46798;
                        run_46600(); return;
                    }
                case 0x45620:
                    r2 = f3;
                    r6 = 65040 << 16;
                    r3 = f2;
                    r2 = r6 + r2;
                    r4 = r4 + -1;
                    r19 = r0 + 1;
                case 0x45638:
                    f4 = r3;
                    f0 = readPages[(r28+-32684)>>>12][((r28+-32684)>>>2)&0x3ff];
                    f5 = r2;
                    f1 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    f6 = r4;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32676)>>>12][((r28+-32676)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f6)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46184;
                        run_46000(); return;
                    }
                case 0x456dc:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = (r8&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4614c;
                        run_46000(); return;
                    }
                    r3 = 6 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 5616;
                    r2 = r2 + r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46208;
                        run_46200(); return;
                    }
                    r8 = r8 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x45730:
                    r4 = r5 - r4;
                    r23 = r4 + -1;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46174;
                        run_46000(); return;
                    }
                    r18 = r0 + r0;
                case 0x45744:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4615c;
                        run_46000(); return;
                    }
                    r23 = r23 + r8;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    r22 = r0 + r0;
                case 0x45760:
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b7c;
                        run_45a00(); return;
                    }
                    r2 = r3 < 6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bf8;
                        run_46a00(); return;
                    }
                    r3 = r3 + -4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r3;
                    r8 = r0 + r0;
                case 0x4578c:
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x467b4;
                        run_46600(); return;
                    }
                    r2 = r9 < 4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4662c;
                        run_46600(); return;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x463fc;
                        run_46200(); return;
                    }
                    r2 = r0 + 5;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45b80;
                        run_45a00(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                case 0x457cc:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r9 = r9 + r3;
                    r30 = r9 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r9;
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46818;
                        run_46800(); return;
                    }
                    r6 = r30 + r0;
                case 0x457f0:
                    r2 = (r6&0xffffffffL) < (24&0xffffffffL) ? 1 : 0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46c04;
                        run_46c00(); return;
                    }
                case 0x45800:
                    pc=0x45800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45800() throws ExecutionException { /* 0x45800 - 0x45a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45800:
                    r3 = r0 + 1;
                    r2 = r0 + 4;
                case 0x45808:
                    r2 = r2 << 1;
                    r4 = r2 + 20;
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r5 = r3 + r0;
                    r3 = r3 + 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45808;
                        continue;
                    }
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r5;
                    r21 = r6 + r0;
                case 0x4582c:
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r8;
                    r21 = (r21&0xffffffffL) < (15&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r31=0x45840;
                    pc=0x49200;
                    run_49200(); return;
                case 0x45840:
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bb4;
                        run_45a00(); return;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bb4;
                        run_45a00(); return;
                    }
                    f8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4682c;
                        run_46800(); return;
                    }
                    r3 = r8 & 15;
                    r2 = 6 << 16;
                    r3 = r3 << 3;
                    r2 = r2 + 5616;
                    r2 = r3 + r2;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r8 >> 4;
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x467e0;
                        run_46600(); return;
                    }
                    r3 = 6 << 16;
                    f0 = readPages[(r3+5612)>>>12][((r3+5612)>>>2)&0x3ff];
                    r2 = r2 & 15;
                    f1 = readPages[(r3+5608)>>>12][((r3+5608)>>>2)&0x3ff];
                    r8 = r0 + 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x458b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458f8;
                        continue;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 5576;
                case 0x458c8:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458e8;
                        continue;
                    }
                    f4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x458e8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458c8;
                        continue;
                    }
                case 0x458f8:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x458fc:
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4592c;
                        continue;
                    }
                    f2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46ab4;
                        run_46a00(); return;
                    }
                case 0x4592c:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46700;
                        run_46600(); return;
                    }
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r30 + r0;
                case 0x4596c:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r4 + -1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46974;
                        run_46800(); return;
                    }
                    r3 = 6 << 16;
                    r5 = r5 << 3;
                    r3 = r3 + 5616;
                    r3 = r5 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f6 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f6 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f4 = r9;
                    r7 = f6;
                    f5 = r8;
                    r5 = r7 + 48;
                    r5 = r5 << 24;
                    r5 = r5 >> 24;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f6)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x45ac0;
                        run_45a00(); return;
                    }
                case 0x45a00:
                    pc=0x45a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45a00() throws ExecutionException { /* 0x45a00 - 0x45c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45a00:
                    f10 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    f11 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46b80;
                        run_46a00(); return;
                    }
                    r5 = r4 < 2 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46768;
                        run_46600(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x45a64;
                    continue;
                case 0x45a48:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46b80;
                        run_46a00(); return;
                    }
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x46768;
                        run_46600(); return;
                    }
                case 0x45a64:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = r3 + 1;
                    r8 = fcsr;
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f12 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f12 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    { long l = Double.doubleToLongBits(((double)f12)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r9 = f12;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = r9 + 48;
                    r5 = r5 << 24;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    r5 = r5 >> 24;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x45a48;
                        continue;
                    }
                case 0x45ac0:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                case 0x45ac4:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x45ad8;
                    pc=0x49400;
                    run_49400(); return;
                case 0x45ad8:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r8 + 1;
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46620;
                        run_46600(); return;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x454e8;
                    run_45400(); return;
                case 0x45b0c:
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r18 = r18 & r2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4553c;
                        run_45400(); return;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + 5496;
                    /* Next insn is delay slot */ 
                    pc=0x45544;
                    run_45400(); return;
                case 0x45b30:
                    r3 = r2 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x45568;
                    run_45400(); return;
                case 0x45b3c:
                    r2 = f21;
                    r6 = 15 << 16;
                    r6 = r6 | 65535;
                    r5 = 16368 << 16;
                    r6 = r2 & r6;
                    r2 = r6 | r5;
                    r3 = f20;
                    r4 = r4 + -1023;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45638;
                    run_45600(); return;
                case 0x45b6c:
                    r2 = 6 << 16;
                    r2 = r2 + 804;
                    /* Next insn is delay slot */ 
                    pc=0x454e8;
                    run_45400(); return;
                case 0x45b7c:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                case 0x45b80:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45b94;
                    pc=0x49200;
                    run_49200(); return;
                case 0x45b94:
                    r8 = r0 + -1;
                    r9 = r0 + 1;
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r8;
                    r30 = r0 + -1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x45bb4:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d7c;
                        run_45c00(); return;
                    }
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r8 < 15 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d7c;
                        run_45c00(); return;
                    }
                    r3 = 6 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 5616;
                    r2 = r2 + r3;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46428;
                        run_46400(); return;
                    }
                case 0x45bfc:
                    f6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x45c00:
                    pc=0x45c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45c00() throws ExecutionException { /* 0x45c00 - 0x45e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45c00:
                    f7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    { long l = Double.doubleToLongBits(((double)f10)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = f10;
                    r3 = r20 + 1;
                    r2 = r4 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45d00;
                        continue;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    f8 = r0;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    f9 = r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x45ac4;
                        run_45a00(); return;
                    }
                    r2 = r20 + 2;
                    r30 = r20 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x45cac;
                    continue;
                case 0x45c94:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 1;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x45ac4;
                        run_45a00(); return;
                    }
                case 0x45cac:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r3 = r2 + r0;
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f10)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r5 = f10;
                    r4 = r5 + 48;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x45c94;
                        continue;
                    }
                case 0x45d00:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x45d38;
                        continue;
                    }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x45ac4;
                        run_45a00(); return;
                    }
                    r4 = f10;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ac4;
                        run_45a00(); return;
                    }
                case 0x45d38:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x45d3c:
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x45d58;
                    continue;
                case 0x45d48:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x468b4;
                        run_46800(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = r2 + r0;
                case 0x45d58:
                    r2 = r3 + -1;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x45d48;
                        continue;
                    }
                    r4 = r5 + 1;
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x45ac4;
                    run_45a00(); return;
                case 0x45d7c:
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461b8;
                        run_46000(); return;
                    }
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r9 = r9 < 2 ? 1 : 0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r9;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x464fc;
                        run_46400(); return;
                    }
                    r3 = r30 + -1;
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x467c0;
                        run_46600(); return;
                    }
                    r3 = r22 - r3;
                case 0x45db8:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46a78;
                        run_46a00(); return;
                    }
                    r21 = r18 + r0;
                    r2 = r30 + r0;
                case 0x45dc8:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    r18 = r18 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x45de4;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x45de4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = r2 + r0;
                case 0x45dec:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e18;
                        run_45e00(); return;
                    }
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e18;
                        run_45e00(); return;
                    }
                    r4 = r21 < r23 ? 1 : 0;
                case 0x45e00:
                    pc=0x45e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45e00() throws ExecutionException { /* 0x45e00 - 0x46000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45e00:
                    r2 = r23 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x463f0;
                        run_46200(); return;
                    }
                case 0x45e0c:
                    r18 = r18 - r2;
                    r21 = r21 - r2;
                    r23 = r23 - r2;
                case 0x45e18:
                    if(r22 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e94;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46778;
                        run_46600(); return;
                    }
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e88;
                        continue;
                    }
                    r6 = r3 + r0;
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x45e50;
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x45e50:
                    r5 = r2 + r0;
                    r6 = r17 + r0;
                    r4 = r16 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45e68;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x45e68:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x45e7c;
                    pc=0x49400;
                    run_49400(); return;
                case 0x45e7c:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r17 = r2 + r0;
                case 0x45e88:
                    r6 = r22 - r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x464a4;
                        run_46400(); return;
                    }
                case 0x45e94:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x45ea4;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x45ea4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r2 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ecc;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45ec8;
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x45ec8:
                    r22 = r2 + r0;
                case 0x45ecc:
                    r7 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x463a0;
                        run_46200(); return;
                    }
                case 0x45edc:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x45ee0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x465f0;
                        run_46400(); return;
                    }
                    r2 = r0 + 1;
                case 0x45ef4:
                    r2 = r2 + r23;
                    r2 = r2 & 31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461d8;
                        run_46000(); return;
                    }
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    r4 = r3 < 5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bdc;
                        run_46a00(); return;
                    }
                    r3 = r0 + 28;
                    r2 = r3 - r2;
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                case 0x45f2c:
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f4c;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45f48;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x45f48:
                    r17 = r2 + r0;
                case 0x45f4c:
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f6c;
                        continue;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45f68;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x45f68:
                    r22 = r2 + r0;
                case 0x45f6c:
                    r8 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46348;
                        run_46200(); return;
                    }
                case 0x45f7c:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46644;
                        run_46600(); return;
                    }
                case 0x45f84:
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46214;
                        run_46200(); return;
                    }
                    if(r21 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45fb4;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45fb0;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x45fb0:
                    r19 = r2 + r0;
                case 0x45fb4:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x468d8;
                        run_46800(); return;
                    }
                    r21 = r19 + r0;
                case 0x45fc8:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = r20 + r30;
                    r8 = r8 & 1;
                    r18 = r20 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r8;
                case 0x45fe0:
                    r9 = r18 + -1;
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x45ff8;
                    pc=0x45000;
                    run_45000(); return;
                case 0x45ff8:
                    r4 = r17 + r0;
                    r5 = r19 + r0;
                case 0x46000:
                    pc=0x46000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46000() throws ExecutionException { /* 0x46000 - 0x46200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46000:
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r23 = r2 + 48;
                    /* Next insn is delay slot */ 
                    r31=0x46010;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x46010:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46028;
                    pc=0x4aa00;
                    run_4aa00(); return;
                case 0x46028:
                    r3 = r2 + r0;
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x465d4;
                        run_46400(); return;
                    }
                    r5 = r3 + r0;
                    r4 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x46050;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x46050:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x46068;
                    pc=0x49400;
                    run_49400(); return;
                case 0x46068:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46098;
                        continue;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46098;
                        continue;
                    }
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46590;
                        run_46400(); return;
                    }
                case 0x46098:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46524;
                        run_46400(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460c8;
                        continue;
                    }
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460c8;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46524;
                        run_46400(); return;
                    }
                case 0x460c8:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46928;
                        run_46800(); return;
                    }
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r18 + r0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x46954;
                        run_46800(); return;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x460fc;
                    pc=0x49600;
                    run_49600(); return;
                case 0x460fc:
                    r17 = r2 + r0;
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x465b8;
                        run_46400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x46120;
                    pc=0x49600;
                    run_49600(); return;
                case 0x46120:
                    r5 = r21 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4613c;
                    pc=0x49600;
                    run_49600(); return;
                case 0x4613c:
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x45fe0;
                    run_45e00(); return;
                case 0x4614c:
                    r3 = r0 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x45730;
                    run_45600(); return;
                case 0x4615c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    r18 = r18 - r9;
                    r22 = r0 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x45760;
                    run_45600(); return;
                case 0x46174:
                    r18 = r0 - r23;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45744;
                    run_45600(); return;
                case 0x46184:
                    f4 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f4)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x456dc;
                        run_45600(); return;
                    }
                    r3 = f4;
                    r3 = r3 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x456dc;
                    run_45600(); return;
                case 0x461b8:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r22 + r0;
                    r8 = r8 < 2 ? 1 : 0;
                    r21 = r18 + r0;
                    r19 = r0 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x45dec;
                    run_45c00(); return;
                case 0x461d8:
                    r2 = r0 + 28;
                case 0x461dc:
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x45f2c;
                    run_45e00(); return;
                case 0x461f0:
                    r18 = r0 + -1042;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 - r4;
                    r18 = r7 << (r18&0x1f);
                case 0x46200:
                    pc=0x46200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46200() throws ExecutionException { /* 0x46200 - 0x46400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46200:
                    /* Next insn is delay slot */ 
                    pc=0x4560c;
                    run_45600(); return;
                case 0x46208:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x45730;
                    run_45600(); return;
                case 0x46214:
                    r18 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4623c;
                    continue;
                case 0x46220:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46238;
                    pc=0x49600;
                    run_49600(); return;
                case 0x46238:
                    r17 = r2 + r0;
                case 0x4623c:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4624c;
                    pc=0x45000;
                    run_45000(); return;
                case 0x4624c:
                    r18 = r18 + 1;
                    r23 = r2 + 48;
                    r2 = r18 - r20;
                    r2 = r2 < r30 ? 1 : 0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46220;
                        continue;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46518;
                        run_46400(); return;
                    }
                case 0x46270:
                    r3 = r20 + r30;
                    r18 = r0 + r0;
                case 0x46278:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x46290;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x46290:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x462a4;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x462a4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x464c0;
                        run_46400(); return;
                    }
                case 0x462b0:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                case 0x462b4:
                    r5 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x462d0;
                    continue;
                case 0x462c0:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x466b4;
                        run_46600(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r2 + r0;
                case 0x462d0:
                    r2 = r3 + -1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x462c0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x462e4:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x462f8;
                    pc=0x49400;
                    run_49400(); return;
                case 0x462f8:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ac4;
                        run_45a00(); return;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46328;
                        continue;
                    }
                    if(r18 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x46328;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46324;
                    pc=0x49400;
                    run_49400(); return;
                case 0x46324:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                case 0x46328:
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4633c;
                    pc=0x49400;
                    run_49400(); return;
                case 0x4633c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x45ac4;
                    run_45a00(); return;
                case 0x46348:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46358;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x46358:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f7c;
                        run_45e00(); return;
                    }
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r9 = r9 + -1;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x46384;
                    pc=0x49600;
                    run_49600(); return;
                case 0x46384:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ba8;
                        run_46a00(); return;
                    }
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x45f7c;
                    run_45e00(); return;
                case 0x463a0:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45edc;
                        run_45e00(); return;
                    }
                    r2 = 15 << 16;
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45edc;
                        run_45e00(); return;
                    }
                    r2 = 32752 << 16;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45edc;
                        run_45e00(); return;
                    }
                    r3 = r0 + 1;
                    r18 = r18 + 1;
                    r23 = r23 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x45ee0;
                    run_45e00(); return;
                case 0x463f0:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45e0c;
                    run_45e00(); return;
                case 0x463fc:
                    r9 = r0 + 1;
                case 0x46400:
                    pc=0x46400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46400() throws ExecutionException { /* 0x46400 - 0x46600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46400:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x46404:
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x467f0;
                        run_46600(); return;
                    }
                    r6 = r4 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r30 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x457f0;
                    run_45600(); return;
                case 0x46428:
                    if(r30 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bfc;
                        run_45a00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46758;
                        run_46600(); return;
                    }
                    f0 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46694;
                        run_46600(); return;
                    }
                case 0x4646c:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r20 + r0;
                    r9 = ~(r0 | r9);
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                case 0x4647c:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x46490;
                    pc=0x49400;
                    run_49400(); return;
                case 0x46490:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46328;
                        run_46200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x45ac4;
                    run_45a00(); return;
                case 0x464a4:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x464b4;
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x464b4:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45e94;
                    run_45e00(); return;
                case 0x464c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x464d4;
                        continue;
                    }
                    r23 = r23 & 1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x462b0;
                        run_46200(); return;
                    }
                case 0x464d4:
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x464e4;
                    continue;
                case 0x464e0:
                    r3 = r4 + r0;
                case 0x464e4:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r3 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x464e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x462e4;
                    run_46200(); return;
                case 0x464fc:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46a88;
                        run_46a00(); return;
                    }
                    r2 = r2 + 1075;
                    r3 = r22 + r0;
                    r21 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45dc8;
                    run_45c00(); return;
                case 0x46518:
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x46270;
                    run_46200(); return;
                case 0x46524:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46574;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x46540;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x46540:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46554;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x46554:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46b8c;
                        run_46a00(); return;
                    }
                case 0x4655c:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x46b1c;
                        run_46a00(); return;
                    }
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r3 + 49;
                case 0x46574:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = r19 + r0;
                    r3 = r7 + 1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x462e4;
                    run_46200(); return;
                case 0x46590:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x46b1c;
                        run_46a00(); return;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46574;
                        continue;
                    }
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r9 + 49;
                    /* Next insn is delay slot */ 
                    pc=0x46574;
                    continue;
                case 0x465b8:
                    /* Next insn is delay slot */ 
                    r31=0x465c0;
                    pc=0x49600;
                    run_49600(); return;
                case 0x465c0:
                    r19 = r2 + r0;
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x45fe0;
                    run_45e00(); return;
                case 0x465d4:
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x465e4;
                    pc=0x49400;
                    run_49400(); return;
                case 0x465e4:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x46098;
                    run_46000(); return;
                case 0x465f0:
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r2 = r2 << 2;
                case 0x46600:
                    pc=0x46600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46600() throws ExecutionException { /* 0x46600 - 0x46800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46600:
                    r2 = r22 + r2;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x46610;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x46610:
                    r3 = r0 + 32;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x45ef4;
                    run_45e00(); return;
                case 0x46620:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x454e8;
                    run_45400(); return;
                case 0x4662c:
                    r2 = r0 + 2;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45b80;
                        run_45a00(); return;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x46404;
                    run_46400(); return;
                case 0x46644:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r8 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f84;
                        run_45e00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4646c;
                        run_46400(); return;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 5;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46678;
                    pc=0x49600;
                    run_49600(); return;
                case 0x46678:
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    r22 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4668c;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x4668c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4646c;
                        run_46400(); return;
                    }
                case 0x46694:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r8 = r8 + 1;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x4647c;
                    run_46400(); return;
                case 0x466b4:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r9 = r9 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x462e4;
                    run_46200(); return;
                case 0x466d0:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                case 0x46700:
                    f2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = r9;
                    f3 = r8;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46964;
                        run_46800(); return;
                    }
                    r4 = 32768 << 16;
                    f2 = r9;
                    r2 = r4 ^ r8;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46768;
                        continue;
                    }
                case 0x46758:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4646c;
                    run_46400(); return;
                case 0x46768:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = f8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = f9;
                    /* Next insn is delay slot */ 
                    pc=0x45bb4;
                    run_45a00(); return;
                case 0x46778:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4678c;
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x4678c:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45e94;
                    run_45e00(); return;
                case 0x46798:
                    f0 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x45620;
                    run_45600(); return;
                case 0x467b4:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x457cc;
                    run_45600(); return;
                case 0x467c0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r3 - r22;
                    r7 = r7 + r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r7;
                    r22 = r3 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45db8;
                    run_45c00(); return;
                case 0x467e0:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x458b8;
                    run_45800(); return;
                case 0x467f0:
                    r3 = r0 + 1;
                    r4 = r0 + 1;
                    r21 = r0 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                case 0x46800:
                    pc=0x46800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46800() throws ExecutionException { /* 0x46800 - 0x46a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46800:
                    r30 = r0 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4582c;
                    run_45800(); return;
                case 0x46818:
                    r21 = r30 + r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4582c;
                    run_45800(); return;
                case 0x4682c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 - r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46aa4;
                        run_46a00(); return;
                    }
                    r4 = r2 & 15;
                    r3 = 6 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 5616;
                    r3 = r4 + r3;
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 >> 4;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46bd0;
                        run_46a00(); return;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 5576;
                    r8 = r0 + 2;
                case 0x4687c:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4689c;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x4689c:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4687c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x458fc;
                    run_45800(); return;
                case 0x468b4:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    r4 = r0 + 49;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x45ac4;
                    run_45a00(); return;
                case 0x468d8:
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x468e8;
                    pc=0x49200;
                    run_49200(); return;
                case 0x468e8:
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r5 = r19 + 12;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x46908;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x46908:
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4691c;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x4691c:
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45fc8;
                    run_45e00(); return;
                case 0x46928:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x46b1c;
                        run_46a00(); return;
                    }
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r18 = r19 + r0;
                    r3 = r9 + 1;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x462e4;
                    run_46200(); return;
                case 0x46954:
                    r18 = r19 + r0;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46278;
                    run_46200(); return;
                case 0x46964:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46694;
                    run_46600(); return;
                case 0x46974:
                    r3 = 6 << 16;
                    r6 = r5 << 3;
                    r3 = r3 + 5616;
                    r3 = r6 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r9;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = r8;
                    r3 = r20 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f11 = (int)(l >>> 32); f10 = (int)l; }
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    r7 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r6 = r7 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x46a44;
                        run_46a00(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    r6 = r3 + r0;
                case 0x469f4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r6 = r6 + 1;
                    r8 = fcsr;
                case 0x46a00:
                    pc=0x46a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46a00() throws ExecutionException { /* 0x46a00 - 0x46c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46a00:
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    r9 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r10 = r9 + 48;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x469f4;
                        run_46800(); return;
                    }
                    r3 = r3 + r5;
                case 0x46a44:
                    f2 = readPages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46b40;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x45d3c;
                    run_45c00(); return;
                case 0x46a78:
                    r21 = r18 - r30;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45dc8;
                    run_45c00(); return;
                case 0x46a88:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    r2 = r3 - r2;
                    r21 = r18 + r0;
                    r3 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45dc8;
                    run_45c00(); return;
                case 0x46aa4:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x458fc;
                    run_45800(); return;
                case 0x46ab4:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x466d0;
                        run_46600(); return;
                    }
                    r9 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46768;
                        run_46600(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    f4 = r8;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r3 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    r3 = 64704 << 16;
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r3 + r8;
                    /* Next insn is delay slot */ 
                    pc=0x4596c;
                    run_45800(); return;
                case 0x46b1c:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r0 + 57;
                    r18 = r19 + r0;
                    r3 = r8 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x462b4;
                    run_46200(); return;
                case 0x46b40:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x46768;
                        run_46600(); return;
                    }
                    r6 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x46b64;
                    continue;
                case 0x46b60:
                    r3 = r5 + r0;
                case 0x46b64:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r3 + -1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x46b60;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x45ac4;
                    run_45a00(); return;
                case 0x46b80:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x45d3c;
                    run_45c00(); return;
                case 0x46b8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46574;
                        run_46400(); return;
                    }
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46574;
                        run_46400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4655c;
                    run_46400(); return;
                case 0x46ba8:
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46bc0;
                    pc=0x49600;
                    run_49600(); return;
                case 0x46bc0:
                    r19 = r2 + r0;
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x45f7c;
                    run_45e00(); return;
                case 0x46bd0:
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x458fc;
                    run_45800(); return;
                case 0x46bdc:
                    r4 = r0 + 4;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x45f2c;
                        run_45e00(); return;
                    }
                    r3 = r0 + 60;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x461dc;
                    run_46000(); return;
                case 0x46bf8:
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4578c;
                    run_45600(); return;
                case 0x46c00:
                    pc=0x46c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46c00() throws ExecutionException { /* 0x46c00 - 0x46e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46c00:
                case 0x46c04:
                    r21 = r6 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4582c;
                    run_45800(); return;
                case 0x46e00:
                    pc=0x46e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46e00() throws ExecutionException { /* 0x46e00 - 0x47000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46e00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47000:
                    pc=0x47000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47000() throws ExecutionException { /* 0x47000 - 0x47200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47200:
                    pc=0x47200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47200() throws ExecutionException { /* 0x47200 - 0x47400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47200:
                    r6 = readPages[(r28+-32716)>>>12][((r28+-32716)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3f400;
                    run_3f400(); return;
                case 0x47400:
                    pc=0x47400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47400() throws ExecutionException { /* 0x47400 - 0x47600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47400:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 114;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x47498;
                        continue;
                    }
                    r3 = r0 + 119;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x47484;
                        continue;
                    }
                    r3 = r0 + 97;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4743c;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4743c:
                    r7 = r0 + 520;
                    r4 = r0 + 1;
                    r2 = r0 + 264;
                case 0x47448:
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47474;
                        continue;
                    }
                    r8 = r0 + 43;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x474ac;
                        continue;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x474ac;
                        continue;
                    }
                case 0x47474:
                    r4 = r4 | r7;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47484:
                    r7 = r0 + 1536;
                    r4 = r0 + 1;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x47448;
                    continue;
                case 0x47498:
                    r7 = r0 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x47448;
                    continue;
                case 0x474ac:
                    r3 = r0 + -29;
                    r4 = r0 + 2;
                    r2 = r2 & r3;
                    r4 = r4 | r7;
                    r2 = r2 | 16;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47600:
                    pc=0x47600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47600() throws ExecutionException { /* 0x47600 - 0x47800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47600:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x47628;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x47628:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r29 + 28;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47658;
                        continue;
                    }
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476b0;
                        continue;
                    }
                case 0x47658:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47684;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x47684:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x47698;
                    pc=0x47a00;
                    run_47a00(); return;
                case 0x47698:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x476b0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x476bc;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x476bc:
                    /* Next insn is delay slot */ 
                    pc=0x47658;
                    continue;
                case 0x47800:
                    pc=0x47800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47800() throws ExecutionException { /* 0x47800 - 0x47a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47600;
                    run_47600(); return;
                case 0x47a00:
                    pc=0x47a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47a00() throws ExecutionException { /* 0x47a00 - 0x47c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47a00:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ad4;
                        continue;
                    }
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r21 = r4 + r0;
                    r3 = r2 & 8;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b0c;
                        continue;
                    }
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b0c;
                        continue;
                    }
                    r3 = r2 & 2;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b38;
                        continue;
                    }
                case 0x47a74:
                    r20 = r0 + r0;
                    r18 = r0 + r0;
                case 0x47a7c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47bfc;
                        continue;
                    }
                    r2 = (r18&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = r18 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a9c;
                        continue;
                    }
                    r7 = r0 + 1024;
                case 0x47a9c:
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x47ab0;
                    return;
                case 0x47ab0:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c3c;
                        run_47c00(); return;
                    }
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r20 + r2;
                    r18 = r18 - r2;
                    r2 = r3 - r2;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a7c;
                        continue;
                    }
                case 0x47ad4:
                    r2 = r0 + r0;
                case 0x47ad8:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47b0c:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47b1c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x47b1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fec;
                        run_47e00(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = r2 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a74;
                        continue;
                    }
                case 0x47b38:
                    r3 = r2 & 1;
                    r22 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c58;
                        run_47c00(); return;
                    }
                    r18 = r0 + r0;
                case 0x47b4c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47be8;
                        continue;
                    }
                case 0x47b54:
                    r3 = r2 & 512;
                    r20 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d38;
                        run_47c00(); return;
                    }
                    r3 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e00;
                        run_47e00(); return;
                    }
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e84;
                        run_47e00(); return;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r23 = r20 + r0;
                    r30 = r20 + r0;
                    r20 = r18 + r0;
                case 0x47b8c:
                    r5 = r22 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47b9c;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x47b9c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r30 = r2 - r30;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r30;
                    r3 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                case 0x47bbc:
                    r22 = r22 + r2;
                    r18 = r18 - r2;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ad4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b54;
                        continue;
                    }
                case 0x47be8:
                    r22 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x47b4c;
                    continue;
                case 0x47bfc:
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x47c00:
                    pc=0x47c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47c00() throws ExecutionException { /* 0x47c00 - 0x47e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47c00:
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x47a7c;
                    run_47a00(); return;
                case 0x47c10:
                    /* Next insn is delay slot */ 
                    r31=0x47c18;
                    pc=0x30600;
                    run_30600(); return;
                case 0x47c18:
                    r30 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f10;
                        run_47e00(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47c34;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x47c34:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                case 0x47c3c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x47ad8;
                    run_47a00(); return;
                case 0x47c58:
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    r18 = r0 + r0;
                case 0x47c64:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d20;
                        continue;
                    }
                case 0x47c6c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e54;
                        run_47e00(); return;
                    }
                case 0x47c74:
                    r2 = ((r18 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c88;
                        continue;
                    }
                    r23 = r18 + r0;
                case 0x47c88:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r23 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47cb8;
                        continue;
                    }
                    r8 = r6 + r7;
                    r2 = r8 < r23 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f3c;
                        run_47e00(); return;
                    }
                case 0x47cb8:
                    r2 = r23 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47da0;
                        continue;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x47ce0;
                    return;
                case 0x47ce0:
                    r20 = r2 + r0;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c3c;
                        continue;
                    }
                case 0x47cf0:
                    r22 = r22 - r20;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ddc;
                        continue;
                    }
                case 0x47cfc:
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r30 = r30 + r20;
                    r18 = r18 - r20;
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ad4;
                        run_47a00(); return;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c6c;
                        continue;
                    }
                case 0x47d20:
                    r30 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = r0 + r0;
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x47c64;
                    continue;
                case 0x47d38:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d5c;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f90;
                        run_47e00(); return;
                    }
                case 0x47d5c:
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = ((r18 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e18;
                        run_47e00(); return;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x47d88;
                    return;
                case 0x47d88:
                    r20 = r2 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c3c;
                        continue;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47bbc;
                    run_47a00(); return;
                case 0x47da0:
                    r6 = r23 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x47db4;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x47db4:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r22 = r22 - r20;
                    r2 = r2 - r23;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r23;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47cfc;
                        continue;
                    }
                case 0x47ddc:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47dec;
                    pc=0x29200;
                    run_29200(); return;
                case 0x47dec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c3c;
                        continue;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47cfc;
                    continue;
                case 0x47e00:
                    pc=0x47e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47e00() throws ExecutionException { /* 0x47e00 - 0x48000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47e00:
                    r30 = r18 + r0;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47b8c;
                    run_47a00(); return;
                case 0x47e18:
                    r5 = r22 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47e28;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x47e28:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r2 = r2 - r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47bbc;
                    run_47a00(); return;
                case 0x47e54:
                    r4 = r30 + r0;
                    r5 = r0 + 10;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47e68;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x47e68:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fdc;
                        continue;
                    }
                    r22 = r2 + 1;
                    r22 = r22 - r30;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x47c74;
                    run_47c00(); return;
                case 0x47e84:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r6 = r4 << 1;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r6 + r4;
                    r20 = r4 >>> 31;
                    r23 = r3 - r5;
                    r4 = r20 + r4;
                    r6 = r23 + 1;
                    r20 = r4 >> 1;
                    r6 = r6 + r18;
                    r4 = ((r20 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fd0;
                        continue;
                    }
                    r20 = r6 + r0;
                case 0x47ec0:
                    r2 = r2 & 1024;
                    r4 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c10;
                        run_47c00(); return;
                    }
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47edc;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x47edc:
                    r30 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c34;
                        run_47c00(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47efc;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x47efc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x47f10:
                    r4 = r30 + r23;
                    r3 = r20 - r23;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r30;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    r30 = r18 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47b8c;
                    run_47a00(); return;
                case 0x47f3c:
                    r6 = r8 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x47f54;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x47f54:
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r8;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47f74;
                    pc=0x29200;
                    run_29200(); return;
                case 0x47f74:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c3c;
                        run_47c00(); return;
                    }
                    r20 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47cf0;
                    run_47c00(); return;
                case 0x47f90:
                    r5 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47fa0;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x47fa0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x47fbc;
                    pc=0x29200;
                    run_29200(); return;
                case 0x47fbc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c3c;
                        run_47c00(); return;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47bbc;
                    run_47a00(); return;
                case 0x47fd0:
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47ec0;
                    continue;
                case 0x47fdc:
                    r22 = r18 + 1;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x47c74;
                    run_47c00(); return;
                case 0x47fec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x47ad8;
                    run_47a00(); return;
                case 0x48000:
                    pc=0x48000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48000() throws ExecutionException { /* 0x48000 - 0x48200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48000:
                    /* Next insn is delay slot */ 
                    pc=0x54000;
                    run_54000(); return;
                case 0x48200:
                    pc=0x48200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48200() throws ExecutionException { /* 0x48200 - 0x48400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48238;
                        continue;
                    }
                    r5 = 6 << 16;
                    r4 = r6 + r0;
                    r5 = r5 + 5512;
                    /* Next insn is delay slot */ 
                    r31=0x48230;
                    pc=0x32800;
                    run_32800(); return;
                case 0x48230:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4825c;
                        continue;
                    }
                case 0x48238:
                    r17 = 6 << 16;
                case 0x4823c:
                    r17 = r17 + 2572;
                case 0x48240:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4825c:
                    r17 = 6 << 16;
                    r4 = r16 + r0;
                    r5 = r17 + 2572;
                    /* Next insn is delay slot */ 
                    r31=0x48270;
                    pc=0x32800;
                    run_32800(); return;
                case 0x48270:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4823c;
                        continue;
                    }
                    r5 = 6 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + -8164;
                    /* Next insn is delay slot */ 
                    r31=0x4828c;
                    pc=0x32800;
                    run_32800(); return;
                case 0x4828c:
                    r17 = r17 + 2572;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48240;
                        continue;
                    }
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48240;
                    continue;
                case 0x48400:
                    pc=0x48400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48400() throws ExecutionException { /* 0x48400 - 0x48600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48400:
                    r2 = 6 << 16;
                    r2 = r2 + 11400;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48600:
                    pc=0x48600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48600() throws ExecutionException { /* 0x48600 - 0x48800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48600:
                    r2 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48800:
                    pc=0x48800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48800() throws ExecutionException { /* 0x48800 - 0x48a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48800:
                    r2 = 6 << 16;
                    r2 = r2 + 11368;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48a00:
                    pc=0x48a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48a00() throws ExecutionException { /* 0x48a00 - 0x48c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48a00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48c00:
                    pc=0x48c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48c00() throws ExecutionException { /* 0x48c00 - 0x48e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48c00:
                    r2 = 6 << 16;
                    r2 = r2 + 11432;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48e00:
                    pc=0x48e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48e00() throws ExecutionException { /* 0x48e00 - 0x49000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48200;
                    run_48200(); return;
                case 0x49000:
                    pc=0x49000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49000() throws ExecutionException { /* 0x49000 - 0x49200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49000:
                    r2 = 6 << 16;
                    r2 = r2 + 11432;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49200:
                    pc=0x49200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49200() throws ExecutionException { /* 0x49200 - 0x49400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49200:
                    r2 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49270;
                        continue;
                    }
                case 0x49228:
                    r3 = r17 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49298;
                        continue;
                    }
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                case 0x4924c:
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                case 0x49254:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49270:
                    r5 = r0 + 4;
                    r6 = r0 + 33;
                    /* Next insn is delay slot */ 
                    r31=0x49280;
                    pc=0x54200;
                    run_54200(); return;
                case 0x49280:
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49228;
                        continue;
                    }
                case 0x4928c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49254;
                    continue;
                case 0x49298:
                    r18 = r0 + 1;
                    r18 = r18 << (r17&0x1f);
                    r6 = r18 + 5;
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x492b8;
                    pc=0x54200;
                    run_54200(); return;
                case 0x492b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4928c;
                        continue;
                    }
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x4924c;
                    continue;
                case 0x49400:
                    pc=0x49400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49400() throws ExecutionException { /* 0x49400 - 0x49600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49400:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49428;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x49428:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49600:
                    pc=0x49600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49600() throws ExecutionException { /* 0x49600 - 0x49800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49600:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r18 = r4 + r0;
                    r17 = r5 + r0;
                    r3 = r5 + 20;
                    r8 = r0 + r0;
                case 0x4962c:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r9 = r11 & 65535;
                    { long hilo = (long)(r9) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r9 = lo;
                    r9 = r9 + r7;
                    r7 = r9 >>> 16;
                    { long hilo = (long)(r11) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r9 & 65535;
                    r11 = lo;
                    r10 = r7 + r11;
                    r7 = r10 >>> 16;
                    r10 = r10 << 16;
                    r9 = r10 + r9;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r9;
                    r9 = r8 < r16 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4962c;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x496b0;
                        continue;
                    }
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x496d4;
                        continue;
                    }
                case 0x49698:
                    r2 = r16 + 4;
                    r2 = r2 << 2;
                    r2 = r17 + r2;
                    r16 = r16 + 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r7;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r16;
                case 0x496b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x496d4:
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r5 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x496ec;
                    pc=0x49200;
                    run_49200(); return;
                case 0x496ec:
                    r6 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r5 = r17 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4970c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x4970c:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+76)>>>12][((r18+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r17 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49698;
                    continue;
                case 0x49800:
                    pc=0x49800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49800() throws ExecutionException { /* 0x49800 - 0x49a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49800:
                    r29 = r29 + -48;
                    r2 = r0 + 9;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r7 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x49820;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x49820:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r18 = r6 + r0;
                    r19 = r7 + r0;
                    r4 = lo;
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4994c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r5 = r0 + r0;
                case 0x4985c:
                    r2 = r2 << 1;
                    r8 = r2 < r4 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4985c;
                        continue;
                    }
                case 0x49870:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4987c;
                    pc=0x49200;
                    run_49200(); return;
                case 0x4987c:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r18 < 10 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4993c;
                        continue;
                    }
                    r21 = r20 + 9;
                    r16 = r21 + r0;
                    r20 = r20 + r18;
                case 0x498a8:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x498c8;
                    pc=0x49600;
                    run_49600(); return;
                case 0x498c8:
                    if(r16 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x498a8;
                        continue;
                    }
                    r16 = r21 + r18;
                    r16 = r16 + -8;
                case 0x498d8:
                    r3 = r18 < r19 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49914;
                        continue;
                    }
                    r18 = r19 - r18;
                    r18 = r16 + r18;
                case 0x498ec:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x4990c;
                    pc=0x49600;
                    run_49600(); return;
                case 0x4990c:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x498ec;
                        continue;
                    }
                case 0x49914:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4993c:
                    r16 = r20 + 10;
                    r18 = r0 + 9;
                    /* Next insn is delay slot */ 
                    pc=0x498d8;
                    continue;
                case 0x4994c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49870;
                    continue;
                case 0x49a00:
                    pc=0x49a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49a00() throws ExecutionException { /* 0x49a00 - 0x49c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49a00:
                    r2 = 65535 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49a84;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r0 + 16;
                case 0x49a18:
                    r3 = 65280 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49a30;
                        continue;
                    }
                    r2 = r2 + 8;
                    r4 = r4 << 8;
                case 0x49a30:
                    r3 = 61440 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49a48;
                        continue;
                    }
                    r2 = r2 + 4;
                    r4 = r4 << 4;
                case 0x49a48:
                    r3 = 49152 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49a60;
                        continue;
                    }
                    r2 = r2 + 2;
                    r4 = r4 << 2;
                case 0x49a60:
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x49a7c;
                        continue;
                    }
                    r3 = 16384 << 16;
                    r4 = r4 & r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49a90;
                        continue;
                    }
                    r2 = r0 + 32;
                case 0x49a7c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49a84:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x49a18;
                    continue;
                case 0x49a90:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49c00:
                    pc=0x49c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49c00() throws ExecutionException { /* 0x49c00 - 0x49e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49c00:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49c40;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49cd0;
                        continue;
                    }
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49cdc;
                        continue;
                    }
                    r3 = r3 >>> 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49c40:
                    r2 = r3 & 65535;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49cb0;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x49c50:
                    r5 = r3 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49c64;
                        continue;
                    }
                    r2 = r2 + 8;
                    r3 = r3 >>> 8;
                case 0x49c64:
                    r5 = r3 & 15;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49c78;
                        continue;
                    }
                    r2 = r2 + 4;
                    r3 = r3 >>> 4;
                case 0x49c78:
                    r5 = r3 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49c8c;
                        continue;
                    }
                    r2 = r2 + 2;
                    r3 = r3 >>> 2;
                case 0x49c8c:
                    r5 = r3 & 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49cc4;
                        continue;
                    }
                    r3 = r3 >>> 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49cc0;
                        continue;
                    }
                    r2 = r0 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49cb0:
                    r3 = r3 >>> 16;
                    r2 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x49c50;
                    continue;
                case 0x49cc0:
                    r2 = r2 + 1;
                case 0x49cc4:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49cd0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49cdc:
                    r3 = r3 >>> 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49e00:
                    pc=0x49e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49e00() throws ExecutionException { /* 0x49e00 - 0x4a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x49e1c;
                    pc=0x49200;
                    run_49200(); return;
                case 0x49e1c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r16;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a000:
                    pc=0x4a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a000() throws ExecutionException { /* 0x4a000 - 0x4a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a000:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r18 < r19 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    r20 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a04c;
                        continue;
                    }
                    r2 = r18 + r0;
                    r17 = r6 + r0;
                    r18 = r19 + r0;
                    r20 = r5 + r0;
                    r19 = r2 + r0;
                case 0x4a04c:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r16 = r18 + r19;
                    r2 = r2 < r16 ? 1 : 0;
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a068;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x4a068:
                    /* Next insn is delay slot */ 
                    r31=0x4a070;
                    pc=0x49200;
                    run_49200(); return;
                case 0x4a070:
                    r13 = r2 + 20;
                    r14 = r16 << 2;
                    r14 = r13 + r14;
                    r4 = ((r13 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r3 = r13 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a0a0;
                        continue;
                    }
                case 0x4a08c:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a08c;
                        continue;
                    }
                case 0x4a0a0:
                    r12 = r20 + 20;
                    r15 = r19 << 2;
                    r15 = r12 + r15;
                    r24 = r17 + 20;
                    r11 = r18 << 2;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r11 = r24 + r11;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a204;
                        run_4a200(); return;
                    }
                case 0x4a0c4:
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r8 = r9 & 65535;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a160;
                        continue;
                    }
                    r4 = r13 + r0;
                    r3 = r24 + r0;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a0f0;
                    continue;
                case 0x4a0ec:
                    r4 = r7 + r0;
                case 0x4a0f0:
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r6 & 65535;
                    { long hilo = (long)(r5) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = r6 >>> 16;
                    r10 = r7 & 65535;
                    r7 = r7 >>> 16;
                    r3 = r3 + 4;
                    r5 = lo;
                    r5 = r5 + r10;
                    r5 = r5 + r9;
                    { long hilo = (long)(r6) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r5 >>> 16;
                    r5 = r5 & 65535;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r9;
                    r9 = r6 >>> 16;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r5 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r7 = r4 + 4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a0ec;
                        continue;
                    }
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                case 0x4a160:
                    r9 = r9 >>> 16;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a1f0;
                        continue;
                    }
                    r4 = readPages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff];
                    r5 = r13 + r0;
                    r7 = r4 + r0;
                    r3 = r24 + r0;
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a18c;
                    continue;
                case 0x4a188:
                    r5 = r8 + r0;
                case 0x4a18c:
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    r7 = r7 >>> 16;
                    { long hilo = (long)(r6) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r4 & 65535;
                    r3 = r3 + 4;
                    r8 = r5 + 4;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r10;
                    r7 = r6 << 16;
                    r4 = r7 | r4;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r4;
                    addr=r3+-4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r7 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    { long hilo = (long)(r4) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r7 & 65535;
                    r6 = r6 >>> 16;
                    r4 = lo;
                    r4 = r4 + r10;
                    r4 = r4 + r6;
                    r6 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r10 = r4 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a188;
                        continue;
                    }
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r4;
                case 0x4a1f0:
                    r12 = r12 + 4;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r13 = r13 + 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a0c4;
                        continue;
                    }
                case 0x4a200:
                    pc=0x4a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a200() throws ExecutionException { /* 0x4a200 - 0x4a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a200:
                case 0x4a204:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a244;
                        continue;
                    }
                    r4 = readPages[(r14+-4)>>>12][((r14+-4)>>>2)&0x3ff];
                    r3 = r14 + -4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a238;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4a244;
                    continue;
                case 0x4a224:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a244;
                        continue;
                    }
                case 0x4a238:
                    r16 = r16 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a224;
                        continue;
                    }
                case 0x4a244:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a400:
                    pc=0x4a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a400() throws ExecutionException { /* 0x4a400 - 0x4a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a400:
                    r29 = r29 + -40;
                    r2 = r6 & 3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a524;
                        continue;
                    }
                case 0x4a430:
                    r16 = r16 >> 2;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4cc;
                        continue;
                    }
                    r17 = readPages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a554;
                        continue;
                    }
                case 0x4a44c:
                    r3 = r16 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a484;
                        continue;
                    }
                case 0x4a458:
                    r16 = r16 >> 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4cc;
                        continue;
                    }
                case 0x4a464:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4f0;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x4a478:
                    r3 = r16 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a458;
                        continue;
                    }
                case 0x4a484:
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4a498;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x4a498:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a518;
                        continue;
                    }
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r16 = r16 >> 1;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r18 = r2 + r0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a464;
                        continue;
                    }
                case 0x4a4cc:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a4f0:
                    r5 = r17 + r0;
                    r6 = r17 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4a504;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x4a504:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a478;
                    continue;
                case 0x4a518:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a458;
                    continue;
                case 0x4a524:
                    r2 = r2 + -1;
                    r3 = 6 << 16;
                    r3 = r3 + 5520;
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4a548;
                    pc=0x49600;
                    run_49600(); return;
                case 0x4a548:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a430;
                    continue;
                case 0x4a554:
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4a564;
                    pc=0x49200;
                    run_49200(); return;
                case 0x4a564:
                    r17 = r2 + r0;
                    r2 = r0 + 625;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff] = r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a44c;
                    continue;
                case 0x4a600:
                    pc=0x4a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a600() throws ExecutionException { /* 0x4a600 - 0x4a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a600:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 >> 5;
                    r20 = r17 + r20;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r20 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r2 < r16 ? 1 : 0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r21 = r6 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a664;
                        continue;
                    }
                case 0x4a650:
                    r2 = r2 << 1;
                    r7 = r2 < r16 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a650;
                        continue;
                    }
                case 0x4a664:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4a670;
                    pc=0x49200;
                    run_49200(); return;
                case 0x4a670:
                    r7 = r2 + 20;
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a6a0;
                        continue;
                    }
                    r8 = r7 + r0;
                    r3 = r0 + r0;
                case 0x4a684:
                    r8 = r8 + 4;
                    r3 = r3 + 1;
                    writePages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff] = r0;
                    if(r3 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x4a684;
                        continue;
                    }
                    r3 = r3 << 2;
                    r7 = r7 + r3;
                case 0x4a6a0:
                    r10 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = r18 + 20;
                    r10 = r10 << 2;
                    r6 = r21 & 31;
                    r10 = r3 + r10;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a75c;
                        continue;
                    }
                    r4 = r0 + 32;
                    r4 = r4 - r6;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a6d4;
                    continue;
                case 0x4a6d0:
                    r7 = r8 + r0;
                case 0x4a6d4:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r11 = r11 << (r6&0x1f);
                    r9 = r9 | r11;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r11 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    r8 = r7 + 4;
                    r9 = r9 >>> (r4&0x1f);
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a6d0;
                        continue;
                    }
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r9;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a710;
                        continue;
                    }
                    r16 = r20 + 2;
                case 0x4a710:
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = r16 + -1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a75c:
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a710;
                        continue;
                    }
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a75c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4a710;
                    continue;
                case 0x4a800:
                    pc=0x4a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a800() throws ExecutionException { /* 0x4a800 - 0x4aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a800:
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a878;
                        continue;
                    }
                    r3 = r3 << 2;
                    r4 = r4 + 20;
                    r5 = r5 + 20;
                    r2 = r4 + r3;
                    r5 = r5 + r3;
                    /* Next insn is delay slot */ 
                    pc=0x4a840;
                    continue;
                case 0x4a834:
                    r3 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a874;
                        continue;
                    }
                case 0x4a840:
                    r2 = r2 + -4;
                    r5 = r5 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4a834;
                        continue;
                    }
                    r3 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a880;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a874:
                    r2 = r0 + r0;
                case 0x4a878:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a880:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4aa00:
                    pc=0x4aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4aa00() throws ExecutionException { /* 0x4aa00 - 0x4ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4aa00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4aa34;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x4aa34:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aba4;
                        continue;
                    }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab8c;
                        continue;
                    }
                    r19 = r0 + r0;
                case 0x4aa48:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4aa58;
                    pc=0x49200;
                    run_49200(); return;
                case 0x4aa58:
                    r10 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r13 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r16 + 20;
                    r12 = r10 << 2;
                    r7 = r17 + 20;
                    r13 = r13 << 2;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r19;
                    r12 = r4 + r12;
                    r13 = r7 + r13;
                    r3 = r2 + 20;
                    r5 = r0 + r0;
                case 0x4aa84:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r6 = r8 & 65535;
                    r5 = r6 + r5;
                    r11 = r9 & 65535;
                    r6 = r5 - r11;
                    r8 = r8 >>> 16;
                    r9 = r9 >>> 16;
                    r5 = r6 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r5;
                    r7 = r7 + 4;
                    r5 = r8 >> 16;
                    r6 = r6 & 65535;
                    r8 = r8 << 16;
                    r6 = r8 | r6;
                    r3 = r3 + 4;
                    r8 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    r4 = r4 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aa84;
                        continue;
                    }
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r9 = r3 + r0;
                    r11 = r4 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab48;
                        continue;
                    }
                case 0x4aaf0:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r6 = r8 & 65535;
                    r6 = r6 + r5;
                    r7 = r6 >> 16;
                    r8 = r8 >>> 16;
                    r7 = r7 + r8;
                    r5 = r7 >> 16;
                    r6 = r6 & 65535;
                    r7 = r7 << 16;
                    r6 = r7 | r6;
                    r3 = r3 + 4;
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aaf0;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r12;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r9 + r3;
                case 0x4ab48:
                    r3 = r3 + -4;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab68;
                        continue;
                    }
                case 0x4ab54:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r10 + -1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ab54;
                        continue;
                    }
                case 0x4ab68:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r10;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ab8c:
                    r2 = r16 + r0;
                    r19 = r0 + 1;
                    r16 = r17 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4aa48;
                    continue;
                case 0x4aba4:
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4abb4;
                    pc=0x49200;
                    run_49200(); return;
                case 0x4abb4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ac00:
                    pc=0x4ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ac00() throws ExecutionException { /* 0x4ac00 - 0x4ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ac00:
                    r2 = f13;
                    r4 = 32752 << 16;
                    r2 = r2 & r4;
                    r3 = 64704 << 16;
                    r4 = r2 + r3;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac34;
                        continue;
                    }
                    r3 = r0 + r0;
                    f0 = r3;
                    r2 = r4 + r0;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ac34:
                    r4 = r0 - r4;
                    r4 = r4 >> 20;
                    r2 = r4 < 20 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac90;
                        continue;
                    }
                    r5 = r4 < 51 ? 1 : 0;
                    r2 = r0 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac80;
                        continue;
                    }
                    r5 = r0 + 51;
                    r4 = r5 - r4;
                    r5 = r0 + 1;
                    r4 = r5 << (r4&0x1f);
                    r3 = r4 + r0;
                case 0x4ac6c:
                    f0 = r3;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ac80:
                    r4 = r0 + 1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ac6c;
                    continue;
                case 0x4ac90:
                    r3 = r0 + r0;
                    r5 = 8 << 16;
                    f0 = r3;
                    r2 = r5 >> (r4&0x1f);
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ae00:
                    pc=0x4ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ae00() throws ExecutionException { /* 0x4ae00 - 0x4b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ae00:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r16 << 2;
                    r18 = r4 + 20;
                    r16 = r18 + r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r4 = r17 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4ae40;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x4ae40:
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r3 = r2 < 11 ? 1 : 0;
                    r19 = r16 + -4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aec0;
                        continue;
                    }
                    r3 = r0 + 11;
                    r3 = r3 - r2;
                    r5 = r17 >>> (r3&0x1f);
                    r4 = 16368 << 16;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r6 = r5 | r4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4af44;
                        continue;
                    }
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r4 >>> (r3&0x1f);
                case 0x4ae88:
                    r2 = r2 + 21;
                    r17 = r17 << (r2&0x1f);
                    r7 = r3 | r17;
                case 0x4ae94:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r7;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    f1 = r6;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4aec0:
                    r3 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4af1c;
                        continue;
                    }
                    r3 = r2 + -11;
                    r4 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4af30;
                        continue;
                    }
                case 0x4aedc:
                    r5 = r0 + 43;
                    r2 = r5 - r2;
                    r17 = r17 << (r3&0x1f);
                    r5 = 16368 << 16;
                    r17 = r17 | r5;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 >>> (r2&0x1f);
                    r6 = r17 | r5;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4af50;
                        continue;
                    }
                    r5 = readPages[(r19+-4)>>>12][((r19+-4)>>>2)&0x3ff];
                    r3 = r4 << (r3&0x1f);
                    r2 = r5 >>> (r2&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x4ae94;
                    continue;
                case 0x4af1c:
                    r3 = r2 + -11;
                    r19 = r16 + -8;
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aedc;
                        continue;
                    }
                case 0x4af30:
                    r2 = 16368 << 16;
                    r6 = r17 | r2;
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ae94;
                    continue;
                case 0x4af44:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ae88;
                    continue;
                case 0x4af50:
                    r2 = r0 + r0;
                    r3 = r4 << (r3&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x4ae94;
                    continue;
                case 0x4b000:
                    pc=0x4b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b000() throws ExecutionException { /* 0x4b000 - 0x4b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b000:
                    r29 = r29 + -48;
                    r5 = r0 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    r17 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b02c;
                    pc=0x49200;
                    run_49200(); return;
                case 0x4b02c:
                    r18 = r2 + r0;
                    r19 = r16 << 1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r19 = r19 >>> 21;
                    r2 = r2 & r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b054;
                        continue;
                    }
                    r3 = 16 << 16;
                    r2 = r2 | r3;
                case 0x4b054:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b0f4;
                        continue;
                    }
                    r4 = r29 + 20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x4b070;
                    pc=0x49c00;
                    run_49c00(); return;
                case 0x4b070:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b164;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                case 0x4b084:
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r16;
                    r3 = r0 + 2;
                    r16 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r16 = r3 - r16;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r16;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b120;
                        continue;
                    }
                case 0x4b0a0:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + -1074;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r16 << 2;
                    r2 = r18 + r2;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r16 = r16 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x4b0c4;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x4b0c4:
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b0f4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x4b100;
                    pc=0x49c00;
                    run_49c00(); return;
                case 0x4b100:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + 32;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    r16 = r0 + 1;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b0a0;
                        continue;
                    }
                case 0x4b120:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + -1075;
                    r19 = r19 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r19;
                    r3 = r0 + 53;
                    r2 = r3 - r2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b164:
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r0 - r2;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r16 << (r3&0x1f);
                    r3 = r3 | r4;
                    r16 = r16 >>> (r2&0x1f);
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x4b084;
                    continue;
                case 0x4b200:
                    pc=0x4b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b200() throws ExecutionException { /* 0x4b200 - 0x4b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b200:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    r5 = r29 + 20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f21;
                    /* Next insn is delay slot */ 
                    r31=0x4b234;
                    pc=0x4ae00;
                    run_4ae00(); return;
                case 0x4b234:
                    r4 = r18 + r0;
                    r5 = r29 + 16;
                    f20 = f0;
                    f21 = f1;
                    r17 = f0;
                    r16 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x4b250;
                    pc=0x4ae00;
                    run_4ae00(); return;
                case 0x4b250:
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r4 = r5 - r4;
                    r5 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = f0;
                    r5 = r6 - r5;
                    r5 = r5 << 5;
                    r4 = r4 + r5;
                    r2 = f1;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b2c0;
                        continue;
                    }
                    r4 = r4 << 20;
                    f20 = r17;
                    r16 = r4 + r16;
                    f21 = r16;
                case 0x4b294:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f20 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b2c0:
                    r4 = r4 << 20;
                    f0 = r3;
                    r2 = r2 - r4;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4b294;
                    continue;
                case 0x4b400:
                    pc=0x4b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b400() throws ExecutionException { /* 0x4b400 - 0x4b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b400:
                    r2 = r4 < 24 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b434;
                        continue;
                    }
                    f0 = readPages[(r28+-32604)>>>12][((r28+-32604)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32608)>>>12][((r28+-32608)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                case 0x4b41c:
                    r4 = r4 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b41c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b434:
                    r2 = 6 << 16;
                    r2 = r2 + 5616;
                    r4 = r4 << 3;
                    r4 = r4 + r2;
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b600:
                    pc=0x4b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b600() throws ExecutionException { /* 0x4b600 - 0x4b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b600:
                    r7 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    r2 = r6 + 20;
                    r8 = r5 >> 5;
                    r7 = r7 << 2;
                    r8 = r8 + 1;
                    r7 = r2 + r7;
                    r8 = r8 << 2;
                    r3 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r4 + r8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b67c;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x4b634:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b634;
                        continue;
                    }
                    r2 = r7 - r6;
                    r2 = r2 + -21;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r4 = r4 + r2;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b688;
                        continue;
                    }
                case 0x4b674:
                    r4 = r4 + 4;
                    writePages[(r4+-4)>>>12][((r4+-4)>>>2)&0x3ff] = r0;
                case 0x4b67c:
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b674;
                        continue;
                    }
                case 0x4b688:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b800:
                    pc=0x4b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b800() throws ExecutionException { /* 0x4b800 - 0x4ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b800:
                    r3 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r4 + 20;
                    r4 = r3 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b874;
                        continue;
                    }
                    r3 = r3 << 2;
                    r3 = r6 + r3;
                case 0x4b820:
                    r2 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b868;
                        continue;
                    }
                    r2 = r3 + -4;
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b85c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4b8ac;
                    continue;
                case 0x4b848:
                    r2 = r2 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b8ac;
                        continue;
                    }
                case 0x4b85c:
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b848;
                        continue;
                    }
                case 0x4b868:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b874:
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b8b8;
                        continue;
                    }
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r3 = r6 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b820;
                        continue;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r2 >>> (r5&0x1f);
                    r5 = r4 << (r5&0x1f);
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b820;
                        continue;
                    }
                case 0x4b8ac:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4b8b8:
                    r2 = r2 << 2;
                    r3 = r6 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4b820;
                    continue;
                case 0x4ba00:
                    pc=0x4ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ba00() throws ExecutionException { /* 0x4ba00 - 0x4bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ba00:
                    r4 = f13;
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r3 = r3 & r4;
                    r5 = f12;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba40;
                        continue;
                    }
                    r2 = 65520 << 16;
                    r2 = r3 + r2;
                    r6 = 32736 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba54;
                        continue;
                    }
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ba40:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r0 + 3;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ba54:
                    r2 = 16 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba70;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ba70:
                    r2 = 32752 << 16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba88;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ba88:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4bc00:
                    pc=0x4bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4bc00() throws ExecutionException { /* 0x4bc00 - 0x4be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4bc00:
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bc34;
                        continue;
                    }
                case 0x4bc1c:
                    r2 = r0 + r0;
                case 0x4bc20:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4bc34:
                    r5 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x4bc40;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x4bc40:
                    writePages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bc80;
                        continue;
                    }
                    r3 = r0 + r0;
                    r4 = r0 + 128;
                    /* Next insn is delay slot */ 
                    pc=0x4bc64;
                    continue;
                case 0x4bc5c:
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                case 0x4bc64:
                    r2 = r2 + r3;
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4bc5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4bc1c;
                    continue;
                case 0x4bc80:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4bc20;
                    continue;
                case 0x4be00:
                    pc=0x4be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4be00() throws ExecutionException { /* 0x4be00 - 0x4c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4be00:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4be50;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4be70;
                        continue;
                    }
                case 0x4be2c:
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r6;
                case 0x4be3c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4be50:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4be70:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x4be80;
                    pc=0x4bc00;
                    run_4bc00(); return;
                case 0x4be80:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4be9c;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4be2c;
                    continue;
                case 0x4be9c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4be3c;
                    continue;
                case 0x4c000:
                    pc=0x4c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c000() throws ExecutionException { /* 0x4c000 - 0x4c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c000:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0f0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0c0;
                        continue;
                    }
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0c0;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0b4;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4c090;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x4c074;
                    return;
                case 0x4c074:
                    r2 = r0 + r0;
                case 0x4c078:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c090:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c0b4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4c078;
                    continue;
                case 0x4c0c0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4c0cc;
                    pc=0x36a20;
                    run_36a00(); return;
                case 0x4c0cc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x369e0;
                    run_36800(); return;
                case 0x4c0f0:
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4c078;
                    continue;
                case 0x4c200:
                    pc=0x4c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c200() throws ExecutionException { /* 0x4c200 - 0x4c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c200:
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2e0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2bc;
                        continue;
                    }
                case 0x4c228:
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2b0;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4c298;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4c280;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x4c268;
                    return;
                case 0x4c268:
                    r2 = r0 + r0;
                case 0x4c26c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c280:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c298:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c2b0:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4c26c;
                    continue;
                case 0x4c2bc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x4c2c8;
                    pc=0x4bc00;
                    run_4bc00(); return;
                case 0x4c2c8:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2ec;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4c228;
                    continue;
                case 0x4c2e0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4c2ec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4c26c;
                    continue;
                case 0x4c400:
                    pc=0x4c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c400() throws ExecutionException { /* 0x4c400 - 0x4c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4c000;
                    run_4c000(); return;
                case 0x4c600:
                    pc=0x4c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c600() throws ExecutionException { /* 0x4c600 - 0x4c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4be00;
                    run_4be00(); return;
                case 0x4c800:
                    pc=0x4c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c800() throws ExecutionException { /* 0x4c800 - 0x4ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c800:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4bc00;
                    run_4bc00(); return;
                case 0x4ca00:
                    pc=0x4ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ca00() throws ExecutionException { /* 0x4ca00 - 0x4cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ca00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4c200;
                    run_4c200(); return;
                case 0x4cc00:
                    pc=0x4cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4cc00() throws ExecutionException { /* 0x4cc00 - 0x4ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4cc00:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ccf4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cca4;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4cc6c;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x4cc6c:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cce4;
                        continue;
                    }
                case 0x4cc78:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cc8c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4cc8c:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4cca4:
                    r2 = r6 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4ccd8;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x4ccd8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cc78;
                        continue;
                    }
                case 0x4cce4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4cc78;
                    continue;
                case 0x4ccf4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4cc8c;
                    continue;
                case 0x4ce00:
                    pc=0x4ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ce00() throws ExecutionException { /* 0x4ce00 - 0x4d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ce00:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    r17 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cee8;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cea0;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4ce68;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x4ce68:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ced8;
                        continue;
                    }
                case 0x4ce74:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ce88;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4ce88:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4cea0:
                    r2 = r5 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4cecc;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x4cecc:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ce74;
                        continue;
                    }
                case 0x4ced8:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4ce74;
                    continue;
                case 0x4cee8:
                    r2 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ce88;
                    continue;
                case 0x4d000:
                    pc=0x4d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d000() throws ExecutionException { /* 0x4d000 - 0x4d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d000:
                    r29 = r29 + -136;
                    r3 = r0 + 516;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    r16 = r5 + r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r31=0x4d030;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4d030:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + 6656;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    r6 = r16 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4d070;
                    pc=0x50200;
                    run_50200(); return;
                case 0x4d070:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d200:
                    pc=0x4d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d200() throws ExecutionException { /* 0x4d200 - 0x4d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d200:
                    r29 = r29 + -144;
                    r2 = r0 + 516;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x4d234;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4d234:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + 6656;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r16 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4d274;
                    pc=0x50200;
                    run_50200(); return;
                case 0x4d274:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r16 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d400:
                    pc=0x4d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d400() throws ExecutionException { /* 0x4d400 - 0x4d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d400:
                    r2 = r4 + r0;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d434;
                    continue;
                case 0x4d410:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5cc;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r6 + -1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5d4;
                        continue;
                    }
                case 0x4d434:
                    r7 = r5 & 3;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d410;
                        continue;
                    }
                    r4 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r12 = r6 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5f8;
                        continue;
                    }
                    r6 = r6 & 3;
                    r12 = r12 - r6;
                    /* Next insn is delay slot */ 
                    pc=0x4d494;
                    continue;
                case 0x4d460:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4c0;
                        continue;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4c8;
                        continue;
                    }
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4d0;
                        continue;
                    }
                    r3 = r3 + 4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5f8;
                        continue;
                    }
                    r12 = r7 + r0;
                case 0x4d494:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r7 = r12 + -4;
                    r5 = r5 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d460;
                        continue;
                    }
                    r7 = r12 + -3;
                    r3 = r3 + -1;
                case 0x4d4c0:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x4d4c8:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x4d4d0:
                    r6 = r7 + r6;
                    r3 = r3 + 4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5c4;
                        continue;
                    }
                    r4 = r3 & 3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d500;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4d51c;
                    continue;
                case 0x4d4f4:
                    r5 = r3 & 3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d51c;
                        continue;
                    }
                case 0x4d500:
                    r3 = r3 + 1;
                    r6 = r6 + -1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4f4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d51c:
                    r4 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d668;
                        run_4d600(); return;
                    }
                    r5 = r3 + r0;
                    r7 = r6 + r0;
                case 0x4d530:
                    r7 = r7 + -16;
                    r5 = r5 + 16;
                    r8 = (r7&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r5+-16)>>>12][((r5+-16)>>>2)&0x3ff] = r0;
                    writePages[(r5+-12)>>>12][((r5+-12)>>>2)&0x3ff] = r0;
                    writePages[(r5+-8)>>>12][((r5+-8)>>>2)&0x3ff] = r0;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d530;
                        continue;
                    }
                    r5 = r6 + -16;
                    r5 = r5 >>> 4;
                    r5 = r5 + 1;
                    r5 = r5 << 4;
                    r4 = r6 & 15;
                    r3 = r3 + r5;
                case 0x4d56c:
                    r5 = (r4&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d588;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r0;
                    r4 = r4 + -8;
                    r3 = r3 + 8;
                case 0x4d588:
                    r5 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5a0;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r4 + -4;
                    r3 = r3 + 4;
                case 0x4d5a0:
                    r5 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5b8;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 + -2;
                    r3 = r3 + 2;
                case 0x4d5b8:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5c4;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4d5c4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d5cc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d5d4:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5c4;
                        continue;
                    }
                case 0x4d5e0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d5f8:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5c4;
                        continue;
                    }
                case 0x4d600:
                    pc=0x4d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d600() throws ExecutionException { /* 0x4d600 - 0x4d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d600:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r8 = r5 + 1;
                    r7 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d640;
                        continue;
                    }
                case 0x4d620:
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4d660;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d620;
                        continue;
                    }
                case 0x4d640:
                    if(r6 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5c4;
                        run_4d400(); return;
                    }
                case 0x4d648:
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4d648;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d660:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d668:
                    r4 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d56c;
                    run_4d400(); return;
                case 0x4d800:
                    pc=0x4d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d800() throws ExecutionException { /* 0x4d800 - 0x4da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d800:
                    r12 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d814;
                    continue;
                case 0x4d810:
                    r2 = r3 + r0;
                case 0x4d814:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d810;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9cc;
                        continue;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9e0;
                        continue;
                    }
                    r25 = r0 + r0;
                case 0x4d854:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d97c;
                        continue;
                    }
                    r24 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x4d874;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4d874:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                case 0x4d880:
                    r10 = r0 + r0;
                    r2 = r0 + r0;
                    r14 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d8dc;
                    continue;
                case 0x4d894:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d91c;
                        continue;
                    }
                case 0x4d8a4:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d958;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d958;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x4d94c;
                        continue;
                    }
                case 0x4d8c0:
                    { long hilo = (long)(r2) * ((long)r15); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x4d8d0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x4d8dc:
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r11 = r9 & 4;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d894;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d91c;
                        continue;
                    }
                    if(r9 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x4d964;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x4d910:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8a4;
                        continue;
                    }
                case 0x4d91c:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9b8;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9ac;
                        continue;
                    }
                case 0x4d92c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d974;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d940;
                        continue;
                    }
                    r5 = r3 + -1;
                case 0x4d940:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d94c:
                    r9 = r24 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8c0;
                        continue;
                    }
                case 0x4d958:
                    r10 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4d8d0;
                    continue;
                case 0x4d964:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x4d910;
                    continue;
                case 0x4d974:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d97c:
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9f4;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da50;
                        run_4da00(); return;
                    }
                    r13 = 6553 << 16;
                    r24 = r0 + 5;
                    r13 = r13 | 39321;
                    r15 = r0 + 10;
                    r7 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x4d880;
                    continue;
                case 0x4d9ac:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d92c;
                    continue;
                case 0x4d9b8:
                    r2 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4d92c;
                    continue;
                case 0x4d9cc:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d854;
                    continue;
                case 0x4d9e0:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d854;
                    continue;
                case 0x4d9f4:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                case 0x4da00:
                    pc=0x4da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4da00() throws ExecutionException { /* 0x4da00 - 0x4dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4da00:
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4da2c;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da50;
                        continue;
                    }
                    r13 = 8191 << 16;
                    r24 = r0 + 7;
                    r13 = r13 | 65535;
                    r15 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4d880;
                    run_4d800(); return;
                case 0x4da2c:
                    r13 = 4095 << 16;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 15;
                    r3 = r3 + 2;
                    r13 = r13 | 65535;
                    r15 = r0 + 16;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d880;
                    run_4d800(); return;
                case 0x4da50:
                    r13 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x4da60;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4da60:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x4d880;
                    run_4d800(); return;
                case 0x4dc00:
                    pc=0x4dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4dc00() throws ExecutionException { /* 0x4dc00 - 0x4de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4dc00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d800;
                    run_4d800(); return;
                case 0x4de00:
                    pc=0x4de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4de00() throws ExecutionException { /* 0x4de00 - 0x4e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4de00:
                    r29 = r29 + -304;
                    writePages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r22;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r4;
                    r22 = r5 + r0;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r6;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r7;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r30;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r23;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r21;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r19;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r18;
                    writePages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff] = r17;
                    writePages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x4de44;
                    pc=0x48c00;
                    run_48c00(); return;
                case 0x4de44:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4de5c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4de5c:
                    writePages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de84;
                        continue;
                    }
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa64;
                        run_4fa00(); return;
                    }
                case 0x4de84:
                    r21 = r29 + 40;
                    r2 = 6 << 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r21;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r0;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r0;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r0;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    r19 = r2 + 6188;
                case 0x4deb8:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e5a4;
                        run_4e400(); return;
                    }
                case 0x4ded0:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4def0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4df5c;
                    continue;
                case 0x4dee8:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4df04;
                        continue;
                    }
                case 0x4def0:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dee8;
                        continue;
                    }
                case 0x4df04:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df5c;
                        continue;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e004;
                        run_4e000(); return;
                    }
                    r8 = r8 + 8;
                case 0x4df4c:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r3;
                case 0x4df5c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e02c;
                        run_4e000(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x4df8c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x4df94:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb2c;
                        run_4ea00(); return;
                    }
                    r4 = 6 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 5816;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4dfc4:
                    r17 = r17 | 16;
                case 0x4dfc8:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    continue;
                case 0x4dfd4:
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb1c;
                        run_4ea00(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                case 0x4dff4:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    continue;
                case 0x4e000:
                    pc=0x4e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e000() throws ExecutionException { /* 0x4e000 - 0x4e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e000:
                case 0x4e004:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4e018;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4e018:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        continue;
                    }
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df4c;
                    run_4de00(); return;
                case 0x4e02c:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4e050;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4e050:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e09c;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x4e068:
                    r31 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r30 = readPages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff];
                    r23 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r22 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r21 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r20 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r19 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r18 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r17 = readPages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff];
                    r16 = readPages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff];
                    r29 = r29 + 304;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e09c:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4e068;
                    continue;
                case 0x4e0a8:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    run_4de00(); return;
                case 0x4e0b8:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fc0c;
                        run_4fc00(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fae0;
                        run_4fa00(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x4e0f8;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x4e0f8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4feac;
                        run_4fe00(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e11c;
                        continue;
                    }
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                case 0x4e11c:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fafc;
                        run_4fa00(); return;
                    }
                case 0x4e12c:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                case 0x4e140:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e158;
                        continue;
                    }
                case 0x4e148:
                    r2 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                case 0x4e158:
                    r4 = r17 & 2;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e178;
                        continue;
                    }
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                case 0x4e178:
                    r2 = r17 & 132;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb50;
                        run_4ea00(); return;
                    }
                    r4 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb50;
                        run_4ea00(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb48;
                        run_4fa00(); return;
                    }
                    r4 = r20 + r0;
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r16;
                    r20 = r17 + r0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e1ec;
                    continue;
                case 0x4e1d8:
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e248;
                        run_4e200(); return;
                    }
                case 0x4e1ec:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                case 0x4e200:
                    pc=0x4e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e200() throws ExecutionException { /* 0x4e200 - 0x4e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e200:
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e1d8;
                        run_4e000(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4e224;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4e224:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e1ec;
                        run_4e000(); return;
                    }
                case 0x4e248:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r4 + r0;
                case 0x4e258:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f21c;
                        run_4f200(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x4e288:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e2c4;
                        continue;
                    }
                    r3 = r29 + 182;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f050;
                        run_4f000(); return;
                    }
                    r8 = r8 + 8;
                case 0x4e2c4:
                    r3 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e308;
                        continue;
                    }
                    r3 = r29 + 180;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f07c;
                        run_4f000(); return;
                    }
                    r8 = r8 + 8;
                case 0x4e308:
                    r4 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4eebc;
                        run_4ee00(); return;
                    }
                case 0x4e318:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e414;
                        run_4e400(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6c0;
                        run_4f600(); return;
                    }
                    r5 = 6 << 16;
                    r23 = r5 + 6172;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r30 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e37c;
                    continue;
                case 0x4e368:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e3d8;
                        continue;
                    }
                case 0x4e37c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e368;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4e3b4;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4e3b4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e37c;
                        continue;
                    }
                case 0x4e3d8:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x4e3ec:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                case 0x4e400:
                    pc=0x4e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e400() throws ExecutionException { /* 0x4e400 - 0x4e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e400:
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f024;
                        run_4f000(); return;
                    }
                    r8 = r8 + 8;
                case 0x4e414:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed50;
                        run_4ec00(); return;
                    }
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec54;
                        run_4ec00(); return;
                    }
                case 0x4e44c:
                    r8 = r8 + 8;
                case 0x4e450:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e550;
                        continue;
                    }
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e550;
                        continue;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fbfc;
                        run_4fa00(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    r18 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4e4ac;
                    continue;
                case 0x4e498:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e508;
                        continue;
                    }
                case 0x4e4ac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e498;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4e4e4;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4e4e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e4ac;
                        continue;
                    }
                case 0x4e508:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e550;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4e544;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4e544:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x4e550:
                    r3 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e56c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x4e56c:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec80;
                        run_4ec00(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                case 0x4e58c:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ded0;
                        run_4de00(); return;
                    }
                case 0x4e5a4:
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4df5c;
                    run_4de00(); return;
                case 0x4e5b0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dfc8;
                        run_4de00(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    run_4de00(); return;
                case 0x4e5c8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x50104;
                        run_50000(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e61c;
                        run_4e600(); return;
                    }
                case 0x4e5ec:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                case 0x4e600:
                    pc=0x4e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e600() throws ExecutionException { /* 0x4e600 - 0x4e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e600:
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e5ec;
                        run_4e400(); return;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa54;
                        run_4fa00(); return;
                    }
                case 0x4e61c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df94;
                    run_4de00(); return;
                case 0x4e628:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    run_4de00(); return;
                case 0x4e638:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x4e640:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e640;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4df94;
                    run_4de00(); return;
                case 0x4e670:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eaec;
                        run_4ea00(); return;
                    }
                case 0x4e688:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x4e6a4:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e6b4;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x4e6b4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecac;
                        run_4ec00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecac;
                        run_4ec00(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0d0;
                        run_4f000(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0d0;
                        run_4f000(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r16 = r29 + 143;
                case 0x4e6ec:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e704;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x4e704:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e140;
                    run_4e000(); return;
                case 0x4e714:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eaa8;
                        run_4ea00(); return;
                    }
                case 0x4e72c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    continue;
                case 0x4e750:
                    r2 = 6 << 16;
                    r2 = r2 + 672;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e990;
                        run_4e800(); return;
                    }
                case 0x4e774:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x4e788:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0e0;
                        run_4f000(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0e0;
                        run_4f000(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    continue;
                case 0x4e7c0:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e92c;
                        run_4e800(); return;
                    }
                case 0x4e7d8:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x4e7ec:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e950;
                        run_4e800(); return;
                    }
                case 0x4e7f4:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    continue;
                case 0x4e800:
                    pc=0x4e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e800() throws ExecutionException { /* 0x4e800 - 0x4ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e800:
                case 0x4e804:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    run_4de00(); return;
                case 0x4e814:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x4e834:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=0x4e158;
                    run_4e000(); return;
                case 0x4e85c:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    run_4de00(); return;
                case 0x4e86c:
                    r2 = r17 & 16;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f36c;
                        run_4f200(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f36c;
                        run_4f200(); return;
                    }
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4deb8;
                    run_4de00(); return;
                case 0x4e8bc:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r3 = 6 << 16;
                    r3 = r3 + 692;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    run_4e600(); return;
                case 0x4e910:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e7d8;
                        run_4e600(); return;
                    }
                case 0x4e92c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f66c;
                        run_4f600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e7f4;
                        run_4e600(); return;
                    }
                case 0x4e950:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    run_4e600(); return;
                case 0x4e96c:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = 6 << 16;
                    r3 = r3 + 692;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e774;
                        run_4e600(); return;
                    }
                case 0x4e990:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f658;
                        run_4f600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e788;
                    run_4e600(); return;
                case 0x4e9b4:
                    r2 = r17 & 8;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f644;
                        run_4f600(); return;
                    }
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x4e9d8:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                case 0x4ea00:
                    pc=0x4ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ea00() throws ExecutionException { /* 0x4ea00 - 0x4ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ea00:
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4ea10;
                    pc=0x4ba00;
                    run_4ba00(); return;
                case 0x4ea10:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4f5e4;
                        run_4f400(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4fce0;
                        run_4fc00(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x4ea48:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa44;
                        run_4fa00(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 4728;
                case 0x4ea5c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e140;
                    run_4e000(); return;
                case 0x4ea84:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    run_4de00(); return;
                case 0x4ea94:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e72c;
                        run_4e600(); return;
                    }
                case 0x4eaa8:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f680;
                        run_4f600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    run_4e600(); return;
                case 0x4ead8:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e688;
                        run_4e600(); return;
                    }
                case 0x4eaec:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6a0;
                        run_4f600(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    run_4e600(); return;
                case 0x4eb1c:
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    run_4de00(); return;
                case 0x4eb2c:
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e02c;
                        run_4e000(); return;
                    }
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4e834;
                    run_4e800(); return;
                case 0x4eb50:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4e288;
                    run_4e200(); return;
                case 0x4eb5c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4efcc;
                        run_4ee00(); return;
                    }
                case 0x4eb80:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f534;
                        run_4f400(); return;
                    }
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r8 = r8 + 8;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f588;
                        run_4f400(); return;
                    }
                case 0x4ebcc:
                    r8 = r8 + 8;
                case 0x4ebd0:
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4f24c;
                        run_4f200(); return;
                    }
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                case 0x4ec00:
                    pc=0x4ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ec00() throws ExecutionException { /* 0x4ec00 - 0x4ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ec00:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x4ec0c:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eff4;
                        run_4ee00(); return;
                    }
                case 0x4ec24:
                    r8 = r8 + 8;
                case 0x4ec28:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r29 + 164;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x4ec3c:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e44c;
                        run_4e400(); return;
                    }
                case 0x4ec54:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4ec68;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4ec68:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e450;
                    run_4e400(); return;
                case 0x4ec80:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4ec94;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4ec94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e58c;
                    run_4e400(); return;
                case 0x4ecac:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0a8;
                        run_4f000(); return;
                    }
                    r6 = r29 + 144;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed00;
                        continue;
                    }
                    r5 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                case 0x4ecd0:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecd0;
                        continue;
                    }
                case 0x4ecf0:
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4e6ec;
                    run_4e600(); return;
                case 0x4ed00:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed00;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecf0;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecf0;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4e6ec;
                    run_4e600(); return;
                case 0x4ed50:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb5c;
                        run_4ea00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0f4;
                        run_4f000(); return;
                    }
                    r3 = 6 << 16;
                    r3 = r3 + 804;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6d4;
                        run_4f600(); return;
                    }
                    r8 = r8 + 8;
                case 0x4edb8:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eddc;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e450;
                        run_4e400(); return;
                    }
                case 0x4eddc:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                case 0x4ee00:
                    pc=0x4ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ee00() throws ExecutionException { /* 0x4ee00 - 0x4f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ee00:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa18;
                        run_4fa00(); return;
                    }
                    r8 = r8 + 8;
                case 0x4ee18:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e450;
                        run_4e400(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f308;
                        run_4f200(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 6172;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4ee68;
                    continue;
                case 0x4ee54:
                    r8 = r8 + 8;
                case 0x4ee58:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f314;
                        run_4f200(); return;
                    }
                case 0x4ee68:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee54;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4eea0;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4eea0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ee58;
                    continue;
                case 0x4eebc:
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e318;
                        run_4e200(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd2c;
                        run_4fc00(); return;
                    }
                    r4 = 6 << 16;
                    r23 = r4 + 6172;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r7 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ef24;
                    continue;
                case 0x4ef10:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef88;
                        continue;
                    }
                case 0x4ef24:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef10;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4ef60;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4ef60:
                    r7 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef24;
                        continue;
                    }
                case 0x4ef88:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x4ef9c:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f5b8;
                        run_4f400(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4e318;
                    run_4e200(); return;
                case 0x4efcc:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb80;
                        run_4ea00(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec24;
                        run_4ec00(); return;
                    }
                case 0x4eff4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                case 0x4f000:
                    pc=0x4f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f000() throws ExecutionException { /* 0x4f000 - 0x4f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f000:
                    /* Next insn is delay slot */ 
                    r31=0x4f008;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f008:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ec28;
                    run_4ec00(); return;
                case 0x4f024:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f038;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f038:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e414;
                    run_4e400(); return;
                case 0x4f050:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f064;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f064:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e2c4;
                    run_4e200(); return;
                case 0x4f07c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f090;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f090:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e308;
                    run_4e200(); return;
                case 0x4f0a8:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f328;
                        run_4f200(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r16 = r29 + 143;
                    /* Next insn is delay slot */ 
                    pc=0x4e6ec;
                    run_4e600(); return;
                case 0x4f0d0:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r0;
                    r16 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=0x4e6ec;
                    run_4e600(); return;
                case 0x4f0e0:
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    run_4e600(); return;
                case 0x4f0f4:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f700;
                        run_4f600(); return;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f124;
                        continue;
                    }
                    r20 = r4 + r0;
                case 0x4f124:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f158;
                        continue;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb68;
                        run_4fa00(); return;
                    }
                    r8 = r8 + 8;
                case 0x4f158:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb5c;
                        run_4fa00(); return;
                    }
                case 0x4f160:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f3dc;
                        run_4f200(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50094;
                        run_50000(); return;
                    }
                    r5 = 6 << 16;
                    r23 = r5 + 6172;
                    r4 = r23 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r30 = r0 + 16;
                    r18 = r17 + r0;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f1c8;
                    continue;
                case 0x4f1b4:
                    r8 = r8 + 8;
                case 0x4f1b8:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f39c;
                        run_4f200(); return;
                    }
                case 0x4f1c8:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f1b4;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f200;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f200:
                    pc=0x4f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f200() throws ExecutionException { /* 0x4f200 - 0x4f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f200:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f1b8;
                    run_4f000(); return;
                case 0x4f21c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f230;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f230:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e288;
                    run_4e200(); return;
                case 0x4f24c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec28;
                        run_4ec00(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50084;
                        run_50000(); return;
                    }
                    r4 = 6 << 16;
                    r23 = r4 + 6172;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4f298;
                    continue;
                case 0x4f284:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f2f4;
                        continue;
                    }
                case 0x4f298:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f284;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f2d0;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f2d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f298;
                        continue;
                    }
                case 0x4f2f4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x4ec0c;
                    run_4ec00(); return;
                case 0x4f308:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 6172;
                case 0x4f314:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x4ec3c;
                    run_4ec00(); return;
                case 0x4f328:
                    r6 = r29 + 144;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x4f334:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x4f340;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4f340:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f334;
                        continue;
                    }
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4e6ec;
                    run_4e600(); return;
                case 0x4f36c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4deb8;
                    run_4de00(); return;
                case 0x4f39c:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r17 = r18 + r0;
                    r18 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x4f3b4:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fc50;
                        run_4fc00(); return;
                    }
                    r8 = r8 + 8;
                case 0x4f3dc:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f408;
                        run_4f400(); return;
                    }
                    r4 = r17 & 1;
                case 0x4f400:
                    pc=0x4f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f400() throws ExecutionException { /* 0x4f400 - 0x4f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f400:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f43c;
                        continue;
                    }
                case 0x4f408:
                    r4 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r5 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fbcc;
                        run_4fa00(); return;
                    }
                    r8 = r8 + 8;
                case 0x4f43c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f45c;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x4f45c:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f490;
                        continue;
                    }
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fc7c;
                        run_4fc00(); return;
                    }
                    r8 = r8 + 8;
                case 0x4f490:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fcb4;
                        run_4fc00(); return;
                    }
                case 0x4f498:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e450;
                        run_4e400(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f308;
                        run_4f200(); return;
                    }
                    r5 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 6172;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4f4e0;
                    continue;
                case 0x4f4cc:
                    r8 = r8 + 8;
                case 0x4f4d0:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f314;
                        run_4f200(); return;
                    }
                case 0x4f4e0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4cc;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f518;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f518:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f4d0;
                    continue;
                case 0x4f534:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f548;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f548:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ebcc;
                        run_4ea00(); return;
                    }
                case 0x4f588:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f59c;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f59c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ebd0;
                    run_4ea00(); return;
                case 0x4f5b8:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f5cc;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f5cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e318;
                    run_4e200(); return;
                case 0x4f5e4:
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4f5f8;
                    pc=0x4ba00;
                    run_4ba00(); return;
                case 0x4f5f8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f834;
                        run_4f800(); return;
                    }
                case 0x4f600:
                    pc=0x4f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f600() throws ExecutionException { /* 0x4f600 - 0x4f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f600:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa94;
                        run_4fa00(); return;
                    }
                    r16 = 6 << 16;
                    r16 = r16 + 4736;
                case 0x4f618:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e140;
                    run_4e000(); return;
                case 0x4f644:
                    r2 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x4e9d8;
                    run_4e800(); return;
                case 0x4f658:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e788;
                    run_4e600(); return;
                case 0x4f66c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e7ec;
                    run_4e600(); return;
                case 0x4f680:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    run_4e600(); return;
                case 0x4f6a0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6a4;
                    run_4e600(); return;
                case 0x4f6c0:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 6172;
                    /* Next insn is delay slot */ 
                    pc=0x4e3ec;
                    run_4e200(); return;
                case 0x4f6d4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f6e8;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f6e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4edb8;
                    run_4ec00(); return;
                case 0x4f700:
                    r4 = 6 << 16;
                    r4 = r4 + 804;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4faa4;
                        run_4fa00(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x4f73c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f760;
                        continue;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f760;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e450;
                        run_4e400(); return;
                    }
                case 0x4f760:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fee0;
                        run_4fe00(); return;
                    }
                    r8 = r8 + 8;
                case 0x4f79c:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb30;
                        run_4fa00(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb94;
                        run_4fa00(); return;
                    }
                    r5 = 6 << 16;
                    r23 = r5 + 6172;
                    r20 = r0 + 16;
                    r30 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4f7e0;
                    continue;
                case 0x4f7cc:
                    r8 = r8 + 8;
                case 0x4f7d0:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb9c;
                        run_4fa00(); return;
                    }
                case 0x4f7e0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f7cc;
                        continue;
                    }
                case 0x4f800:
                    pc=0x4f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f800() throws ExecutionException { /* 0x4f800 - 0x4fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f800:
                    r4 = r30 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4f818;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4f818:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f7d0;
                    run_4f600(); return;
                case 0x4f834:
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fad4;
                        run_4fa00(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fecc;
                        run_4fe00(); return;
                    }
                case 0x4f854:
                    r2 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ff14;
                        run_4fe00(); return;
                    }
                    f0 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = f0;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = f1;
                case 0x4f87c:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd40;
                        run_4fc00(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd40;
                        run_4fc00(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ff3c;
                        run_4fe00(); return;
                    }
                    r5 = r30 + r0;
                case 0x4f8a4:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r5;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x4f8e4;
                    pc=0x45400;
                    run_45400(); return;
                case 0x4f8e4:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4f908;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4f914;
                        continue;
                    }
                case 0x4f908:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5006c;
                        run_50000(); return;
                    }
                case 0x4f914:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe4c;
                        run_4fe00(); return;
                    }
                case 0x4f924:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd20;
                        run_4fc00(); return;
                    }
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f980;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x4f960:
                    r3 = r2 + 1;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f960;
                        continue;
                    }
                case 0x4f980:
                    r2 = r2 - r16;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fcf4;
                        run_4fc00(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50180;
                        run_50000(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ffac;
                        run_4fe00(); return;
                    }
                case 0x4f9b4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ff48;
                        run_4fe00(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ff80;
                        run_4fe00(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50164;
                        run_50000(); return;
                    }
                case 0x4f9e4:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                case 0x4f9f0:
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fcc0;
                        run_4fc00(); return;
                    }
                case 0x4fa00:
                    pc=0x4fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fa00() throws ExecutionException { /* 0x4fa00 - 0x4fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fa00:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e140;
                    run_4e000(); return;
                case 0x4fa18:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4fa2c;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4fa2c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ee18;
                    run_4ee00(); return;
                case 0x4fa44:
                    r16 = 6 << 16;
                    r16 = r16 + 4724;
                    /* Next insn is delay slot */ 
                    pc=0x4ea5c;
                    run_4ea00(); return;
                case 0x4fa54:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df94;
                    run_4de00(); return;
                case 0x4fa64:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x4fa74;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x4fa74:
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5018c;
                        run_50000(); return;
                    }
                    r2 = r0 + 64;
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4de84;
                    run_4de00(); return;
                case 0x4fa94:
                    r16 = 6 << 16;
                    r16 = r16 + 4732;
                    /* Next insn is delay slot */ 
                    pc=0x4f618;
                    run_4f600(); return;
                case 0x4faa4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4fab8;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4fab8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f73c;
                    run_4f600(); return;
                case 0x4fad4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x4f854;
                    run_4f800(); return;
                case 0x4fae0:
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x4faec;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4faec:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e12c;
                        run_4e000(); return;
                    }
                case 0x4fafc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e12c;
                    run_4e000(); return;
                case 0x4fb08:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4fb1c;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4fb1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                case 0x4fb30:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4ec3c;
                    run_4ec00(); return;
                case 0x4fb48:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x4e258;
                    run_4e200(); return;
                case 0x4fb5c:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f160;
                    run_4f000(); return;
                case 0x4fb68:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4fb7c;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4fb7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f158;
                    run_4f000(); return;
                case 0x4fb94:
                    r4 = 6 << 16;
                    r23 = r4 + 6172;
                case 0x4fb9c:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb08;
                        continue;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4fb30;
                    continue;
                case 0x4fbcc:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4fbe0;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4fbe0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f43c;
                    run_4f400(); return;
                case 0x4fbfc:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                case 0x4fc00:
                    pc=0x4fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fc00() throws ExecutionException { /* 0x4fc00 - 0x4fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fc00:
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x4e508;
                    run_4e400(); return;
                case 0x4fc0c:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fc20;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x4fc20:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50078;
                        run_50000(); return;
                    }
                case 0x4fc2c:
                    r16 = 6 << 16;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r16 + 4740;
                    /* Next insn is delay slot */ 
                    pc=0x4e158;
                    run_4e000(); return;
                case 0x4fc50:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4fc64;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4fc64:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f3dc;
                    run_4f200(); return;
                case 0x4fc7c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4fc90;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4fc90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f490;
                    run_4f400(); return;
                case 0x4fcb4:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f498;
                    run_4f400(); return;
                case 0x4fcc0:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e148;
                    run_4e000(); return;
                case 0x4fce0:
                    r2 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x4ea48;
                    run_4ea00(); return;
                case 0x4fcf4:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd90;
                        continue;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fd90;
                        continue;
                    }
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4f9b4;
                    run_4f800(); return;
                case 0x4fd20:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f980;
                    run_4f800(); return;
                case 0x4fd2c:
                    r5 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 6172;
                    /* Next insn is delay slot */ 
                    pc=0x4ef9c;
                    run_4ee00(); return;
                case 0x4fd40:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x4fd7c;
                    pc=0x45400;
                    run_45400(); return;
                case 0x4fd7c:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4f914;
                    run_4f800(); return;
                case 0x4fd90:
                    r18 = r18 + -2;
                case 0x4fd94:
                    r2 = r2 + -1;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    addr=r29+164;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50134;
                        run_50000(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4fdb0:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ffd8;
                        run_4fe00(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+167;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+166;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 168;
                    r4 = r29 + 164;
                case 0x4fdd4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe20;
                        run_4fe00(); return;
                    }
                case 0x4fdf8:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                case 0x4fe00:
                    pc=0x4fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fe00() throws ExecutionException { /* 0x4fe00 - 0x50000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fe00:
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe3c;
                        continue;
                    }
                case 0x4fe14:
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f9f0;
                    run_4f800(); return;
                case 0x4fe20:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fdf8;
                        run_4fc00(); return;
                    }
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe14;
                        continue;
                    }
                case 0x4fe3c:
                    r2 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f9f0;
                    run_4f800(); return;
                case 0x4fe4c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe70;
                        continue;
                    }
                case 0x4fe5c:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4f924;
                    run_4f800(); return;
                case 0x4fe70:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4fe5c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4f924;
                    run_4f800(); return;
                case 0x4feac:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r30;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e140;
                    run_4e000(); return;
                case 0x4fecc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f854;
                        run_4f800(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4f854;
                    run_4f800(); return;
                case 0x4fee0:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4fef4;
                    pc=0x58200;
                    run_58200(); return;
                case 0x4fef4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e050;
                        run_4e000(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f79c;
                    run_4f600(); return;
                case 0x4ff14:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = r2;
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = r4;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4f87c;
                    run_4f800(); return;
                case 0x4ff3c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4f8a4;
                    run_4f800(); return;
                case 0x4ff48:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x500f4;
                        run_50000(); return;
                    }
                    r2 = r0 + 1;
                case 0x4ff5c:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ff9c;
                        continue;
                    }
                case 0x4ff74:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x4f9f0;
                    run_4f800(); return;
                case 0x4ff80:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ff74;
                        continue;
                    }
                case 0x4ff9c:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x4f9f0;
                    run_4f800(); return;
                case 0x4ffac:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x500cc;
                        run_50000(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x500a8;
                        run_50000(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x500a8;
                        run_50000(); return;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4f9f0;
                    run_4f800(); return;
                case 0x4ffd8:
                    r6 = r29 + 163;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x4ffe4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x4fff0;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x4fff0:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x50000:
                    pc=0x50000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50000() throws ExecutionException { /* 0x50000 - 0x50200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50000:
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ffe4;
                        run_4fe00(); return;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50170;
                        continue;
                    }
                    r2 = r29 + 166;
                    /* Next insn is delay slot */ 
                    pc=0x50040;
                    continue;
                case 0x5003c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x50040:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5003c;
                        continue;
                    }
                    r4 = r29 + 164;
                    r2 = r4 - r3;
                    r3 = r29 + 166;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4fdd4;
                    run_4fc00(); return;
                case 0x5006c:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4f980;
                    run_4f800(); return;
                case 0x50078:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4fc2c;
                    run_4fc00(); return;
                case 0x50084:
                    r5 = 6 << 16;
                    r23 = r5 + 6172;
                    /* Next insn is delay slot */ 
                    pc=0x4f2f4;
                    run_4f200(); return;
                case 0x50094:
                    r4 = 6 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 6172;
                    /* Next insn is delay slot */ 
                    pc=0x4f3b4;
                    run_4f200(); return;
                case 0x500a8:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f9f0;
                        run_4f800(); return;
                    }
                case 0x500c0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f9f0;
                    run_4f800(); return;
                case 0x500cc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50148;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50148;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4f9f0;
                    run_4f800(); return;
                case 0x500f4:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x4ff5c;
                    run_4fe00(); return;
                case 0x50104:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb1c;
                        run_4ea00(); return;
                    }
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4df8c;
                    run_4de00(); return;
                case 0x50134:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4fdb0;
                    run_4fc00(); return;
                case 0x50148:
                    r30 = r30 + 2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f9f0;
                        run_4f800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x500c0;
                    continue;
                case 0x50164:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f9e4;
                    run_4f800(); return;
                case 0x50170:
                    r2 = r29 + 166;
                    r4 = r29 + 164;
                    /* Next insn is delay slot */ 
                    pc=0x4fdd4;
                    run_4fc00(); return;
                case 0x50180:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4fd94;
                    run_4fc00(); return;
                case 0x5018c:
                    r3 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4e068;
                    run_4e000(); return;
                case 0x50200:
                    pc=0x50200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50200() throws ExecutionException { /* 0x50200 - 0x50400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50200:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -752;
                    writePages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff] = r30;
                    writePages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff] = r20;
                    writePages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff] = r16;
                    writePages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff] = r31;
                    writePages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff] = r23;
                    writePages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff] = r22;
                    writePages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff] = r21;
                    writePages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff] = r19;
                    writePages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff] = r18;
                    writePages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff] = f20;
                    writePages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff] = f21;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    r20 = r7 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5026c;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x5026c:
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r0;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r21 = r0 + r0;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r0;
                case 0x5027c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        run_50400(); return;
                    }
                case 0x50290:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r4 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5032c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50308;
                        continue;
                    }
                case 0x502c0:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5027c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x502c0;
                        continue;
                    }
                case 0x50308:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50318;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x50318:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5027c;
                        continue;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x502c0;
                    continue;
                case 0x5032c:
                    r3 = r0 + 37;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x504ec;
                        run_50400(); return;
                    }
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                case 0x50340:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 255;
                    r5 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5037c;
                        continue;
                    }
                    r5 = 6 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 6212;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x5037c:
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 1;
                    r3 = r3 & 3;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50398;
                        continue;
                    }
                case 0x50394:
                    r18 = r18 | 1;
                case 0x50398:
                    r2 = 5 << 16;
                    r2 = r2 + 31744;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x503b0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50574;
                        run_50400(); return;
                    }
                case 0x503c0:
                    r2 = r18 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50494;
                        run_50400(); return;
                    }
                case 0x503cc:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x506b8;
                        run_50600(); return;
                    }
                    r2 = r19 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x505f0;
                        run_50400(); return;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x507ec;
                        run_50600(); return;
                    }
                    r2 = r0 + 4;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50758;
                        run_50600(); return;
                    }
                    r2 = r23 + -1;
                case 0x50400:
                    pc=0x50400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50400() throws ExecutionException { /* 0x50400 - 0x50600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50400:
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50f08;
                        run_50e00(); return;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r0;
                case 0x50410:
                    r10 = r29 + 24;
                    r19 = r18 | 1920;
                    r3 = r0 + r0;
                    r18 = r0 + r0;
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r0;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r0;
                    r22 = r10 + r0;
                    r11 = r0 + -1921;
                case 0x50438:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r5 + -43;
                    r2 = r2 & 255;
                    r7 = (r2&0xffffffffL) < (79&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    r4 = 6 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 6696;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x5047c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5048c;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5048c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        continue;
                    }
                case 0x50494:
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x504ac;
                    continue;
                case 0x504a4:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x504ac:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x503cc;
                        run_50200(); return;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x504a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5047c;
                    continue;
                case 0x504ec:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5155c;
                        run_51400(); return;
                    }
                case 0x504fc:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r21 = r21 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50290;
                        run_50200(); return;
                    }
                case 0x50540:
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x505b4;
                    continue;
                case 0x5054c:
                    r18 = r18 | 1;
                case 0x50550:
                    r2 = 5 << 16;
                    r2 = r2 + -10240;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r0 + 8;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x503c0;
                        run_50200(); return;
                    }
                case 0x50574:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50584;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x50584:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x503c0;
                        run_50200(); return;
                    }
                case 0x5058c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x505b0;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        continue;
                    }
                case 0x505b0:
                    r2 = r0 + -1;
                case 0x505b4:
                    f20 = readPages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff];
                    r31 = readPages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff];
                    r30 = readPages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff];
                    r23 = readPages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff];
                    r22 = readPages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff];
                    r21 = readPages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff];
                    r20 = readPages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff];
                    r19 = readPages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff];
                    r18 = readPages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff];
                    r17 = readPages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff];
                    r16 = readPages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff];
                    f21 = readPages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff];
                    r29 = r29 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x505f0:
                    r2 = r0 + 1;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50758;
                        run_50600(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50608;
                        run_50600(); return;
                    }
                case 0x50600:
                    pc=0x50600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50600() throws ExecutionException { /* 0x50600 - 0x50800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50600:
                    r23 = r0 + -1;
                case 0x50608:
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e48;
                        run_50e00(); return;
                    }
                    r10 = r29 + 24;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                    r19 = r10 + r0;
                case 0x50624:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x506a4;
                        continue;
                    }
                case 0x50640:
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x506ac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50624;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50678;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x50678:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x506ac;
                        continue;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50640;
                        continue;
                    }
                case 0x506a4:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        run_50400(); return;
                    }
                case 0x506ac:
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x506b8:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x506c4;
                        continue;
                    }
                    r23 = r0 + -1;
                case 0x506c4:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5115c;
                        run_51000(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x511fc;
                        run_51000(); return;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                case 0x506e8:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x506ac;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x506ac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x506e8;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50740;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x50740:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x506ac;
                        continue;
                    }
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x506e8;
                    continue;
                case 0x50758:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50764;
                        continue;
                    }
                    r23 = r0 + 1;
                case 0x50764:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5104c;
                        run_51000(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51518;
                        run_51400(); return;
                    }
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x507b4;
                    continue;
                case 0x50788:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r2;
                    r23 = r23 - r2;
                    r2 = r3 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x507ac;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x507ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51504;
                        run_51400(); return;
                    }
                case 0x507b4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r2 < r23 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50788;
                        continue;
                    }
                    r2 = r2 - r23;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r23;
                    r8 = r2 + r23;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r8;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x507ec:
                    r2 = r23 + -1;
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e38;
                        run_50e00(); return;
                    }
                    r6 = r0 + r0;
                case 0x50800:
                    pc=0x50800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50800() throws ExecutionException { /* 0x50800 - 0x50a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50800:
                    r10 = r29 + 24;
                    r4 = 6 << 16;
                    r11 = r20 + r0;
                    r20 = r16 + r0;
                    r16 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r18 = r18 | 3456;
                    r8 = r0 + r0;
                    r19 = r10 + r0;
                    r7 = r0 + 512;
                    r22 = r4 + 7324;
                case 0x50828:
                    r5 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -43;
                    r2 = r2 & 255;
                    r9 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ccc;
                        run_50c00(); return;
                    }
                    r4 = 6 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 7012;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x5086c:
                    r2 = r3 + r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        continue;
                    }
                    r2 = r0 + -385;
                    r19 = r19 & r2;
                case 0x50880:
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r22 = r22 + 1;
                case 0x50888:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + -1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ab4;
                        run_50a00(); return;
                    }
                case 0x508a4:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50438;
                        run_50400(); return;
                    }
                case 0x508b4:
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50af4;
                        run_50a00(); return;
                    }
                case 0x508c4:
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51760;
                        run_51600(); return;
                    }
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5095c;
                        continue;
                    }
                    r2 = r18 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x516e0;
                        run_51600(); return;
                    }
                    r2 = r0 + 3;
                    r7 = r18 & 255;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5095c;
                        continue;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r16;
                    r23 = r22 + r0;
                    r16 = r7 + r0;
                    r18 = r10 + r0;
                case 0x50910:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50928;
                    pc=0x59800;
                    run_59800(); return;
                case 0x50928:
                    r3 = r16 + -1;
                    r2 = r23 + r21;
                    r16 = r3 & 255;
                    r4 = r2 - r22;
                    r2 = r16 << 24;
                    r2 = r2 >> 24;
                    r2 = r2 < 4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50910;
                        continue;
                    }
                    r16 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r10 = r18 + r0;
                    r21 = r4 + r0;
                    r22 = r23 + r0;
                case 0x5095c:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x509e4;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51720;
                        run_51600(); return;
                    }
                    addr=r22+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r0 + 101;
                    r23 = r22 + -1;
                    r7 = r21 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x509bc;
                        continue;
                    }
                    r2 = r0 + 69;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x509bc;
                        continue;
                    }
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x509ac;
                    pc=0x59800;
                    run_59800(); return;
                case 0x509ac:
                    addr=r22+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r23 = r22 + -2;
                    r7 = r21 + -2;
                case 0x509bc:
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x509d4;
                    pc=0x59800;
                    run_59800(); return;
                case 0x509d4:
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r22 = r23 + r0;
                case 0x509e4:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5027c;
                        run_50200(); return;
                    }
                    r4 = r19 & 1536;
                    r2 = r0 + 1024;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5157c;
                        run_51400(); return;
                    }
                case 0x50a00:
                    pc=0x50a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50a00() throws ExecutionException { /* 0x50a00 - 0x50c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50a00:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51454;
                        run_51400(); return;
                    }
                case 0x50a14:
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50a28;
                    pc=0x55c00;
                    run_55c00(); return;
                case 0x50a28:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51344;
                        run_51200(); return;
                    }
                case 0x50a38:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f21;
                case 0x50a48:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x50a60:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5086c;
                        run_50800(); return;
                    }
                    r2 = r0 + -129;
                    r5 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r19 = r19 & r2;
                    r2 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50888;
                        run_50800(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x508a4;
                        run_50800(); return;
                    }
                case 0x50ab4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r3;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x50ad0;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x50ad0:
                    r3 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50438;
                        run_50400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x508b4;
                    run_50800(); return;
                case 0x50af4:
                    r2 = r0 + -257;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x508c4;
                    run_50800(); return;
                case 0x50b04:
                    r2 = r19 & 512;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = r0 + -641;
                    r19 = r19 & r4;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50b28:
                    r2 = r19 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    r2 = r0 + -129;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50b44:
                    r2 = r0 + 7;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    r18 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50b5c:
                    r2 = r0 + 6;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    r18 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50b74:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x512ac;
                        run_51200(); return;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51390;
                        run_51200(); return;
                    }
                case 0x50b8c:
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50ba4;
                        continue;
                    }
                    r2 = r0 + 4;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                case 0x50ba4:
                    r18 = r18 + 1;
                    r18 = r18 << 24;
                    r18 = r18 >> 24;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50bb8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x512c4;
                        run_51200(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50af4;
                        continue;
                    }
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x508c4;
                        run_50800(); return;
                    }
                    r19 = r19 & r11;
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50bf0:
                    r2 = r0 + 2;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    r18 = r0 + 3;
                case 0x50c00:
                    pc=0x50c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50c00() throws ExecutionException { /* 0x50c00 - 0x50e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50c00:
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50c08:
                    r2 = r19 & 1280;
                    r4 = r0 + 1024;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x50c34;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508c4;
                        run_50800(); return;
                    }
                case 0x50c34:
                    r2 = r19 & 512;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c54;
                        continue;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r2 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r22;
                    r4 = r4 - r2;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r4;
                case 0x50c54:
                    r19 = r19 & r11;
                    r19 = r19 | 384;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50c68:
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x508b4;
                        run_50800(); return;
                    }
                    r3 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x50c80:
                    r2 = r18 & 1536;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x50ccc;
                        continue;
                    }
                    r2 = r0 + -513;
                    r18 = r18 & r2;
                    r18 = r18 | 1280;
                    r16 = r0 + 16;
                case 0x50c9c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r19 = r19 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50dc4;
                        continue;
                    }
                case 0x50cb8:
                    r5 = r5 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r5;
                case 0x50cc0:
                    r23 = r23 + -1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50828;
                        run_50800(); return;
                    }
                case 0x50ccc:
                    r2 = r18 & 256;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r16;
                    r16 = r20 + r0;
                    r20 = r11 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50cf8;
                        continue;
                    }
                    r2 = ((r10 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51420;
                        run_51400(); return;
                    }
                case 0x50cf0:
                    if(r10 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        run_50400(); return;
                    }
                case 0x50cf8:
                    r2 = r18 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x512e4;
                        run_51200(); return;
                    }
                case 0x50d04:
                    r10 = r19 - r10;
                    r23 = r10 + r8;
                    r21 = r21 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x50d18:
                    r2 = r16 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ccc;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50c9c;
                    continue;
                case 0x50d34:
                    r2 = r18 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ccc;
                        continue;
                    }
                    r2 = r0 + -129;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50c9c;
                    continue;
                case 0x50d50:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50c9c;
                    continue;
                case 0x50d6c:
                    r2 = r18 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50c9c;
                        continue;
                    }
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50d88;
                        continue;
                    }
                    r18 = r18 | 512;
                    r16 = r0 + 8;
                case 0x50d88:
                    r2 = r18 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51380;
                        run_51200(); return;
                    }
                    r2 = r0 + -897;
                    r18 = r18 & r2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50dac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r23 = r23 + 1;
                case 0x50dac:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50cb8;
                        continue;
                    }
                case 0x50dc4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r6;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x50de8;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x50de8:
                    r6 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50cc0;
                        continue;
                    }
                case 0x50e00:
                    pc=0x50e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50e00() throws ExecutionException { /* 0x50e00 - 0x51000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50e00:
                    /* Next insn is delay slot */ 
                    pc=0x50ccc;
                    run_50c00(); return;
                case 0x50e0c:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r16 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ccc;
                        run_50c00(); return;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50c9c;
                    run_50c00(); return;
                case 0x50e38:
                    r6 = r23 + -349;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x50800;
                    run_50800(); return;
                case 0x50e48:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r19 = r20 + 4;
                    r22 = r10 + r0;
                    r20 = r18 + r0;
                case 0x50e5c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r22 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50edc;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50edc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e5c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50ecc;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x50ecc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e5c;
                        continue;
                    }
                    if(r18 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        run_50400(); return;
                    }
                case 0x50edc:
                    r18 = r20 - r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        run_50400(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x50f08:
                    r23 = r23 + -349;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r23;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x50410;
                    run_50400(); return;
                case 0x50f1c:
                    r2 = 5 << 16;
                    r2 = r2 + 31744;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x503b0;
                    run_50200(); return;
                case 0x50f38:
                    r18 = r18 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x50340;
                    run_50200(); return;
                case 0x50f44:
                    r18 = r18 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x50340;
                    run_50200(); return;
                case 0x50f50:
                    r18 = r18 | 64;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x503b0;
                    run_50200(); return;
                case 0x50f60:
                    r5 = r16 + r0;
                    r4 = r29 + 376;
                    /* Next insn is delay slot */ 
                    r31=0x50f70;
                    pc=0x55400;
                    run_55400(); return;
                case 0x50f70:
                    r16 = r2 + r0;
                    r18 = r18 | 64;
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x503b0;
                    run_50200(); return;
                case 0x50f84:
                    r18 = r18 | 512;
                case 0x50f88:
                    r2 = 5 << 16;
                    r2 = r2 + -10240;
                    r3 = r0 + 16;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x503b0;
                    run_50200(); return;
                case 0x50fa8:
                    r18 = r18 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x50340;
                    run_50200(); return;
                case 0x50fb4:
                    r19 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x503b0;
                    run_50200(); return;
                case 0x50fc0:
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r2 = r2 + r23;
                    r3 = r3 + -48;
                    r23 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x50340;
                    run_50200(); return;
                case 0x50fdc:
                    r18 = r18 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x50340;
                    run_50200(); return;
                case 0x50fe8:
                    r2 = 5 << 16;
                    r2 = r2 + -10240;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x51000:
                    pc=0x51000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51000() throws ExecutionException { /* 0x51000 - 0x51200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51000:
                    /* Next insn is delay slot */ 
                    pc=0x503b0;
                    run_50200(); return;
                case 0x51008:
                    r19 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x503b0;
                    run_50200(); return;
                case 0x51014:
                    r18 = r18 | 544;
                    /* Next insn is delay slot */ 
                    pc=0x50f88;
                    run_50e00(); return;
                case 0x51020:
                    r2 = r18 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5027c;
                        run_50200(); return;
                    }
                    r2 = r18 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x515a0;
                        run_51400(); return;
                    }
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r21&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x5104c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x5106c;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x5106c:
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x513e4;
                        run_51200(); return;
                    }
                    r18 = r0 + r0;
                case 0x5107c:
                    r22 = r0 + r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r16 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r20;
                    r20 = r22 + r0;
                case 0x51094:
                    /* Next insn is delay slot */ 
                    r31=0x5109c;
                    pc=0x48600;
                    run_48600(); return;
                case 0x5109c:
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        run_50400(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r3 = r4 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r22 = r20 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = r17 + r0;
                    r6 = r29 + 24;
                    r7 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x510ec;
                    pc=0x54c00;
                    run_54c00(); return;
                case 0x510ec:
                    r5 = r0 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        run_50400(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514e0;
                        run_51400(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5110c;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x5110c:
                    r21 = r21 + r22;
                    r23 = r23 + -1;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514f8;
                        run_51400(); return;
                    }
                    r18 = r18 + 4;
                    r20 = r0 + r0;
                case 0x51124:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x513b0;
                        run_51200(); return;
                    }
                case 0x51134:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51094;
                        continue;
                    }
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                case 0x51144:
                    r3 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a48;
                        run_50a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x5115c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x5117c;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x5117c:
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x513f4;
                        run_51200(); return;
                    }
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                case 0x51190:
                    r6 = r0 + r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r16;
                    r22 = r0 + -2;
                    r16 = r6 + r0;
                case 0x511a0:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x511d0;
                        continue;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x515b4;
                        run_51400(); return;
                    }
                case 0x511d0:
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                case 0x511d4:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5027c;
                        run_50200(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x511fc:
                    r19 = r20 + 4;
                case 0x51200:
                    pc=0x51200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51200() throws ExecutionException { /* 0x51200 - 0x51400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51200:
                    r20 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r18 = r20 + r0;
                case 0x5120c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r5 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51288;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51288;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5120c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51280;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x51280:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5120c;
                        continue;
                    }
                case 0x51288:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    r18 = r18 - r20;
                    r21 = r21 + r18;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x512ac:
                    r2 = r0 + 2;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50b8c;
                        run_50a00(); return;
                    }
                    r3 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x512c4:
                    r2 = r0 + 3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50ba4;
                        run_50a00(); return;
                    }
                    r2 = r0 + 5;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50ba4;
                        run_50a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x508b4;
                    run_50800(); return;
                case 0x512e4:
                    r3 = readPages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff];
                    r7 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r10 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x5130c;
                    return;
                case 0x5130c:
                    r3 = r18 & 32;
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51400;
                        run_51400(); return;
                    }
                case 0x51320:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x5132c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x50d04;
                    run_50c00(); return;
                case 0x51344:
                    r9 = r19 & 2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a38;
                        run_50a00(); return;
                    }
                    f12 = f0;
                    f13 = f1;
                    r18 = r20 + 4;
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x51364;
                    pc=0x4ba00;
                    run_4ba00(); return;
                case 0x51364:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51678;
                        run_51600(); return;
                    }
                    f20=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f20;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50a48;
                    run_50a00(); return;
                case 0x51380:
                    r2 = r0 + -1409;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x50c9c;
                    run_50c00(); return;
                case 0x51390:
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50b8c;
                        run_50a00(); return;
                    }
                    r19 = r19 & r11;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x50880;
                    run_50800(); return;
                case 0x513b0:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x513c0;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x513c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51134;
                        run_51000(); return;
                    }
                    r22 = r20 + r0;
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51144;
                        run_51000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5058c;
                    run_50400(); return;
                case 0x513e4:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x5107c;
                    run_51000(); return;
                case 0x513f4:
                    r19 = r29 + 640;
                    /* Next insn is delay slot */ 
                    pc=0x51190;
                    run_51000(); return;
                case 0x51400:
                    pc=0x51400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51400() throws ExecutionException { /* 0x51400 - 0x51600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51400:
                    r3 = r18 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51320;
                        run_51200(); return;
                    }
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x5132c;
                    run_51200(); return;
                case 0x51420:
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r22 = r19 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51444;
                    pc=0x59800;
                    run_59800(); return;
                case 0x51444:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x50cf0;
                    run_50c00(); return;
                case 0x51454:
                    r3 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r5 = r3 + 1;
                    r4 = r17 + r0;
                    r7 = r0 + 10;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x51474;
                    pc=0x57c00;
                    run_57c00(); return;
                case 0x51474:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r22 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r6 = r2 - r3;
                case 0x51484:
                    r2 = r29 + 363;
                    r2 = ((r22 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51498;
                        continue;
                    }
                    r22 = r29 + 362;
                case 0x51498:
                    r2 = 6 << 16;
                    r4 = r22 + r0;
                    r5 = r2 + 6204;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x514b0;
                    pc=0x55a00;
                    run_55a00(); return;
                case 0x514b0:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x514c8;
                    pc=0x55c00;
                    run_55c00(); return;
                case 0x514c8:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51344;
                        run_51200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50a38;
                    run_50a00(); return;
                case 0x514e0:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5110c;
                        run_51000(); return;
                    }
                    r20 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51124;
                    run_51000(); return;
                case 0x514f8:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51124;
                    run_51000(); return;
                case 0x51504:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        run_50400(); return;
                    }
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x51518:
                    r5 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r6 = r0 + 1;
                    r7 = r23 + r0;
                    r18 = r20 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x51538;
                    pc=0x59c00;
                    run_59c00(); return;
                case 0x51538:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        run_50400(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r21 = r2 + r21;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x5155c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5156c;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5156c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x504fc;
                        run_50400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5058c;
                    run_50400(); return;
                case 0x5157c:
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r18 = r3 - r4;
                    r6 = r0 - r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51484;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50a14;
                    run_50a00(); return;
                case 0x515a0:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x5027c;
                    run_50200(); return;
                case 0x515b4:
                    /* Next insn is delay slot */ 
                    r31=0x515bc;
                    pc=0x48600;
                    run_48600(); return;
                case 0x515bc:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        run_50400(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r18 = r16 + 1;
                    r16 = r4 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r19 + r0;
                case 0x51600:
                    pc=0x51600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51600() throws ExecutionException { /* 0x51600 - 0x51800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51600:
                    r6 = r29 + 24;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51610;
                    pc=0x54c00;
                    run_54c00(); return;
                case 0x51610:
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        run_50400(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51694;
                        continue;
                    }
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x5162c:
                    /* Next insn is delay slot */ 
                    r31=0x51634;
                    pc=0x54a00;
                    run_54a00(); return;
                case 0x51634:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x517a0;
                        continue;
                    }
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x511d4;
                        run_51000(); return;
                    }
                case 0x51648:
                    r18 = r18 + -1;
                    r5 = r29 + 24;
                    r2 = r5 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51668;
                    pc=0x59800;
                    run_59800(); return;
                case 0x51668:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51648;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x511d4;
                    run_51000(); return;
                case 0x51678:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51684;
                    pc=0x55600;
                    run_55600(); return;
                case 0x51684:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f0;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50a48;
                    run_50a00(); return;
                case 0x51694:
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x517c4;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x516a0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x511a0;
                        run_51000(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x516c0;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x516c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x511a0;
                        run_51000(); return;
                    }
                    r6 = r16 + r0;
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5058c;
                        run_50400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x511d4;
                    run_51000(); return;
                case 0x516e0:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    r16 = r10 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        run_50400(); return;
                    }
                case 0x516f4:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5170c;
                    pc=0x59800;
                    run_59800(); return;
                case 0x5170c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x516f4;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x505b4;
                    run_50400(); return;
                case 0x51720:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        run_50400(); return;
                    }
                    r16 = r10 + r0;
                case 0x51734:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5174c;
                    pc=0x59800;
                    run_59800(); return;
                case 0x5174c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x51734;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x505b4;
                    run_50400(); return;
                case 0x51760:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50540;
                        run_50400(); return;
                    }
                    r16 = r10 + r0;
                case 0x51774:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5178c;
                    pc=0x59800;
                    run_59800(); return;
                case 0x5178c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x51774;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x505b4;
                    run_50400(); return;
                case 0x517a0:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r21 = r21 + r18;
                    r23 = r23 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x517d0;
                        continue;
                    }
                    r19 = r19 + 4;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x516a0;
                    continue;
                case 0x517c4:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5162c;
                    continue;
                case 0x517d0:
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x516a0;
                    continue;
                case 0x51800:
                    pc=0x51800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51800() throws ExecutionException { /* 0x51800 - 0x51a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x36860;
                    run_36800(); return;
                case 0x51a00:
                    pc=0x51a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51a00() throws ExecutionException { /* 0x51a00 - 0x51c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36960;
                    run_36800(); return;
                case 0x51c00:
                    pc=0x51c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51c00() throws ExecutionException { /* 0x51c00 - 0x51e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51c00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r29 + 40;
                    r3 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r5 = r2 + r0;
                    r7 = r6 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x51c38;
                    pc=0x36820;
                    run_36800(); return;
                case 0x51c38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51e00:
                    pc=0x51e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51e00() throws ExecutionException { /* 0x51e00 - 0x52000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51e00:
                    r2 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    r2 = r2 & 8192;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    r22 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51f08;
                        continue;
                    }
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r23 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r21 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51efc;
                        continue;
                    }
                case 0x51e58:
                    r18 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r18 = r18 >>> 2;
                    r17 = r0 + r0;
                    if(r18 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x51e88;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x51ee4;
                    continue;
                case 0x51e78:
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r18 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x51ee0;
                        continue;
                    }
                case 0x51e88:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51e9c;
                    pc=0x54400;
                    run_54400(); return;
                case 0x51e9c:
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x51e78;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x51ea8:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r0;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r0;
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51ee0:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                case 0x51ee4:
                    r18 = r18 << 2;
                    r2 = r2 - r18;
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r23 = r23 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51e58;
                        continue;
                    }
                case 0x51efc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51ea8;
                    continue;
                case 0x51f08:
                    /* Next insn is delay slot */ 
                    r31=0x51f10;
                    pc=0x47a00;
                    run_47a00(); return;
                case 0x51f10:
                    /* Next insn is delay slot */ 
                    pc=0x51ea8;
                    continue;
                case 0x52000:
                    pc=0x52000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52000() throws ExecutionException { /* 0x52000 - 0x52200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52000:
                    r3 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52018;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x52018:
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52200:
                    pc=0x52200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52200() throws ExecutionException { /* 0x52200 - 0x52400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52200:
                    r29 = r29 + -1248;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r23;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r20;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r18;
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r31;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r30;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r22;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r21;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r19;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r17;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r23 = r5 + r0;
                    r20 = r6 + r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52254;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d4c;
                        run_52c00(); return;
                    }
                case 0x52254:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52288;
                        continue;
                    }
                    r4 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff] = r2;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x52288:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52bd4;
                        run_52a00(); return;
                    }
                    r4 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52bd4;
                        run_52a00(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x52c04;
                        run_52c00(); return;
                    }
                case 0x522b4:
                    r3 = r29 + 1080;
                    writePages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r3 = r29 + 1079;
                    r21 = r29 + 16;
                    r10 = 6 << 16;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    r3 = r4 - r3;
                    writePages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff] = r3;
                    writePages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff] = r21;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r0;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r0;
                    r22 = r10 + 7732;
                    r3 = r21 + r0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r18;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r23;
                    r16 = r20 + r0;
                case 0x52300:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53328;
                        run_53200(); return;
                    }
                    r4 = r0 + 37;
                    r17 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x52330;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x52398;
                    continue;
                case 0x52328:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x52344;
                        continue;
                    }
                case 0x52330:
                    r17 = r17 + 1;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52328;
                        continue;
                    }
                case 0x52344:
                    r19 = r17 - r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52398;
                        continue;
                    }
                    r2 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r4 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r19 + r4;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x523fc;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53240;
                        run_53200(); return;
                    }
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r5 = r5 + r19;
                    r3 = r21 + r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                case 0x52398:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x533a0;
                        run_53200(); return;
                    }
                    r2 = r17 + 1;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r30 = r0 + -1;
                    r17 = r0 + r0;
                    r23 = r0 + r0;
                    r7 = r0 + 42;
                case 0x523c4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r16 = r2 + 1;
                case 0x523cc:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5317c;
                        run_53000(); return;
                    }
                    r5 = 6 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 7360;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x523fc:
                    r3 = r3 + 8;
                case 0x52400:
                    pc=0x52400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52400() throws ExecutionException { /* 0x52400 - 0x52600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52400:
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x52398;
                    run_52200(); return;
                case 0x52418:
                    r23 = r23 | 16;
                case 0x5241c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x52428:
                    r23 = r23 | 16;
                case 0x5242c:
                    r2 = r23 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52868;
                        run_52800(); return;
                    }
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52868;
                        run_52800(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x52484;
                    continue;
                case 0x52460:
                    r23 = r23 | 16;
                case 0x52464:
                    r2 = r23 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52ee8;
                        run_52e00(); return;
                    }
                case 0x52470:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x52484:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r30 + r0;
                    r5 = r0 + r0;
                case 0x52490:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x524a0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r23 = r23 & r6;
                case 0x524a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52950;
                        run_52800(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52950;
                        run_52800(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d78;
                        run_52c00(); return;
                    }
                case 0x524b8:
                    r18 = r29 + 1080;
                case 0x524bc:
                    r2 = r19 < r30 ? 1 : 0;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x524d0;
                        continue;
                    }
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r30;
                case 0x524d0:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x524e8;
                        continue;
                    }
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                case 0x524e8:
                    r15 = r23 & 2;
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52504;
                        continue;
                    }
                    r4 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r4 = r4 + 2;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r4;
                case 0x52504:
                    r20 = r23 & 132;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528c4;
                        run_52800(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r9 = r17 - r5;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x528c4;
                        run_52800(); return;
                    }
                    r2 = r9 < 17 ? 1 : 0;
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53454;
                        run_53400(); return;
                    }
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r25 = r0 + 16;
                    writePages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff] = r15;
                    r16 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52570;
                    continue;
                case 0x52554:
                    r7 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x52560:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x525b8;
                        continue;
                    }
                case 0x52570:
                    r2 = r4 + 1;
                    r8 = r8 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r25;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r8;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52554;
                        continue;
                    }
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52888;
                        run_52800(); return;
                    }
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r7 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52570;
                        continue;
                    }
                case 0x525b8:
                    r9 = r16 + r0;
                    r15 = readPages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff];
                    r16 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                case 0x525c4:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r5 = r9 + r8;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r7 < 8 ? 1 : 0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d5c;
                        run_52c00(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 8;
                    r4 = r7 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x528e0;
                        run_52800(); return;
                    }
                case 0x525fc:
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52638;
                        run_52600(); return;
                    }
                case 0x52600:
                    pc=0x52600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52600() throws ExecutionException { /* 0x52600 - 0x52800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52600:
                    r2 = r29 + 1156;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 2;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52ce0;
                        run_52c00(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x52638:
                    r2 = r0 + 128;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x52abc;
                        run_52a00(); return;
                    }
                case 0x52644:
                    r20 = r30 - r19;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5270c;
                        continue;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53390;
                        run_53200(); return;
                    }
                    r4 = 6 << 16;
                    r8 = r4 + 7716;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r30 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52694;
                    continue;
                case 0x52678:
                    r4 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x52684:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x526dc;
                        continue;
                    }
                case 0x52694:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52678;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5291c;
                        run_52800(); return;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52694;
                        continue;
                    }
                case 0x526dc:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x526e4:
                    r5 = r5 + r20;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a80;
                        run_52a00(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x5270c:
                    r14 = r19 + r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52aa4;
                        run_52a00(); return;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53214;
                        run_53200(); return;
                    }
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                case 0x5273c:
                    r12 = r23 & 4;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5280c;
                        run_52800(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r18 = r17 - r5;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5280c;
                        run_52800(); return;
                    }
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x534a8;
                        run_53400(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r19 = r0 + 16;
                    r20 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x527a0;
                    continue;
                case 0x52784:
                    r5 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x52790:
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x527e8;
                        continue;
                    }
                case 0x527a0:
                    r2 = r4 + 1;
                    r14 = r14 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52784;
                        continue;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a4c;
                        run_52a00(); return;
                    }
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r5 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x527a0;
                        continue;
                    }
                case 0x527e8:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r14 = r14 + r18;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r5;
                    r5 = r5 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                case 0x52800:
                    pc=0x52800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52800() throws ExecutionException { /* 0x52800 - 0x52a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52800:
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5311c;
                        run_53000(); return;
                    }
                case 0x5280c:
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52824;
                        continue;
                    }
                    r19 = r17 + r0;
                case 0x52824:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52858;
                        continue;
                    }
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x52850;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x52850:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        continue;
                    }
                case 0x52858:
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52300;
                    run_52200(); return;
                case 0x52868:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x52484;
                    run_52400(); return;
                case 0x52888:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r25;
                    /* Next insn is delay slot */ 
                    r31=0x528a0;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x528a0:
                    r25 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r7 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52560;
                    run_52400(); return;
                case 0x528c4:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                case 0x528d0:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x525fc;
                        run_52400(); return;
                    }
                case 0x528e0:
                    r2 = r29 + 1158;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 1;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52cc4;
                        run_52c00(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x525fc;
                    run_52400(); return;
                case 0x5291c:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x52930;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x52930:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        continue;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52684;
                    run_52600(); return;
                case 0x52950:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x52cfc;
                        run_52c00(); return;
                    }
                    r6 = r0 + 2;
                    r18 = r29 + 1080;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x529a4;
                        continue;
                    }
                    r6 = readPages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff];
                case 0x52970:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r18 = r18 + -1;
                    r2 = r2 >>> 4;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52970;
                        continue;
                    }
                case 0x52990:
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r4 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x524bc;
                    run_52400(); return;
                case 0x529a4:
                    r4 = r2 & 7;
                    r18 = r18 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529a4;
                        continue;
                    }
                    r2 = r23 & 1;
                    r6 = r18 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529e4;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x52990;
                        continue;
                    }
                    r18 = r18 + -1;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x529e4:
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x524bc;
                    run_52400(); return;
                case 0x529f8:
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                case 0x52a00:
                    pc=0x52a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52a00() throws ExecutionException { /* 0x52a00 - 0x52c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52a00:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52ab0;
                        continue;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x52a18:
                    r31 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r30 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r23 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r22 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r21 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r20 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    r19 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r18 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r17 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r29 = r29 + 1248;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x52a4c:
                    r4 = r20 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x52a60;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x52a60:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a00;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52790;
                    run_52600(); return;
                case 0x52a80:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x532f4;
                        run_53200(); return;
                    }
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r19;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r14 = r19 + r0;
                    r3 = r21 + r0;
                case 0x52aa4:
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x5273c;
                    run_52600(); return;
                case 0x52ab0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x52a18;
                    continue;
                case 0x52abc:
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r20 = r17 - r2;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x52644;
                        run_52600(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x534d4;
                        run_53400(); return;
                    }
                    r4 = 6 << 16;
                    r8 = r4 + 7716;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r9 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52b14;
                    continue;
                case 0x52af8:
                    r6 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x52b04:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52b5c;
                        continue;
                    }
                case 0x52b14:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52af8;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52b98;
                        continue;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r6 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52b14;
                        continue;
                    }
                case 0x52b5c:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x52b64:
                    r5 = r5 + r20;
                    r2 = r6 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x532d8;
                        run_53200(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r6 + 1;
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52644;
                    run_52600(); return;
                case 0x52b98:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x52bb0;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x52bb0:
                    r9 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r6 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52b04;
                    continue;
                case 0x52bd4:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x52be4;
                    pc=0x36600;
                    run_36600(); return;
                case 0x52be4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52ab0;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x522b4;
                        run_52200(); return;
                    }
                case 0x52c00:
                    pc=0x52c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52c00() throws ExecutionException { /* 0x52c00 - 0x52e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52c00:
                case 0x52c04:
                    addr=r23+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x522b4;
                        run_52200(); return;
                    }
                    addr=r29+1054;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r23+28)>>>12][((r23+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r23+36)>>>12][((r23+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r29 + 16;
                    r7 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1040;
                    r6 = r20 + r0;
                    writePages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff] = r3;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r2;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r2;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x52c70;
                    pc=0x52200;
                    run_52200(); return;
                case 0x52c70:
                    r21 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x52c94;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x52c8c;
                    pc=0x29200;
                    run_29200(); return;
                case 0x52c8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53520;
                        run_53400(); return;
                    }
                case 0x52c94:
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52cb8;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x52cb8:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52a18;
                    run_52a00(); return;
                case 0x52cc4:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53268;
                        run_53200(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x525fc;
                    run_52400(); return;
                case 0x52ce0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x532a4;
                        run_53200(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52638;
                    run_52600(); return;
                case 0x52cfc:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53154;
                        run_53000(); return;
                    }
                    r18 = r29 + 1080;
                    r4 = r0 + 10;
                case 0x52d10:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x52d1c;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x52d1c:
                    r18 = r18 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52d10;
                        continue;
                    }
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x524bc;
                    run_52400(); return;
                case 0x52d4c:
                    /* Next insn is delay slot */ 
                    r31=0x52d54;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x52d54:
                    /* Next insn is delay slot */ 
                    pc=0x52254;
                    run_52200(); return;
                case 0x52d5c:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x531ac;
                        run_53000(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x528d0;
                    run_52800(); return;
                case 0x52d78:
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x524b8;
                        run_52400(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x524bc;
                    run_52400(); return;
                case 0x52d9c:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5316c;
                        run_53000(); return;
                    }
                    r17 = r0 - r17;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                case 0x52dbc:
                    r23 = r23 | 4;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x52dcc:
                    r6 = r0 + 43;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x52ddc:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x531e8;
                        run_53000(); return;
                    }
                    r12 = r23 & 64;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x531e8;
                        run_53000(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x52e00:
                    pc=0x52e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_52e00() throws ExecutionException { /* 0x52e00 - 0x53000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x52e00:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x52300;
                    run_52200(); return;
                case 0x52e18:
                    r2 = 6 << 16;
                    r2 = r2 + 692;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52fc8;
                        continue;
                    }
                case 0x52e34:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x52e48:
                    r5 = r23 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53208;
                        run_53200(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53208;
                        run_53200(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 | 2;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x52484;
                    run_52400(); return;
                case 0x52e78:
                    r23 = r23 | 64;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x52e88:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r16 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x534f4;
                        run_53400(); return;
                    }
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52edc;
                        continue;
                    }
                case 0x52eac:
                    r4 = r30 << 1;
                    r5 = r5 + 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r30 = r2 + r30;
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52eac;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x53380;
                        run_53200(); return;
                    }
                case 0x52edc:
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523cc;
                    run_52200(); return;
                case 0x52ee8:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52470;
                        run_52400(); return;
                    }
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52484;
                    run_52400(); return;
                case 0x52f14:
                    r23 = r23 | 128;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x52f24:
                    r17 = r0 + r0;
                    r2 = r4 + -48;
                case 0x52f2c:
                    r4 = r17 << 1;
                    r16 = r16 + 1;
                    r17 = r17 << 3;
                    r17 = r4 + r17;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r17 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52f2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x523cc;
                    run_52200(); return;
                case 0x52f5c:
                    r23 = r23 | 16;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53030;
                        run_53000(); return;
                    }
                case 0x52f70:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53030;
                        run_53000(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x52f90:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x53334;
                        run_53200(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r19 = r30 + r0;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x52490;
                    run_52400(); return;
                case 0x52fac:
                    r2 = 6 << 16;
                    r2 = r2 + 672;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52e34;
                        continue;
                    }
                case 0x52fc8:
                    r2 = r23 & 64;
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53354;
                        run_53200(); return;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x52e48;
                    continue;
                case 0x52fec:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x53000:
                    pc=0x53000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53000() throws ExecutionException { /* 0x53000 - 0x53200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53000:
                    r2 = r0 + 1;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x524e8;
                    run_52400(); return;
                case 0x53020:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52f70;
                        run_52e00(); return;
                    }
                case 0x53030:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x52f90;
                    run_52e00(); return;
                case 0x5304c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5241c;
                        run_52400(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x53064:
                    r23 = r23 | 1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x53074:
                    r2 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r20 = r2 + 4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53468;
                        run_53400(); return;
                    }
                    r4 = r18 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x533f8;
                        run_53200(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x530ac;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x530ac:
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x534bc;
                        run_53400(); return;
                    }
                    r19 = r2 - r18;
                    r2 = r30 < r19 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53374;
                        run_53200(); return;
                    }
                case 0x530c8:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x524bc;
                    run_52400(); return;
                case 0x530dc:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 6 << 16;
                    r4 = r4 + 692;
                    r5 = r5 + 4;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r4;
                    r23 = r23 | 2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x52484;
                    run_52400(); return;
                case 0x5311c:
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x533d0;
                        run_53200(); return;
                    }
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53368;
                        run_53200(); return;
                    }
                case 0x53138:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52300;
                    run_52200(); return;
                case 0x53154:
                    r2 = r2 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x524bc;
                    run_52400(); return;
                case 0x5316c:
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x5317c:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x533a0;
                        run_53200(); return;
                    }
                    r5 = r0 + 1;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r5;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x524e8;
                    run_52400(); return;
                case 0x531ac:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x531c4;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x531c4:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x528d0;
                    run_52800(); return;
                case 0x531e8:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x53200:
                    pc=0x53200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53200() throws ExecutionException { /* 0x53200 - 0x53400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53200:
                    /* Next insn is delay slot */ 
                    pc=0x52300;
                    run_52200(); return;
                case 0x53208:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x52484;
                    run_52400(); return;
                case 0x53214:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x53228;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x53228:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5273c;
                    run_52600(); return;
                case 0x53240:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x53254;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x53254:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52400;
                    run_52400(); return;
                case 0x53268:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x53280;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x53280:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x525fc;
                    run_52400(); return;
                case 0x532a4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x532b8;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x532b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52638;
                    run_52600(); return;
                case 0x532d8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53420;
                        run_53400(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52644;
                    run_52600(); return;
                case 0x532f4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x53308;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x53308:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5270c;
                    run_52600(); return;
                case 0x53328:
                    r17 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52398;
                    run_52200(); return;
                case 0x53334:
                    r4 = r0 + 45;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r19 = r30 + r0;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x52490;
                    run_52400(); return;
                case 0x53354:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x52e48;
                    run_52e00(); return;
                case 0x53368:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53138;
                    run_53000(); return;
                case 0x53374:
                    r19 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x530c8;
                    run_53000(); return;
                case 0x53380:
                    r30 = r0 + -1;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523cc;
                    run_52200(); return;
                case 0x53390:
                    r2 = 6 << 16;
                    r8 = r2 + 7716;
                    /* Next insn is delay slot */ 
                    pc=0x526e4;
                    run_52600(); return;
                case 0x533a0:
                    r2 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r18 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x52a00;
                        run_52a00(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x533c8;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x533c8:
                    /* Next insn is delay slot */ 
                    pc=0x52a00;
                    run_52a00(); return;
                case 0x533d0:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x533e4;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x533e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5280c;
                    run_52800(); return;
                case 0x533f8:
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x53404;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x53400:
                    pc=0x53400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53400() throws ExecutionException { /* 0x53400 - 0x53600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53400:
                case 0x53404:
                    r19 = r2 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x524bc;
                    run_52400(); return;
                case 0x53420:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x53434;
                    pc=0x51e00;
                    run_51e00(); return;
                case 0x53434:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x529f8;
                        run_52800(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52644;
                    run_52600(); return;
                case 0x53454:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x525c4;
                    run_52400(); return;
                case 0x53468:
                    r2 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r13 = r30 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5347c;
                        continue;
                    }
                    r13 = r0 + 6;
                case 0x5347c:
                    r19 = r13 + r0;
                    r2 = r13 + r0;
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x534e8;
                        continue;
                    }
                case 0x5348c:
                    r10 = 6 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r18 = r10 + 4740;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x524e8;
                    run_52400(); return;
                case 0x534a8:
                    r5 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x527e8;
                    run_52600(); return;
                case 0x534bc:
                    r19 = r30 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x524bc;
                    run_52400(); return;
                case 0x534d4:
                    r2 = 6 << 16;
                    r6 = r4 + r0;
                    r8 = r2 + 7716;
                    /* Next insn is delay slot */ 
                    pc=0x52b64;
                    run_52a00(); return;
                case 0x534e8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5348c;
                    continue;
                case 0x534f4:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    r30 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5316c;
                        run_53000(); return;
                    }
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x523c4;
                    run_52200(); return;
                case 0x53520:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x52c94;
                    run_52c00(); return;
                case 0x53600:
                    pc=0x53600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53600() throws ExecutionException { /* 0x53600 - 0x53800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x52200;
                    run_52200(); return;
                case 0x53800:
                    pc=0x53800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53800() throws ExecutionException { /* 0x53800 - 0x53a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53800:
                    r29 = r29 + -136;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r17;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x538e4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5389c;
                        continue;
                    }
                    r2 = r0 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x53864;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x53864:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x538d4;
                        continue;
                    }
                case 0x53870:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53884;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x53884:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r17 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r16 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5389c:
                    r2 = r6 + -1;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x538c8;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x538c8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x53870;
                        continue;
                    }
                case 0x538d4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x53870;
                    continue;
                case 0x538e4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x53884;
                    continue;
                case 0x53a00:
                    pc=0x53a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53a00() throws ExecutionException { /* 0x53a00 - 0x53c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53a00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x53a30;
                    pc=0x53800;
                    run_53800(); return;
                case 0x53a30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53c00:
                    pc=0x53c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53c00() throws ExecutionException { /* 0x53c00 - 0x53e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53c00:
                    r29 = r29 + -128;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r5 = r29 + 16;
                    r2 = r0 + -1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x53c3c;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x53c3c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x53e00:
                    pc=0x53e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_53e00() throws ExecutionException { /* 0x53e00 - 0x54000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x53e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x53c00;
                    run_53c00(); return;
                case 0x54000:
                    pc=0x54000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54000() throws ExecutionException { /* 0x54000 - 0x54200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54000:
                    r29 = r29 + -88;
                    r5 = r29 + 16;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x54014;
                    pc=0x51a00;
                    run_51a00(); return;
                case 0x54014:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x54068;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 8192;
                    r3 = r3 & 61440;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x54054;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x54038;
                    pc=0x28400;
                    run_28400(); return;
                case 0x54038:
                    r3 = r0 + 25;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                case 0x54044:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54054:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54068:
                    /* Next insn is delay slot */ 
                    r31=0x54070;
                    pc=0x28400;
                    run_28400(); return;
                case 0x54070:
                    r3 = r0 + 9;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x54044;
                    continue;
                case 0x54200:
                    pc=0x54200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54200() throws ExecutionException { /* 0x54200 - 0x54400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54200:
                    { long hilo = (long)(r5) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r5 = lo;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x54234;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x54234:
                    r2 = 6 << 16;
                    r18 = readPages[(r2+10344)>>>12][((r2+10344)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x54250;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x54250:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5437c;
                        continue;
                    }
                    r19 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r16 + -8;
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5434c;
                        continue;
                    }
                case 0x54274:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x54280;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x54280:
                    r6 = r19 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54308;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x542d4;
                        continue;
                    }
                    r2 = r16 + r0;
                case 0x542a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x542b0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x542d4:
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54340;
                        continue;
                    }
                    r2 = r0 + 36;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r0;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x54368;
                        continue;
                    }
                    r2 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x542a0;
                    continue;
                case 0x54308:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x54318;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x54318:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54340:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x542a0;
                    continue;
                case 0x5434c:
                    r2 = r20 & r2;
                    r3 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54274;
                        continue;
                    }
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x54274;
                    continue;
                case 0x54368:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + 24;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x542a0;
                    continue;
                case 0x5437c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x54388;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x54388:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x542b0;
                    continue;
                case 0x54400:
                    pc=0x54400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54400() throws ExecutionException { /* 0x54400 - 0x54600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54400:
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -56;
                    r3 = r2 & 8192;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54454;
                        continue;
                    }
                    r2 = r2 | 8192;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    writePages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff] = r2;
                case 0x54454:
                    /* Next insn is delay slot */ 
                    r31=0x5445c;
                    pc=0x48600;
                    run_48600(); return;
                case 0x5445c:
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x545c4;
                        continue;
                    }
                case 0x54468:
                    r4 = r19 + r0;
                    r5 = r29 + 16;
                    r6 = r18 + r0;
                    r7 = r16 + 92;
                    /* Next insn is delay slot */ 
                    r31=0x54480;
                    pc=0x5b600;
                    run_5b600(); return;
                case 0x54480:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x54558;
                        continue;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5454c;
                        continue;
                    }
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x5449c:
                    r17 = r0 + r0;
                    r21 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x544e4;
                    continue;
                case 0x544ac:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x544c8:
                    r17 = r17 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5454c;
                        continue;
                    }
                case 0x544d8:
                    r2 = r29 + 16;
                    r3 = r2 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x544e4:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x544ac;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r3 = r3 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54594;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x545ec;
                        continue;
                    }
                    r17 = r17 + 1;
                    r2 = r2 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x544d8;
                        continue;
                    }
                case 0x5454c:
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5456c;
                    continue;
                case 0x54558:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                case 0x5456c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54594:
                    r4 = r19 + r0;
                    r5 = r5 & 255;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x545a8;
                    pc=0x36200;
                    run_36200(); return;
                case 0x545a8:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x545b0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x544c8;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5456c;
                    continue;
                case 0x545c4:
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54468;
                        continue;
                    }
                    r5 = r18 << 24;
                    r5 = r5 >> 24;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5449c;
                    continue;
                case 0x545ec:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x54600;
                    pc=0x36200;
                    run_36200(); return;
                case 0x54600:
                    pc=0x54600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54600() throws ExecutionException { /* 0x54600 - 0x54800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54600:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x545b0;
                    run_54400(); return;
                case 0x54800:
                    pc=0x54800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54800() throws ExecutionException { /* 0x54800 - 0x54a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5485c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54844;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x5483c;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x5483c:
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x54844:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x54400;
                    run_54400(); return;
                case 0x5485c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x54400;
                    run_54400(); return;
                case 0x54a00:
                    pc=0x54a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54a00() throws ExecutionException { /* 0x54a00 - 0x54c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54a00:
                    r2 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54a30;
                        continue;
                    }
                    r2 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    r2 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54a30:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54c00:
                    pc=0x54c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54c00() throws ExecutionException { /* 0x54c00 - 0x54e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54c00:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r18 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54c94;
                        continue;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x54c3c;
                    pc=0x48400;
                    run_48400(); return;
                case 0x54c3c:
                    r5 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x54c5c;
                    return;
                case 0x54c5c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x54c78;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x54c78:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54c94:
                    /* Next insn is delay slot */ 
                    r31=0x54c9c;
                    pc=0x48400;
                    run_48400(); return;
                case 0x54c9c:
                    r6 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + -8164;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x54cc0;
                    return;
                case 0x54cc0:
                    /* Next insn is delay slot */ 
                    pc=0x54c5c;
                    continue;
                case 0x54e00:
                    pc=0x54e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_54e00() throws ExecutionException { /* 0x54e00 - 0x55000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x54e00:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r16 = r5 + r0;
                    r17 = r7 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x54eb0;
                        continue;
                    }
                    r21 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    r18 = r6 + r0;
                    r20 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x54e48;
                    pc=0x48400;
                    run_48400(); return;
                case 0x54e48:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r21 + r0;
                    r5 = r19 + r0;
                    r6 = r16 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x54e68;
                    return;
                case 0x54e68:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x54e88;
                        continue;
                    }
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x54e88:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x54eb0:
                    r18 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x54ec0;
                    pc=0x48400;
                    run_48400(); return;
                case 0x54ec0:
                    r6 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + -8164;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x54ee4;
                    return;
                case 0x54ee4:
                    /* Next insn is delay slot */ 
                    pc=0x54e68;
                    continue;
                case 0x55000:
                    pc=0x55000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55000() throws ExecutionException { /* 0x55000 - 0x55200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55000:
                    r29 = r29 + -8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55040;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5504c;
                        continue;
                    }
                case 0x55014:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5505c;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x55034:
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55040:
                    r5 = r29 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55014;
                        continue;
                    }
                case 0x5504c:
                    r2 = r0 + r0;
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5505c:
                    r2 = r0 + -2;
                    /* Next insn is delay slot */ 
                    pc=0x55034;
                    continue;
                case 0x55200:
                    pc=0x55200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55200() throws ExecutionException { /* 0x55200 - 0x55400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55200:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x55228;
                    pc=0x48400;
                    run_48400(); return;
                case 0x55228:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x5524c;
                    return;
                case 0x5524c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55400:
                    pc=0x55400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55400() throws ExecutionException { /* 0x55400 - 0x55600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55400:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r0 + 94;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x554e8;
                        continue;
                    }
                    r2 = r5 + 1;
                    r7 = r0 + r0;
                    r9 = r0 + r0;
                case 0x5541c:
                    r3 = r0 + r0;
                    r6 = r0 + 256;
                case 0x55424:
                    r5 = r4 + r3;
                    r3 = r3 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x55424;
                        continue;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55490;
                        continue;
                    }
                    r5 = r0 + 1;
                    r5 = r5 - r9;
                    r10 = r0 + 45;
                    r9 = r0 + 93;
                case 0x55450:
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x55458:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r7 = r2 + 1;
                    if(r3 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x554a8;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x5549c;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55488;
                        continue;
                    }
                    r8 = r3 + r0;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55450;
                    continue;
                case 0x55488:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55490:
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5549c:
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x554a8:
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r6 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x55500;
                        continue;
                    }
                    r3 = r6 < r8 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55500;
                        continue;
                    }
                    r2 = r2 + 2;
                case 0x554c8:
                    r8 = r8 + 1;
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 < r6 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x554c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x55458;
                    continue;
                case 0x554e8:
                    r2 = r5 + 2;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r7 = r0 + 1;
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5541c;
                    continue;
                case 0x55500:
                    r8 = r0 + 45;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55450;
                    continue;
                case 0x55600:
                    pc=0x55600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55600() throws ExecutionException { /* 0x55600 - 0x55800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55600:
                    f0 = readPages[(r28+-32588)>>>12][((r28+-32588)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55800:
                    pc=0x55800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55800() throws ExecutionException { /* 0x55800 - 0x55a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55800:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 148;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x55848;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x55848:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55a00:
                    pc=0x55a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55a00() throws ExecutionException { /* 0x55a00 - 0x55c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55a00:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r2 | 65535;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r6 = r5 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x55a54;
                    pc=0x4de00;
                    run_4de00(); return;
                case 0x55a54:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55c00:
                    pc=0x55c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55c00() throws ExecutionException { /* 0x55c00 - 0x55e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55c00:
                    r29 = r29 + -216;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r22;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r18;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r31;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r30;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r23;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r21;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r20;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r19;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r17;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = f30;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = f31;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = f28;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = f29;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = f26;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = f27;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = f24;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = f25;
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = f22;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = f23;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = f20;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = f21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    r16 = r5 + r0;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r18 = r4 + r0;
                    r2 = r21 & 255;
                    r4 = 6 << 16;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    r22 = r5 + r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r6;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    r4 = r4 + 7764;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56000;
                        run_56000(); return;
                    }
                case 0x55c94:
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x55cac:
                    r7 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + 1;
                case 0x55cb8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56160;
                        run_56000(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56160;
                        run_56000(); return;
                    }
                case 0x55cc8:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x55cd8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55cf4;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x55cf4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56074;
                        run_56000(); return;
                    }
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                case 0x55d0c:
                    f30 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    f28 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    f26 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    f24 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    f22 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    f20 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r31 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    f0 = r3;
                    r30 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r23 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r22 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r21 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r19 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r18 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r17 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    f31 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    f29 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    f27 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    f25 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    f23 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    f21 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    f1 = r2;
                    r29 = r29 + 216;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x55d78:
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x55d7c:
                    r2 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55cc8;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = r0 + 48;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x56010;
                        run_56000(); return;
                    }
                case 0x55da4:
                    r19 = r0 + r0;
                case 0x55da8:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57294;
                        run_57200(); return;
                    }
                    r2 = r16 + 1;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55e10;
                    run_55e00(); return;
                case 0x55dd4:
                    r3 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r3 + r23;
                    r21 = r23 + r21;
                    r23 = r21 + -48;
                case 0x55de8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                case 0x55e00:
                    pc=0x55e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_55e00() throws ExecutionException { /* 0x55e00 - 0x56000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x55e00:
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55e64;
                        continue;
                    }
                case 0x55e10:
                    r3 = r20 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55de8;
                        run_55c00(); return;
                    }
                    r3 = r20 < 9 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55dd4;
                        run_55c00(); return;
                    }
                    r3 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r21 = r30 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r30 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55e10;
                        continue;
                    }
                case 0x55e64:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55e70;
                    pc=0x48c00;
                    run_48c00(); return;
                case 0x55e70:
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x55e84;
                    pc=0x48c00;
                    run_48c00(); return;
                case 0x55e84:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x55e90;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x55e90:
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x55ea4;
                    pc=0x33400;
                    run_33400(); return;
                case 0x55ea4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x562e4;
                        run_56200(); return;
                    }
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + r0;
                case 0x55ebc:
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x56158;
                        run_56000(); return;
                    }
                case 0x55ed0:
                    r4 = r0 + r0;
                case 0x55ed4:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x560bc;
                        run_56000(); return;
                    }
                case 0x55edc:
                    r3 = r4 - r3;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r3;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55ef0;
                        continue;
                    }
                    r20 = r7 + r0;
                case 0x55ef0:
                    r3 = r7 < 17 ? 1 : 0;
                    r2 = r7 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55f04;
                        continue;
                    }
                    r2 = r0 + 16;
                case 0x55f04:
                    f2 = r23;
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56ed8;
                        run_56e00(); return;
                    }
                case 0x55f18:
                    r3 = r2 < 10 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55f6c;
                        continue;
                    }
                    r4 = r2 + -9;
                    r3 = 6 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 5616;
                    r3 = r4 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r30;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x572ac;
                        run_57200(); return;
                    }
                case 0x55f60:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                case 0x55f6c:
                    r3 = r7 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56354;
                        run_56200(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x562c4;
                        run_56200(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5745c;
                        run_57400(); return;
                    }
                    r3 = r3 < 23 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x572c8;
                        run_57200(); return;
                    }
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = 6 << 16;
                    r3 = r4 << 3;
                    r2 = r2 + 5616;
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x55cd8;
                    run_55c00(); return;
                case 0x55fe0:
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r21 & 255;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55c94;
                        run_55c00(); return;
                    }
                case 0x56000:
                    pc=0x56000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56000() throws ExecutionException { /* 0x56000 - 0x56200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56000:
                    r2 = r0 + 48;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55da4;
                        run_55c00(); return;
                    }
                case 0x56010:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 88;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x56e68;
                        run_56e00(); return;
                    }
                    r3 = r0 + 120;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x56e68;
                        run_56e00(); return;
                    }
                    r2 = r16 + 1;
                    r3 = r0 + 48;
                case 0x56034:
                    r16 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r2 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x56034;
                        continue;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5628c;
                        run_56200(); return;
                    }
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x55da8;
                    run_55c00(); return;
                case 0x56064:
                    r3 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x55d7c;
                    run_55c00(); return;
                case 0x56074:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = 32768 << 16;
                    r2 = r5 ^ r4;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x55d0c;
                    run_55c00(); return;
                case 0x5608c:
                    r3 = r0 + r0;
                case 0x56090:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56e08;
                        run_56e00(); return;
                    }
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    r5 = r3 + r0;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55cac;
                        run_55c00(); return;
                    }
                    r9 = r0 + 1;
                case 0x560bc:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5628c;
                        run_56200(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5628c;
                        run_56200(); return;
                    }
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55cc8;
                        run_55c00(); return;
                    }
                    r2 = r0 + 78;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x56104;
                        continue;
                    }
                    r2 = r21 < 79 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57518;
                        run_57400(); return;
                    }
                    r2 = r0 + 105;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57524;
                        run_57400(); return;
                    }
                    r2 = r0 + 110;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55cc8;
                        run_55c00(); return;
                    }
                case 0x56104:
                    r3 = 6 << 16;
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r3 + 7760;
                case 0x56110:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5768c;
                        run_57600(); return;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = r2 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56148;
                        continue;
                    }
                    r2 = r2 + 32;
                case 0x56148:
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x56110;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x55cc8;
                    run_55c00(); return;
                case 0x56158:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55cb8;
                        run_55c00(); return;
                    }
                case 0x56160:
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r22 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r0 + 43;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x56ca8;
                        run_56c00(); return;
                    }
                    r2 = r0 + 45;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x56c9c;
                        run_56c00(); return;
                    }
                    r10 = r0 + 1;
                case 0x56190:
                    r2 = r22 + 2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x561a0:
                    r2 = r21 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56bc8;
                        run_56a00(); return;
                    }
                    r2 = r0 + 48;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x561dc;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    r2 = r2 + 1;
                case 0x561c8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r2 + 1;
                    if(r21 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x561c8;
                        continue;
                    }
                case 0x561dc:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55ed0;
                        run_55e00(); return;
                    }
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r21 + -48;
                    r8 = r11 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    addr=r11+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x56200:
                    pc=0x56200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56200() throws ExecutionException { /* 0x56200 - 0x56400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56200:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56254;
                        continue;
                    }
                    r2 = r11 + 2;
                case 0x5621c:
                    r6 = r4 << 1;
                    r4 = r4 << 3;
                    r4 = r6 + r4;
                    r21 = r4 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r8 = r2 + r0;
                    r6 = r21 + -48;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r2 = r2 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5621c;
                        continue;
                    }
                case 0x56254:
                    r2 = r8 - r11;
                    r2 = r2 < 9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56e5c;
                        run_56e00(); return;
                    }
                    r2 = r4 < 20000 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56e5c;
                        run_56e00(); return;
                    }
                case 0x56270:
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55ed4;
                        run_55e00(); return;
                    }
                    r4 = r0 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55edc;
                        run_55e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x560bc;
                    run_56000(); return;
                case 0x5628c:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x55cd8;
                    run_55c00(); return;
                case 0x5629c:
                    r4 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x562a8:
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x562c4;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r2 = r2 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x562c4:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x55cd8;
                    run_55c00(); return;
                case 0x562e4:
                    r4 = r18 + r0;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x562f4;
                    pc=0x48c00;
                    run_48c00(); return;
                case 0x562f4:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x56300;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x56300:
                    r2 = r17 + r2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56be0;
                        run_56a00(); return;
                    }
                    r3 = r0 + 48;
                    if(r21 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5608c;
                        run_56000(); return;
                    }
                    r3 = r0 + r0;
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x56334;
                    continue;
                case 0x56330:
                    r2 = r4 + r0;
                case 0x56334:
                    r4 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r3 = r3 + 1;
                    if(r21 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x56330;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x56090;
                    run_56000(); return;
                case 0x56354:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r7 - r2;
                    r2 = r3 + r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57110;
                        run_57000(); return;
                    }
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x563a4;
                        continue;
                    }
                    r4 = 6 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 5616;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x563a4:
                    r3 = r0 + -16;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56cfc;
                        run_56c00(); return;
                    }
                case 0x563b4:
                    f4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                case 0x563cc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r23;
                    r5 = r16 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x563e4;
                    pc=0x49800;
                    run_49800(); return;
                case 0x563e4:
                    r3 = r2 + 12;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    f24 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    r2 = r0 - r3;
                    r3 = r3 >> 31;
                case 0x56400:
                    pc=0x56400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56400() throws ExecutionException { /* 0x56400 - 0x56600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56400:
                    r16 = r3 & r2;
                    f20 = readPages[(r28+-32548)>>>12][((r28+-32548)>>>2)&0x3ff];
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    f22 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f25 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    r3 = r0 < r3 ? 1 : 0;
                    f21 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    f23 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r3;
                    f26 = f24;
                    f27 = f25;
                case 0x56428:
                    r5 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56438;
                    pc=0x49200;
                    run_49200(); return;
                case 0x56438:
                    r6 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56458;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x56458:
                    r5 = r29 + 24;
                    r7 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = r29 + 32;
                    r6 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5647c;
                    pc=0x4b000;
                    run_4b000(); return;
                case 0x5647c:
                    r4 = r18 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x56490;
                    pc=0x49e00;
                    run_49e00(); return;
                case 0x56490:
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r19 = r2 + r0;
                    r7 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x564a8;
                        continue;
                    }
                    r7 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                case 0x564a8:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56920;
                        run_56800(); return;
                    }
                    r20 = r16 + r2;
                    r3 = r7 + r0;
                case 0x564c0:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 - r22;
                    r5 = r2 + r4;
                    r5 = r5 < -1021 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5681c;
                        run_56800(); return;
                    }
                    r2 = r2 + 1075;
                case 0x564dc:
                    r30 = r20 + r2;
                    r4 = r20 < r30 ? 1 : 0;
                    r2 = r3 + r2;
                    r17 = r2 + r22;
                    r2 = r30 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x564fc;
                        continue;
                    }
                    r2 = r20 + r0;
                case 0x564fc:
                    r4 = r17 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5650c;
                        continue;
                    }
                    r2 = r17 + r0;
                case 0x5650c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56520;
                        continue;
                    }
                    r30 = r30 - r2;
                    r17 = r17 - r2;
                    r20 = r20 - r2;
                case 0x56520:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56578;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x56540;
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x56540:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56558;
                    pc=0x4a000;
                    run_4a000(); return;
                case 0x56558:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x5656c;
                    pc=0x49400;
                    run_49400(); return;
                case 0x5656c:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x56578:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x565a0;
                        continue;
                    }
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x56598;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x56598:
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x565a0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x565c0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x565bc;
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x565bc:
                    r21 = r2 + r0;
                case 0x565c0:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x565e0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x565dc;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x565dc:
                    r21 = r2 + r0;
                case 0x565e0:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56600;
                        run_56600(); return;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x565fc;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x565fc:
                    r19 = r2 + r0;
                case 0x56600:
                    pc=0x56600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56600() throws ExecutionException { /* 0x56600 - 0x56800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56600:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56614;
                    pc=0x4aa00;
                    run_4aa00(); return;
                case 0x56614:
                    r30 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56630;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x56630:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56ef4;
                        run_56e00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56fe8;
                        run_56e00(); return;
                    }
                    r4 = r20 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56650;
                    pc=0x4b200;
                    run_4b200(); return;
                case 0x56650:
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5682c;
                        run_56800(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56930;
                        run_56800(); return;
                    }
                    r3 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f26;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f27;
                case 0x5667c:
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    if(r17 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x56878;
                        run_56800(); return;
                    }
                case 0x56690:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56778;
                        continue;
                    }
                    r5 = 1696 << 16;
                    r5 = r5 + 1;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56778;
                        continue;
                    }
                    f0 = readPages[(r28+-32532)>>>12][((r28+-32532)>>>2)&0x3ff];
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32536)>>>12][((r28+-32536)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5676c;
                        continue;
                    }
                    f0 = readPages[(r28+-32524)>>>12][((r28+-32524)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32528)>>>12][((r28+-32528)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x56b58;
                        run_56a00(); return;
                    }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f0;
                case 0x56720:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56b38;
                        run_56a00(); return;
                    }
                    f4 = r2;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x56e38;
                        run_56e00(); return;
                    }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                case 0x56744:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56ba8;
                        run_56a00(); return;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r2;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x56764:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                case 0x5676c:
                    r5 = 1712 << 16;
                    r5 = r2 + r5;
                    r2 = r5 - r17;
                case 0x56778:
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f28 = r3;
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f29 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x56790;
                    pc=0x4ac00;
                    run_4ac00(); return;
                case 0x56790:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                case 0x567bc:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x567d4;
                        continue;
                    }
                    r3 = 32752 << 16;
                    r3 = r2 & r3;
                    if(r17 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x569f4;
                        run_56800(); return;
                    }
                case 0x567d4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x567e4;
                    pc=0x49400;
                    run_49400(); return;
                case 0x567e4:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x567f4;
                    pc=0x49400;
                    run_49400(); return;
                case 0x567f4:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56804;
                    pc=0x49400;
                    run_49400(); return;
                case 0x56800:
                    pc=0x56800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56800() throws ExecutionException { /* 0x56800 - 0x56a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56800:
                case 0x56804:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56814;
                    pc=0x49400;
                    run_49400(); return;
                case 0x56814:
                    /* Next insn is delay slot */ 
                    pc=0x56428;
                    run_56400(); return;
                case 0x5681c:
                    r2 = r0 + 54;
                    r2 = r2 - r4;
                    /* Next insn is delay slot */ 
                    pc=0x564dc;
                    run_56400(); return;
                case 0x5682c:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x569b8;
                        continue;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r4;
                case 0x56858:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r17 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x56690;
                        run_56600(); return;
                    }
                case 0x56878:
                    r7 = 64688 << 16;
                    r7 = r6 + r7;
                    f28 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r7;
                    f30 = r3;
                    f29 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f31 = r2;
                    f12 = f28;
                    f13 = f29;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = f2;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    r31=0x568b4;
                    pc=0x4ac00;
                    run_4ac00(); return;
                case 0x568b4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f31&0xffffffffL) << 32) | (f30&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    r3 = r5 & r2;
                    r2 = 31904 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56b0c;
                        run_56a00(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x570b4;
                        run_57000(); return;
                    }
                case 0x568f0:
                    r5 = r0 + -1;
                    r2 = 32751 << 16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r2 | 65535;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x567d4;
                    run_56600(); return;
                case 0x56920:
                    r3 = r7 - r2;
                    r20 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x564c0;
                    run_56400(); return;
                case 0x56930:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56ae4;
                        run_56a00(); return;
                    }
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x569d8;
                        continue;
                    }
                    f2 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x5726c;
                        run_57200(); return;
                    }
                    f4 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    f5 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r2;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r4;
                case 0x569a8:
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5667c;
                    run_56600(); return;
                case 0x569b8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = f0;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x56858;
                    continue;
                case 0x569d8:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                case 0x569dc:
                    r3 = readPages[(r28+-32540)>>>12][((r28+-32540)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32544)>>>12][((r28+-32544)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f24;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f25;
                    /* Next insn is delay slot */ 
                    pc=0x5667c;
                    run_56600(); return;
                case 0x569f4:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                case 0x56a00:
                    pc=0x56a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56a00() throws ExecutionException { /* 0x56a00 - 0x56c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56a00:
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a4c;
                        continue;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56cb4;
                        run_56c00(); return;
                    }
                case 0x56a4c:
                    f0 = readPages[(r28+-32516)>>>12][((r28+-32516)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32520)>>>12][((r28+-32520)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x56a8c;
                        continue;
                    }
                    f0 = readPages[(r28+-32508)>>>12][((r28+-32508)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32512)>>>12][((r28+-32512)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x567d4;
                        run_56600(); return;
                    }
                case 0x56a8c:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56a9c;
                    pc=0x49400;
                    run_49400(); return;
                case 0x56a9c:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56aac;
                    pc=0x49400;
                    run_49400(); return;
                case 0x56aac:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56abc;
                    pc=0x49400;
                    run_49400(); return;
                case 0x56abc:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56acc;
                    pc=0x49400;
                    run_49400(); return;
                case 0x56acc:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56adc;
                    pc=0x49400;
                    run_49400(); return;
                case 0x56adc:
                    /* Next insn is delay slot */ 
                    pc=0x55cd8;
                    run_55c00(); return;
                case 0x56ae4:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x569d8;
                        run_56800(); return;
                    }
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56fd0;
                        run_56e00(); return;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x569dc;
                    run_56800(); return;
                case 0x56b0c:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 848 << 16;
                    r2 = r2 + r3;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x567bc;
                    run_56600(); return;
                case 0x56b38:
                    f0 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x56744;
                    run_56600(); return;
                case 0x56b58:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = 32768 << 16;
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f2 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f2 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f2;
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x56720;
                    run_56600(); return;
                case 0x56ba8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = f0;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x56764;
                    run_56600(); return;
                case 0x56bc8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    r4 = r0 + r0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x55edc;
                        run_55e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x560bc;
                    run_56000(); return;
                case 0x56be0:
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                case 0x56bec:
                    r2 = r21 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56cf0;
                        run_56c00(); return;
                    }
                    r5 = r5 + 1;
                case 0x56c00:
                    pc=0x56c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56c00() throws ExecutionException { /* 0x56c00 - 0x56e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56c00:
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56e24;
                        run_56e00(); return;
                    }
                    r2 = r0 + 1;
                    r4 = r5 + r0;
                    r6 = r7 < 17 ? 1 : 0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x56c60;
                        continue;
                    }
                    r2 = r7 + 1;
                    r8 = r5 + r7;
                    r6 = r7 < 17 ? 1 : 0;
                case 0x56c30:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56c50;
                        continue;
                    }
                    r4 = r2 < 10 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56ec4;
                        run_56e00(); return;
                    }
                    r4 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                case 0x56c50:
                    r2 = r2 + 1;
                    r4 = r5 + r0;
                    if(r2 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x56c30;
                        continue;
                    }
                case 0x56c60:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5750c;
                        run_57400(); return;
                    }
                case 0x56c68:
                    r2 = r7 + r5;
                    r2 = r2 < 10 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57674;
                        run_57600(); return;
                    }
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r2 + r23;
                    r23 = r23 + r21;
                case 0x56c88:
                    r3 = r3 + r4;
                    r7 = r7 + r4;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56e24;
                    run_56e00(); return;
                case 0x56c9c:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x561a0;
                    run_56000(); return;
                case 0x56ca8:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56190;
                    run_56000(); return;
                case 0x56cb4:
                    r3 = 15 << 16;
                    r3 = r3 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a4c;
                        run_56a00(); return;
                    }
                    f0 = readPages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x567d4;
                        run_56600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x56a8c;
                    run_56a00(); return;
                case 0x56cf0:
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x55ebc;
                    run_55e00(); return;
                case 0x56cfc:
                    r3 = r2 < 309 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x570f4;
                        run_57000(); return;
                    }
                    r2 = r2 >> 4;
                    r3 = r2 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57708;
                        run_57600(); return;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = 6 << 16;
                    r6 = r6 + 5576;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r6 + r0;
                    r4 = r0 + r0;
                case 0x56d30:
                    r5 = r2 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56d50;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x56d50:
                    r2 = r2 >> 1;
                    r5 = r2 < 2 ? 1 : 0;
                    r4 = r4 + 1;
                    r3 = r3 + 8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56d30;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x56d70:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r4 << 3;
                    r6 = r6 + r4;
                    r2 = 64688 << 16;
                    r2 = r2 + r3;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r4 = 31904 << 16;
                    r4 = r4 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    r3 = r2 & r5;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x570f4;
                        run_57000(); return;
                    }
                    r4 = 31888 << 16;
                    r4 = r4 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57578;
                        run_57400(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                case 0x56e00:
                    pc=0x56e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_56e00() throws ExecutionException { /* 0x56e00 - 0x57000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x56e00:
                    /* Next insn is delay slot */ 
                    pc=0x563cc;
                    run_56200(); return;
                case 0x56e08:
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r21 + -48;
                    r9 = r16 + r0;
                    r7 = r0 + r0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57370;
                        run_57200(); return;
                    }
                    r5 = r0 + 1;
                case 0x56e24:
                    r2 = r9 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x56bec;
                    run_56a00(); return;
                case 0x56e38:
                    f0 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x56744;
                    run_56600(); return;
                case 0x56e5c:
                    r4 = r0 + 19999;
                    /* Next insn is delay slot */ 
                    pc=0x56270;
                    run_56200(); return;
                case 0x56e68:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r29 + 36;
                    r19 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r18 + r0;
                    r5 = r29 + 40;
                    r6 = r19 + 11508;
                    r7 = r29 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x56e94;
                    pc=0x5c200;
                    run_5c200(); return;
                case 0x56e94:
                    r17 = r2 & 7;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5628c;
                        run_56200(); return;
                    }
                    r3 = r0 + 6;
                    if(r17 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x57380;
                        run_57200(); return;
                    }
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x55cd8;
                    run_55c00(); return;
                case 0x56ec4:
                    r4 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x56c50;
                    run_56c00(); return;
                case 0x56ed8:
                    f2 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x55f18;
                    run_55e00(); return;
                case 0x56ef4:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5704c;
                        run_57000(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5704c;
                        run_57000(); return;
                    }
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5704c;
                        run_57000(); return;
                    }
                    r3 = 32752 << 16;
                    r2 = 1712 << 16;
                    r3 = r3 & r16;
                    r2 = r2 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5704c;
                        run_57000(); return;
                    }
                    r2 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56f64;
                        continue;
                    }
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5704c;
                        run_57000(); return;
                    }
                case 0x56f64:
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x56f78;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x56f78:
                    r4 = r2 + r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x56f8c;
                    pc=0x4a800;
                    run_4a800(); return;
                case 0x56f8c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5704c;
                        run_57000(); return;
                    }
                    r2 = r16 + r0;
                case 0x56f98:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576b8;
                        run_57600(); return;
                    }
                    r3 = 32752 << 16;
                    r4 = 1712 << 16;
                    r3 = r2 & r3;
                    r4 = r4 + 1;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576b8;
                        run_57600(); return;
                    }
                    r2 = 880 << 16;
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57054;
                        run_57000(); return;
                    }
                case 0x56fd0:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x56a8c;
                    run_56a00(); return;
                case 0x56fe8:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5733c;
                        run_57200(); return;
                    }
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r3 = r2 & r4;
                case 0x57000:
                    pc=0x57000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57000() throws ExecutionException { /* 0x57000 - 0x57200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57000:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x575a0;
                        run_57400(); return;
                    }
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                case 0x57010:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5704c;
                        continue;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x57030;
                    pc=0x4ac00;
                    run_4ac00(); return;
                case 0x57030:
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                case 0x5704c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a8c;
                        run_56a00(); return;
                    }
                case 0x57054:
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r0;
                    f0 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = 14672 << 16;
                    f2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r4;
                    f1 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a8c;
                        run_56a00(); return;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56a8c;
                        run_56a00(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x56a8c;
                    run_56a00(); return;
                case 0x570b4:
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x568f0;
                        run_56800(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x56a8c;
                    run_56a00(); return;
                case 0x570f4:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                case 0x570fc:
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x562c4;
                    run_56200(); return;
                case 0x57110:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x563b4;
                        run_56200(); return;
                    }
                    r2 = r0 - r2;
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57158;
                        continue;
                    }
                    r4 = 6 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 5616;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x57158:
                    r2 = r2 >> 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x563b4;
                        run_56200(); return;
                    }
                    r3 = r2 < 32 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57254;
                        run_57200(); return;
                    }
                    r3 = r2 & 16;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5771c;
                        run_57600(); return;
                    }
                    r22 = r0 + r0;
                case 0x57180:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x571d0;
                        continue;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = 6 << 16;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r3 + 7976;
                case 0x57198:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x571b8;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x571b8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57198;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x571d0:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57218;
                        run_57200(); return;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r0 + 107;
                    r2 = r3 << 1;
                    r2 = r2 >>> 21;
                    r2 = r4 - r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x57218;
                        run_57200(); return;
                    }
                    r4 = r2 < 32 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5776c;
                        run_57600(); return;
                    }
                case 0x57200:
                    pc=0x57200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57200() throws ExecutionException { /* 0x57200 - 0x57400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57200:
                    r4 = r2 < 53 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5778c;
                        run_57600(); return;
                    }
                    r2 = 880 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x57218:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f0 = r0;
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x563cc;
                        run_56200(); return;
                    }
                case 0x57254:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x55cd8;
                    run_55c00(); return;
                case 0x5726c:
                    f2 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = f2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = f3;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x569a8;
                    run_56800(); return;
                case 0x57294:
                    r17 = r16 + r0;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55e64;
                    run_55e00(); return;
                case 0x572ac:
                    f4 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x55f60;
                    run_55e00(); return;
                case 0x572c8:
                    r3 = r0 + 37;
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r3 - r7;
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56354;
                        run_56200(); return;
                    }
                    r2 = r0 + 15;
                    r7 = r2 - r7;
                    r2 = 6 << 16;
                    r2 = r2 + 5616;
                    r3 = r7 << 3;
                    r3 = r3 + r2;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r4 - r7;
                    r3 = r3 << 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x55cd8;
                    run_55c00(); return;
                case 0x5733c:
                    r2 = 15 << 16;
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x574a8;
                        run_57400(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x574a8;
                        run_57400(); return;
                    }
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56f98;
                    run_56e00(); return;
                case 0x57370:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x56c68;
                    run_56c00(); return;
                case 0x57380:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x573b8;
                        continue;
                    }
                    r5 = readPages[(r19+11508)>>>12][((r19+11508)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x573a4;
                    pc=0x4b600;
                    run_4b600(); return;
                case 0x573a4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x573b4;
                    pc=0x49400;
                    run_49400(); return;
                case 0x573b4:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                case 0x573b8:
                    r3 = (r17&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x562a8;
                        run_56200(); return;
                    }
                    r3 = 6 << 16;
                    r17 = r17 << 2;
                    r3 = r3 + 7948;
                    r3 = r3 + r17;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x573e8:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x562a8;
                    run_56200(); return;
                case 0x57400:
                    pc=0x57400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57400() throws ExecutionException { /* 0x57400 - 0x57600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57400:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    r3 = 65519 << 16;
                    r4 = r4 + 1075;
                    r3 = r3 | 65535;
                    r4 = r4 << 20;
                    r3 = r5 & r3;
                    r3 = r4 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x562a8;
                    run_56200(); return;
                case 0x57430:
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r5 = r0 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x562a8;
                    run_56200(); return;
                case 0x5744c:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x562a8;
                    run_56200(); return;
                case 0x5745c:
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r4 < -22 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x56354;
                        run_56200(); return;
                    }
                    r3 = 6 << 16;
                    r2 = r4 << 3;
                    r3 = r3 + 5616;
                    r2 = r3 - r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x55cd8;
                    run_55c00(); return;
                case 0x574a8:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5704c;
                        run_57000(); return;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x574d0;
                    pc=0x4ac00;
                    run_4ac00(); return;
                case 0x574d0:
                    f4 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    f1 = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x56fd0;
                        run_56e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5704c;
                    run_57000(); return;
                case 0x5750c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x56e24;
                    run_56e00(); return;
                case 0x57518:
                    r2 = r0 + 73;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x55cc8;
                        run_55c00(); return;
                    }
                case 0x57524:
                    r4 = 6 << 16;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r4 + 7748;
                case 0x57530:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57618;
                        run_57600(); return;
                    }
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57568;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x57568:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x57530;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x55cc8;
                    run_55c00(); return;
                case 0x57578:
                    r2 = 848 << 16;
                    r2 = r5 + r2;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x563cc;
                    run_56200(); return;
                case 0x575a0:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576fc;
                        run_57600(); return;
                    }
                    r3 = 32752 << 16;
                    r5 = 1696 << 16;
                    r3 = r4 & r3;
                    r5 = r5 + 1;
                    r5 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x576fc;
                        run_57600(); return;
                    }
                    r5 = r0 + 107;
                    r3 = r3 >>> 20;
                    r3 = r5 - r3;
                    r5 = r0 + -1;
                    r3 = r5 << (r3&0x1f);
                case 0x575dc:
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x57010;
                        run_57000(); return;
                    }
                    r2 = 32752 << 16;
                    r4 = r4 & r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    r2 = 16 << 16;
                    r2 = r4 + r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x57600:
                    pc=0x57600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57600() throws ExecutionException { /* 0x57600 - 0x57800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57600:
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5704c;
                    run_57000(); return;
                case 0x57618:
                    r4 = 6 << 16;
                    r7 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r4 + 7752;
                case 0x57628:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r2 + 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57668;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5765c;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x5765c:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x57628;
                        continue;
                    }
                    r2 = r7 + 1;
                case 0x57668:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x570fc;
                    run_57000(); return;
                case 0x57674:
                    r2 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r2 + r30;
                    r30 = r30 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x56c88;
                    run_56c00(); return;
                case 0x5768c:
                    r2 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 40;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57728;
                        continue;
                    }
                case 0x576a4:
                    r4 = 32760 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x562c4;
                    run_56200(); return;
                case 0x576b8:
                    r3 = 32752 << 16;
                    r2 = r2 & r3;
                    r3 = 65520 << 16;
                    r3 = r2 + r3;
                    r5 = r0 + -1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r3 | r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x5704c;
                    run_57000(); return;
                case 0x576fc:
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x575dc;
                    run_57400(); return;
                case 0x57708:
                    r6 = 6 << 16;
                    r4 = r0 + r0;
                    r6 = r6 + 5576;
                    /* Next insn is delay slot */ 
                    pc=0x56d70;
                    run_56c00(); return;
                case 0x5771c:
                    r22 = r0 + 106;
                    /* Next insn is delay slot */ 
                    pc=0x57180;
                    run_57000(); return;
                case 0x57728:
                    r5 = 6 << 16;
                    r4 = r29 + 40;
                    r5 = r5 + 11488;
                    r6 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x57740;
                    pc=0x5ce00;
                    run_5ce00(); return;
                case 0x57740:
                    r3 = r0 + 5;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x576a4;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = 32752 << 16;
                    r2 = r3 | r2;
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x562c4;
                    run_56200(); return;
                case 0x5776c:
                    r3 = r0 + -1;
                    r2 = r3 << (r2&0x1f);
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x57218;
                    run_57200(); return;
                case 0x5778c:
                    r4 = r0 + -1;
                    r2 = r4 << (r2&0x1f);
                    r2 = r2 & r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x57218;
                    run_57200(); return;
                case 0x57800:
                    pc=0x57800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57800() throws ExecutionException { /* 0x57800 - 0x57a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x55c00;
                    run_55c00(); return;
                case 0x57a00:
                    pc=0x57a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57a00() throws ExecutionException { /* 0x57a00 - 0x57c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f20;
                    /* Next insn is delay slot */ 
                    r31=0x57a28;
                    pc=0x55c00;
                    run_55c00(); return;
                case 0x57a28:
                    f12 = f0;
                    f13 = f1;
                    f20 = f0;
                    f21 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x57a38;
                    pc=0x4ba00;
                    run_4ba00(); return;
                case 0x57a38:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57a60;
                        continue;
                    }
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x57a60:
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x55600;
                    run_55600(); return;
                case 0x57c00:
                    pc=0x57c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57c00() throws ExecutionException { /* 0x57c00 - 0x57e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57c00:
                    r29 = r29 + -8;
                    r11 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x57c1c;
                    continue;
                case 0x57c18:
                    r2 = r3 + r0;
                case 0x57c1c:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c18;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x57e18;
                        run_57e00(); return;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x57e2c;
                        run_57e00(); return;
                    }
                    r25 = r0 + r0;
                case 0x57c5c:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d9c;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57d80;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d9c;
                        continue;
                    }
                    r24 = r0 + 10;
                    r7 = r0 + 10;
                case 0x57c88:
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57da8;
                        continue;
                    }
                case 0x57c90:
                    r13 = 32768 << 16;
                case 0x57c94:
                    if(r24 != r0) {
                        /* Next insn is delay slot */ 
                        if(r24!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                        }
                        pc=0x57ca0;
                        continue;
                    }
                    if(r24!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x57ca0:
                    r12 = r0 + r0;
                    r2 = r0 + r0;
                    r15 = r0 + 1;
                    r14 = r0 + -1;
                    r16 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x57d08;
                    continue;
                case 0x57cc0:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d48;
                        continue;
                    }
                case 0x57cd0:
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x57cfc;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57dc4;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x57db8;
                        continue;
                    }
                case 0x57cec:
                    { long hilo = (long)(r2) * ((long)r24); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r12 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x57cfc:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x57d08:
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r10 = r9 & 4;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cc0;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d48;
                        continue;
                    }
                    if(r9 == r15) {
                        /* Next insn is delay slot */ 
                        pc=0x57dd0;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x57d3c:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cd0;
                        continue;
                    }
                case 0x57d48:
                    r7 = r0 + -1;
                    if(r12 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x57de0;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e0c;
                        run_57e00(); return;
                    }
                case 0x57d5c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d70;
                        continue;
                    }
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e00;
                        run_57e00(); return;
                    }
                case 0x57d6c:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                case 0x57d70:
                    r16 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x57d80:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x57e4c;
                        run_57e00(); return;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e64;
                        run_57e00(); return;
                    }
                case 0x57d9c:
                    r24 = r7 + r0;
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57c90;
                        continue;
                    }
                case 0x57da8:
                    r13 = 32767 << 16;
                    r13 = r13 | 65535;
                    /* Next insn is delay slot */ 
                    pc=0x57c94;
                    continue;
                case 0x57db8:
                    r9 = r16 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57cec;
                        continue;
                    }
                case 0x57dc4:
                    r12 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x57cfc;
                    continue;
                case 0x57dd0:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x57d3c;
                    continue;
                case 0x57de0:
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57e40;
                        run_57e00(); return;
                    }
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                case 0x57df0:
                    r5 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x57d70;
                        continue;
                    }
                case 0x57e00:
                    pc=0x57e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_57e00() throws ExecutionException { /* 0x57e00 - 0x58000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x57e00:
                    r5 = r3 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x57d6c;
                    run_57c00(); return;
                case 0x57e0c:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x57d5c;
                    run_57c00(); return;
                case 0x57e18:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x57c5c;
                    run_57c00(); return;
                case 0x57e2c:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57c5c;
                    run_57c00(); return;
                case 0x57e40:
                    r2 = 32768 << 16;
                    /* Next insn is delay slot */ 
                    pc=0x57df0;
                    run_57c00(); return;
                case 0x57e4c:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 16;
                    r3 = r3 + 2;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x57c88;
                    run_57c00(); return;
                case 0x57e64:
                    r24 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x57c88;
                    run_57c00(); return;
                case 0x58000:
                    pc=0x58000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58000() throws ExecutionException { /* 0x58000 - 0x58200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x57c00;
                    run_57c00(); return;
                case 0x58200:
                    pc=0x58200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58200() throws ExecutionException { /* 0x58200 - 0x58400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58200:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r23 = r6 + r0;
                    r18 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x583fc;
                        continue;
                    }
                    r20 = r4 + r0;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r30 = r0 + r0;
                    r16 = r0 + r0;
                case 0x58258:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582c4;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r19 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582d8;
                        continue;
                    }
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x582e8;
                        continue;
                    }
                    r22 = r19 + r0;
                case 0x58288:
                    r5 = r30 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x58298;
                    pc=0x2ee00;
                    run_2ee00(); return;
                case 0x58298:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r3 = r3 - r19;
                    r4 = r4 + r22;
                    r2 = r2 - r16;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x583fc;
                        continue;
                    }
                case 0x582c4:
                    r30 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x58258;
                    continue;
                case 0x582d8:
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58288;
                    continue;
                case 0x582e8:
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r6 = r16 + 1;
                    r21 = r4 - r5;
                    r4 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r6 = r6 + r21;
                    r22 = r4 << 1;
                    r4 = r22 + r4;
                    r22 = r4 >>> 31;
                    r22 = r22 + r4;
                    r22 = r22 >> 1;
                    r4 = ((r22 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58398;
                        continue;
                    }
                    r2 = r2 & 1024;
                    r22 = r6 + r0;
                    r4 = r20 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x583ac;
                        continue;
                    }
                case 0x58330:
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5833c;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x5833c:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x583d0;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5835c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x5835c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x58370:
                    r4 = r19 + r21;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r22;
                    r22 = r22 - r21;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r19;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58288;
                    continue;
                case 0x58398:
                    r2 = r2 & 1024;
                    r6 = r22 + r0;
                    r4 = r20 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58330;
                        continue;
                    }
                case 0x583ac:
                    /* Next insn is delay slot */ 
                    r31=0x583b4;
                    pc=0x30600;
                    run_30600(); return;
                case 0x583b4:
                    r19 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58370;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x583d0;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x583d0:
                    r2 = r0 + 12;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r0;
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x58400;
                    run_58400(); return;
                case 0x583fc:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                case 0x58400:
                    pc=0x58400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58400() throws ExecutionException { /* 0x58400 - 0x58600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58400:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x58600:
                    pc=0x58600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58600() throws ExecutionException { /* 0x58600 - 0x58800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58600:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -224;
                    r2 = r2 & 128;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r17;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r16;
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r31;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r30;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r23;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r22;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r21;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r20;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r19;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r18;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r4;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5865c;
                        continue;
                    }
                    r2 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x595e4;
                        run_59400(); return;
                    }
                case 0x5865c:
                    r5 = r29 + 119;
                    r21 = r29 + 120;
                    r4 = r29 + 16;
                    r2 = 6 << 16;
                    r6 = r21 - r5;
                    r18 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r4;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                    r3 = r4 + r0;
                    r22 = r2 + 8388;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r5;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r6;
                case 0x58698:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59098;
                        run_59000(); return;
                    }
                case 0x586a8:
                    r4 = r0 + 37;
                    r19 = r17 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x586c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x58728;
                    continue;
                case 0x586c0:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x586dc;
                        continue;
                    }
                case 0x586c8:
                    r19 = r19 + 1;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x586c0;
                        continue;
                    }
                case 0x586dc:
                    r20 = r19 - r17;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58728;
                        continue;
                    }
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    r2 = r2 + 1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x592dc;
                        run_59200(); return;
                    }
                    r3 = r3 + 8;
                case 0x58718:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r2;
                case 0x58728:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59560;
                        run_59400(); return;
                    }
                    r2 = r19 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r23 = r0 + -1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                    r19 = r0 + r0;
                    r7 = r0 + 42;
                    r8 = r0 + r0;
                case 0x58758:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r2 + 1;
                case 0x58760:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58cdc;
                        run_58c00(); return;
                    }
                case 0x58770:
                    r5 = 6 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 8016;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x58790:
                    r19 = r19 | 16;
                case 0x58794:
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    continue;
                case 0x587a0:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r8 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5943c;
                        run_59400(); return;
                    }
                    r8 = r0 - r8;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                case 0x587c0:
                    r19 = r19 | 4;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    continue;
                case 0x587d0:
                    r6 = r0 + 43;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    continue;
                case 0x587e0:
                    r2 = r19 & 16;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x594ac;
                        run_59400(); return;
                    }
                    r19 = r19 & 64;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5958c;
                        run_59400(); return;
                    }
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                case 0x58800:
                    pc=0x58800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58800() throws ExecutionException { /* 0x58800 - 0x58a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58800:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x58698;
                    run_58600(); return;
                case 0x5881c:
                    r2 = 6 << 16;
                    r2 = r2 + 692;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                case 0x58830:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58848;
                        continue;
                    }
                    r2 = r19 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59490;
                        run_59400(); return;
                    }
                case 0x58848:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                case 0x5885c:
                    r5 = r19 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58dc8;
                        run_58c00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58dc8;
                        run_58c00(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r19 | 2;
                    r4 = r0 + 2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                case 0x58890:
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x588a0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r19 = r19 & r6;
                case 0x588a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5910c;
                        run_59000(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5910c;
                        run_59000(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x588c4;
                        continue;
                    }
                    r2 = r19 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59474;
                        run_59400(); return;
                    }
                case 0x588c4:
                    r30 = r21 + r0;
                case 0x588c8:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r6 < r23 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x588e4;
                        continue;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r23;
                case 0x588e4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5898c;
                        continue;
                    }
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5898c;
                    continue;
                case 0x58904:
                    r19 = r19 | 64;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    run_58600(); return;
                case 0x58914:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58c54;
                        run_58c00(); return;
                    }
                case 0x58928:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                case 0x5893c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58c7c;
                        run_58c00(); return;
                    }
                case 0x58944:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x58890;
                    continue;
                case 0x58958:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r30 = r29 + 80;
                case 0x58988:
                    r23 = r0 + r0;
                case 0x5898c:
                    r4 = r19 & 2;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x589ac;
                        continue;
                    }
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                case 0x589ac:
                    r6 = r19 & 132;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r6;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58dd4;
                        run_58c00(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r2 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58dd4;
                        run_58c00(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59648;
                        run_59600(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58a0c;
                    run_58a00(); return;
                case 0x589f8:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                case 0x58a00:
                    pc=0x58a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58a00() throws ExecutionException { /* 0x58a00 - 0x58c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58a00:
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58a70;
                        continue;
                    }
                case 0x58a0c:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x589f8;
                        run_58800(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x58a48;
                    pc=0x58200;
                    run_58200(); return;
                case 0x58a48:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58a0c;
                        continue;
                    }
                case 0x58a70:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r20 + r5;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x593e0;
                        run_59200(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x58ddc;
                    run_58c00(); return;
                case 0x58aa4:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58ba0;
                        continue;
                    }
                case 0x58ab8:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                case 0x58ad0:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58890;
                    run_58800(); return;
                case 0x58ae4:
                    r2 = 6 << 16;
                    r2 = r2 + 672;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x58830;
                    run_58800(); return;
                case 0x58b00:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58da0;
                        run_58c00(); return;
                    }
                case 0x58b14:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58ad0;
                    continue;
                case 0x58b34:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 6 << 16;
                    r4 = r4 + 692;
                    r5 = r5 + 4;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r19 = r19 | 2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x58ad0;
                    continue;
                case 0x58b78:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58794;
                        run_58600(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    run_58600(); return;
                case 0x58b90:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58ab8;
                        continue;
                    }
                case 0x58ba0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x594e8;
                        run_59400(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x58ad0;
                    continue;
                case 0x58bc8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r30 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r6 + 4;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59610;
                        run_59600(); return;
                    }
                    r4 = r30 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x595ac;
                        run_59400(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r23 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x58c04;
                    pc=0x2ea00;
                    run_2ea00(); return;
                case 0x58c00:
                    pc=0x58c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58c00() throws ExecutionException { /* 0x58c00 - 0x58e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58c00:
                case 0x58c04:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59678;
                        run_59600(); return;
                    }
                    r2 = r2 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r2 = r23 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58c28;
                        continue;
                    }
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                case 0x58c28:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x58c3c:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58928;
                        run_58800(); return;
                    }
                case 0x58c54:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x594cc;
                        run_59400(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58944;
                        run_58800(); return;
                    }
                case 0x58c7c:
                    r4 = r0 + 45;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x58890;
                    run_58800(); return;
                case 0x58c9c:
                    r8 = r0 + r0;
                    r2 = r4 + -48;
                case 0x58ca4:
                    r4 = r8 << 1;
                    r17 = r17 + 1;
                    r8 = r8 << 3;
                    r8 = r4 + r8;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r8 = r8 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58ca4;
                        continue;
                    }
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58770;
                        run_58600(); return;
                    }
                case 0x58cdc:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59560;
                        run_59400(); return;
                    }
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    r4 = r0 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    r30 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x58988;
                    run_58800(); return;
                case 0x58d10:
                    r19 = r19 | 128;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    run_58600(); return;
                case 0x58d20:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r17 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x5969c;
                        run_59600(); return;
                    }
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r23 = r0 + r0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58d74;
                        continue;
                    }
                case 0x58d44:
                    r4 = r23 << 1;
                    r5 = r5 + 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r23 = r2 + r23;
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58d44;
                        continue;
                    }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x595d4;
                        run_59400(); return;
                    }
                case 0x58d74:
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58760;
                    run_58600(); return;
                case 0x58d80:
                    r19 = r19 | 1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    run_58600(); return;
                case 0x58d90:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58b14;
                        run_58a00(); return;
                    }
                case 0x58da0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59504;
                        run_59400(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x58ad0;
                    run_58a00(); return;
                case 0x58dc8:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x58ad0;
                    run_58a00(); return;
                case 0x58dd4:
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                case 0x58ddc:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58e1c;
                        run_58e00(); return;
                    }
                    r4 = r29 + 134;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                case 0x58e00:
                    pc=0x58e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_58e00() throws ExecutionException { /* 0x58e00 - 0x59000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x58e00:
                    r5 = r5 + 1;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59380;
                        run_59200(); return;
                    }
                    r3 = r3 + 8;
                case 0x58e1c:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58e5c;
                        continue;
                    }
                    r4 = r29 + 132;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + 2;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x593b0;
                        run_59200(); return;
                    }
                    r3 = r3 + 8;
                case 0x58e5c:
                    r6 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r4 = r0 + 128;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x591ac;
                        run_59000(); return;
                    }
                case 0x58e6c:
                    r4 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r23 = r23 - r4;
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58f40;
                        continue;
                    }
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59550;
                        run_59400(); return;
                    }
                    r4 = 6 << 16;
                    r20 = r4 + 8372;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58eb4;
                    continue;
                case 0x58ea0:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58f18;
                        continue;
                    }
                case 0x58eb4:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58ea0;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x58ef0;
                    pc=0x58200;
                    run_58200(); return;
                case 0x58ef0:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58eb4;
                        continue;
                    }
                case 0x58f18:
                    r2 = r2 + 1;
                    r5 = r5 + r23;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59304;
                        run_59200(); return;
                    }
                    r3 = r3 + 8;
                case 0x58f40:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r5 = r6 + r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r6;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x592a4;
                        run_59200(); return;
                    }
                    r3 = r3 + 8;
                case 0x58f6c:
                    r19 = r19 & 4;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59050;
                        run_59000(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r19 = r2 - r4;
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59050;
                        run_59000(); return;
                    }
                    r2 = r19 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59658;
                        run_59600(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r23 = r0 + 16;
                    r6 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58fc8;
                    continue;
                case 0x58fb4:
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59024;
                        run_59000(); return;
                    }
                case 0x58fc8:
                    r2 = r2 + 1;
                    r6 = r6 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58fb4;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59000;
                    pc=0x58200;
                    run_58200(); return;
                case 0x59000:
                    pc=0x59000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59000() throws ExecutionException { /* 0x59000 - 0x59200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59000:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        continue;
                    }
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x58fc8;
                        run_58e00(); return;
                    }
                case 0x59024:
                    r5 = r6 + r0;
                case 0x59028:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5944c;
                        run_59400(); return;
                    }
                case 0x59050:
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r2 < r4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5906c;
                        continue;
                    }
                    r2 = r4 + r0;
                case 0x5906c:
                    r3 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590a4;
                        continue;
                    }
                case 0x59084:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    r3 = r29 + 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x586a8;
                        run_58600(); return;
                    }
                case 0x59098:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58728;
                    run_58600(); return;
                case 0x590a4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x590b8;
                    pc=0x58200;
                    run_58200(); return;
                case 0x590b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59084;
                        continue;
                    }
                case 0x590c0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x592d0;
                        run_59200(); return;
                    }
                    r2 = r0 + -1;
                case 0x590d8:
                    r31 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r30 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r23 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r22 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r21 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r20 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r19 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r18 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r29 = r29 + 224;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5910c:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x59334;
                        run_59200(); return;
                    }
                    r6 = r0 + 2;
                    r30 = r21 + r0;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5915c;
                        continue;
                    }
                    r6 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                case 0x5912c:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r30 = r30 + -1;
                    r2 = r2 >>> 4;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5912c;
                        continue;
                    }
                    r4 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x5915c:
                    r4 = r2 & 7;
                    r30 = r30 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5915c;
                        continue;
                    }
                    r2 = r19 & 1;
                    r6 = r30 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5942c;
                        run_59400(); return;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x59370;
                        run_59200(); return;
                    }
                    r30 = r30 + -1;
                    r4 = r21 - r30;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x591ac:
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r6 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r9 = r4 - r6;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x58e6c;
                        run_58e00(); return;
                    }
                    r4 = r9 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59668;
                        run_59600(); return;
                    }
                    r6 = 6 << 16;
                    r20 = r6 + 8372;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r17;
                    r10 = r0 + 16;
                    r17 = r20 + r0;
                    r20 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59204;
                    run_59200(); return;
                case 0x591f0:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59268;
                        run_59200(); return;
                    }
                case 0x59200:
                    pc=0x59200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59200() throws ExecutionException { /* 0x59200 - 0x59400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59200:
                case 0x59204:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r10;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x591f0;
                        run_59000(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x59240;
                    pc=0x58200;
                    run_58200(); return;
                case 0x59240:
                    r10 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59204;
                        continue;
                    }
                case 0x59268:
                    r9 = r20 + r0;
                    r20 = r17 + r0;
                    r17 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x59274:
                    r2 = r2 + 1;
                    r5 = r5 + r9;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59520;
                        run_59400(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x58e6c;
                    run_58e00(); return;
                case 0x592a4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x592b8;
                    pc=0x58200;
                    run_58200(); return;
                case 0x592b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58f6c;
                    run_58e00(); return;
                case 0x592d0:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x590d8;
                    run_59000(); return;
                case 0x592dc:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x592f0;
                    pc=0x58200;
                    run_58200(); return;
                case 0x592f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58718;
                    run_58600(); return;
                case 0x59304:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59318;
                    pc=0x58200;
                    run_58200(); return;
                case 0x59318:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58f40;
                    run_58e00(); return;
                case 0x59334:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59410;
                        run_59400(); return;
                    }
                    r30 = r21 + r0;
                    r4 = r0 + 10;
                case 0x59348:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x59354;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x59354:
                    r30 = r30 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59348;
                        continue;
                    }
                case 0x59370:
                    r2 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x59380:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59394;
                    pc=0x58200;
                    run_58200(); return;
                case 0x59394:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58e1c;
                    run_58e00(); return;
                case 0x593b0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x593c4;
                    pc=0x58200;
                    run_58200(); return;
                case 0x593c4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58e5c;
                    run_58e00(); return;
                case 0x593e0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x593f4;
                    pc=0x58200;
                    run_58200(); return;
                case 0x593f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                case 0x59400:
                    pc=0x59400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59400() throws ExecutionException { /* 0x59400 - 0x59600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59400:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58ddc;
                    run_58c00(); return;
                case 0x59410:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r2 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x5942c:
                    r6 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x5943c:
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    run_58600(); return;
                case 0x5944c:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59460;
                    pc=0x58200;
                    run_58200(); return;
                case 0x59460:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x59050;
                    run_59000(); return;
                case 0x59474:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x59490:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x5885c;
                    run_58800(); return;
                case 0x594ac:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x58698;
                    run_58600(); return;
                case 0x594cc:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x5893c;
                    run_58800(); return;
                case 0x594e8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x58ad0;
                    run_58a00(); return;
                case 0x59504:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x58ad0;
                    run_58a00(); return;
                case 0x59520:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59534;
                    pc=0x58200;
                    run_58200(); return;
                case 0x59534:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x58e6c;
                    run_58e00(); return;
                case 0x59550:
                    r6 = 6 << 16;
                    r20 = r6 + 8372;
                    /* Next insn is delay slot */ 
                    pc=0x58f18;
                    run_58e00(); return;
                case 0x59560:
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x590c0;
                        run_59000(); return;
                    }
                    r4 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r6 = r29 + 120;
                    /* Next insn is delay slot */ 
                    r31=0x59584;
                    pc=0x58200;
                    run_58200(); return;
                case 0x59584:
                    /* Next insn is delay slot */ 
                    pc=0x590c0;
                    run_59000(); return;
                case 0x5958c:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r6;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x58698;
                    run_58600(); return;
                case 0x595ac:
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x595b8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x595b8:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x595d4:
                    r23 = r0 + -1;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58760;
                    run_58600(); return;
                case 0x595e4:
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x595f0;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x595f0:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x596c8;
                        run_59600(); return;
                    }
                case 0x59600:
                    pc=0x59600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59600() throws ExecutionException { /* 0x59600 - 0x59800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59600:
                    r2 = r0 + 64;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5865c;
                    run_58600(); return;
                case 0x59610:
                    r2 = (r23&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59620;
                        continue;
                    }
                    r23 = r0 + 6;
                case 0x59620:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r2 = r23 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59690;
                        continue;
                    }
                case 0x59630:
                    r8 = 6 << 16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r30 = r8 + 4740;
                    /* Next insn is delay slot */ 
                    pc=0x58988;
                    run_58800(); return;
                case 0x59648:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x58a70;
                    run_58a00(); return;
                case 0x59658:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x59028;
                    run_59000(); return;
                case 0x59668:
                    r4 = 6 << 16;
                    r20 = r4 + 8372;
                    /* Next insn is delay slot */ 
                    pc=0x59274;
                    run_59200(); return;
                case 0x59678:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x588c8;
                    run_58800(); return;
                case 0x59690:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59630;
                    continue;
                case 0x5969c:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r23 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r23 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5943c;
                        run_59400(); return;
                    }
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r23 = r0 + -1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x58758;
                    run_58600(); return;
                case 0x596c8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x590d8;
                    run_59000(); return;
                case 0x59800:
                    pc=0x59800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59800() throws ExecutionException { /* 0x59800 - 0x59a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59800:
                    r2 = r0 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x59924;
                        continue;
                    }
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -32;
                    r2 = r2 & 65503;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff];
                    r16 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x598b0;
                        continue;
                    }
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = readPages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59888;
                        continue;
                    }
                case 0x5984c:
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                case 0x59874:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59888:
                    r5 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x59898;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x59898:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5984c;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x59874;
                    continue;
                case 0x598b0:
                    r2 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r3 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x598dc;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x598dc;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x59930;
                        continue;
                    }
                case 0x598dc:
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    addr=r6+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r6+60)>>>12][((r6+60)>>>2)&0x3ff] = r2;
                    r2 = r6 + 64;
                    writePages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r6 + 66;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    writePages[(r6+56)>>>12][((r6+56)>>>2)&0x3ff] = r3;
                    r2 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59924:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59930:
                    r3 = r3 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x59874;
                    continue;
                case 0x59a00:
                    pc=0x59a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59a00() throws ExecutionException { /* 0x59a00 - 0x59c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59a68;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x59a30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x59a30;
                    pc=0x2c200;
                    run_2c200(); return;
                case 0x59a30:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59a68;
                        continue;
                    }
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                case 0x59a54:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59a68:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x59a54;
                    continue;
                case 0x59c00:
                    pc=0x59c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59c00() throws ExecutionException { /* 0x59c00 - 0x59e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59c00:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -56;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r22 = r6 + r0;
                    r21 = lo;
                    r23 = r7 + r0;
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59d0c;
                        continue;
                    }
                    r20 = r4 + r0;
                    r19 = r5 + r0;
                    r18 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x59c94;
                    continue;
                case 0x59c58:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59c64;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x59c64:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r19 = r19 + r17;
                    r18 = r18 - r17;
                    /* Next insn is delay slot */ 
                    r31=0x59c8c;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x59c8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59d18;
                        continue;
                    }
                case 0x59c94:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59c58;
                        continue;
                    }
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59cb8;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x59cb8:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 - r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r18;
                    r2 = r23 + r0;
                case 0x59cdc:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x59d0c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59cdc;
                    continue;
                case 0x59d18:
                    r2 = r21 - r18;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x59d28;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x59d28:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x59cdc;
                    continue;
                case 0x59e00:
                    pc=0x59e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_59e00() throws ExecutionException { /* 0x59e00 - 0x5a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x59e00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -416;
                    writePages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff] = r30;
                    writePages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff] = r16;
                    writePages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff] = r31;
                    writePages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff] = r23;
                    writePages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff] = r22;
                    writePages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff] = r21;
                    writePages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff] = r20;
                    writePages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff] = r19;
                    writePages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff] = r18;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e64;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x59e64:
                    r19 = 6 << 16;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r0;
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r0;
                    r19 = r19 + 8404;
                case 0x59e7c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a084;
                        run_5a000(); return;
                    }
                case 0x59e90:
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r4 = r5 + r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59f2c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59f08;
                        continue;
                    }
                case 0x59ec0:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r5 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e7c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59ec0;
                        continue;
                    }
                case 0x59f08:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x59f18;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x59f18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e7c;
                        continue;
                    }
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x59ec0;
                    continue;
                case 0x59f2c:
                    r4 = r0 + 37;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5a100;
                        run_5a000(); return;
                    }
                    r21 = r0 + r0;
                    r22 = r0 + r0;
                case 0x59f40:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r4 & 255;
                    r6 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59f74;
                        continue;
                    }
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x59f74:
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 1;
                    r4 = r4 & 3;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x59f90;
                        continue;
                    }
                case 0x59f8c:
                    r21 = r21 | 1;
                case 0x59f90:
                    r3 = 5 << 16;
                    r3 = r3 + 31744;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                case 0x59fa4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a16c;
                        run_5a000(); return;
                    }
                case 0x59fb4:
                    r2 = r21 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a0a8;
                        run_5a000(); return;
                    }
                case 0x59fc0:
                    r2 = r0 + 2;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5a314;
                        run_5a200(); return;
                    }
                    r2 = r0 + 3;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5a2a0;
                        run_5a200(); return;
                    }
                    r2 = r0 + 1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5a1e0;
                        run_5a000(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59ff0;
                        continue;
                    }
                    r22 = r0 + 1;
                case 0x59ff0:
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8d8;
                        run_5a800(); return;
                    }
                    r21 = r21 & 16;
                case 0x5a000:
                    pc=0x5a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a000() throws ExecutionException { /* 0x5a000 - 0x5a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a000:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aa78;
                        run_5aa00(); return;
                    }
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5a040;
                    continue;
                case 0x5a014:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r2;
                    r22 = r22 - r2;
                    r2 = r4 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a038;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5a038:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aba4;
                        run_5aa00(); return;
                    }
                case 0x5a040:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r2 < r22 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a014;
                        continue;
                    }
                    r2 = r2 - r22;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r22;
                    r9 = r2 + r22;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r9;
                case 0x5a06c:
                    r23 = r23 + r21;
                case 0x5a070:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e90;
                        run_59e00(); return;
                    }
                case 0x5a084:
                    r2 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5a1ac;
                    continue;
                case 0x5a090:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a0a0;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5a0a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        continue;
                    }
                case 0x5a0a8:
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5a0c0;
                    continue;
                case 0x5a0b8:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x5a0c0:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59fc0;
                        run_59e00(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a0b8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5a090;
                    continue;
                case 0x5a100:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5abb8;
                        run_5aa00(); return;
                    }
                case 0x5a110:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5a084;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59e7c;
                    run_59e00(); return;
                case 0x5a148:
                    r21 = r21 | 1;
                case 0x5a14c:
                    r3 = 5 << 16;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + -10240;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 8;
                    r20 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x59fb4;
                        run_59e00(); return;
                    }
                case 0x5a16c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a17c;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5a17c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59fb4;
                        run_59e00(); return;
                    }
                case 0x5a184:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a1a8;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a084;
                        continue;
                    }
                case 0x5a1a8:
                    r2 = r0 + -1;
                case 0x5a1ac:
                    r31 = readPages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff];
                    r30 = readPages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff];
                    r23 = readPages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff];
                    r22 = readPages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff];
                    r21 = readPages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff];
                    r20 = readPages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff];
                    r19 = readPages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff];
                    r18 = readPages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff];
                    r17 = readPages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff];
                    r16 = readPages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff];
                    r29 = r29 + 416;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5a1e0:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a1ec;
                        continue;
                    }
                    r22 = r0 + -1;
                case 0x5a1ec:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a610;
                        run_5a600(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x5a200:
                    pc=0x5a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a200() throws ExecutionException { /* 0x5a200 - 0x5a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a200:
                    r10 = r29 + 24;
                case 0x5a204:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a28c;
                        continue;
                    }
                case 0x5a220:
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x5a06c;
                        run_5a000(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a204;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x5a25c;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5a25c:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a06c;
                        run_5a000(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a220;
                        continue;
                    }
                case 0x5a28c:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a084;
                        run_5a000(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x5a070;
                    run_5a000(); return;
                case 0x5a2a0:
                    r2 = r22 + -1;
                    r2 = (r2&0xffffffffL) < (39&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a600;
                        run_5a600(); return;
                    }
                    r13 = r0 + r0;
                case 0x5a2b4:
                    r11 = r29 + 280;
                    r2 = 6 << 16;
                    r10 = r21 | 3456;
                    r12 = r0 + r0;
                    r21 = r11 + r0;
                    r14 = r0 + 512;
                    r7 = r2 + 9200;
                case 0x5a2d0:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r4 + -43;
                    r2 = r2 & 255;
                    r5 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a498;
                        run_5a400(); return;
                    }
                    r3 = 6 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 8888;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x5a314:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a3b0;
                        continue;
                    }
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a3c0;
                        continue;
                    }
                case 0x5a328:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a810;
                        run_5a800(); return;
                    }
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x5a340:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a06c;
                        run_5a000(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x5a06c;
                        run_5a000(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a340;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a398;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5a398:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a06c;
                        run_5a000(); return;
                    }
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5a340;
                    continue;
                case 0x5a3b0:
                    r2 = r21 & 1;
                    r22 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a328;
                        continue;
                    }
                case 0x5a3c0:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r20 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x5a3d8;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x5a3d8:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aad0;
                        run_5aa00(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x5a3f4:
                    r6 = r0 + r0;
                case 0x5a3f8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                case 0x5a400:
                    pc=0x5a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a400() throws ExecutionException { /* 0x5a400 - 0x5a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a400:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a428;
                        continue;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5abf0;
                        run_5aa00(); return;
                    }
                case 0x5a428:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e7c;
                        run_59e00(); return;
                    }
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                case 0x5a434:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x59e7c;
                    run_59e00(); return;
                case 0x5a44c:
                    r2 = r10 & 1536;
                    if(r2 != r14) {
                        /* Next insn is delay slot */ 
                        pc=0x5a498;
                        continue;
                    }
                    r2 = r0 + -513;
                    r10 = r10 & r2;
                    r10 = r10 | 1280;
                    r18 = r0 + 16;
                case 0x5a468:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a594;
                        continue;
                    }
                case 0x5a484:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                case 0x5a48c:
                    r22 = r22 + -1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a2d0;
                        run_5a200(); return;
                    }
                case 0x5a498:
                    r2 = r10 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a4b8;
                        continue;
                    }
                    r2 = ((r11 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab3c;
                        run_5aa00(); return;
                    }
                case 0x5a4b0:
                    if(r21 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x5a084;
                        run_5a000(); return;
                    }
                case 0x5a4b8:
                    r2 = r10 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aa04;
                        run_5aa00(); return;
                    }
                case 0x5a4c4:
                    r11 = r21 - r11;
                    r12 = r11 + r12;
                    r23 = r23 + r12;
                    /* Next insn is delay slot */ 
                    pc=0x59e7c;
                    run_59e00(); return;
                case 0x5a4d8:
                    r2 = r18 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a498;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5a468;
                    continue;
                case 0x5a4f4:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r18 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a498;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5a468;
                    continue;
                case 0x5a520:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5a468;
                    continue;
                case 0x5a53c:
                    r2 = r10 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a468;
                        continue;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a558;
                        continue;
                    }
                    r10 = r10 | 512;
                    r18 = r0 + 8;
                case 0x5a558:
                    r2 = r10 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aac0;
                        run_5aa00(); return;
                    }
                    r2 = r0 + -897;
                    r10 = r10 & r2;
                    if(r13 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a57c;
                        continue;
                    }
                    r13 = r13 + -1;
                    r22 = r22 + 1;
                case 0x5a57c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r12 = r12 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a484;
                        continue;
                    }
                case 0x5a594:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r13;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r14;
                    /* Next insn is delay slot */ 
                    r31=0x5a5bc;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5a5bc:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r13 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r14 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a48c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5a498;
                    continue;
                case 0x5a5e4:
                    r2 = r10 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a498;
                        continue;
                    }
                    r2 = r0 + -129;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5a468;
                    continue;
                case 0x5a600:
                    pc=0x5a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a600() throws ExecutionException { /* 0x5a600 - 0x5a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a600:
                    r13 = r22 + -39;
                    r22 = r0 + 39;
                    /* Next insn is delay slot */ 
                    pc=0x5a2b4;
                    run_5a200(); return;
                case 0x5a610:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r20 = r21 + r0;
                case 0x5a634:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a6bc;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a6bc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a634;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x5a6a8;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5a6a8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a634;
                        continue;
                    }
                    if(r21 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        run_5a000(); return;
                    }
                case 0x5a6bc:
                    r21 = r20 - r21;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a084;
                        run_5a000(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r23 = r23 + r21;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5a070;
                    run_5a000(); return;
                case 0x5a6ec:
                    r3 = 5 << 16;
                    r3 = r3 + -10240;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x59fa4;
                    run_59e00(); return;
                case 0x5a708:
                    r20 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x59fa4;
                    run_59e00(); return;
                case 0x5a714:
                    r21 = r21 | 544;
                case 0x5a718:
                    r3 = 5 << 16;
                    r3 = r3 + -10240;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 16;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x59fa4;
                    run_59e00(); return;
                case 0x5a734:
                    r2 = r21 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x59e7c;
                        run_59e00(); return;
                    }
                    r2 = r21 & 4;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5abd8;
                        run_5aa00(); return;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r23&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x59e7c;
                    run_59e00(); return;
                case 0x5a768:
                    r21 = r21 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x59f40;
                    run_59e00(); return;
                case 0x5a774:
                    r3 = 5 << 16;
                    r3 = r3 + 31744;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + r0;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x59fa4;
                    run_59e00(); return;
                case 0x5a790:
                    r21 = r21 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x59f40;
                    run_59e00(); return;
                case 0x5a79c:
                    r21 = r21 | 64;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x59fa4;
                    run_59e00(); return;
                case 0x5a7ac:
                    r5 = r16 + r0;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x5a7bc;
                    pc=0x55400;
                    run_55400(); return;
                case 0x5a7bc:
                    r16 = r2 + r0;
                    r21 = r21 | 64;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x59fa4;
                    run_59e00(); return;
                case 0x5a7d0:
                    r21 = r21 | 512;
                    /* Next insn is delay slot */ 
                    pc=0x5a718;
                    continue;
                case 0x5a7dc:
                    r21 = r21 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x59f40;
                    run_59e00(); return;
                case 0x5a7e8:
                    r21 = r21 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x59f40;
                    run_59e00(); return;
                case 0x5a7f4:
                    r2 = r22 << 1;
                    r9 = r22 << 3;
                    r2 = r2 + r9;
                case 0x5a800:
                    pc=0x5a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5a800() throws ExecutionException { /* 0x5a800 - 0x5aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5a800:
                    r4 = r4 + -48;
                    r22 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x59f40;
                    run_59e00(); return;
                case 0x5a810:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r20 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r21 = r20 + r0;
                case 0x5a834:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8b0;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a8b0;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a834;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a8a8;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5a8a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a834;
                        continue;
                    }
                case 0x5a8b0:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r6 = r21 - r20;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + r6;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x59e7c;
                    run_59e00(); return;
                case 0x5a8d8:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r21 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x5a8f0;
                    pc=0x36fec;
                    run_36e00(); return;
                case 0x5a8f0:
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r21;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab08;
                        run_5aa00(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x5a920:
                    r21 = r0 + r0;
                case 0x5a924:
                    /* Next insn is delay slot */ 
                    r31=0x5a92c;
                    pc=0x48600;
                    run_48600(); return;
                case 0x5a92c:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        run_5a000(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r6 = r3 + r21;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    r20 = r21 + 1;
                    r5 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r6 = r29 + 280;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5a980;
                    pc=0x54c00;
                    run_54c00(); return;
                case 0x5a980:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        run_5a000(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab80;
                        run_5aa00(); return;
                    }
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a9b0;
                        continue;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                case 0x5a9b0:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r23 = r23 + r20;
                    r22 = r22 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab98;
                        run_5aa00(); return;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                case 0x5a9d4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ab14;
                        run_5aa00(); return;
                    }
                case 0x5a9e4:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a924;
                        continue;
                    }
                case 0x5a9ec:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a434;
                        run_5a400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x59e7c;
                    run_59e00(); return;
                case 0x5aa00:
                    pc=0x5aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5aa00() throws ExecutionException { /* 0x5aa00 - 0x5ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5aa00:
                case 0x5aa04:
                    r3 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                    r5 = r11 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    r6 = r0 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x5aa30;
                    return;
                case 0x5aa30:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r4 = r10 & 32;
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aadc;
                        continue;
                    }
                case 0x5aa48:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x5aa60:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5a4c4;
                    run_5a400(); return;
                case 0x5aa78:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r7 = r22 + r0;
                    r21 = r3 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x5aa9c;
                    pc=0x59c00;
                    run_59c00(); return;
                case 0x5aa9c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        run_5a000(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x59e7c;
                    run_59e00(); return;
                case 0x5aac0:
                    r2 = r0 + -1409;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x5a468;
                    run_5a400(); return;
                case 0x5aad0:
                    r21 = r29 + 328;
                    /* Next insn is delay slot */ 
                    pc=0x5a3f4;
                    run_5a200(); return;
                case 0x5aadc:
                    r4 = r10 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5aa48;
                        continue;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5aa60;
                    continue;
                case 0x5ab08:
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x5a920;
                    run_5a800(); return;
                case 0x5ab14:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ab24;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5ab24:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a9e4;
                        run_5a800(); return;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a9ec;
                        run_5a800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5a184;
                    run_5a000(); return;
                case 0x5ab3c:
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r7 = r21 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    /* Next insn is delay slot */ 
                    r31=0x5ab64;
                    pc=0x59800;
                    run_59800(); return;
                case 0x5ab64:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5a4b0;
                    run_5a400(); return;
                case 0x5ab80:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5a9b0;
                        run_5a800(); return;
                    }
                    r21 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5a9d4;
                    run_5a800(); return;
                case 0x5ab98:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5a9d4;
                    run_5a800(); return;
                case 0x5aba4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        run_5a000(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x5a070;
                    run_5a000(); return;
                case 0x5abb8:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5abc8;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5abc8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a110;
                        run_5a000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5a184;
                    run_5a000(); return;
                case 0x5abd8:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r23;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x59e7c;
                    run_59e00(); return;
                case 0x5abf0:
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x5abfc;
                    pc=0x48600;
                    run_48600(); return;
                case 0x5abfc:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                case 0x5ac00:
                    pc=0x5ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ac00() throws ExecutionException { /* 0x5ac00 - 0x5ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ac00:
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        run_5a000(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r10 = r6 + 1;
                    r6 = r3 + r6;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r7 = r10 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r21 + r0;
                    r6 = r29 + 280;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x5ac5c;
                    pc=0x54c00;
                    run_54c00(); return;
                case 0x5ac5c:
                    r3 = r0 + -1;
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        run_5a000(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5acc4;
                        continue;
                    }
                    r3 = r0 + -2;
                    r6 = r10 + r0;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5ad54;
                        continue;
                    }
                case 0x5ac84:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a3f8;
                        run_5a200(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x5aca8;
                    pc=0x59a00;
                    run_59a00(); return;
                case 0x5aca8:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a3f8;
                        run_5a200(); return;
                    }
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a184;
                        run_5a000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5a428;
                    run_5a400(); return;
                case 0x5acc4:
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x5accc:
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x5acd8;
                    pc=0x54a00;
                    run_54a00(); return;
                case 0x5acd8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ad28;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5a428;
                        run_5a400(); return;
                    }
                case 0x5acec:
                    r10 = r10 + -1;
                    r3 = r29 + 280;
                    r2 = r3 + r10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x5ad10;
                    pc=0x59800;
                    run_59800(); return;
                case 0x5ad10:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5acec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5a428;
                    run_5a400(); return;
                case 0x5ad28:
                    r23 = r23 + r10;
                    r22 = r22 + -1;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ad48;
                        continue;
                    }
                    r21 = r21 + 4;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ac84;
                    continue;
                case 0x5ad48:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5ac84;
                    continue;
                case 0x5ad54:
                    r4 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5accc;
                    continue;
                case 0x5ae00:
                    pc=0x5ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ae00() throws ExecutionException { /* 0x5ae00 - 0x5b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ae00:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r2 = r16 + 64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5aea0;
                        continue;
                    }
                    r18 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r19 = r18 << 1;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ae48;
                    pc=0x30600;
                    run_30600(); return;
                case 0x5ae48:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5af0c;
                        continue;
                    }
                    r20 = r2 + r18;
                    r4 = r20 + r0;
                    r5 = r2 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ae6c;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x5ae6c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r20;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r17;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r19;
                    r2 = r0 + r0;
                case 0x5ae7c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5aea0:
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x5aeac;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x5aeac:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5af0c;
                        continue;
                    }
                    r3 = r0 + 1024;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r3;
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    addr=r2+1023;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+65;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1021;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+64;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5af0c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5ae7c;
                    continue;
                case 0x5b000:
                    pc=0x5b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b000() throws ExecutionException { /* 0x5b000 - 0x5b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b000:
                    r29 = r29 + -32;
                    r2 = r0 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r5 + r0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5b12c;
                        continue;
                    }
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b044;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b138;
                        continue;
                    }
                case 0x5b044:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b06c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    r2 = r2 | 8192;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r3;
                case 0x5b06c:
                    r3 = r0 + -33;
                    r2 = r2 & r3;
                    r3 = r2 & 65535;
                    r4 = r3 & 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b0a8;
                        continue;
                    }
                    r4 = r3 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b12c;
                        continue;
                    }
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b148;
                        continue;
                    }
                    r2 = r2 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x5b0a8:
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r18 = r18 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b188;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b114;
                        continue;
                    }
                case 0x5b0d0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                case 0x5b0f8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b114:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5b124;
                    pc=0x5ae00;
                    run_5ae00(); return;
                case 0x5b124:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b0d0;
                        continue;
                    }
                case 0x5b12c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5b0f8;
                    continue;
                case 0x5b138:
                    /* Next insn is delay slot */ 
                    r31=0x5b140;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x5b140:
                    /* Next insn is delay slot */ 
                    pc=0x5b044;
                    continue;
                case 0x5b148:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5b158;
                    pc=0x29200;
                    run_29200(); return;
                case 0x5b158:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b12c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r2 & 65527;
                    r2 = r2 << 16;
                    r2 = r2 >> 16;
                    r2 = r2 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x5b0a8;
                    continue;
                case 0x5b188:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b1b4;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b1b4;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x5b204;
                        run_5b200(); return;
                    }
                case 0x5b1b4:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 66;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b200:
                    pc=0x5b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b200() throws ExecutionException { /* 0x5b200 - 0x5b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b200:
                case 0x5b204:
                    r3 = r3 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x5b0f8;
                    run_5b000(); return;
                case 0x5b400:
                    pc=0x5b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b400() throws ExecutionException { /* 0x5b400 - 0x5b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5b000;
                    run_5b000(); return;
                case 0x5b600:
                    pc=0x5b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b600() throws ExecutionException { /* 0x5b600 - 0x5b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b600:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = r7 + r0;
                    r18 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b68c;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x5b638;
                    pc=0x48400;
                    run_48400(); return;
                case 0x5b638:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x5b654;
                    return;
                case 0x5b654:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5b670;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x5b670:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b68c:
                    /* Next insn is delay slot */ 
                    r31=0x5b694;
                    pc=0x48400;
                    run_48400(); return;
                case 0x5b694:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x5b6b0;
                    return;
                case 0x5b6b0:
                    /* Next insn is delay slot */ 
                    pc=0x5b654;
                    continue;
                case 0x5b800:
                    pc=0x5b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5b800() throws ExecutionException { /* 0x5b800 - 0x5ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5b800:
                    r29 = r29 + -64;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5b8a0;
                        continue;
                    }
                    r20 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r18 = r5 + r0;
                    r19 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5b840;
                    pc=0x48400;
                    run_48400(); return;
                case 0x5b840:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x5b85c;
                    return;
                case 0x5b85c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5b87c;
                        continue;
                    }
                    r2 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x5b87c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5b8a0:
                    r18 = readPages[(r28+-32708)>>>12][((r28+-32708)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5b8b0;
                    pc=0x48400;
                    run_48400(); return;
                case 0x5b8b0:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x5b8cc;
                    return;
                case 0x5b8cc:
                    /* Next insn is delay slot */ 
                    pc=0x5b85c;
                    continue;
                case 0x5ba00:
                    pc=0x5ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ba00() throws ExecutionException { /* 0x5ba00 - 0x5bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ba00:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ba24;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ba30;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ba24:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5ba30:
                    r2 = r0 + 138;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5bc00:
                    pc=0x5bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5bc00() throws ExecutionException { /* 0x5bc00 - 0x5be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5bc00:
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r17 = r7 + r0;
                    r16 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x5bc2c;
                    pc=0x48400;
                    run_48400(); return;
                case 0x5bc2c:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x5bc48;
                    return;
                case 0x5bc48:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5be00:
                    pc=0x5be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5be00() throws ExecutionException { /* 0x5be00 - 0x5c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5be00:
                    r7 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r2 < r7 ? 1 : 0;
                    r3 = r4 + 20;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bebc;
                        continue;
                    }
                    r7 = r7 << 2;
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r7 = r3 + r7;
                    r11 = r3 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5becc;
                        continue;
                    }
                    r2 = r11 + 4;
                    r8 = readPages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff];
                    r10 = r0 + 32;
                    r6 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r10 = r10 - r5;
                    r8 = r8 >>> (r5&0x1f);
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bf24;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x5be58:
                    r9 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r9 = r9 << (r10&0x1f);
                    r8 = r8 | r9;
                    r2 = r2 + 4;
                    writePages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r9 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 >>> (r5&0x1f);
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5be58;
                        continue;
                    }
                    r2 = r7 - r11;
                    r2 = r2 + -5;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                case 0x5be9c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r8;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5beac;
                        continue;
                    }
                    r2 = r2 + 4;
                case 0x5beac:
                    r3 = r2 - r3;
                    r3 = r3 >> 2;
                    /* Next insn is delay slot */ 
                    pc=0x5bf10;
                    continue;
                case 0x5bebc:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r0;
                case 0x5bec0:
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5becc:
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bebc;
                        continue;
                    }
                    r2 = r11 + r0;
                case 0x5bedc:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bedc;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r7;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r3 >> 2;
                case 0x5bf10:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5bec0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5bf24:
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5be9c;
                    continue;
                case 0x5c000:
                    pc=0x5c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c000() throws ExecutionException { /* 0x5c000 - 0x5c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c000:
                    r5 = 6 << 16;
                    r2 = 6 << 16;
                    r5 = r5 + 9253;
                    r4 = r0 + 16;
                    r3 = r0 + 48;
                    r2 = r2 + 24844;
                case 0x5c018:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c018;
                        continue;
                    }
                    r5 = 6 << 16;
                    r5 = r5 + 9245;
                    r4 = r0 + 26;
                    r3 = r0 + 97;
                case 0x5c048:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c048;
                        continue;
                    }
                    r5 = 6 << 16;
                    r5 = r5 + 9237;
                    r4 = r0 + 26;
                    r3 = r0 + 65;
                case 0x5c078:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c078;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c200:
                    pc=0x5c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c200() throws ExecutionException { /* 0x5c200 - 0x5c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c200:
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r6;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r7;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x5c244;
                    pc=0x48c00;
                    run_48c00(); return;
                case 0x5c244:
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5c258;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x5c258:
                    r9 = 6 << 16;
                    r18 = r2 + r0;
                    r20 = r9 + 24844;
                    r2 = r17 + r2;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                    addr=r20+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c730;
                        run_5c600(); return;
                    }
                case 0x5c27c:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r23 = r3 + 2;
                    if(r8 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5ca30;
                        run_5ca00(); return;
                    }
                    r3 = r3 + 3;
                    r22 = r0 + r0;
                case 0x5c29c:
                    r23 = r3 + r0;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r22 = r22 + 1;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5c29c;
                        continue;
                    }
                case 0x5c2b4:
                    r8 = r20 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c6ac;
                        run_5c600(); return;
                    }
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + r0;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r30 = r0 + r0;
                case 0x5c2dc:
                    r16 = r23 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c308;
                        continue;
                    }
                case 0x5c2e8:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c2e8;
                        continue;
                    }
                case 0x5c308:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x5c320;
                    pc=0x33400;
                    run_33400(); return;
                case 0x5c320:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c3a8;
                        continue;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ca6c;
                        run_5ca00(); return;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x5c338:
                    r30 = r30 - r16;
                    r30 = r30 << 2;
                case 0x5c340:
                    r3 = r0 + 80;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c3c0;
                        continue;
                    }
                case 0x5c34c:
                    r3 = r0 + 112;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c3c0;
                        continue;
                    }
                case 0x5c358:
                    r2 = r16 + r0;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c468;
                        run_5c400(); return;
                    }
                case 0x5c368:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c974;
                        run_5c800(); return;
                    }
                    r2 = r0 + 6;
                case 0x5c374:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5c3a8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c338;
                        continue;
                    }
                    r3 = r0 + 80;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c34c;
                        continue;
                    }
                case 0x5c3c0:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 43;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c980;
                        run_5c800(); return;
                    }
                    r3 = r0 + 45;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c8fc;
                        run_5c800(); return;
                    }
                    r4 = r16 + 1;
                    r6 = r0 + r0;
                case 0x5c3e4:
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c358;
                        continue;
                    }
                case 0x5c400:
                    pc=0x5c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c400() throws ExecutionException { /* 0x5c400 - 0x5c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c400:
                    r2 = r4 + 1;
                    r3 = r3 + -16;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x5c430;
                    continue;
                case 0x5c414:
                    r5 = r3 << 1;
                    r3 = r3 << 3;
                    r3 = r5 + r3;
                    r2 = r2 + 1;
                    r3 = r3 + r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r3 + -16;
                case 0x5c430:
                    r4 = r4 + r20;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r5 = r4 + -1;
                    r5 = (r5&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c414;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c458;
                        continue;
                    }
                    r3 = r0 - r3;
                case 0x5c458:
                    r30 = r30 + r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c368;
                        run_5c200(); return;
                    }
                case 0x5c468:
                    r2 = r16 - r23;
                    r2 = r2 + -1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c494;
                        continue;
                    }
                case 0x5c480:
                    r2 = r2 >> 1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c480;
                        continue;
                    }
                case 0x5c494:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5c4a0;
                    pc=0x49200;
                    run_49200(); return;
                case 0x5c4a0:
                    r19 = r2 + 20;
                    r22 = r2 + r0;
                    r2 = ((r23 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r11 = r19 + r0;
                    r8 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c5a0;
                        continue;
                    }
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r14 = r0 + 1;
                    r3 = r0 + r0;
                    r14 = r14 - r18;
                    r12 = r0 + 32;
                    r7 = r16 + -1;
                    if(r6 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x5c52c;
                        continue;
                    }
                case 0x5c4dc:
                    if(r3 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x5c690;
                        run_5c600(); return;
                    }
                    r2 = r3 + r0;
                    r3 = r3 + 4;
                case 0x5c4ec:
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r20 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r6 = r6 & 15;
                    r6 = r6 << (r2&0x1f);
                    r8 = r8 | r6;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c5a0;
                        continue;
                    }
                case 0x5c518:
                    r16 = r7 + r0;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r7 = r16 + -1;
                    if(r6 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x5c4dc;
                        continue;
                    }
                case 0x5c52c:
                    r15 = r7 + r14;
                    r2 = ((r15 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c4dc;
                        continue;
                    }
                    r4 = r15 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r11;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r12;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r14;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x5c56c;
                    pc=0x33400;
                    run_33400(); return;
                case 0x5c56c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r11 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r12 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r14 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r15 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c4dc;
                        continue;
                    }
                    r7 = r15 + r0;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c518;
                        continue;
                    }
                case 0x5c5a0:
                    r2 = r11 + 4;
                    r2 = r2 - r19;
                    r2 = r2 >> 2;
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r4 = r8 + r0;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r16 = r2 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x5c5c4;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x5c5c4:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r16 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c98c;
                        run_5c800(); return;
                    }
                    r3 = r2 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ca00;
                        run_5ca00(); return;
                    }
                    r17 = r0 + r0;
                case 0x5c5f0:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                case 0x5c600:
                    pc=0x5c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c600() throws ExecutionException { /* 0x5c600 - 0x5c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c600:
                    r3 = r3 < r30 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c8d4;
                        run_5c800(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c928;
                        run_5c800(); return;
                    }
                    r30 = r2 - r30;
                    r3 = r30 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c740;
                        continue;
                    }
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r4 = r0 + 2;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5cb1c;
                        run_5ca00(); return;
                    }
                    r4 = r0 + 3;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5cacc;
                        run_5ca00(); return;
                    }
                    r4 = r0 + 1;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5cb34;
                        run_5ca00(); return;
                    }
                case 0x5c668:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5c678;
                    pc=0x49400;
                    run_49400(); return;
                case 0x5c678:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x5c374;
                    run_5c200(); return;
                case 0x5c690:
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r3 = r0 + 4;
                    r11 = r11 + 4;
                    r8 = r0 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5c4ec;
                    run_5c400(); return;
                case 0x5c6ac:
                    r4 = r23 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5c6c0;
                    pc=0x33400;
                    run_33400(); return;
                case 0x5c6c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c910;
                        run_5c800(); return;
                    }
                    r16 = r23 + r18;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 + r20;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ca3c;
                        run_5ca00(); return;
                    }
                    r4 = r0 + 48;
                    r23 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5c71c;
                        continue;
                    }
                    r3 = r0 + 48;
                case 0x5c6fc:
                    r23 = r23 + 1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c6fc;
                        continue;
                    }
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x5c71c:
                    r7 = (r3&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r30 = r16 + r0;
                    r22 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5c2dc;
                    run_5c200(); return;
                case 0x5c730:
                    /* Next insn is delay slot */ 
                    r31=0x5c738;
                    pc=0x5c000;
                    run_5c000(); return;
                case 0x5c738:
                    /* Next insn is delay slot */ 
                    pc=0x5c27c;
                    run_5c200(); return;
                case 0x5c740:
                    r18 = r30 + -1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cac0;
                        run_5ca00(); return;
                    }
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c768;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5c764;
                    pc=0x4b800;
                    run_4b800(); return;
                case 0x5c764:
                    r17 = r2 + r0;
                case 0x5c768:
                    r2 = r18 >> 5;
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r3 = r0 + 1;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r3 << (r18&0x1f);
                    r2 = r18 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c790;
                        continue;
                    }
                    r17 = r17 | 2;
                case 0x5c790:
                    r5 = r30 + r0;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5c7a0;
                    pc=0x5be00;
                    run_5be00(); return;
                case 0x5c7a0:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r16 = r16 - r30;
                    r30 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r18 = r0 + 2;
                case 0x5c7b0:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c958;
                        run_5c800(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c934;
                        run_5c800(); return;
                    }
                    r3 = r0 + 3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c944;
                        run_5c800(); return;
                    }
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5c954;
                        run_5c800(); return;
                    }
                    r2 = r17 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c954;
                        run_5c800(); return;
                    }
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r17 | r2;
                case 0x5c800:
                    pc=0x5c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5c800() throws ExecutionException { /* 0x5c800 - 0x5ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5c800:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c954;
                        continue;
                    }
                case 0x5c80c:
                    r17 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r3 = r19 + r0;
                    r23 = r17 << 2;
                    r5 = r19 + r23;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5c83c;
                    continue;
                case 0x5c828:
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cb74;
                        run_5ca00(); return;
                    }
                case 0x5c83c:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x5c828;
                        continue;
                    }
                    r4 = r4 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r2 = r19 + r0;
                case 0x5c858:
                    r3 = r0 + 2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5cbb4;
                        run_5ca00(); return;
                    }
                    r3 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r17 = r17 < r3 ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c8a8;
                        continue;
                    }
                    r16 = r16 & 31;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cb04;
                        run_5ca00(); return;
                    }
                    r2 = r2 + r23;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x5c894;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x5c894:
                    r3 = r0 + 32;
                    r16 = r3 - r16;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cb04;
                        run_5ca00(); return;
                    }
                case 0x5c8a8:
                    r4 = r22 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x5c8b8;
                    pc=0x5be00;
                    run_5be00(); return;
                case 0x5c8b8:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    r2 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    r2 = r2 < r30 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cb04;
                        run_5ca00(); return;
                    }
                case 0x5c8d4:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5c8e4;
                    pc=0x49400;
                    run_49400(); return;
                case 0x5c8e4:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 163;
                    /* Next insn is delay slot */ 
                    pc=0x5c374;
                    run_5c200(); return;
                case 0x5c8fc:
                    r6 = r0 + 1;
                case 0x5c900:
                    r4 = r16 + 2;
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x5c3e4;
                    run_5c200(); return;
                case 0x5c910:
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r23 + r0;
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5c340;
                    run_5c200(); return;
                case 0x5c928:
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5c7b0;
                    run_5c600(); return;
                case 0x5c934:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r4 = r2 - r4;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x5c944:
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c80c;
                        continue;
                    }
                case 0x5c954:
                    r18 = r18 | 16;
                case 0x5c958:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r18 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x5c374;
                    run_5c200(); return;
                case 0x5c974:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5c374;
                    run_5c200(); return;
                case 0x5c980:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5c900;
                    continue;
                case 0x5c98c:
                    r18 = r2 - r16;
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5c9a0;
                    pc=0x4b800;
                    run_4b800(); return;
                case 0x5c9a0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ca4c;
                        run_5ca00(); return;
                    }
                    r2 = r18 + -1;
                    r3 = r2 >> 5;
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r4 = r0 + 1;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 << (r2&0x1f);
                    r3 = r4 & r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cab4;
                        run_5ca00(); return;
                    }
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cb10;
                        run_5ca00(); return;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + -2;
                    /* Next insn is delay slot */ 
                    r31=0x5c9ec;
                    pc=0x4b800;
                    run_4b800(); return;
                case 0x5c9ec:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cb10;
                        run_5ca00(); return;
                    }
                    r17 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x5ca50;
                    run_5ca00(); return;
                case 0x5ca00:
                    pc=0x5ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ca00() throws ExecutionException { /* 0x5ca00 - 0x5cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ca00:
                    r17 = r16 - r2;
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ca18;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x5ca18:
                    r30 = r30 - r17;
                    r22 = r2 + r0;
                    r19 = r2 + 20;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5c5f0;
                    run_5c400(); return;
                case 0x5ca30:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5c2b4;
                    run_5c200(); return;
                case 0x5ca3c:
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5c340;
                    run_5c200(); return;
                case 0x5ca4c:
                    r17 = r0 + r0;
                case 0x5ca50:
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5ca60;
                    pc=0x5be00;
                    run_5be00(); return;
                case 0x5ca60:
                    r30 = r30 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x5c5f0;
                    run_5c400(); return;
                case 0x5ca6c:
                    r30 = r16 + r18;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r30 + r0;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c338;
                        run_5c200(); return;
                    }
                case 0x5ca8c:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ca8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5c338;
                    run_5c200(); return;
                case 0x5cab4:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5ca50;
                    continue;
                case 0x5cac0:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5c768;
                    run_5c600(); return;
                case 0x5cacc:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c668;
                        run_5c600(); return;
                    }
                case 0x5cadc:
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r0 + 98;
                    /* Next insn is delay slot */ 
                    pc=0x5c374;
                    run_5c200(); return;
                case 0x5cb04:
                    r18 = r0 + 33;
                    /* Next insn is delay slot */ 
                    pc=0x5c958;
                    run_5c800(); return;
                case 0x5cb10:
                    r17 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x5ca50;
                    continue;
                case 0x5cb1c:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cadc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5c668;
                    run_5c600(); return;
                case 0x5cb34:
                    if(r30 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x5c668;
                        run_5c600(); return;
                    }
                    r3 = r16 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cadc;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r16 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x5cb58;
                    pc=0x4b800;
                    run_4b800(); return;
                case 0x5cb58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5c668;
                        run_5c600(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5cadc;
                    continue;
                case 0x5cb74:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cbdc;
                        continue;
                    }
                    r2 = r19 + r0;
                    r3 = r17 + r0;
                case 0x5cb90:
                    r4 = r3 + 1;
                    r3 = r3 + 4;
                    r3 = r3 << 2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r4;
                    r3 = r22 + r3;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x5c858;
                    run_5c800(); return;
                case 0x5cbb4:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    if(r3 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x5cc34;
                        run_5cc00(); return;
                    }
                    r18 = r0 + 34;
                    /* Next insn is delay slot */ 
                    pc=0x5c958;
                    run_5c800(); return;
                case 0x5cbdc:
                    r5 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x5cbf0;
                    pc=0x49200;
                    run_49200(); return;
                case 0x5cbf0:
                    r6 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r5 = r22 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                case 0x5cc00:
                    pc=0x5cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5cc00() throws ExecutionException { /* 0x5cc00 - 0x5ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5cc00:
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5cc10;
                    pc=0x36fdc;
                    run_36e00(); return;
                case 0x5cc10:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x5cc20;
                    pc=0x49400;
                    run_49400(); return;
                case 0x5cc20:
                    r22 = r19 + r0;
                    r3 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r2 = r19 + 20;
                    /* Next insn is delay slot */ 
                    pc=0x5cb90;
                    run_5ca00(); return;
                case 0x5cc34:
                    r3 = r16 >> 5;
                    r3 = r3 << 2;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r16 = r3 << (r16&0x1f);
                    r18 = r16 & r2;
                    r18 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 34;
                    r18 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x5c958;
                    run_5c800(); return;
                case 0x5ce00:
                    pc=0x5ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5ce00() throws ExecutionException { /* 0x5ce00 - 0x5d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5ce00:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + 24844;
                    addr=r16+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d0d8;
                        run_5d000(); return;
                    }
                case 0x5ce28:
                    r24 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r15 = r24 >> 5;
                    r15 = r15 << 2;
                    r24 = r24 & 31;
                    r15 = r6 + r15;
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ce4c;
                        continue;
                    }
                    r15 = r15 + 4;
                case 0x5ce4c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r0;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r10 = r15 + -4;
                    r12 = r10 + r0;
                    r5 = r10 + r0;
                    r8 = r0 + r0;
                    r14 = r0 + r0;
                    r11 = r0 + r0;
                    r17 = r0 + 8;
                    r25 = r0 + 32;
                    r9 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cf34;
                        continue;
                    }
                case 0x5ce84:
                    r7 = r16 + r2;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d030;
                        run_5d000(); return;
                    }
                    r7 = (r2&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d0ac;
                        run_5d000(); return;
                    }
                    r2 = r14 < r11 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cf20;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cf10;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cf10;
                        continue;
                    }
                    r8 = r17 - r8;
                    r8 = r8 << 2;
                    r18 = r25 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5cee8;
                    continue;
                case 0x5cee4:
                    r7 = r3 + r0;
                case 0x5cee8:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r13 = r3 << (r18&0x1f);
                    r7 = r7 | r13;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r7;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r7 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cee4;
                        continue;
                    }
                case 0x5cf10:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d08c;
                        run_5d000(); return;
                    }
                    r8 = r0 + 8;
                case 0x5cf20:
                    r3 = r9 + r0;
                case 0x5cf24:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r9 = r3 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5ce84;
                        continue;
                    }
                case 0x5cf34:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d0b8;
                        run_5d000(); return;
                    }
                case 0x5cf3c:
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cfa4;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cfa4;
                        continue;
                    }
                    r2 = r0 + 8;
                    r8 = r2 - r8;
                    r8 = r8 << 2;
                    r9 = r0 + 32;
                    r9 = r9 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5cf7c;
                    continue;
                case 0x5cf78:
                    r7 = r3 + r0;
                case 0x5cf7c:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r4 = r3 << (r9&0x1f);
                    r4 = r7 | r4;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cf78;
                        continue;
                    }
                case 0x5cfa4:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d100;
                        run_5d000(); return;
                    }
                    r2 = r6 + r0;
                case 0x5cfb4:
                    r5 = r5 + 4;
                    r3 = readPages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = ((r10 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cfb4;
                        continue;
                    }
                case 0x5cfd0:
                    r2 = r2 + 4;
                    r3 = ((r10 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cfd0;
                        continue;
                    }
                case 0x5cfe4:
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                case 0x5cfec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d010;
                        run_5d000(); return;
                    }
                case 0x5cff4:
                    if(r6 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x5d128;
                        run_5d000(); return;
                    }
                    r10 = r10 + -4;
                case 0x5d000:
                    pc=0x5d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_5d000() throws ExecutionException { /* 0x5d000 - 0x5d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x5d000:
                    r2 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cff4;
                        run_5ce00(); return;
                    }
                case 0x5d010:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d030:
                    r8 = r8 + 1;
                    r2 = r8 < 9 ? 1 : 0;
                    r11 = r11 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5d068;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 << 4;
                case 0x5d050:
                    r7 = r7 & 15;
                    r7 = r2 | r7;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r7;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5cf24;
                    run_5ce00(); return;
                case 0x5d068:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cf20;
                        run_5ce00(); return;
                    }
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    r5 = r5 + -4;
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x5d050;
                    continue;
                case 0x5d08c:
                    r12 = r5 + -4;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r14 = r11 + r0;
                    r5 = r12 + r0;
                    r8 = r0 + r0;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5cf24;
                    run_5ce00(); return;
                case 0x5d0ac:
                    r7 = r0 + 41;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x5d150;
                        continue;
                    }
                case 0x5d0b8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d0d8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x5d0ec;
                    pc=0x5c000;
                    run_5c000(); return;
                case 0x5d0ec:
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x5ce28;
                    run_5ce00(); return;
                case 0x5d100:
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cfe4;
                        run_5ce00(); return;
                    }
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                    r24 = r0 - r24;
                    r3 = r0 + -1;
                    r3 = r3 >>> (r24&0x1f);
                    r2 = r3 & r2;
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x5cfec;
                    run_5ce00(); return;
                case 0x5d128:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5d150:
                    r3 = r3 + 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5cf3c;
                        run_5ce00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x5d0b8;
                    continue;
                case 0x5d1fc:
                case 0x5d200:
                    pc=0x5d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }

    private static final int[] _data1 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data2 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data3 = decodeData("\022\\g\"\000\000\000\000\000\011.3Q\001\022n:\031.&s\005X 2\\N&{Ht \000\000\000\000\002\rBn7\033nB\003M`e1Z,gI\000ZC\027K%V\033=\\f4Yd\007#]Rc2@\000\000\000\000Js\020\025DW\030(\000U9X,v)h@%9H\0136{Ahi7[N5i\001Li6\031$\005Y8\\..BJ6C=dt\020\033n\007#%^n9NA\"\001\000Zc\004B!\020J\r^m8\032-F)\001Bn2\010\014\027\033MJm1\033\014Ra\001Du:\010\014F{8Nt\020\033\r\026s,\024 \020\013,@H$\022\011\"\031,'+\034@m7Y\014PQ\000@-3B!\020H%\002d2\010\014F+\011jg\020\032-f3<\024 \020\013-\000H$\022\011$\031-G\001\000Pt4\032.2\003QJx:\n!\"\001\000Zl\020\033L\026k\024\022\011\004Pn&+\005he\020\030-b\003\005fs2[,&c\025d 6\032.7#%\\g\020\031M\026c\024\024 \020\013-R\0039Bm2B!\020J\rde0]\014R\003\004@m0\\\004\0063%Xe\005\010\004\002k5Z 6[lF+0\022\011\004TlW!\001hh2H\rV+5^r<H\rV{\021Jl\005\010\004\002k<@n0[,PH$\022N0[,R\003QPe\020\033nW#Ajt\020\031M\026c\024\024 \020\013. H$\022\011\"[L\026\0231J 9\031,vKMhe9\010\016f\013IRa1\033\014W\030(@ \026]\004\007\033ef\011\004B*6+P@t4\031$\007#\005dg2]\004\007\033eft2[!\"\001\000Zu\020\034o\026h$\022\011#\033n&\033\024@a7\010\r\026kA^r:\010\rv1\001fy6XMva\001@s<[$pQ\000@-;\002!\020H%,e9\030Mw\033\024@m7Y\014PQ\000@-;\033!\020H$\022V2\\L&{MJ 6X.\002\003\031Rl2BD\002\0015\006 7\030-V($\022\011*\\lR\0031Rn5Y.\"\003\r^n3\032,r\003\031Rl2BD\002\0015\006l\004B!\020J5Bk2H\rF{\rBl\020\035L\027\023%Bb6\031.2\003Mha:\032,0Q\000@-\"\010\0167K56=2\031,frt\022\011\004Q\014V3%\\e\020\030$\007\003IJp9\033l6+Mfo9\010\0167K5Do6\002D\002\0015\022 2\032. H$\022S2]\004\006\011\001Fo6\\\r\026c\025d 4[L6cUHe\020\031\r\027\023\025Ft7\\O\022\003ABt4\002D\002\0015\030 8\030.F@$\022\011)\\\014V\033%Ly\020\030$\006c%Dr0\\O\022\003MJa9\030m\002\003ABt4\002D\002\0015\030n\020\033L\026k\024\022\011\004Pn&+\005he\020\030$\0052%\006E\020\033\014\026\023\025X 3\032-F((@ \026Sa\020H$\022O8\035\r\026k%te\020\030mv#\024\024 \020\013)vH$\022\011\004Sn\007#%Zi=\031$\006\033=He\026\010\r\026s1Rn2H\016'+9hi6Y$\0063U\\c:\032-vsL\024 \020\013)w\020$\022\011\004Sn\007#%Zi=\031$\006\033=He\026\010\r\006{9^u9\010\016FC\024@r2Ym\027\033QJr\020\032lWK]^r2\002D\002\0015\036s\004B!\020J=`t4[-\027S\024@c7Y\014Ra\001Rn6\032-f)\001Vn7]mb\002\014@f:[L7#%^n9BD\002\0015&\011\004B!\024\033=Zp4[\014Ra\001Du:\010\014F{8Nt\020\030.7\033\025Zb6\031$\006\0139H 6\032-fX(@ \026U\001\020H$\022I7\030mG+\021J 9[nW\023\rJ 0\\d\006\033=Zm2[N@Q\000@-+\002!\020H% r4[NB\003QPe\020\035LW\023MRo7\010\rg+5De9\002D\002\0015. 7\030-V*lX.\027\013KPH$\022S:\\\016\007\023\025fs\020\030mvkARl2\\D\007;\005dn4[Lw\030(@ \026Ul\022\003=`t4[mg\030$\022\011(\030.7\031\001^p:\032-vsL@t7H\016FC\024@a9\\lVk\011Xe9\002D\002\0015.c\020\033n\007#%^n9B!\020JABs9H\rw\003QRo7\034d\007#<@t4\031$\006\033=Zp4[\014W\020(@ \026UmB\003=`t4[mg\030$\022\011(\030.7\031\001^p:\032-vsL@t7H\016FC\024@l4[M6+H\024\n&\033mf9\001^p:\032-vsLt\n\020\010\005Rk\005Hd\026\\mw+IFe\004B!\024K9Fl:Y\014R\003M^u9\030lR\003\005f 1[mVk\025\\t\005\010\004\002i5Bs6K,\027\023\035f 7\\\016FK=\\s\004B*\006\013Mf 7\\\016FK=\\s\020\035\rr\003QPe\020\030.7\033\025Zb6\031. Q\000@-\026X.6i5He3\032-f)\001fy6VgW2t\022\011\"\031,fK9J 0[D\006\013Mfe6XMF+H@s<[,&{0\024 \020\013%V\013MZ-4[L6cUHe\026Y\r\027\021\001Hi9\002!\025\033\025h 0[D\006\013Mfe6XMF+H@i7\030mG+\021J 2\032.&+\rho9\036!\"\001\000Z-1\032-bk%\\c6\035,F)5Hi9\010\014FKH\022\011)Y.B\003\005\\ 0\\n6+5Dl2\\D\006\023%\\a9\036$\006K9Fl:Y\014R\003\021Rr2XnF{Ir\n\020\010\005Rk\011fs\026[\014\026\023\025X 7\030-V($\022D2YM\026s\024@a7\031\004\006+a`o9\035\004\006\011\001\004S)H\0166+\035Ze7\035\004\006c\005De6\002D\002\0014Zb9\\eVs\005Ze\020\034lV8$\022S2]\004\007#!J 7\030-V)\001^f\020\035\r\006)\001\004S)H\0166+\035Ze7\035\001\"\001\000Z-1XeV\013INs\020\033n\007#%^n9B!\025\003\005fs\020\033n\007#%^n9H\016Fy\001hh2H\0146{5`i6\031. Q\000@-\026Xlf95`a:\032\004\007\003\005hh\004B*7\003\025Fi3\036$\006\011\001Fo7\031M\0269\001Li6\031$\007\033\025Br1Z\004\007\003\005hh\005\010\004\002i5Fh2Xm2kMha1Za\020H%\016e7\031.&\013QJ 9]\014\026\033,@o;\031.&31^w\020\030m\006+\rVs\005\010\004\002i5Fo2\031%Vc\005De6\010\rf\0135J\011\004Q\014V3%\\e\020\030-f!\001Jx8\033n'!\001B !ShD)\001fe3[,VsP@l0XLV`(@ \026K,6{\021J-7\030-V)\001fe3B!\025\033\025h :\032\014R\0039Bm2H\rv1\001hh2H\0104z\021\n 9Y,vk\025\\t\005\010\004\002i5Fo2\031.6KiJ <\002!\020J\005Fc2\\\016B\0031Br3Y.\"\003\r^d2H\014'I\001La1]\rw\021\001p\n\020\010\005Rk\r^n3\032,r\0039Bm2B!\020JUfe\020\033\r\026s-Jr\020\030mvs\031Rg\020\031M\026c\024\024 \020\013%V\033Aj :\036.\006($\022\011)Y.B\002\r U\020\035\017\027\003\024\024 \020\013%V\033IJa:\031%V#\025` 7\030-V($\022C9\031,\027#\024@a\020\033,\026[\024@d2\\\014Vs\021Jn1^$\0063%Xe\005\010\004\002i5Fr2X.F)5Lu6\033\005V#\025` 7\030-V(%\006r2X.F)\001B 3\035-Fa\001Za5Y$\006#\025`e7\031\014Vs\rr 3\032-F((@ \026K,F\013QB-6\030,&+0@n0[,PH%\010e3\032-f)\001Bn2\010\014WCA^r:\010\014\022\002\021\002T H\0166+\035Ze7\035\004\006c\005De6\002D\002\0014Zd0]\014\022k9Bm2H\0166+\034\022\011)Y.B\003QPe\020\033L\026k\024@o3\010\016FC\024@D U\010\022\003MJg6Y-g (@ \026K,F+\011jg\004B!\024#\025Du3H\rV{\021J\n\020\010\005Rk\021Jb:YeVK9Lo\004B!\024\013\021H 2\031,'+\034@i7\031MpQ\000@-\026YLV\013Qjr2H\rf\0135J\011\004TlW!\001Bn\020\031-W+1Bt4[mb\003\031Ja:\035.&((@ \026K,f{IFe\026Z-W\003=dt\020\034o\026h$\022F7\\L6)\001Bn\020\032-W\003=dt\020\033lb\003Mrm1\033mB\003\001fy6Ia\"\001\000Z-4\031-G\000$\022\011$\031-G\001\000Pt4\032.2\003QJx:\n!\"\001\000Z-4[L6cUHe\026Y\r\027\021\001Hi9\002!\025\033\025h 0H\0146{5`i6\031.\"\003%\\c6\035,F)\001Hi9\031,7#=dy\020\034\014\027# \024 \020\013%Vc\020Za9\031n2\003=`t4[mg\030$\022P0\\n2\003=`t4[mg\031\001ho\020\035\r\006)\001Xi7\032lW\020(@ \026K-FK\010@f4[\014PH$\022L4[M2\003QPi9H\rFK\011da9\036!\"\001\000Z-6\032,\"kABt4\010\016\006\013QP\011\004Tn\006+\rRf<H\014\022\0031Rb9\030.'I\001fe0\\L6A\001`a:\032\001\"\001\000Z-6\032.7!5ha9\031lW#L\022\011&\032.7!\001Bl6\010\014\0273\005Rl0XMF)\001ha9\031lW#L\024 \020\013%Vc%ft4[Lr\0039Bm2B!\024\033IJa:\031$\006\0138@a9\\lVk\011Xe9\010\rFKMhi7\031d\0063%Xe\005\010\004\002i5Xi9]\005V\023ehe9H\r`H%\034u6XLW\021\001^f\020\030O\027#\025f 8\031.\"\003\005fs2[,&c\025d 6\032.7#%\\g\020\033\r\026s\024\024 \020\013%Vk\005`f4[\014R\0039Bm2B!\024\033IJa:\031$\006\011\001Za8\010\014fK1J\n\020\010\005Rk5Jm7\\O\022k5^d2[\004\006k=He6\002!\025\033\025h :\032\014R\0035Jm7\\O\022\0035^d2[\001\"\001\000Z-6[lG+1J\011\004B)FK9V 0\\d\006\011\001Zo2\035-F((@ \026K-V{\021jl2K-\026!\001Rd\004B*7\003\025Fi3\036$\006\011\001Zo2\035-F)\001\022D\020\031Mw\021\001hh2H\rFK9Ve9\002D\002\0014Zo\033\r%Vk=He6\010\rV{\021Jl\004B)w3\025dr4Y\014R\003QPe\020\033fc)\001Zo2\031-@Q\000@-\026[l&Q\001Li6\031!\020H%\030i7\032d\007#!Rs\020\033l&S\025Ft\020\031M\026c\024\024 \020\013%V{\011T-8\030.FA\001`a:\032\001\020JM`e1Z,gI\001Bn\020\033l&S\025Ft\020\031M\026c\024@s2X.&\033 @p0]\r\000Q\000@-\026\\\016&K9h-:\030.&;\025h-8\030.F@$\022P9\032-g!\001hh2H\016F\013INe:\010\014fK1J 8\030.F@(@ \026K.&+\035Rs:\031.\"kM`a1Y$\006\020$\022S2]\004\007\033ABc2H\014\0273\005Rl0XMF)\001Lo9\010\016&+\035Rs:\031.\"\003YBr4X,&c\025f\n\020\010\005RkIJg4\\nF+HZv0\\N0H%\nn0XMF)\001de3Z.7#\025d ;\030.&K\005Dl2\\a\"\001\000Z-9\033lF\013QB-7\030-V)\001fe3B!\025\033\025h :\032\014R\0039Bm2H\rv1\001hh2H\n$z\021\002T H\0166+\035Ze7\035\001\"\001\000Z-9Z,vs\025H-1Z\014\027\023L\022\011\"\031,f\013UXt\020\030m\006\013IBc:\031.'\031\001Br2H\0166K\035\\e2\002D\002\0014Zs:\030-f#\005dd\020\034nF $\022L0[Lw+\005Ne\020\034nF\0139Ha9\031\004\002C\014p9\026\010\0143IdX 1Xfc)$\024 \020\013%W\033QBr:\013,\026#\021d 0Y\014G\020$\022S2]\004\007#!J 2\031,f\013UXt\020\034nF\013Ih 0Y\014G\023\025fs\005\010\004\002i5ft0]\r\026\0315Xo1X-G\030$\022M0ZlR\0031^c0[\004\0073\005di0XMF+L@s:\030.FK\014\024 \020\013%W#\005dg2]\004\007\033ef\011\004B*6+P@t4\031$\007#\005dg2]\004\007\033eft2[!\"\001\000Z-;\031.'\033%^n\004B!\025\003IRn:\010\016FC\024@v2\\N6K=\\ 7\035-V\023\025d\n\020\010\005RkYJr1\033n6($\022\011+\031.&\023=fe\020\033-v#\024\024 \020\013%WS\025do8\030,v)5Xa1\031-B\0039Bm2B!\024#\025Li7\031$\006\0139H 2^\016\006{Ih 0H\013$*I\036P QhR\003MJg6Y-g!\001Xa1\031-@Q\000@-\026^LW\023=`a3Y%Vs\005Ze\020\034lV8$\022S2]\004\007#!J 7\030-V)\001^f\020\035\r\006)\0014E)\023j\004\n\035\n 9Y,vk\025\\t\005\000\000\004s<@s:Xm\002\003QBr3Y.B\003Mrs:\031-SQ\001@%9I`\004\033\005\\n7]\004\007+MJ 0\033-v#UXe\023H\014\027\031\001ha9\031lW!0@u9Y$\002i5Zo2\035-F)\001Rn9]\014V\013\020\000C!MFUz!\036M\"@\000\000\003QBr3Y.@\000\000^r7[nB{\rF6\032KnF\013INe:\000\000\000\002\021jp6\032,6\013QJ 3\032-F)\001Rn\020\030.&;UZe7\035\004\006c%ft\035\010\014\002+LN\000\000\000\005W \000\000E<\031,7+QRn3ND\000\001\025f \000\020l\026s9^t\020\031Mw\023,t \022\\`\004\033\005\\n7]\004\006+aJc\020\030\004W\031\034t \022\\`\000\000\000\000F0Z-G+IJ ;X-\027#%\\g\020\031Mw\021\001fu1\034\016&{\rJs9ND\002+L\000\000)],'\003I^c2\\n2\003\000Js\023H\014\026\023=dt2Y\004\006\023d@s4Ymf\0130@%2\000\000\000\000\000Z-=\031.&{ABg2K-f\0135J\000\026K,'\033LZl0XLV`\000Z-2\030.F\0115Xa1\031-@\000\000\000\000\026K/&+I^p0YlRk1Bb2[\000\000\000\000\000-\026Xmv#\024Zl0XLV`\000\000\000\000\013-P\000\000ZT\000\000\005Rk\rPe1ZeW\033QBc5@\000\000\0015\006l\000\013- \000\000Zr\000\000\005Rk\031Ja:\035.&(\000\000\000\026K,&K8Zi7\030mG+\021J-2\032. \000\000\000-\"\000\000\002j$\000\000\026[\000\000\0014Zl4\\nBk\011rt2\\`\000\000\000\000-2\000\000\002i5Zo2\035-F)5Rd\000\013%V{\011T\000\000\000\005Rk1Rb\026\\\014\027# \000\000\026T`\000\0014Zl4X@\000\000\000Zu\000\000\005Rk\rLg\026\\\014\027# \000\000\026K-v\023(Zp0]\r\000\000\000Zg\000\000\005W0\000\000-\026\\Mv#\005ha\026[L\026k\024\000\000\000\013%V\033=He9Z/&(\000\000-\026\\nF\0139Ha9\031\000\000\0014Zr2Ym\027\033QJr\026\\n\006\013\rJ\000\000\000\000\002i5Fr2X.F)5Lu6\033\005V#\025`\000\000\000\005Rk\rde0]\014Rk\021Jp\000\000\000\000\0014Zb9\\eVs\005Ze\000\000\005Rk\r`u\000\000\000\002i5Ha:\030%Vs\005Ze\000\013%V\033=He\026[L\026k\024\000U7\032mf{]\\ 6Y-V{Ir 6[lF+0t \022\\`\000\000\000\000U7\034nW\003A^r:\031,B\0035Jm7\\O\022\0035^d2[\007\"\001\025f\000\000\000\000\002k5Z\000\027\033`\000\0015^\000\000\013Ms1T\000\000\000\000\0146aXj\000\000\000\000\006\033\014l5\000\000\000\000\003\rB6\032@\000\000\000\001Fo\033\r \000\000\000\000l2\rFP\000\000\000\0003\\L31T\000\000\000\013)Fp\000ZW\000\000\005W34\000-\026Y\014W\0015ha9\031lW \000\000\000\000\013N0\000\001\006a7\033Mw!\001de6[nf)\001he6\\\rw\023\005dy\020\031M\026c\024@`\022\\dsQ\000Js\000\000\000\004#=\\':\010\r6s=n ;Z\014\027!\001ho\020\031\rr\003]Rt4\010\014\002+LN\000'\033d\006K9`u:\010\014fK1Js\000\000\0106\0139\\o:\010\016W\033\024@-!H\014\026s\020@-\026[-v#UXe\020\035\rv;\025hh2\\@\002j\014\000\000\027\033\r\026\020\000\000\000\000\013%V\013\021H-9[nW\023\rJ\000\000\000\000\002i5Bs6K,\027\023\035f\000\000\013%V\013MZ-2\031,fK9J\000\000\000\000\002i5Bs6K-\026s\rXu2\031%V#%d\000\000\000\005Rk\rF-0\\Lw\030\000\000\000\026K,6{9Li3@\000\000\000\000Z-2\031,'+\034\000-\026Y\014V\023UN-4[Lfx\000\000\000\000\013%V3=dc2K-\026kA^r:\000\000\002i5Pe6\034\000\000\0014Zi7\030mG+\021J-2\032. \000\000\000-\026[\014Bk\005dg9@\000\000\0014Zl4\\nBkQBr3Y.G\030\000\000-\026[\r\027\033QRn3@\000\000\0014Zm0\\\014fK1J\000\000\000\005Rk5Jm7\\O\022k5^d2[\000\000\0014Zm7Y\016Vc\024\000\000\000\000\005Rk<l5\026[-v#\025X\000\026K.\007\023%\\t\026]\014\027\023\035Jt\026\\\014\027# \000-\026\\LV;%ft2\\EW3\005ds\000\013%W\033%Nn2Y\005V\033!Br9@\000\002i5ft0\\NBk\005Hd9\000\000\000\000\000Z-9]\014\027#%F-6\033l6\0131f\000\026K.F\013INe:\000\000\000\000\000Z-;\031.&\023=fe\000\000\000\002i5le9\034m\026{8\000\000\000\000\000\032<0\000\001Tq\000\000\r\033h\000\000i^@\000\006K\034\000\0005\002 \000\0030~\000\000\033\027`\000\001Y>\000\000\rKp\000\000l_\000\000\006ex\000\0006/@\000\0032|\000\000\033\027`\000\001Y>\000\000\rKp\000\000l_\000\000\006ex\000\0006/@\000\0032|\000\000\033\027`\000\001Y>\000\000\rKp\000\000l\010\000\000\006ex\000\0006/@\000\0032|\000\000\033\002@\000\001X#\000\000\rKp\000\000l_\000\000\006ex\000\0006/@\000\0030b\000\000\033\027`\000\001Y>\000\000\rJ`\000\000l_\000\000\006ex\000\0005o@\000\0032|\000\000\033\027`\000\001Y>\000\000\rJ\020\000\000lS\000\000\006ex\000\0006\024 \000\003.N\000\000\033\027`\000\001Y>\000\000\rKp\000\000l_\000\000\006ex\000\0006/@\000\0032|\000\000\033\027`\000\001Y>\000\000\rKp\000\000l_\000\000\006dd\000\0006'\000\000\0032|\000\000\033\027`\000\001WC\000\000\rA\000\000\000l_\000\000\006^$\000\0006/@\000\003/\036\000\000\032{P\000\001Y>\000\000\r>X\000\000l_\000\000\006ex\000\0005|@\000\0032|\000\000\032\177\000\000\001X\002\000\000\rD8\000\002|M\000\000\000\000\000\000\000) \000\000\013r<\000\000\000\000\004\000\001\024\000\000\000/J\010\000\000\000\000\020\000\0050\000\000\001>) \000\000\000\000@\000\025P\000\000\005x\014\000\000\000\000\002\000\000U@\000\000\027_@\000\000\000\000\010\000\002@\000\000\000_\010P\000\000\000\000 \000\014 \000\000\002|U\000\000\000\000\001\000\000% \000\000\013pJ\000\000\000\000\004\000\0017\000\000\000/@\020\000\000\000\000\000\000\005\030\000\000\001=\177\000\000\000\000\000@\000\0240\000\000\005xM\000\000\000\000\002\000\000e\000\000\000\027aD\000\000\000\000\010\000\002|\000\000\000_\025P\000\000\000\000 \000\010h\000\000\002|$\000\000\000\000\001\000\0001@\000\000\013q\002\000\000\000\000\004\000\001C\000\000\000/C`\000\000\000\000\020\000\006\010\000\000\001=|`\000\000\000\000@\000\024\020\000\000\005xJ\000\000\000\000\002\000\000d\000\000\000\027e@\000\000\000\000\000\000\002`\000\000\000_\026 \000\000\000\000\000\000\013P\000\000\002|\004@\000\000\000\001\000\000*@\000\000\013rl\000\000\000\000\004\000\0016\000\000\000/KP\000\000\000\000\000\000\004<\000\000\001>/\000\000\000\000\000@\000\030\020\000\000\005y@\000\000\000\000\002\000\000K\000\000\000\027a\010\000\000\000\000\010\000\002j\000\000\000_\003`\000\000\000\000 \000\013\030\000\000\002|a@\000\000\000\000\000\000$@\000\000\013s\016\000\000\000\000\004\000\001.\000\000\000/A \000\000\000\000\020\000\005<\000\000\001>2@\000\000\000\000@\000\027\000\000\000\005yM\000\000\000\000\002\000\000f\000\000\000\027fD\000\000\000\000\000\000\002\030\000\000\000_\003\020\000\000\000\000 \000\013\010\000\000\002|j\000\000\000\000\001\000\000)\000\000\000\013p8\000\000\000\000\004\000\0012\000\000\000/B@\000\000\000\000\020\000\005d\000\000\001>5`\000\000\000\000\000\000\022\020\000\000\005x7\000\000\000\000\002\000\000`\000\000\000\027fp\000\000\000\000\000\000\002R\000\000\000_\005P\000\000\000\000 \000\013h\000\000\002|p\000\000\000\000\000\000\000*\000\000\000\013ph\000\000\000\000\004\000\001?\000\000\000/N \000\000\000\000\020\000\005P\000\000\001>:\000\000\000\000\000\000\000\024p\000\000\005yl\000\000\000\000\002\000\000H\000\000\000\027g<\000\000\000\000\000\000\002v\000\000\000_\036 \000\000\000\000\000\000\010p\000\000\002{{@\000\000\000\001\000\000(@\000\000\013oX\000\000\000\000\004\000\001\037\000\0106\0139\\o:\010\rw\003\025\\ \021\011.2\021h@%9@\000\000\000\001*n5[Mw;8@o8\035\r\026{8t \022\\`\000\002=`t4[mb\003IJq:Z.&+L@a7\010\014\027\023\035jm2[NCQ\000Js\000\022-g3\005Xi2\010\014\027\023\035jm2[NB\003\031^r\020\011.3Q\001@%9I`\000\000\001\022n;\030-FK\020@d2YM\026s%hi7[G\"\003\000Js\023@\000\000\000\001\002\000\000\000\000\000\000\000\006A\033\r \000\000\000\000\001 TiP\000\000\000\000\000P`\000\000\000\000\000\000\000\010Tj\020\000\000\000\000\000T:I\006\000\000\000\000\000\")\036Y\000\000\000\000\000\025\030I!\000\000\000\000\000\006M'U \000\000\000\000\005'@\000\000\000\000\000\000\001\023fc(\000\000\000\000\001)t\022(\000\000\000\000\000%\030\000\000\000\000\000\000\000\nM\nR\000\000\000\000\000\025(G$@\000\000\000\000\na\000\000\000\000\000\000\000\0030MFP\000\000\000\000\000X.6h\000\000\000\000\000,0\000\000\000\000\000\000\000\006+5H\000\000\000\000\000+\035dc\000\000\000\000\000\021To<@\000\000\000\000\nl4X@\000\000\000\000\0036[nP\000\000\000\000\002[`\000\000\000\000\000\000\000Ms1T\000\000\000\000\000V{\011T\000\000\000\000\000\023L\000\000\000\000\000\000\000\005fe9\000\000\000\000\000\nt3Z \000\000\000\000\0057\031,\027\020\000\000\000\000\031L\027\020\001Pu3Y \000\000\000\000I7\031\014WA\000x !K'd\033=jn:\000\000\000\000\001Fo6[-vq=Fo6\033\005f@\000\000\000![nVsP@<\036H\010\"iy\030e7\000\0146{5Zo7\013n7#IDu3\013L0\002MRz2SLV+\021Jd\020\017GR\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\014\027\023\035Jt\020\017GR\001@@&\023\010\nF\013INe:\010\007B\002Q\016T/Piu*9(\000\000\000\0146{5Zo7\013nF\013INe:\013L0\0039^n2@\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\030\00246[lG+1J\000\000\000\000\000\000\000\000\000\000\000  \000\000\000\000\003\000&F\013QBr4@\000\000\000\000\000\000\000\000\000\000\000\004\002\000\000\000\000\0000\000ha:\030.&ITd0\030\000\000\000\000\000\000\000\000@ \000\000\000\000\006\000\r\014\027#\005di<\033\000\000\000\000\000\000\000\000\000\000\010\004\000\000\000\000\000`\001Qli1LF\000\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\000\000\013~\032\030f\0230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\010\000\000\000\000\001?c#\014l4\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\027|41L&#@\000\000\000\000\000\000\000\000\000\000\000\000\000 \020\000\000\000\000\002\177FG\0031js\032\000\000\000\000\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000/xhc1\033&S\011@\000\000\000\000\000\000\000\000\000\000\000@ \000\000\000\000\005\177\r\0146\0234l1\030\000\000\000\000\000\000\000\000\000\000\000\010\004\000\000\000\000\000_qQ^s4Xf\027\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\000\000\013\177\032\034\014W \000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\010\000\000\000\000\001?c#\011Dc\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\030\00240\\\016\006c\024d\000\000\000\000\000\000\000\000\000\000\000 \020\000\000\000\000\003\000&F\013A`l2LLVs \000\000\000\000\000\000\000\020\002\000\000\000\000\0000\004hg2[n2k\rDm\000\000\000\000\000\000\000\000\000@ \000\000\000\000\006\000M\014v+=f-0\\\016\006c\024\000\000\000\000\000\000 \004\000\000\000\000\000`\011QXu7\032/\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\014\001\032\030.Fk=f\000\000\000\000\000\000\000\000\000\000\000\000\020\010\000\000\000\000\001@\023#9Js\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\030\00249].\006+Ili9Z-vp\000\000\000\000\000`\020\000\000\000\000\003\000&Fce\\x\000\000\000\000\000\000\000\000\000\000\000\000\000\014\002\000\000\000\000\0000\004hs4[&c)@d\000\000\000\000\000\000\000\000\000\000@ \000\000\000\000\006\000M\0166K4l51L\006 \000\000\000\000\000\000\000\000 \004\000\000\000\000\000`\011Q`c2@\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000@\000\000\000\000\014\001\032\031l\026k\005he\000\000\000\000\000\000\000\000\000\000\000\020\010\000\000\000\000\001@\023#\014l5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\001\000\000\000\000\000\027|40\\\016\006c\024d\000\000\000\000\000\000\000\000\000\000\003l\027\003AXe\031\031-f@\000\000\000\000\000\000\001\003\005ha9\032 \000\000\000\000\000\000\000\000\000\000\000\004a:\030.&ITd0\030\000\000\000\000\000\000\000\001X.F\013IRx6\000\000\000\000\000\000\000\000\000\000F\013QZo9@\000\000\000\000\000\000\000\000\000\000\000QDb1@\000\000\000\000\000\000\000\000\000\000\000\000\000\0161L&#@\000\000\000\000\000\000\000\000\000\000\000\000\002\0143\011X\000\000\000\000\000\000\000\000\000\000\000\000\000\0003\014l4\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016c\033\r \000\000\000\000\000\000\000\000\000\000\000\000\000\016\030l&iTb0\000\000\000\000\000\000\000\000\000\000\001&\033\011Z6\030L\000\000\000\000\000\000\000\000\000\000\000-Na6X.F(\000\000\000\000\000\000\000\000\000\000\0333Y-w\030\000\000\000\000\000\000\000\000\000\000\000\000\004,v+=f-0\\\016\006c\024\000\000\000\000\000\001\023\035Jo9K,6\0234\000\000\000\000\000\000\000\000\"l:[M\027@\000\000\000\000\000\000\000\000\000\000\000\011[\017\026s`\000\000\000\000\000\000\000\000\000\000\000\000\002vk=Hu6\031 \000\000\000\000\000\000\000\000\000\000\005\\e9@\000\000\000\000\000\000\000\000\000\000\000\000\000\0257\033mf(\000\000\000\000\000\000\000\000\000\000\000\000\000\rw\033%F18\000\000\000\000\000\000\000\000\000\000\000cAFe\000\000\000\000\000\000\000\000\000\000\000\000\000\0004p2]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\\\rG+Lh\000\000\000\000\000\000\000\000\000\000\000\001\027\033%Z6\032L\006 \000\000\000\000\000\000\000\000\000afi6MFV\031@d\000\000\000\000\000\000\000\000\0319].\006+Ili9Z-vp\000\000\000\000\005NfK\014d0\000\000\000\000\000\000\000\000\000\000\000\000(\000\002\002\001A\000P0\034(\011\006D20P8\036\020\005DB0@T,\027\014\006#!Xp:\036\017H\004\022\021\014H%\023\011e\002I(V,\026KEs\001Dd3\032\r&c9`r:\035O\007Sq}\001Aa0xL.\033\017HdrY<f7\035Oh4:-\036S+Vkv\033\035Rn~]/)\025T\n\011\006D\"QHtB%\024K&\023)dzA\"R)U\nU2]0Y-,{Z]G?\000@`P8$\026\r\007D\"1(\\2\033\016Gd\022\031\0202)\025K%s\011Lj7\034NgSz\005\006E#R)4j=\"S*Uk\025Zu>a1Y,vK-Zo8\\nW;ev}?0\030,&\033\021Jf3Z\r\026S-Xm7\033n\007\013Ift:]NwCet{>\037/g\177\003Cbqy\034^7\037Qiu:}No;_px|^?'Wmw|>?/_s{~\177@\000\020\020\014\010\005\003\001a\000H(\026\014\006CAq\000D$\023\n\005\"a8`2\032\rG\003Qp|@!\021\010dB)\030N(\024JE2a4\\/\030\014&#\031Pj6\033N\007\023Qlx=\037\017h\004\n\011\006D\"QHtB%\024K&\023)dzA\"R)U\nU2]0Y-\026kEjy>`0XL6#\025Lg4\032-&[1Zn7\\\016\027\023Mhu;\035o\007Kiv}>\037oh\004\006\005\003B!0h<\"\023\nEc\021Xt>!\021I$rI,Z/\030LfS9dv=\037P(4*\035\022K&Sj\025\032U.Y-W+v\013\rJg4ZmV{Efu;^/7k~\003\003Baq\030\\6\037\021Ie2yLn;\037PhtZ=&W-Wl6;-^s;^ox\034\036\027\017Ies9}\016O+Wlv{]\177\007Gesz=>o?csz}\177\037_w|\000\001\001\000`@(\033z\010?fa7h4\034\017\010\004\"!\030P*\026\013F\003\021Pl8\035\017\007d\002\011\010F$\022IDrA$T+\026\013%by@b2\031M\006S1\\p9\035\016gCix~@ PH4\"\025\014G$\022)$Z1\032N'T\n\025\022M(U+\025k\005Ji6\\.WKv\003\005Dc2\031,f;!Rj5[\rVs=`q9\034nG+Ynx<^O7cu|\177@ 0(\034\022\013\006Cb\021\030T.\031\rG#r\011\014J'\024JeRyDf5\033N'3i}\002C\"Qi\024Z5\036Q)U*uJm:_0XlV;%Vm7\\.7+]r{>_p\030\034\026\017\011Ec1y\014N+\027LfsY}\006G%Sj5:m>c3Zmw\033]v\177Aaq8|N/\033Ohtz]>g7]ox<>/\037Skv{~\037\037Woy}\177?`\000\010\010\006\004\002A@p@$\024\013\006\003!`x@\"\022\011E\002Q0\\0\031\r\006cAhx> \020HD2!\024L'\024\n%\"Y0Z.\027L\006\023\021Lh5\033\rg\003Ihv<\036OGt\002\005\004C\"\021(d:!\022J%S\011Tr= Q)\024jE*Y.X,VK5bu<_0\030,&\033\021Jf3Z\r\026S-Xm7\033n\007\013Ift:]NwCet{>\037/g|\002\003\002Aa\020X4\036\021\011E\"qHl:\037\020HdR9$V-\027L&3)\\r;\036Oh\024\032\025\016I%S)u\nM*W,VkU{\005Fe3Z-6k=bs:]o\027[u\177\001Aa0xL.\033\017HdrY<f7\035Oh4:-\036S+Vkv\033\035Vo9]o7|\016\017\013Gdry\\~G'Ukv;=n\177Ccry}\036_7_qy}>\177Oo{~%:KDW(\000\000\000'].B\003=L 6Y-V{Ir \026H\016&+Eje9]\014V!\001Dl7Xm2\003MRz2H\007R\001\025Xu\000\000\011w+P@o3\010\rV+5^r<H\r\026q\001de0[\rF{\014@-\020\034LW\013UJs:\031,B\003\011Xo1Zd\007\033%te\020\017$\002+1j\000\000\000\006\003\011Hf4\032MFsAe\002B!Q\010T0\000\000\000\000\014\006\023\021Lh5\033\rg\003K\005Dc2\031,`\000\000\000\000$[Nf\0131Rd\020\035\017\027\003\024@s4^LR\003%\\ '\031/\007\"U,a6\000\000\000\003\r^m6[mb{afp9\032-g#\030\\c\000\000\000\004K9la6\032,B\003Qrp2H\0166KiJ 4[D\004s\025pt$UL\026`\000\000\000)T\016G\021\000B=\020\014\000\000\000\001& \020O$\003\000\000\000I7\035L\026c%H 9Z/&)\001Zo2\032,fK\025d 3\033n\"\001\025\\ 3\033n&k\005h 9\\\014V\031\001Rn\020\036\016g\0339`r4[NF0\000\000I7\035L\026c%H 3\033n&k\005h 9\\\014V\033%Li2\\D\006K8@x;\034mg\003IRn:\031@\000\002IJs\020\017GR\001@@&\023\010\005\007+9fi3[LV!$@()\031.2YDR \036\010\010'+\031&i=\031 \000\000\000\000\000\001\013W\000\000\010\\L\000\000Eb`\000\004.\026\000\000\"s0\000\002\027\013\000\000\021:(\000\001\014Z\000\000\010ed\000\000F. \000\0042^\000\000#\027\020\000\002\0319\000\000\021KH\000\001\014\\@\000\010ed\000\000F. \000\0042r\000\000#\025 \000\002\0319\000\000\021J(\000\001\014\\@\000\010ed\000\000F\026`\000\00446\000\000#\022@\000\002\031\024\000\000\021I \000\001\014J\000\000\010dP\000\000F%\000\000\0042(\000\000#\022@\000\002\031\024\000\000\021I \000\001\014J\000\000\010dP\000\000F%\000\000\0042(\000\000#\022@\000\002\031\024\000\000\021I \000\001\014J\000\000\010dP\000\000F%\000\000\0042(\000\000#\022@\000\002\031\024\000\000\021I \000\001\014J\000\000\010dP\000\000F%\000\000\0044\"\000\000#\022@\000\002\032\n\000\000\021I \000\001\r\000\000\000\010dP\000\000F%\000\000\0042(\000\000#\022@\000\002\031\024\000\000\021I \000\001\014J\000\000\010gd\000\000F%\000\000\0042(\000\000#\022@\000\002\031\024\000\000\021I \000\001\014m@\000\010i\010\000\000Fo \000\0046z\000\000#7P\000\002\033=\000\000\021[h\000\001\r^@\000\010mt\000\000Fo \000\0046z\000\000#7P\000\002\033(\000\000\021V@\000\001\r^@\000\010mt\000\000Fo \000\0046z\000\000#-\000\000\002\033=\000\000\021[h\000\001\r^@\000\010jd\000\000FW \000\0046F\000\000#0p\000\002\033=\000\000\021[h\000\001\r<@\000\010mt\000\000F]\000\000\0046z\000\000#7P\000\002\032$\000\000\021d8\000\001\016\036@\000\010qL\000\000G\n \000\00488\000\000#;\000\000\002\034&\000\000\021fH\000\001\0160@\000\010ol\000\000F~`\000\0049 \000\000#K \000\002\033{\004W\031\025f,\020\031M\026c\024@`\022\\dra\001Xi7\031$\002+T\000\000\000\000\n\007\023=Nr0[$\006\013\011^r:\031,CQ\000\000\000\000\020m\006+\rV 3\030-\026c\025H:\020\000\000\005\003IJc7[LFKQRo7\010\016fK=Xa:\031,CQ\000\000I7\031\014WA\000x=\020\020eSr\r^u7\035\000\000\000\001Fo6[-vq=Fo6\033\005f\030\000\000\000$[LF+`@>\036H\006\000\000\001&t0\\NB\001p@C\026OH6{U\\t\020\011Db\002Mha9\035\004\002Y\001\006o:[NB\001pz !K'd\033=jn:\010\004b1\001(a9\031lW!\000x=\020\020eSr\r^u7\035\000\004s=h 9].\007\003=dt2Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\002\001@`0\030\020\010\004\002\001\000@ \020\n\005\002A P(\024\n\005\002A P(\024\n\005\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\000\010\004\002\001\000@ \020\010\004\002A P(\024\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\002\020\020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\002\001\000@ \020\010\004\002\001\000A\000@ \020\010\004\002\004\nn`\000\000\001\006\000\000\000\n7+\rFe9\\`\004s=h 7]mf+H\000\000\000\023Mr\003Mjc4\010\014fK1J 7\\D\006#%de1]\rw\023d\000\000\000\023Mr\003Mjc4\010\016\007\023=Fe9\\`\004K9he9\034NW\003QJd\020\034o\027\033QJm\020\030l\026c0\000I\027Sd\006+Ido9\000\000\000\0029^ 9],6A\001He;\032,6)\001^r\020\030,F#IJs9@\000\000\002\005dg\020\033\r\027\033P@t7[d\006c=\\g\000\000\000\004+aJc\020\031Mw\0235Bt\020\031.'\023=d\000\000\000\n6{\rVe:\010\014\026cIJa2\036$\006\033=\\n2XnF+\020\000\000\000\000\010&\013\020@f4[\014R\0039jm1\031. \0029^ 1Z\r\026c\021de7\000\010F+Mhi7\030.FK=\\ 0Y\014G\023\025fs\020\034LW\013URr2Y\000\000\000\000\000N7H\rV{IJ 8\034Mv\033\025fs2\\`\000\000\001\034o:\010\014Vs=jg4\010\0167\003\005Fe\000\000\000\000\002AJr6Z.7\033%^n\020\031\014Vs%Jd\000\000\000\004\023\005H 0Y\014G\023\025fs\000\021\014W3%Fe\020\033n\"\003IJs7].&\033\024@b:\\o\020\002\031Rl2H\014WC%ft9@\0107\023=fs\026Y\014W3%Fe\020\033\r\026s,\000\000\000\023Mr\003Mjc4\010\014F+YRc2@\000\004s=h 0H\014FKIJc:\033n'H\001\020o9]\004\006KL@d7]m`\000\000\000\000![mfs\025Ft4[mb\003\005Xr2X,GI\001Rn\020\034\016&{\035de9\\`\000\002%f 0H\014FKIJc:\033n'H\000\000I7\035L\026c%H 0\\Lw+5Jn:\000\000\000\000\001\034e:\035mw\023,@i7\035\014W\023\031Bc2H\r\027\031\001\\o:\010\0146{9Li3].&+\020\000T7[d\006k\005\\y\020\033n\006+8@f4[\014W\031\001Rn\020\034o\027\033QJm\000\000\000\005#=^ 6X-gI\001^p2[D\0063%Xe9@\011f{P@a\020\030m\006\013IBc:\031.\"\003\021Jv4XlP\000\001(e<\035\004\0063%Xe\020\030NW\033d\000\000#\032-F)\001ho7H\rF\013INe\000\000\011\006{Mh 4\\d\007+9de0Xm\006\013\011Xe\000\023Mr\003M`a1Y$\006c\025Lt\020\033mb\003\021Jv4XlP\002%Xl2Yl\026a\001fe2Z`\000\000\000\000R2X,Bk=\\l<H\014fK1J 9^.7#\025Z\000\000\000\nF{<@m0[O\022\0031Rn5\\`\000\002\011do5Y-b\003ARp2@\011V\013QP 0\\Lw+5Jn:\000\000\000\002IJs:[\016B\003Q^o\020\033\014\027\023\035J\000\000\000\000\004s<@m2\\n6\013\035J 7YD\006#\025fi9\031,B\003Qrp2@\000\004K\021Jn:\032,fK\025d 9\031-V{YJd\000\000\010F+\005Hl7Xm0\000\000\000\000'\031.G;=dk\020\032.2\003U\\r2X,6C\005Dl2@\000\004s<@l7Xm0\0029^t\020\030$\007\033Qde0[ \000\000\000\000S:\034LV\0134@i7XnFa\001hi6Y-w+P\000\000\000\000\011fy\001ft9\031,\026i\001de9[nW\023\rJs\000\025M\027\023Qja6\010\0146KIFu4]\004\006KL@g7[LP\002Ado:\033l6{0@e9\034Mw\020\000\000U7\032mf{]\\ 8\034Mw#=Fo6\000\000\000\000\001\032u6\035\r\026C=` 0]\016F+5`t2Y\000\000\002\011Bd\020\033,W\033MBg2@\010g+9Ft4[mb\0039^t\020\032-W\0031Jm2[NF+\020\000\000\000\000\010FKIJc:\033n'I\001\\o:\010\014VkAhy\000\021M\026c\024@o9\010\016\006\013QP 7\030-V)\001ho7H\rF{9N\000\000\025\rvy\001Za7\036$\007\033eZb7[\r\026\031\001Xi7\032n0\0029^ 1\035,f3\025d 9\\\014\026\033\024@a;\030-\026c\005Dl2@\000\000\002\005Hd9\031.7\031\001La6Z-GI\001\\o:\010\0167+A`o9\035\014V!\001Dy\020\034\016&{Q^c7[\004\0063\005Zi6\036 \005\003I^t7Xmva\001nr7[Lr\003Qrp2H\014f{H@s7Xm6+P\000\000)[l6[\025h 7\\\014W\023\005hi7[D\006{8@n7[EW\033=Fk2]\000\000\002Ado:\033l6{0@n7]\004\006\013YBi6\030,&c\024\000\000![mfs\025Ft4[mb\003IJf:\\lV \000\000A2\031\016&+Mf 0[\016&+\005Hy\020\032-b\003Ufe\000\000\n6{\031hw0\\LR\003\rBu9Y,B\003\r^n7\031,7#%^n\020\030,&{Ih\000\000\000\000\005\033=Fk2]\004\006KL@n7]\004\006\033=\\n2XnF+\020\000S7Xm6+P@i9H\014\026cIJa2\036$\006\033=\\n2XnF+\020\000O8\031.&\013QRo7\010\0146\0139Fe6\031,@\000\001&t0]\014R\0039^t\020\034LV\033=le9\030,&c\024\000\000\000\024\016&+YRo:\\d\006{]\\e9\010\014FK\025H\000'\\\014W\023\005hi7[D\006s=h 9].\007\003=dt2Y\004\006{8@s7Xm6+P\000\000\000\023,W\033MBg2H\016F{<@l7[Lp\000\000\000\000![mfs\025Ft4[mb\003QRm2Y\004\006{Uh\000\000\000\000\000\000\014XL\000\000eC \000\0060f\000\0003\005p\000\003\030+\000\000\031B8\000\001L\021@\000\014`|\000\000f\006`\000\0060.\000\0003\0020\000\003\030\017\000\000\031@X\000\001L\003@\000\014`\014\000\000f\r`\000\006/~\000\0002\1770\000\003\027w\000\000\031?\030\000\001Kw@\000\014_,\000\000ey`\000\006/F\000\0002{p\000\003\027[\000\000\031=8\000\001Ki@\000\014^<\000\000er`\000\006/\016\000\0002x0\000\003\027?\000\000\031;X\000\001K[@\000\014]L\000\000ek`\000\0060n\000\0003\006p\000\003\0307\000\000\031C8\000\001L\033@\000\014a\\\000\000f\r`\000\0060n\000\0002u0\000\003\027'\000\000\031C8\000\001L\033@\000\014a\\\000\000f\r`\000\0060n\000\0003\006p\000\003\0307\000\000\031C8\000\001L\033@\000\014a\\\000\000f\r`\000\0060n\000\0003\006p\000\003\027#\000\000\031C8\000\001KO@\000\014\\l\000\000f\r`\000\0060n\000\0003\006p\000\003\027\027\000\000\031C8\000\001L\033@\000\014a\\\000\000ed`\000\0060n\000\0003\006p\000\003\027\017\000\000\031C8\000\001L\033@\000\014\\,\000\000f\r`\000\0060n\000\0003\006p\000\003\0307\000\000\031C8\000\001L\033@\000\014a\\\000\000f\r`\000\0060n\000\0003\006p\000\003\027\007\000\000\031C8\000\001KA@\000\014[|\000\000e^`\000\0060n\000\0003\006p\000\003\026w\000\000\031C8\000\001L\033@\000\014a\\\000\000f\r`\000\0060n\000\0003\006p\000\003\0307\000\000\031C8\000\001L\033@\000\014[L\000\000e[`\000\006-V\000\0002lp\000\003\026c\000\000\031C8\000\001K/@\000\014Zl\000\000eU`\000\006-&\000\0002ip\000\003\026K\000\000\03148\000\001K!@\000\014Y|\000\000eN`\000\006,n\000\0002f0\000\003\026/\000\000\031C8\000\001L\033@\000\014a\\\000\000eJ`\000\006,N\000\0003\006p\000\003\0307\000\000\031C8\000\001L\033@\000\014a\\\000\000eH`\000\0060n\000\0003\006p\000\003\0307\000\000\031C8\000\001L\033@\000\014X|\000\000eF`\000\006,.\022)d0\001Rn3\000\011d\n8\000n0[@\002C9jl6\n \000\000\000\006DX\000\0004P@\000\003%\004\000\000\032\023\020\000\001RB\000\000\r\024\020\000\000i!\000\000\006J\010\000\0004P@\000\003%\004\000\000\031xP\000\001P\000\000\000\r\024\020\000\000gd@\000\006Dl\000\0004P@\000\003#)\000\000\032\0300\000\001QC\000\000\r\014\030\000\000ha@\000\006F\014\000\00040`\000\003#\006\000\000\032\0300\000\001QC\000\000\r\024\020\000\000i!\000\000\006J\010\000\0004P@\000\003%\004\000\000\032( \000\001RB\000\000\r\024\020\000\000i!\000\000\006J\010\000\0004E\000\000\003#B\000\000\032( \000\001Qa\000\000\r\024\020\000\000i!\000\000\006J\010\000\0004P@\000\003#v\000\000\032( \000\001RB\000\000\r\n8\000\000i!\000\000\006J\010\000\0004P@\000\003%\004\000\000\032( \000\001Q;@\000\r\024\020\000\000i!\000\000\006Gt\000\0004P@\000\003%\004\000\000\032( \000\001RB\000\000\r\024\020\000\000i!\000\000\006J\010\000\0004P@\000\003%\004\000\000\032( \000\001R\013\000\000\r\014P\000\000hp@\000\006G\004\000\00048 \000\003#%\000\000\032\031 \000\001RB\000\000\r\024\020\000\000ga@\000\006J\010\000\0004I \000\003$^\000\000\032\032h\000\001OC\000\000\r\024\020\000\000h\001\000\000\006J\010\000\0004Mp\000\003%\004\000\000\032( \000\001R\034\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ +P*$r%\034G\035\010\016\006\013QPc7[LcQ\001*n5[Mw;8@\"7\030-V)\010t \022Y\001 \000\001.A)\023I\024r\034t 9^.6\033QX:\020\025-f[9^w7\010\rf\0135J:\020\011,@P\000\000/2\031.b{\r^n9[mF(\000\000\000\000\011.Rq\025j.\022]%b+T\000U7\032mf{]\\ \"\\N&{H\000\000\000\011.3Q\000Js\005\000\005v+QF/3\\Mw+@\000\000\022VkcRtt%-WG%ihJh:@\005v+QF/8\030.7\033]H\000\022VkcRtt%-WG%ihJd\035\011,CQ\0256^\035\027'\"*m<:.NDW\030(\000\000\000\025*4*H\000\000\000\000\005`\000\000\000/2\031.b{9jl6\000\000\000\0029^ \"\\N&{H\000\000\000\000\nVs-\\o;[D\006C=ft\000\000\000\000\002!^s:\010\rf\0135J 6\033mv[U` 3\030-\026cUde\000\000\000\000\002U\\k7\033nvq\001fe9\035LW\021\001Jr9\033n \000\000\000\000'\033d\006\013\021Hr2\\n2\003\005fs7Xm\026\013QJd\020\035m\027# @n0[,P\000\000\014\024z\000\000a(\000\000\006\nD\000\0000TX\000\003\005(DK9Li7\032.GH\000\000\000\000\023L\024p\001 O)R+\000\000\000\000\000\000\000\000P\000\000\000\031\000\000\000\007h\000\000\000\000\017\023M\025J/XDo\007\024OXGUT)f3\025\024\037}\"=\024si\0257:\0043qI<t\025H\003\n\014Jc=\006C po\023?\002\000\000#$w\013-T\nn\013S'\004x\017R?|}+(\023]\021y\030\007&'(U\037]?\\wsa\177`\000\000\000\000\000\000\001\000$\000\000\000\000\000\000\000@,@\000\000\000\000\000\000 #h\000\000\000\000\000\000\020\0308@\000\000\000\000\000\010\017C(\000\000\000\000\000\004\011:\011\000\000\000\000\000\002\005F\022h\000\000\000\000\001\003\027ka\000\000\000\000\000Afs,P\000\000\000\000!\000T\005y\000\000\000\000\020FtC[P\000\000\000\010&hj)\"\000\000\000\004\025\010a\034rP\000\000\002\013-<b\007R\000\000\001\006\0145}$c \000\000C po\023?\002\000\000!]FE<\0271 \000\020u<\0135NNd\000\010>\ncH`HO \004 V^\035<-1D\002\021\026\032r5\\.zA\011\000x3`dnV$DZK ,?\005\025v\":O\004\033g3\035Z\000\000N-@\000\004uK\000\000',X\000\002:\013@\000\023V,\000\001\0352`\000\011k\026\000\000NY0\000\004uK\000\000',X\000\0027z@\000\023A(\000\001\0352`\000\011_z\000\000N. \000\004uK\000\000'\030P\000\0029G\000\000\023L8\000\001\034c@\000\011f\034\000\000N1`\000\004s\016\000\000'\030p\000\0029G\000\000\023L8\000\001\0352`\000\011k\026\000\000NY0\000\004uK\000\000',X\000\002:e@\000\023V,\000\001\0352`\000\011k\026\000\000NY0\000\004tD\000\000'&h\000\002:e@\000\023S4\000\001\0352`\000\011k\026\000\000NY0\000\004uK\000\000'*\010\000\002:e@\000\023V,\000\001\034g\000\000\011k\026\000\000NY0\000\004uK\000\000',X\000\002:e@\000\023N\024\000\001\0352`\000\011k\026\000\000N:@\000\004uK\000\000',X\000\002:e@\000\023V,\000\001\0352`\000\011k\026\000\000NY0\000\004uK\000\000',X\000\002:e@\000\023P\024\000\001\034|\000\000\011iZ\000\000NMP\000\004tm\000\000' \010\000\0029x\000\000\023V,\000\001\0352`\000\011_b\000\000NY0\000\004t\033\000\000'+0\000\002:\027@\000\023?D\000\001\0352`\000\011`\\\000\000NY0\000\004u%\000\000',X\000\002:e@\000\023Rl\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\003\024Jl2\000\000\000\000\000\000\005\002l\000\000(\rx\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\001_\000\000(\rx\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\001_\000\000(\rx\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\001_\000\000(\rx\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\001_\000\000(\rx\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\001_\000\000(\rx\000\002A\035@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\007w\000\000(\rx\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P~\000\000\005\007p\000\000(?\000\000\002Cx\000\000\024\037@\000\001!|\000\000\n\017`\000\000P~\000\000\005\007p\000\000(?\000\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\001_\000\000(\rx\000\002@o@\000\024\006|\000\001 7`\000\n\003J\000\000P}P\000\005\001_\000\000(>h\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P} \000\005\001_\000\000(\rx\000\002A)@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\001_\000\000(\rx\000\002@o@\000\024\006|\000\001!x \000\n\003>\000\000P\033p\000\005\007X\000\000(\rx\000\002@o@\000\024\006|\000\001 7`\000\n\003>\000\000P\033p\000\005\001_\000\000(= \000\002@s\000\000\024\0374\000\001!{ \000\n\017Z\000\000Pz\020\000\005\007G\000\000(\rx\000\002@o@\000\024\0368\000\001 7`\000\n\020\020\000\000P*@\000\005\010\005\000\000(\rx\000\002@o@\000\024 \010\000\001 7`\000\n\017t\000\000P\033p\000\005\001_\000\000(>\010\000\002Be\000\000\024\0214\000\001!2@\000\n\013\002\000\000PEP\000\005\005\030\000\000(!X\000\002B\r@\000\024\020l\000\001!\006`\000\n\0106\000\000PC0\000\005\004\033\000\000(!X\000\002B\r@\000\024\0214\000\001!\013 \000\n\010Z\000\000PEP\000\005\004-\000\000(\"h\000\002B\026@\000\024\030h\000\001!\013 \000\n\010Z\000\000PEP\000\005\006\002\000\000(/`\000\002B\026@\000\024\0214\000\001!;@\000\n\010Z\000\000PEP\000\005\004-\000\000(\"h\000\002Bn@\000\024\0214\000\001!\013 \000\n\010Z\000\000PEP\000\005\004-\000\000(-8\000\002B\026@\000\024\0214\000\001!\013 \000\n\010Z\000\000PZ\020\000\005\004-\000\000(\"h\000\002B\026@\000\024\0214\000\001!\013 \000\n\010Z\000\000PEP\000\005\006\032\000\000(\"h\000\002B\026@\000\024\0214\000\001!@@\000\n\013x\000\000PEP\000\005\004-\000\000(.p\000\002B\026@\000\024\0214\000\001!\013 \000\n\010Z\000\000P[P\000\005\004-\000\000(\"h\000\002B\026@\000\024\0214\000\001!\013 \000\n\013.\000\000PEP\000\005\004-\000\000(\"h\000\002B\026@\000\024\026D\000\001!S \000\n\014f\000\000PiP\000\005\0063\000\000(3\030\000\002C-@\000\024\032P\000\001!U\000\000\n\r(\000\000Pj@\000\005\006T\000\000(5 \000\002C*\000\000\024\034\014\000\001!``\000\n\014f\000\000Pf0\000\005\0063\000\000(3\030\000\002C\031@\000\024\031L\000\001!L`\000\n\r\014\000\000Ph`\000\005\006F\000\000(40\000\002C#\000\000\024\032\030\000\001!L`\000\n\014f\000\000Pf0\000\005\0063\000\000(3\030\000\002C\031@\000\024\031L\000\001!L`\000\n\014f\000\000Pf0\000\005\0063\000\000(3\030\000\002C\031@\000\024\031L\000\001!L`\000\n\014f\000\000Pf0\000\005\006 \000\000(3\030\000\002C\031@\000\024\031L\000\001!L`\000\n\014f\000\000Pf0\000\005\0063\000\000(3\030\000\002C#\000\000\024\032\030\000\001!Q@\000\n\r\014\000\000Ph`\000\005\006F\000\000(3\030\000\002C\031@\000\024\031L\000\001!L`\000\n\014f\000\000Pf0\000\005\0063\000\000(3\030\000\002C\031@\000\024\031L\000\001!L`\000\n\014f\000\000Pf0\000\005\0063\000\000(3\030\000\002C\031@\000\024\031L\000\001!H\000\000\024\000\000@\000 \000\014\000\004\000\001 \0000\000\016\000\004\000\001\020\000(\000\013\000\003\000\000h\000\034\000\007@\002\000\000\000\000\005\030\023\000\000)Ex\000\002L/@\000\024`d\000\001&\027`\000\n1>\000\000S\013p\000\005\030_\000\000)Ex\000\002L/@\000\024[\034\000\001%\\`\000\n1>\000\000Rmp\000\005\027\"\000\000)Ex\000\002Kb@\000\024^$\000\001%r \000\n/\022\000\000Ry\020\000\005\027I\000\000)<H\000\002Kd@\000\024^$\000\001%r \000\n1>\000\000S\013p\000\005\030_\000\000)Ex\000\002L/@\000\024b|\000\001&\027`\000\n1>\000\000S\013p\000\005\030_\000\000)=8\000\002L/@\000\024b|\000\001&\027`\000\n1>\000\000S\013p\000\005\030_\000\000)Ex\000\002L/@\000\024b|\000\001&\027`\000\n$0\000\000S\013p\000\005\030_\000\000)Ex\000\002L/@\000\024b|\000\001$B@\000\n1>\000\000S\013p\000\005\027k\000\000)Ex\000\002L/@\000\024b|\000\001&\027`\000\n1>\000\000S\013p\000\005\030_\000\000)Ex\000\002L/@\000\024b|\000\001%~`\000\n0\020\000\000S\013p\000\005\030_\000\000)Ex\000\002KO\000\000\024` \000\001&\027`\000\n1>\000\000R `\000\005\030_\000\000)78\000\002I\014@\000\024a\\\000\001$A@\000\n1>\000\000S\003P\000\005\030_\000\000)\020X\000\002L/@\000\024b|\000\001%aA@`0\030\014\006\003\001@`0\030\014\006\003\001@` \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\033L`\000\001Rn4]\017\020\000\000\000a7\000\000\000\000\0259H\000\001,\000\000\000\n`\000\000\000V\000\000\000\0050\000\000\000+\000\000\000\002X\000\000\000\025@\000\000\001,\000\000\000\n_p\000\000U\177\000\000\005/x\000\000*\177@\000\002W|\000\000\025@\000\000\001,\000\000\000\n`\000\000\000V\000\000\000\0050\000\000\000+\000\000\000\002X\000\000\000\025@\000\000\001,\000\000\000\n`\000\000\000V\000\000\000\0050\000\000\000+\000\000\000\002X\000\000\000\025@\000\000\001,\000\000\000\n`\000\000\000V\000\000\000\005/x\000\000+\000\000\000\002X\000\000\000\025@\000\000\001,\000\000\000\n`\000\000\000V\000\000\000\0050\000\000\000+\000\000\000\002X\000\000\000\025@\000\000\001+W@\000\n`\000\000\000V\003\020\000\005:\023\000\000+P\000\000\002\\}\000\000\025E\034\000\001.C\000\000\nt\000\000\000W\"0y\034i,R}D&x9$}D=-\"N3\031)!\177j\023i'\036I+;P#\037\014Kg!a@\030PdV\033h0\000\026\026x\000\0011M`\000\013\014n\000\000Xl\000\000\005F7\000\000,38\000\002c\033@\000\026\031\\\000\0011M`\000\013\014n\000\000X=\000\000\005Ct\000\000,38\000\002ax\000\000\026\032 \000\0011M`\000\013\r\010\000\000Xdp\000\005F'\000\000,28\000\002c\023@\000\026\031\034\000\0011I`\000\013\014N\000\000Xdp\000\005F'\000\000,38\000\002c\033@\000\026\031\\\000\0011M`\000\013\014n\000\000Xfp\000\005F7\000\000,38\000\002c\033@\000\026\031\\\000\0011C`\000\013\014n\000\000Xfp\000\005F7\000\000,38\000\002c\033@\000\026\031\\\000\0011M`\000\013\014n\000\000Xfp\000\005F7\000\000,,\000\000\002c\033@\000\026\031\\\000\0011M`\000\013\014n\000\000Xfp\000\005E)\000\000,38\000\002c\033@\000\026\025d\000\0011M`\000\013\014n\000\000Xfp\000\005F7\000\000,38\000\002c\033@\000\026\031\\\000\0011M`\000\013\014n\000\000Xfp\000\005DV\000\000,$(\000\002c\033@\000\026\031\\\000\0011M`\000\013\011\002\000\000XHP\000\005F7\000\000,38\000\002ar\000\000\026\031\\\000\0010~\000\000\013\rH\000\000XYP\000\005Cd\000\000,38\000\002by\000\000\026\031\\\000\00119\000\000\013\014n\000\000Xfp\000\005D\007\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@\000\002h5\000\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002gn@\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002gn@\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002gn@\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002gn@\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002gn@\000\026>t\000\0014\020\000\000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002i}\000\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000-\037h\000\002i~@\000\026Ot\000\0014\177 \000\013'z\000\000Z?P\000\005S}\000\000-\037h\000\002i~@\000\026Ot\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002gn@\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005Oc\000\000,}h\000\002gn@\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000-\0378\000\002gn@\000\026>t\000\0014\024@\000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002gn@\000\026>t\000\0013w \000\013\037:\000\000Z>@\000\005O]\000\000,}h\000\002iu@\000\026>t\000\0013w \000\013\037:\000\000Y{P\000\005O]\000\000,}h\000\002gn@\000\026O\034\000\0013y\000\000\013\037:\000\000Y{P\000\005O]\000\000-\036 \000\002in@\000\026>t\000\0013w \000\013'4\000\000Y{P\000\005SM\000\000-\005\030\000\002ib@\000\026>t\000\0013w \000\013'\004\000\000Y{P\000\005S;\000\000,}h\000\002gn@\000\026OP\000\0014^ \000\013$L\000\000Z/\020\000\005R&\000\000-\0220\000\002i'@\000\026J \000\0014R\000\000\013%\020\000\000Z)\000\000\005RH\000\000-\024@\000\002i$\000\000\026It\000\0014O \000\013$L\000\000Z$`\000\005R&\000\000-\0220\000\002i\023\000\000\026I\030\000\0014I@\000\013$l\000\000Z&`\000\005R6\000\000-\0230\000\002i\033\000\000\026IX\000\0014I@\000\013$L\000\000Z$`\000\005R&\000\000-\0220\000\002i\023\000\000\026I\030\000\0014I@\000\013$L\000\000Z$`\000\005R&\000\000-\0220\000\002i\023\000\000\026I\030\000\0014I@\000\013$L\000\000Z$`\000\005R\023\000\000-\0220\000\002i\023\000\000\026I\030\000\0014I@\000\013$L\000\000Z$`\000\005R&\000\000-\0220\000\002i\033\000\000\026IX\000\0014M@\000\013$l\000\000Z&`\000\005R6\000\000-\0220\000\002i\023\000\000\026I\030\000\0014I@\000\013$L\000\000Z$`\000\005R&\000\000-\0220\000\002i\023\000\000\026I\030\000\0014I@\000\013$L\000\000Z$`\000\005R&\000\000-\0220\000\002i\023\000\000\026I\030\000\0014D`\000\024\000\000@\000 \000\014\000\004\000\001 \0000\000\016\000\004\000\001\020\000(\000\013\000\003\000\000h\000\034\000\007@\002\000\000\001\002B!Q\010T0\000\000a1\030lF+\030\000\000\030\014&#\031Pj6\033N\007\020\000\000\000\000\000\000\000\000\000\000\000\001",0x110e);
    private static final int[] _data4 = decodeData("\000\000\000\000\000\000\014'\022\000\000b<0\000\006\023}aj^4$4s\033;n`\000\nbC\000\000\006\024\030\000\0001!P\000\003\n\r\000\000\030Pp\000\001E\007\000\000\014(<\000\000bC`\000\006\024 \000\0001\"\000\000\003\n\021\000\000\030Q\010\000\001E\011\000\000\014(H\000\000bD`\000\006\024&\000\0001\"@\000\003\n\024\000\000\030Q(\000\001E\n@\000\014(X\000\000bE@\000\006\024.\000\0001\"p\000\003\n\030\000\000\030Q@\000\001E\014@\000\014(d\000\000bF@\000\006\0244\000\0001#0\000\003\n\033\000\000\030Q`\000\001E\016\000\000\014(t\000\000bG \000\006\024<\000\0001#`\000\003\n\037\000\000\030Qx\000\001E\020\000\000\014)\000\000\000bH \000\006\024B\000\0001$ \000\003\n\"\000\000\030R\030\000\001E\021@\000\014)\020\000\000bI\000\000\006\024J\000\0001$P\000\003\n&\000\000\030R0\000\001E\023@\000\014)\034\000\000bJ\000\000\006\024P\000\0001%\020\000\003\n)\000\000\030RP\000\001E\025\000\000\014),\000\000bJ`\000\006\024X\000\0001%@\000\003\n-\000\000\030Rh\000\001E\027\000\000\014)8\000\000bK`\000\006\024^\000\0001&\000\000\003\n0\000\000\030S\010\000\001E\030@\000\014)H\000\000bL@\000\006\024f\000\0001&0\000\003\n4\000\000\030S \000\001E\032@\000\014)T\000\000bM@\000\006\024l\000\0001&p\000\003\n7\000\000\030S@\000\001E\034\000\000\014)d\000\000bN \000\006\024t\000\0001' \000\003\n;\000\000\030SX\000\001E\036\000\000\014)p\000\000bO \000\006\024z\000\0001'`\000\003\n>\000\000\030Sx\000\001E\037@\000\014*\000\000\000bP\000\000\006\025\002\000\0001(\020\000\003\nB\000\000\030T\020\000\001E!@\000\014*\014\000\000bQ\000\000\006\025\010\000\0001(P\000\003\nE\000\000\030T0\000\001E#\000\000\014*\034\000\000bQ`\000\006\025\020\000\0001)\000\000\003\nI\000\000\030TH\000\001E%\000\000\014*(\000\000bR`\000\006\025\026\000\0001)@\000\003\nL\000\000\030Th\000\001E&@\000\014*8\000\000bS@\000\006\025\036\000\0001)p\000\003\nP\000\000\030U\000\000\001E(@\000\014*D\000\000bT@\000\006\025$\000\0001*0\000\003\nS\000\000\030U \000\001E*\000\000\014*T\000\000bU \000\006\025,\000\0001*`\000\003\nW\000\000\030U8\000\001E,\000\000\014*`\000\000bV \000\006\0252\000\0001+ \000\003\nZ\000\000\030UX\000\001E-@\000\014*p\000\000bW\000\000\006\025:\000\0001+P\000\003\n^\000\000\030Up\000\001E/@\000\014*|\000\000bX\000\000\006\025@\000\0001,\020\000\003\na\000\000\030V\020\000\001E1\000\000\014+\014\000\000bX`\000\006\025H\000\0001,@\000\003\ne\000\000\030V(\000\001E3\000\000\014+\030\000\000bY`\000\006\025N\000\0001-\000\000\003\nh\000\000\030VH\000\001E4@\000\014+(\000\000bZ@\000\006\025V\000\0001-0\000\003\nl\000\000\030V`\000\001E6@\000\014+4\000\000b[@\000\006\025\\\000\0001-p\000\003\no\000\000\030W\000\000\001E8\000\000\014+D\000\000b\\ \000\006\025d\000\0001. \000\003\ns\000\000\030W\030\000\001E:\000\000\014+P\000\000b] \000\006\025j\000\0001.`\000\003\nv\000\000\030W8\000\001E;@\000\014+`\000\000b^\000\000\006\025r\000\0001/\020\000\003\nz\000\000\030WP\000\001E=@\000\014+l\000\000b_\000\000\006\025x\000\0001/P\000\003\n}\000\000\030Wp\000\001E?\000\000\014+|\000\000b_`\000\006\026\000\000\00010\000\000\003\013\001\000\000\030X\010\000\001EA\000\000\014,\010\000\000b``\000\006\026\006\000\00010@\000\003\013\004\000\000\030X(\000\001EB@\000\014,\030\000\000ba@\000\006\026\016\000\00010p\000\003\013\010\000\000\030X@\000\001ED@\000\014,$\000\000bb@\000\006\026\024\000\000110\000\003\013\013\004\nM\006I$@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 Th4J$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\024r\000\000^\000p\000\005p\007\000\000/\0008\000\002x\003@\000\027@\034\000\001<\001`\000\013`\016\000\000^\000p\000\005p\007\017w{}~\177?_ow{}~\177?_`\000\000\000\000\000\032?\177\177^8\000\000\001r`\000\000\000\002\000\000\000\000\000\000\000\0005\177\177\177<p\000\000\003e@\000\000\000\004\000\000\000\000\000\020\010\004\002\001",0x234);
    private static final int[] _data5 = decodeData("\000\000\000\000\000\000\000\000\000@\000\000\000\004\002\000\000\000\000 \000\000\000\002\000\000\000\017\177\177\177\177\000\000K@\000\000\014\005X\000\000`.\020\000\006\002u\000\000/\000\030\000\003\002\037p\000\030\\P\000\001DC@\000\014$\034?\177\177\177|\000\002\000\000\010\037\000\000\000\000\000\000\000\003\177`\000\000\000\000\000\000\001\177%\007SXmt\033\004\177FE\n\0216\006\"f?iQ\0025\004}s{\037|\000\000\000\000\000\000\000\020\004@\000\000\000\000\000\000\010\001`\000\000\000\000\000\000\004\000P\000\000\000\000\000\000\001\177@\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000?x\000\000\000\000\000\000\000 \011\000\000\000\000\000\000\000\000\000U\000\001\177@\000\000\027~\000\000\000\000\000\000\000\003\177\000\000\000\000\000\000\000\001\177`\000\000\000\000\000\000\001\003p\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000_|\000\000\000\000\000\000\000\020;\177\177\177\177@\000\000\010\036\000\000\000\000\000\000\000\003~\177\177\177J(\006Y)\177@\000\000\r5~)T\177O\177\177rJ\001V*\000\002n@\000\010\004\002\001",0x45);


    private final void trampoline() throws ExecutionException {
        while(state == RUNNING) {
            switch(pc>>>9) {
                case 0x80: run_10000(); break; 
                case 0x81: run_10200(); break; 
                case 0x82: run_10400(); break; 
                case 0x83: run_10600(); break; 
                case 0x84: run_10800(); break; 
                case 0x85: run_10a00(); break; 
                case 0x86: run_10c00(); break; 
                case 0x87: run_10e00(); break; 
                case 0x88: run_11000(); break; 
                case 0x89: run_11200(); break; 
                case 0x8a: run_11400(); break; 
                case 0x8b: run_11600(); break; 
                case 0x8c: run_11800(); break; 
                case 0x8d: run_11a00(); break; 
                case 0x8e: run_11c00(); break; 
                case 0x8f: run_11e00(); break; 
                case 0x90: run_12000(); break; 
                case 0x91: run_12200(); break; 
                case 0x92: run_12400(); break; 
                case 0x93: run_12600(); break; 
                case 0x94: run_12800(); break; 
                case 0x95: run_12a00(); break; 
                case 0x96: run_12c00(); break; 
                case 0x97: run_12e00(); break; 
                case 0x98: run_13000(); break; 
                case 0x99: run_13200(); break; 
                case 0x9a: run_13400(); break; 
                case 0x9b: run_13600(); break; 
                case 0x9c: run_13800(); break; 
                case 0x9d: run_13a00(); break; 
                case 0x9e: run_13c00(); break; 
                case 0x9f: run_13e00(); break; 
                case 0xa0: run_14000(); break; 
                case 0xa1: run_14200(); break; 
                case 0xa2: run_14400(); break; 
                case 0xa3: run_14600(); break; 
                case 0xa4: run_14800(); break; 
                case 0xa5: run_14a00(); break; 
                case 0xa6: run_14c00(); break; 
                case 0xa7: run_14e00(); break; 
                case 0xa8: run_15000(); break; 
                case 0xa9: run_15200(); break; 
                case 0xaa: run_15400(); break; 
                case 0xab: run_15600(); break; 
                case 0xac: run_15800(); break; 
                case 0xad: run_15a00(); break; 
                case 0xae: run_15c00(); break; 
                case 0xaf: run_15e00(); break; 
                case 0xb0: run_16000(); break; 
                case 0xb1: run_16200(); break; 
                case 0xb2: run_16400(); break; 
                case 0xb3: run_16600(); break; 
                case 0xb4: run_16800(); break; 
                case 0xb5: run_16a00(); break; 
                case 0xb6: run_16c00(); break; 
                case 0xb7: run_16e00(); break; 
                case 0xb8: run_17000(); break; 
                case 0xb9: run_17200(); break; 
                case 0xba: run_17400(); break; 
                case 0xbb: run_17600(); break; 
                case 0xbc: run_17800(); break; 
                case 0xbd: run_17a00(); break; 
                case 0xbe: run_17c00(); break; 
                case 0xbf: run_17e00(); break; 
                case 0xc0: run_18000(); break; 
                case 0xc1: run_18200(); break; 
                case 0xc2: run_18400(); break; 
                case 0xc3: run_18600(); break; 
                case 0xc4: run_18800(); break; 
                case 0xc5: run_18a00(); break; 
                case 0xc6: run_18c00(); break; 
                case 0xc7: run_18e00(); break; 
                case 0xc8: run_19000(); break; 
                case 0xc9: run_19200(); break; 
                case 0xca: run_19400(); break; 
                case 0xcb: run_19600(); break; 
                case 0xcc: run_19800(); break; 
                case 0xcd: run_19a00(); break; 
                case 0xce: run_19c00(); break; 
                case 0xcf: run_19e00(); break; 
                case 0xd0: run_1a000(); break; 
                case 0xd1: run_1a200(); break; 
                case 0xd2: run_1a400(); break; 
                case 0xd3: run_1a600(); break; 
                case 0xd4: run_1a800(); break; 
                case 0xd5: run_1aa00(); break; 
                case 0xd6: run_1ac00(); break; 
                case 0xd7: run_1ae00(); break; 
                case 0xd8: run_1b000(); break; 
                case 0xd9: run_1b200(); break; 
                case 0xda: run_1b400(); break; 
                case 0xdb: run_1b600(); break; 
                case 0xdc: run_1b800(); break; 
                case 0xdd: run_1ba00(); break; 
                case 0xde: run_1bc00(); break; 
                case 0xdf: run_1be00(); break; 
                case 0xe0: run_1c000(); break; 
                case 0xe1: run_1c200(); break; 
                case 0xe2: run_1c400(); break; 
                case 0xe3: run_1c600(); break; 
                case 0xe4: run_1c800(); break; 
                case 0xe5: run_1ca00(); break; 
                case 0xe6: run_1cc00(); break; 
                case 0xe7: run_1ce00(); break; 
                case 0xe8: run_1d000(); break; 
                case 0xe9: run_1d200(); break; 
                case 0xea: run_1d400(); break; 
                case 0xeb: run_1d600(); break; 
                case 0xec: run_1d800(); break; 
                case 0xed: run_1da00(); break; 
                case 0xee: run_1dc00(); break; 
                case 0xef: run_1de00(); break; 
                case 0xf0: run_1e000(); break; 
                case 0xf1: run_1e200(); break; 
                case 0xf2: run_1e400(); break; 
                case 0xf3: run_1e600(); break; 
                case 0xf4: run_1e800(); break; 
                case 0xf5: run_1ea00(); break; 
                case 0xf6: run_1ec00(); break; 
                case 0xf7: run_1ee00(); break; 
                case 0xf8: run_1f000(); break; 
                case 0xf9: run_1f200(); break; 
                case 0xfa: run_1f400(); break; 
                case 0xfb: run_1f600(); break; 
                case 0xfc: run_1f800(); break; 
                case 0xfd: run_1fa00(); break; 
                case 0xfe: run_1fc00(); break; 
                case 0xff: run_1fe00(); break; 
                case 0x100: run_20000(); break; 
                case 0x101: run_20200(); break; 
                case 0x102: run_20400(); break; 
                case 0x103: run_20600(); break; 
                case 0x104: run_20800(); break; 
                case 0x105: run_20a00(); break; 
                case 0x106: run_20c00(); break; 
                case 0x107: run_20e00(); break; 
                case 0x108: run_21000(); break; 
                case 0x109: run_21200(); break; 
                case 0x10a: run_21400(); break; 
                case 0x10b: run_21600(); break; 
                case 0x10c: run_21800(); break; 
                case 0x10d: run_21a00(); break; 
                case 0x10e: run_21c00(); break; 
                case 0x10f: run_21e00(); break; 
                case 0x110: run_22000(); break; 
                case 0x111: run_22200(); break; 
                case 0x112: run_22400(); break; 
                case 0x113: run_22600(); break; 
                case 0x114: run_22800(); break; 
                case 0x115: run_22a00(); break; 
                case 0x116: run_22c00(); break; 
                case 0x117: run_22e00(); break; 
                case 0x118: run_23000(); break; 
                case 0x119: run_23200(); break; 
                case 0x11a: run_23400(); break; 
                case 0x11b: run_23600(); break; 
                case 0x11c: run_23800(); break; 
                case 0x11d: run_23a00(); break; 
                case 0x11e: run_23c00(); break; 
                case 0x11f: run_23e00(); break; 
                case 0x120: run_24000(); break; 
                case 0x121: run_24200(); break; 
                case 0x122: run_24400(); break; 
                case 0x123: run_24600(); break; 
                case 0x124: run_24800(); break; 
                case 0x125: run_24a00(); break; 
                case 0x126: run_24c00(); break; 
                case 0x127: run_24e00(); break; 
                case 0x128: run_25000(); break; 
                case 0x129: run_25200(); break; 
                case 0x12a: run_25400(); break; 
                case 0x12b: run_25600(); break; 
                case 0x12c: run_25800(); break; 
                case 0x12d: run_25a00(); break; 
                case 0x12e: run_25c00(); break; 
                case 0x12f: run_25e00(); break; 
                case 0x130: run_26000(); break; 
                case 0x131: run_26200(); break; 
                case 0x132: run_26400(); break; 
                case 0x133: run_26600(); break; 
                case 0x134: run_26800(); break; 
                case 0x135: run_26a00(); break; 
                case 0x136: run_26c00(); break; 
                case 0x137: run_26e00(); break; 
                case 0x138: run_27000(); break; 
                case 0x139: run_27200(); break; 
                case 0x13a: run_27400(); break; 
                case 0x13b: run_27600(); break; 
                case 0x13c: run_27800(); break; 
                case 0x13d: run_27a00(); break; 
                case 0x13e: run_27c00(); break; 
                case 0x13f: run_27e00(); break; 
                case 0x140: run_28000(); break; 
                case 0x141: run_28200(); break; 
                case 0x142: run_28400(); break; 
                case 0x143: run_28600(); break; 
                case 0x144: run_28800(); break; 
                case 0x145: run_28a00(); break; 
                case 0x146: run_28c00(); break; 
                case 0x147: run_28e00(); break; 
                case 0x148: run_29000(); break; 
                case 0x149: run_29200(); break; 
                case 0x14a: run_29400(); break; 
                case 0x14b: run_29600(); break; 
                case 0x14c: run_29800(); break; 
                case 0x14d: run_29a00(); break; 
                case 0x14e: run_29c00(); break; 
                case 0x14f: run_29e00(); break; 
                case 0x150: run_2a000(); break; 
                case 0x151: run_2a200(); break; 
                case 0x152: run_2a400(); break; 
                case 0x153: run_2a600(); break; 
                case 0x154: run_2a800(); break; 
                case 0x155: run_2aa00(); break; 
                case 0x156: run_2ac00(); break; 
                case 0x157: run_2ae00(); break; 
                case 0x158: run_2b000(); break; 
                case 0x159: run_2b200(); break; 
                case 0x15a: run_2b400(); break; 
                case 0x15b: run_2b600(); break; 
                case 0x15c: run_2b800(); break; 
                case 0x15d: run_2ba00(); break; 
                case 0x15e: run_2bc00(); break; 
                case 0x15f: run_2be00(); break; 
                case 0x160: run_2c000(); break; 
                case 0x161: run_2c200(); break; 
                case 0x162: run_2c400(); break; 
                case 0x163: run_2c600(); break; 
                case 0x164: run_2c800(); break; 
                case 0x165: run_2ca00(); break; 
                case 0x166: run_2cc00(); break; 
                case 0x167: run_2ce00(); break; 
                case 0x168: run_2d000(); break; 
                case 0x169: run_2d200(); break; 
                case 0x16a: run_2d400(); break; 
                case 0x16b: run_2d600(); break; 
                case 0x16c: run_2d800(); break; 
                case 0x16d: run_2da00(); break; 
                case 0x16e: run_2dc00(); break; 
                case 0x16f: run_2de00(); break; 
                case 0x170: run_2e000(); break; 
                case 0x171: run_2e200(); break; 
                case 0x172: run_2e400(); break; 
                case 0x173: run_2e600(); break; 
                case 0x174: run_2e800(); break; 
                case 0x175: run_2ea00(); break; 
                case 0x176: run_2ec00(); break; 
                case 0x177: run_2ee00(); break; 
                case 0x178: run_2f000(); break; 
                case 0x179: run_2f200(); break; 
                case 0x17a: run_2f400(); break; 
                case 0x17b: run_2f600(); break; 
                case 0x17c: run_2f800(); break; 
                case 0x17d: run_2fa00(); break; 
                case 0x17e: run_2fc00(); break; 
                case 0x17f: run_2fe00(); break; 
                case 0x180: run_30000(); break; 
                case 0x181: run_30200(); break; 
                case 0x182: run_30400(); break; 
                case 0x183: run_30600(); break; 
                case 0x184: run_30800(); break; 
                case 0x185: run_30a00(); break; 
                case 0x186: run_30c00(); break; 
                case 0x187: run_30e00(); break; 
                case 0x188: run_31000(); break; 
                case 0x189: run_31200(); break; 
                case 0x18a: run_31400(); break; 
                case 0x18b: run_31600(); break; 
                case 0x18c: run_31800(); break; 
                case 0x18d: run_31a00(); break; 
                case 0x18e: run_31c00(); break; 
                case 0x18f: run_31e00(); break; 
                case 0x190: run_32000(); break; 
                case 0x191: run_32200(); break; 
                case 0x192: run_32400(); break; 
                case 0x193: run_32600(); break; 
                case 0x194: run_32800(); break; 
                case 0x195: run_32a00(); break; 
                case 0x196: run_32c00(); break; 
                case 0x197: run_32e00(); break; 
                case 0x198: run_33000(); break; 
                case 0x199: run_33200(); break; 
                case 0x19a: run_33400(); break; 
                case 0x19b: run_33600(); break; 
                case 0x19c: run_33800(); break; 
                case 0x19d: run_33a00(); break; 
                case 0x19e: run_33c00(); break; 
                case 0x19f: run_33e00(); break; 
                case 0x1a0: run_34000(); break; 
                case 0x1a1: run_34200(); break; 
                case 0x1a2: run_34400(); break; 
                case 0x1a3: run_34600(); break; 
                case 0x1a4: run_34800(); break; 
                case 0x1a5: run_34a00(); break; 
                case 0x1a6: run_34c00(); break; 
                case 0x1a7: run_34e00(); break; 
                case 0x1a8: run_35000(); break; 
                case 0x1a9: run_35200(); break; 
                case 0x1aa: run_35400(); break; 
                case 0x1ab: run_35600(); break; 
                case 0x1ac: run_35800(); break; 
                case 0x1ad: run_35a00(); break; 
                case 0x1ae: run_35c00(); break; 
                case 0x1af: run_35e00(); break; 
                case 0x1b0: run_36000(); break; 
                case 0x1b1: run_36200(); break; 
                case 0x1b2: run_36400(); break; 
                case 0x1b3: run_36600(); break; 
                case 0x1b4: run_36800(); break; 
                case 0x1b5: run_36a00(); break; 
                case 0x1b6: run_36c00(); break; 
                case 0x1b7: run_36e00(); break; 
                case 0x1b8: run_37000(); break; 
                case 0x1b9: run_37200(); break; 
                case 0x1ba: run_37400(); break; 
                case 0x1bb: run_37600(); break; 
                case 0x1bc: run_37800(); break; 
                case 0x1bd: run_37a00(); break; 
                case 0x1be: run_37c00(); break; 
                case 0x1bf: run_37e00(); break; 
                case 0x1c0: run_38000(); break; 
                case 0x1c1: run_38200(); break; 
                case 0x1c2: run_38400(); break; 
                case 0x1c3: run_38600(); break; 
                case 0x1c4: run_38800(); break; 
                case 0x1c5: run_38a00(); break; 
                case 0x1c6: run_38c00(); break; 
                case 0x1c7: run_38e00(); break; 
                case 0x1c8: run_39000(); break; 
                case 0x1c9: run_39200(); break; 
                case 0x1ca: run_39400(); break; 
                case 0x1cb: run_39600(); break; 
                case 0x1cc: run_39800(); break; 
                case 0x1cd: run_39a00(); break; 
                case 0x1ce: run_39c00(); break; 
                case 0x1cf: run_39e00(); break; 
                case 0x1d0: run_3a000(); break; 
                case 0x1d1: run_3a200(); break; 
                case 0x1d2: run_3a400(); break; 
                case 0x1d3: run_3a600(); break; 
                case 0x1d4: run_3a800(); break; 
                case 0x1d5: run_3aa00(); break; 
                case 0x1d6: run_3ac00(); break; 
                case 0x1d7: run_3ae00(); break; 
                case 0x1d8: run_3b000(); break; 
                case 0x1d9: run_3b200(); break; 
                case 0x1da: run_3b400(); break; 
                case 0x1db: run_3b600(); break; 
                case 0x1dc: run_3b800(); break; 
                case 0x1dd: run_3ba00(); break; 
                case 0x1de: run_3bc00(); break; 
                case 0x1df: run_3be00(); break; 
                case 0x1e0: run_3c000(); break; 
                case 0x1e1: run_3c200(); break; 
                case 0x1e2: run_3c400(); break; 
                case 0x1e3: run_3c600(); break; 
                case 0x1e4: run_3c800(); break; 
                case 0x1e5: run_3ca00(); break; 
                case 0x1e6: run_3cc00(); break; 
                case 0x1e7: run_3ce00(); break; 
                case 0x1e8: run_3d000(); break; 
                case 0x1e9: run_3d200(); break; 
                case 0x1ea: run_3d400(); break; 
                case 0x1eb: run_3d600(); break; 
                case 0x1ec: run_3d800(); break; 
                case 0x1ed: run_3da00(); break; 
                case 0x1ee: run_3dc00(); break; 
                case 0x1ef: run_3de00(); break; 
                case 0x1f0: run_3e000(); break; 
                case 0x1f1: run_3e200(); break; 
                case 0x1f2: run_3e400(); break; 
                case 0x1f3: run_3e600(); break; 
                case 0x1f4: run_3e800(); break; 
                case 0x1f5: run_3ea00(); break; 
                case 0x1f6: run_3ec00(); break; 
                case 0x1f7: run_3ee00(); break; 
                case 0x1f8: run_3f000(); break; 
                case 0x1f9: run_3f200(); break; 
                case 0x1fa: run_3f400(); break; 
                case 0x1fb: run_3f600(); break; 
                case 0x1fc: run_3f800(); break; 
                case 0x1fd: run_3fa00(); break; 
                case 0x1fe: run_3fc00(); break; 
                case 0x1ff: run_3fe00(); break; 
                case 0x200: run_40000(); break; 
                case 0x201: run_40200(); break; 
                case 0x202: run_40400(); break; 
                case 0x203: run_40600(); break; 
                case 0x204: run_40800(); break; 
                case 0x205: run_40a00(); break; 
                case 0x206: run_40c00(); break; 
                case 0x207: run_40e00(); break; 
                case 0x208: run_41000(); break; 
                case 0x209: run_41200(); break; 
                case 0x20a: run_41400(); break; 
                case 0x20b: run_41600(); break; 
                case 0x20c: run_41800(); break; 
                case 0x20d: run_41a00(); break; 
                case 0x20e: run_41c00(); break; 
                case 0x20f: run_41e00(); break; 
                case 0x210: run_42000(); break; 
                case 0x211: run_42200(); break; 
                case 0x212: run_42400(); break; 
                case 0x213: run_42600(); break; 
                case 0x214: run_42800(); break; 
                case 0x215: run_42a00(); break; 
                case 0x216: run_42c00(); break; 
                case 0x217: run_42e00(); break; 
                case 0x218: run_43000(); break; 
                case 0x219: run_43200(); break; 
                case 0x21a: run_43400(); break; 
                case 0x21b: run_43600(); break; 
                case 0x21c: run_43800(); break; 
                case 0x21d: run_43a00(); break; 
                case 0x21e: run_43c00(); break; 
                case 0x21f: run_43e00(); break; 
                case 0x220: run_44000(); break; 
                case 0x221: run_44200(); break; 
                case 0x222: run_44400(); break; 
                case 0x223: run_44600(); break; 
                case 0x224: run_44800(); break; 
                case 0x225: run_44a00(); break; 
                case 0x226: run_44c00(); break; 
                case 0x227: run_44e00(); break; 
                case 0x228: run_45000(); break; 
                case 0x229: run_45200(); break; 
                case 0x22a: run_45400(); break; 
                case 0x22b: run_45600(); break; 
                case 0x22c: run_45800(); break; 
                case 0x22d: run_45a00(); break; 
                case 0x22e: run_45c00(); break; 
                case 0x22f: run_45e00(); break; 
                case 0x230: run_46000(); break; 
                case 0x231: run_46200(); break; 
                case 0x232: run_46400(); break; 
                case 0x233: run_46600(); break; 
                case 0x234: run_46800(); break; 
                case 0x235: run_46a00(); break; 
                case 0x236: run_46c00(); break; 
                case 0x237: run_46e00(); break; 
                case 0x238: run_47000(); break; 
                case 0x239: run_47200(); break; 
                case 0x23a: run_47400(); break; 
                case 0x23b: run_47600(); break; 
                case 0x23c: run_47800(); break; 
                case 0x23d: run_47a00(); break; 
                case 0x23e: run_47c00(); break; 
                case 0x23f: run_47e00(); break; 
                case 0x240: run_48000(); break; 
                case 0x241: run_48200(); break; 
                case 0x242: run_48400(); break; 
                case 0x243: run_48600(); break; 
                case 0x244: run_48800(); break; 
                case 0x245: run_48a00(); break; 
                case 0x246: run_48c00(); break; 
                case 0x247: run_48e00(); break; 
                case 0x248: run_49000(); break; 
                case 0x249: run_49200(); break; 
                case 0x24a: run_49400(); break; 
                case 0x24b: run_49600(); break; 
                case 0x24c: run_49800(); break; 
                case 0x24d: run_49a00(); break; 
                case 0x24e: run_49c00(); break; 
                case 0x24f: run_49e00(); break; 
                case 0x250: run_4a000(); break; 
                case 0x251: run_4a200(); break; 
                case 0x252: run_4a400(); break; 
                case 0x253: run_4a600(); break; 
                case 0x254: run_4a800(); break; 
                case 0x255: run_4aa00(); break; 
                case 0x256: run_4ac00(); break; 
                case 0x257: run_4ae00(); break; 
                case 0x258: run_4b000(); break; 
                case 0x259: run_4b200(); break; 
                case 0x25a: run_4b400(); break; 
                case 0x25b: run_4b600(); break; 
                case 0x25c: run_4b800(); break; 
                case 0x25d: run_4ba00(); break; 
                case 0x25e: run_4bc00(); break; 
                case 0x25f: run_4be00(); break; 
                case 0x260: run_4c000(); break; 
                case 0x261: run_4c200(); break; 
                case 0x262: run_4c400(); break; 
                case 0x263: run_4c600(); break; 
                case 0x264: run_4c800(); break; 
                case 0x265: run_4ca00(); break; 
                case 0x266: run_4cc00(); break; 
                case 0x267: run_4ce00(); break; 
                case 0x268: run_4d000(); break; 
                case 0x269: run_4d200(); break; 
                case 0x26a: run_4d400(); break; 
                case 0x26b: run_4d600(); break; 
                case 0x26c: run_4d800(); break; 
                case 0x26d: run_4da00(); break; 
                case 0x26e: run_4dc00(); break; 
                case 0x26f: run_4de00(); break; 
                case 0x270: run_4e000(); break; 
                case 0x271: run_4e200(); break; 
                case 0x272: run_4e400(); break; 
                case 0x273: run_4e600(); break; 
                case 0x274: run_4e800(); break; 
                case 0x275: run_4ea00(); break; 
                case 0x276: run_4ec00(); break; 
                case 0x277: run_4ee00(); break; 
                case 0x278: run_4f000(); break; 
                case 0x279: run_4f200(); break; 
                case 0x27a: run_4f400(); break; 
                case 0x27b: run_4f600(); break; 
                case 0x27c: run_4f800(); break; 
                case 0x27d: run_4fa00(); break; 
                case 0x27e: run_4fc00(); break; 
                case 0x27f: run_4fe00(); break; 
                case 0x280: run_50000(); break; 
                case 0x281: run_50200(); break; 
                case 0x282: run_50400(); break; 
                case 0x283: run_50600(); break; 
                case 0x284: run_50800(); break; 
                case 0x285: run_50a00(); break; 
                case 0x286: run_50c00(); break; 
                case 0x287: run_50e00(); break; 
                case 0x288: run_51000(); break; 
                case 0x289: run_51200(); break; 
                case 0x28a: run_51400(); break; 
                case 0x28b: run_51600(); break; 
                case 0x28c: run_51800(); break; 
                case 0x28d: run_51a00(); break; 
                case 0x28e: run_51c00(); break; 
                case 0x28f: run_51e00(); break; 
                case 0x290: run_52000(); break; 
                case 0x291: run_52200(); break; 
                case 0x292: run_52400(); break; 
                case 0x293: run_52600(); break; 
                case 0x294: run_52800(); break; 
                case 0x295: run_52a00(); break; 
                case 0x296: run_52c00(); break; 
                case 0x297: run_52e00(); break; 
                case 0x298: run_53000(); break; 
                case 0x299: run_53200(); break; 
                case 0x29a: run_53400(); break; 
                case 0x29b: run_53600(); break; 
                case 0x29c: run_53800(); break; 
                case 0x29d: run_53a00(); break; 
                case 0x29e: run_53c00(); break; 
                case 0x29f: run_53e00(); break; 
                case 0x2a0: run_54000(); break; 
                case 0x2a1: run_54200(); break; 
                case 0x2a2: run_54400(); break; 
                case 0x2a3: run_54600(); break; 
                case 0x2a4: run_54800(); break; 
                case 0x2a5: run_54a00(); break; 
                case 0x2a6: run_54c00(); break; 
                case 0x2a7: run_54e00(); break; 
                case 0x2a8: run_55000(); break; 
                case 0x2a9: run_55200(); break; 
                case 0x2aa: run_55400(); break; 
                case 0x2ab: run_55600(); break; 
                case 0x2ac: run_55800(); break; 
                case 0x2ad: run_55a00(); break; 
                case 0x2ae: run_55c00(); break; 
                case 0x2af: run_55e00(); break; 
                case 0x2b0: run_56000(); break; 
                case 0x2b1: run_56200(); break; 
                case 0x2b2: run_56400(); break; 
                case 0x2b3: run_56600(); break; 
                case 0x2b4: run_56800(); break; 
                case 0x2b5: run_56a00(); break; 
                case 0x2b6: run_56c00(); break; 
                case 0x2b7: run_56e00(); break; 
                case 0x2b8: run_57000(); break; 
                case 0x2b9: run_57200(); break; 
                case 0x2ba: run_57400(); break; 
                case 0x2bb: run_57600(); break; 
                case 0x2bc: run_57800(); break; 
                case 0x2bd: run_57a00(); break; 
                case 0x2be: run_57c00(); break; 
                case 0x2bf: run_57e00(); break; 
                case 0x2c0: run_58000(); break; 
                case 0x2c1: run_58200(); break; 
                case 0x2c2: run_58400(); break; 
                case 0x2c3: run_58600(); break; 
                case 0x2c4: run_58800(); break; 
                case 0x2c5: run_58a00(); break; 
                case 0x2c6: run_58c00(); break; 
                case 0x2c7: run_58e00(); break; 
                case 0x2c8: run_59000(); break; 
                case 0x2c9: run_59200(); break; 
                case 0x2ca: run_59400(); break; 
                case 0x2cb: run_59600(); break; 
                case 0x2cc: run_59800(); break; 
                case 0x2cd: run_59a00(); break; 
                case 0x2ce: run_59c00(); break; 
                case 0x2cf: run_59e00(); break; 
                case 0x2d0: run_5a000(); break; 
                case 0x2d1: run_5a200(); break; 
                case 0x2d2: run_5a400(); break; 
                case 0x2d3: run_5a600(); break; 
                case 0x2d4: run_5a800(); break; 
                case 0x2d5: run_5aa00(); break; 
                case 0x2d6: run_5ac00(); break; 
                case 0x2d7: run_5ae00(); break; 
                case 0x2d8: run_5b000(); break; 
                case 0x2d9: run_5b200(); break; 
                case 0x2da: run_5b400(); break; 
                case 0x2db: run_5b600(); break; 
                case 0x2dc: run_5b800(); break; 
                case 0x2dd: run_5ba00(); break; 
                case 0x2de: run_5bc00(); break; 
                case 0x2df: run_5be00(); break; 
                case 0x2e0: run_5c000(); break; 
                case 0x2e1: run_5c200(); break; 
                case 0x2e2: run_5c400(); break; 
                case 0x2e3: run_5c600(); break; 
                case 0x2e4: run_5c800(); break; 
                case 0x2e5: run_5ca00(); break; 
                case 0x2e6: run_5cc00(); break; 
                case 0x2e7: run_5ce00(); break; 
                case 0x2e8: run_5d000(); break; 
                default: throw new ExecutionException("invalid address 0x" + Long.toString(this.pc&0xffffffffL,16) + ": r2: " + r2);
            }
        }
    }

    public cl65() {
        super(4096,65536);
        initPages(_data1,0x5d200,false);
        initPages(_data2,0x5d208,false);
        initPages(_data3,0x5e000,true);
        initPages(_data4,0x62438,false);
        initPages(_data5,0x62d10,false);
        clearPages(0x62e24,0x1b);
        clearPages(0x62e90,0xcdf);
    }

    protected int entryPoint() { return 0x11000; }
    protected int heapStart() { return 0x6620c; }
    protected int gp() { return 0x6ad10; }
    public static void main(String[] args) throws Exception {
        cl65 me = new cl65();
        int status = me.run("org.badvision.cl65",args);
        System.exit(status);
    }

    protected void _execute() throws ExecutionException { trampoline(); }

    protected void setCPUState(CPUState state) {
        r1=state.r[1];
        r2=state.r[2];
        r3=state.r[3];
        r4=state.r[4];
        r5=state.r[5];
        r6=state.r[6];
        r7=state.r[7];
        r8=state.r[8];
        r9=state.r[9];
        r10=state.r[10];
        r11=state.r[11];
        r12=state.r[12];
        r13=state.r[13];
        r14=state.r[14];
        r15=state.r[15];
        r16=state.r[16];
        r17=state.r[17];
        r18=state.r[18];
        r19=state.r[19];
        r20=state.r[20];
        r21=state.r[21];
        r22=state.r[22];
        r23=state.r[23];
        r24=state.r[24];
        r25=state.r[25];
        r26=state.r[26];
        r27=state.r[27];
        r28=state.r[28];
        r29=state.r[29];
        r30=state.r[30];
        r31=state.r[31];
        f0=state.f[0];
        f1=state.f[1];
        f2=state.f[2];
        f3=state.f[3];
        f4=state.f[4];
        f5=state.f[5];
        f6=state.f[6];
        f7=state.f[7];
        f8=state.f[8];
        f9=state.f[9];
        f10=state.f[10];
        f11=state.f[11];
        f12=state.f[12];
        f13=state.f[13];
        f14=state.f[14];
        f15=state.f[15];
        f16=state.f[16];
        f17=state.f[17];
        f18=state.f[18];
        f19=state.f[19];
        f20=state.f[20];
        f21=state.f[21];
        f22=state.f[22];
        f23=state.f[23];
        f24=state.f[24];
        f25=state.f[25];
        f26=state.f[26];
        f27=state.f[27];
        f28=state.f[28];
        f29=state.f[29];
        f30=state.f[30];
        f31=state.f[31];
        hi=state.hi; lo=state.lo; fcsr=state.fcsr;
        pc=state.pc;
    }
    protected void getCPUState(CPUState state) {
        state.r[1]=r1;
        state.r[2]=r2;
        state.r[3]=r3;
        state.r[4]=r4;
        state.r[5]=r5;
        state.r[6]=r6;
        state.r[7]=r7;
        state.r[8]=r8;
        state.r[9]=r9;
        state.r[10]=r10;
        state.r[11]=r11;
        state.r[12]=r12;
        state.r[13]=r13;
        state.r[14]=r14;
        state.r[15]=r15;
        state.r[16]=r16;
        state.r[17]=r17;
        state.r[18]=r18;
        state.r[19]=r19;
        state.r[20]=r20;
        state.r[21]=r21;
        state.r[22]=r22;
        state.r[23]=r23;
        state.r[24]=r24;
        state.r[25]=r25;
        state.r[26]=r26;
        state.r[27]=r27;
        state.r[28]=r28;
        state.r[29]=r29;
        state.r[30]=r30;
        state.r[31]=r31;
        state.f[0]=f0;
        state.f[1]=f1;
        state.f[2]=f2;
        state.f[3]=f3;
        state.f[4]=f4;
        state.f[5]=f5;
        state.f[6]=f6;
        state.f[7]=f7;
        state.f[8]=f8;
        state.f[9]=f9;
        state.f[10]=f10;
        state.f[11]=f11;
        state.f[12]=f12;
        state.f[13]=f13;
        state.f[14]=f14;
        state.f[15]=f15;
        state.f[16]=f16;
        state.f[17]=f17;
        state.f[18]=f18;
        state.f[19]=f19;
        state.f[20]=f20;
        state.f[21]=f21;
        state.f[22]=f22;
        state.f[23]=f23;
        state.f[24]=f24;
        state.f[25]=f25;
        state.f[26]=f26;
        state.f[27]=f27;
        state.f[28]=f28;
        state.f[29]=f29;
        state.f[30]=f30;
        state.f[31]=f31;
        state.hi=hi; state.lo=lo; state.fcsr=fcsr;
        state.pc=pc;
    }

    private static final java.util.Hashtable symbols = new java.util.Hashtable();
    static {
        symbols.put("putchar",new Integer(0x2fe00));
        symbols.put("stpcpy",new Integer(0x32200));
        symbols.put("xmalloc",new Integer(0x21c00));
        symbols.put("setgrent",new Integer(0x41c00));
        symbols.put("SB_ToUpper",new Integer(0x20600));
        symbols.put("chroot",new Integer(0x3ac00));
        symbols.put("strcpy",new Integer(0x32a00));
        symbols.put("xfree",new Integer(0x22000));
        symbols.put("waitpid",new Integer(0x38e00));
        symbols.put("getgid",new Integer(0x376c4));
        symbols.put("sysconf",new Integer(0x38400));
        symbols.put("printf",new Integer(0x2f600));
        symbols.put("SB_CopyBuf",new Integer(0x1fa00));
        symbols.put("vsprintf",new Integer(0x53e00));
        symbols.put("utime",new Integer(0x38800));
        symbols.put("AddSubSearchPathFromEnv",new Integer(0x1e000));
        symbols.put("getlogin",new Integer(0x42e00));
        symbols.put("recv",new Integer(0x3de00));
        symbols.put("connect",new Integer(0x3c200));
        symbols.put("IsBDigit",new Integer(0x25400));
        symbols.put("GetVersionAsNumber",new Integer(0x21a00));
        symbols.put("ungetc",new Integer(0x5b400));
        symbols.put("strerror",new Integer(0x33200));
        symbols.put("SearchFile",new Integer(0x1ea00));
        symbols.put("geteuid",new Integer(0x376b4));
        symbols.put("memmove",new Integer(0x2ee00));
        symbols.put("snprintf",new Integer(0x4ce00));
        symbols.put("IsDigit",new Integer(0x24e00));
        symbols.put("pathconf",new Integer(0x3a800));
        symbols.put("FindExt",new Integer(0x1d000));
        symbols.put("mknod",new Integer(0x3ae00));
        symbols.put("CollDeleteItem",new Integer(0x27000));
        symbols.put("getgrgid",new Integer(0x41800));
        symbols.put("IsBlank",new Integer(0x24a00));
        symbols.put("DoneCollection",new Integer(0x26200));
        symbols.put("getenv",new Integer(0x2d400));
        symbols.put("fchmod",new Integer(0x3a000));
        symbols.put("SB_VPrintf",new Integer(0x20c00));
        symbols.put("IsUpper",new Integer(0x25200));
        symbols.put("getegid",new Integer(0x376d4));
        symbols.put("setpriority",new Integer(0x3c000));
        symbols.put("getpriority",new Integer(0x3be00));
        symbols.put("bsearch",new Integer(0x28200));
        symbols.put("usleep",new Integer(0x3b200));
        symbols.put("IsQuote",new Integer(0x25a00));
        symbols.put("getpagesize",new Integer(0x36b80));
        symbols.put("FindMemoryModel",new Integer(0x1d600));
        symbols.put("fchown",new Integer(0x39a00));
        symbols.put("fgets",new Integer(0x29800));
        symbols.put("dirname",new Integer(0x43000));
        symbols.put("memcpy",new Integer(0x36fdc));
        symbols.put("readlink",new Integer(0x39600));
        symbols.put("puts",new Integer(0x30200));
        symbols.put("dup2",new Integer(0x38c00));
        symbols.put("mbrtowc",new Integer(0x54e00));
        symbols.put("getpass",new Integer(0x42a00));
        symbols.put("getuid",new Integer(0x376a4));
        symbols.put("malloc",new Integer(0x2dc00));
        symbols.put("remove",new Integer(0x31600));
        symbols.put("isatty",new Integer(0x48000));
        symbols.put("iswspace",new Integer(0x54a00));
        symbols.put("endpwent",new Integer(0x42800));
        symbols.put("PopSearchPath",new Integer(0x1e600));
        symbols.put("sleep",new Integer(0x36af0));
        symbols.put("vsnprintf",new Integer(0x53a00));
        symbols.put("IsODigit",new Integer(0x25600));
        symbols.put("recvfrom",new Integer(0x3d800));
        symbols.put("SB_Compare",new Integer(0x20800));
        symbols.put("UnknownOption",new Integer(0x1c200));
        symbols.put("strtoul",new Integer(0x4dc00));
        symbols.put("CollSort",new Integer(0x27a00));
        symbols.put("gethostbyaddr",new Integer(0x41200));
        symbols.put("NewCollection",new Integer(0x26400));
        symbols.put("rmdir",new Integer(0x38200));
        symbols.put("InitCmdLine",new Integer(0x1c000));
        symbols.put("socket",new Integer(0x3c400));
        symbols.put("select",new Integer(0x3da00));
        symbols.put("readdir",new Integer(0x40600));
        symbols.put("lchown",new Integer(0x39c00));
        symbols.put("setgroups",new Integer(0x3ee00));
        symbols.put("FreeCollection",new Integer(0x26600));
        symbols.put("fflush",new Integer(0x29400));
        symbols.put("ftruncate",new Integer(0x3b000));
        symbols.put("FindTarget",new Integer(0x21200));
        symbols.put("realpath",new Integer(0x3b800));
        symbols.put("chown",new Integer(0x39800));
        symbols.put("SB_Terminate",new Integer(0x1f800));
        symbols.put("send",new Integer(0x3dc00));
        symbols.put("GetSearchPath",new Integer(0x1e800));
        symbols.put("CollInsert",new Integer(0x26a00));
        symbols.put("chmod",new Integer(0x39e00));
        symbols.put("alarm",new Integer(0x37a64));
        symbols.put("SB_Done",new Integer(0x1ee00));
        symbols.put("strtol",new Integer(0x58000));
        symbols.put("pipe",new Integer(0x38a00));
        symbols.put("uname",new Integer(0x43400));
        symbols.put("accept",new Integer(0x3ca00));
        symbols.put("CollGrow",new Integer(0x26800));
        symbols.put("PushSearchPath",new Integer(0x1e400));
        symbols.put("NeedArg",new Integer(0x1c400));
        symbols.put("strrchr",new Integer(0x33600));
        symbols.put("basename",new Integer(0x43200));
        symbols.put("strtod",new Integer(0x57800));
        symbols.put("SB_Realloc",new Integer(0x1f400));
        symbols.put("xdup",new Integer(0x22400));
        symbols.put("sysctl",new Integer(0x3bc00));
        symbols.put("fstat",new Integer(0x51a00));
        symbols.put("fprintf",new Integer(0x2ba00));
        symbols.put("setpwent",new Integer(0x42600));
        symbols.put("xstrdup",new Integer(0x22200));
        symbols.put("strcat",new Integer(0x32400));
        symbols.put("bind",new Integer(0x3d000));
        symbols.put("InvDef",new Integer(0x1c800));
        symbols.put("inet_addr",new Integer(0x44200));
        symbols.put("spawnvp",new Integer(0x1a200));
        symbols.put("mkfifo",new Integer(0x3b400));
        symbols.put("chdir",new Integer(0x38600));
        symbols.put("initgroups",new Integer(0x44600));
        symbols.put("endgrent",new Integer(0x41e00));
        symbols.put("setsockopt",new Integer(0x3ce00));
        symbols.put("fseek",new Integer(0x2cc00));
        symbols.put("InitCollection",new Integer(0x26000));
        symbols.put("GetVersionAsString",new Integer(0x21800));
        symbols.put("memchr",new Integer(0x2ea00));
        symbols.put("GetTargetName",new Integer(0x21600));
        symbols.put("umask",new Integer(0x37694));
        symbols.put("CollReplaceExpand",new Integer(0x27200));
        symbols.put("NewSearchPath",new Integer(0x1da00));
        symbols.put("lstat",new Integer(0x3a200));
        symbols.put("IsAlpha",new Integer(0x24400));
        symbols.put("AddSearchPath",new Integer(0x1dc00));
        symbols.put("setgid",new Integer(0x3ea00));
        symbols.put("signal",new Integer(0x4c600));
        symbols.put("strncmp",new Integer(0x33400));
        symbols.put("CompareFileId",new Integer(0x27c00));
        symbols.put("strncpy",new Integer(0x4d400));
        symbols.put("sync",new Integer(0x3fe00));
        symbols.put("sendto",new Integer(0x3d600));
        symbols.put("IsAlNum",new Integer(0x24600));
        symbols.put("SetMemoryModel",new Integer(0x1d800));
        symbols.put("realloc",new Integer(0x30400));
        symbols.put("memcmp",new Integer(0x2ec00));
        symbols.put("listen",new Integer(0x3d200));
        symbols.put("Internal",new Integer(0x11600));
        symbols.put("xrealloc",new Integer(0x21e00));
        symbols.put("fork",new Integer(0x33800));
        symbols.put("sscanf",new Integer(0x4d000));
        symbols.put("CollDelete",new Integer(0x26e00));
        symbols.put("execv",new Integer(0x47200));
        symbols.put("SB_CompareStr",new Integer(0x20a00));
        symbols.put("getgrent",new Integer(0x41a00));
        symbols.put("CollTransfer",new Integer(0x27800));
        symbols.put("CollIndex",new Integer(0x26c00));
        symbols.put("sigaction",new Integer(0x40200));
        symbols.put("SB_AppendChar",new Integer(0x1fc00));
        symbols.put("inet_aton",new Integer(0x43e00));
        symbols.put("IsSpace",new Integer(0x24c00));
        symbols.put("symlink",new Integer(0x39400));
        symbols.put("fopen",new Integer(0x2b600));
        symbols.put("AddSearchPathFromEnv",new Integer(0x1de00));
        symbols.put("memset",new Integer(0x36fec));
        symbols.put("main",new Integer(0x1a400));
        symbols.put("GetTargetProperties",new Integer(0x21400));
        symbols.put("fclose",new Integer(0x28c00));
        symbols.put("inet_ntoa",new Integer(0x40a00));
        symbols.put("getppid",new Integer(0x371bc));
        symbols.put("opendir",new Integer(0x40400));
        symbols.put("SB_ToLower",new Integer(0x20400));
        symbols.put("getgroups",new Integer(0x3e000));
        symbols.put("getgrouplist",new Integer(0x44400));
        symbols.put("seteuid",new Integer(0x3e800));
        symbols.put("putc",new Integer(0x2fa00));
        symbols.put("herror",new Integer(0x41000));
        symbols.put("strcmp",new Integer(0x32800));
        symbols.put("shutdown",new Integer(0x3d400));
        symbols.put("ttyname",new Integer(0x40000));
        symbols.put("vfiprintf",new Integer(0x53600));
        symbols.put("getpwuid",new Integer(0x42200));
        symbols.put("dup",new Integer(0x3a600));
        symbols.put("InvArg",new Integer(0x1c600));
        symbols.put("getcwd",new Integer(0x39000));
        symbols.put("gethostbyname",new Integer(0x41400));
        symbols.put("getpwnam",new Integer(0x42000));
        symbols.put("Error",new Integer(0x11400));
        symbols.put("CollMoveMultiple",new Integer(0x27600));
        symbols.put("getservbyname",new Integer(0x40c00));
        symbols.put("gethostname",new Integer(0x43a00));
        symbols.put("sprintf",new Integer(0x55a00));
        symbols.put("strtof",new Integer(0x57a00));
        symbols.put("atexit",new Integer(0x28000));
        symbols.put("setlocale",new Integer(0x48e00));
        symbols.put("GetFileType",new Integer(0x1ce00));
        symbols.put("getpeername",new Integer(0x3e400));
        symbols.put("nanf",new Integer(0x55600));
        symbols.put("SB_InitFromString",new Integer(0x1ec00));
        symbols.put("vfork",new Integer(0x3aa00));
        symbols.put("fsync",new Integer(0x3f200));
        symbols.put("fputc",new Integer(0x2be00));
        symbols.put("getsockopt",new Integer(0x3cc00));
        symbols.put("hstrerror",new Integer(0x40e00));
        symbols.put("localeconv",new Integer(0x49000));
        symbols.put("LongOption",new Integer(0x1cc00));
        symbols.put("GetFileId",new Integer(0x27e00));
        symbols.put("xvsprintf",new Integer(0x24000));
        symbols.put("access",new Integer(0x38000));
        symbols.put("SB_Drop",new Integer(0x1f600));
        symbols.put("MakeFilename",new Integer(0x1d400));
        symbols.put("NewStrBuf",new Integer(0x1f000));
        symbols.put("getdents",new Integer(0x3a400));
        symbols.put("exit",new Integer(0x28800));
        symbols.put("klogctl",new Integer(0x3b600));
        symbols.put("getgrnam",new Integer(0x41600));
        symbols.put("GetArg",new Integer(0x1ca00));
        symbols.put("SB_Slice",new Integer(0x20000));
        symbols.put("Warning",new Integer(0x11200));
        symbols.put("FreeStrBuf",new Integer(0x1f200));
        symbols.put("AbEnd",new Integer(0x24200));
        symbols.put("getpwent",new Integer(0x42400));
        symbols.put("xsprintf",new Integer(0x23e00));
        symbols.put("daemon",new Integer(0x43c00));
        symbols.put("strlen",new Integer(0x10ee4));
        symbols.put("open",new Integer(0x51c00));
        symbols.put("AddSubSearchPathFromWinBin",new Integer(0x1e200));
        symbols.put("IsAscii",new Integer(0x24800));
        symbols.put("xvsnprintf",new Integer(0x23000));
        symbols.put("strchr",new Integer(0x32600));
        symbols.put("IsXDigit",new Integer(0x25800));
        symbols.put("fputs",new Integer(0x47800));
        symbols.put("SB_Printf",new Integer(0x20e00));
        symbols.put("execvp",new Integer(0x28600));
        symbols.put("SB_AppendBuf",new Integer(0x1fe00));
        symbols.put("setsid",new Integer(0x3f000));
        symbols.put("setegid",new Integer(0x3ec00));
        symbols.put("SB_Move",new Integer(0x20200));
        symbols.put("closedir",new Integer(0x40800));
        symbols.put("vasprintf",new Integer(0x42c00));
        symbols.put("xsnprintf",new Integer(0x23c00));
        symbols.put("setuid",new Integer(0x3e600));
        symbols.put("mkdir",new Integer(0x37e00));
        symbols.put("wcrtomb",new Integer(0x5b800));
        symbols.put("close",new Integer(0x51800));
        symbols.put("_call_helper",new Integer(0x10f00));
        symbols.put("vfprintf",new Integer(0x36000));
        symbols.put("CollMove",new Integer(0x27400));
        symbols.put("IsLower",new Integer(0x25000));
        symbols.put("fputwc",new Integer(0x54800));
        symbols.put("raise",new Integer(0x4c400));
        symbols.put("free",new Integer(0x2de00));
        symbols.put("FindName",new Integer(0x1d200));
        symbols.put("getsockname",new Integer(0x3e200));
    }
    public int lookupSymbol(String symbol) { Integer i = (Integer) symbols.get(symbol); return i==null ? -1 : i.intValue(); }

}
