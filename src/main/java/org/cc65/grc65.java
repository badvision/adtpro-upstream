/* This file was generated from grc65 by Mips2Java on Wed Nov 02 05:02:21 UTC 2016 */
package org.cc65;

public final class grc65 extends org.ibex.nestedvm.Runtime {
    /* program counter */
    private int pc = 0;

    /* General Purpose registers */
    private final static int r0 = 0;
    private int      r1,  r2,  r3,  r4,  r5,  r6,  r7,
                r8,  r9,  r10, r11, r12, r13, r14, r15,
                r16, r17, r18, r19, r20, r21, r22, r23,
                r24, r25, r26, r27, r28, r29, r30, r31,
                hi = 0, lo = 0;
    /* FP registers */
    private int f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,
                f8,  f9,  f10, f11, f12, f13, f14, f15,
                f16, f17, f18, f19, f20, f21, f22, f23,
                f24, f25, f26, f27, f28, f29, f30, f31;
    /* FP Control Register */
    private int fcsr = 0;

    private final void run_10000() throws ExecutionException { /* 0x10000 - 0x10200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10010;
                        pc=0x10010;
                        continue;
                    }
                case 0x10010:
                    /* Next insn is delay slot */ 
                    r31=0x10018;
                    pc=0x101ac;
                    continue;
                case 0x10018:
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10020;
                        pc=0x10020;
                        continue;
                    }
                case 0x10020:
                    /* Next insn is delay slot */ 
                    r31=0x10028;
                    pc=0x10e84;
                    run_10e00(); return;
                case 0x10028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10038:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10048;
                        pc=0x10048;
                        continue;
                    }
                case 0x10048:
                    /* Next insn is delay slot */ 
                    r31=0x10050;
                    pc=0x100e4;
                    continue;
                case 0x10050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10060:
                    r4 = 5 << 16;
                    r2 = 5 << 16;
                    r4 = r4 + 26040;
                    r2 = r2 + 26043;
                    r2 = r2 - r4;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x10088;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x10080:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10088:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10080;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x1009c:
                    r4 = 5 << 16;
                    r2 = 5 << 16;
                    r4 = r4 + 26040;
                    r2 = r2 + 26040;
                    r2 = r2 - r4;
                    r2 = r2 >> 2;
                    r3 = r2 >>> 31;
                    r2 = r3 + r2;
                    r5 = r2 >> 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r25 = 0 << 16;
                        pc=0x100d0;
                        continue;
                    }
                    r25 = 0 << 16;
                case 0x100c8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x100d0:
                    r25 = r25 + 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x100c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x100e4:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = 5 << 16;
                    addr=r19+26436;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                        pc=0x10190;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = 5 << 16;
                    r17 = 5 << 16;
                    r18 = r18 + 7176;
                    r17 = r17 + 7180;
                    r16 = 5 << 16;
                    r17 = r17 - r18;
                    r2 = readPages[(r16+26440)>>>12][((r16+26440)>>>2)&0x3ff];
                    r17 = r17 >> 2;
                    r17 = r17 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10164;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10138:
                    r3 = r2 << 2;
                    r3 = r18 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r16+26440)>>>12][((r16+26440)>>>2)&0x3ff] = r2;
                    pc=r3;
                    r31=0x10150;
                    return;
                case 0x10150:
                    r2 = readPages[(r16+26440)>>>12][((r16+26440)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x10138;
                        continue;
                    }
                    r2 = r2 + 1;
                case 0x10164:
                    /* Next insn is delay slot */ 
                    r31=0x1016c;
                    pc=0x10060;
                    continue;
                case 0x1016c:
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x1018c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 23504;
                    r31=0x10188;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10188:
                    r2 = r0 + 1;
                case 0x1018c:
                    addr=r19+26436;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x10190:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x101ac:
                    r2 = 0 << 16;
                    r29 = r29 + -24;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                        pc=0x101d4;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + 23504;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 26444;
                    r31=0x101d4;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x101d4:
                    r4 = 5 << 16;
                    r2 = readPages[(r4+23508)>>>12][((r4+23508)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 0 << 16;
                        pc=0x101fc;
                        continue;
                    }
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x101fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r4 + 23508;
                    pc=r2;
                    r31=0x101fc;
                    return;
                case 0x101fc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                case 0x10200:
                    pc=0x10200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10200() throws ExecutionException { /* 0x10200 - 0x10400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10200:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=0x1009c;
                    run_10000(); return;
                case 0x10208:
                    r8 = r7 + r0;
                    r3 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r4 + r0;
                        pc=0x10360;
                        continue;
                    }
                    r9 = r4 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x103d8;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 256 << 16;
                        pc=0x10548;
                        run_10400(); return;
                    }
                    r2 = 256 << 16;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r10 = r0 + 8;
                        pc=0x107e0;
                        run_10600(); return;
                    }
                    r10 = r0 + 8;
                    r10 = r0 + r0;
                case 0x10240:
                    r2 = 5 << 16;
                    r10 = r7 >>> (r10&0x1f);
                    r2 = r2 + 15796;
                    r2 = r10 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r2 + r6;
                    r2 = r0 + 32;
                    r2 = r2 - r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r2&0x1f);
                        pc=0x1027c;
                        continue;
                    }
                    r4 = r4 << (r2&0x1f);
                    r6 = r5 >>> (r6&0x1f);
                    r8 = r7 << (r2&0x1f);
                    r9 = r4 | r6;
                    r3 = r5 << (r2&0x1f);
                case 0x1027c:
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x1028c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1028c:
                    r10 = r8 & 65535;
                    r5 = r3 >>> 16;
                    r6 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r5 = r7 | r5;
                    { long hilo = (long)(r6) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102c0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102c0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x102e8;
                        continue;
                    }
                    r5 = r5 + r8;
                    r7 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r6 + -1;
                        pc=0x102e4;
                        continue;
                    }
                    r9 = r6 + -1;
                    r7 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -2;
                        pc=0x10834;
                        run_10800(); return;
                    }
                    r6 = r6 + -2;
                case 0x102e4:
                    r6 = r9 + r0;
                case 0x102e8:
                    r4 = r5 - r4;
                    r9 = r3 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x102fc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x102fc:
                    r5 = lo;
                    r11 = hi;
                    r3 = r11 << 16;
                    r3 = r3 | r9;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10328;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10328:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10350;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r5 + -1;
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r2 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10788;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10350:
                    r3 = r6 << 16;
                    r3 = r5 | r3;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10360:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1052c;
                        run_10400(); return;
                    }
                    r3 = r0 + r0;
                    r2 = 1 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10534;
                        run_10400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 24;
                        pc=0x107ac;
                        run_10600(); return;
                    }
                    r8 = r0 + 24;
                    r8 = r0 + 16;
                    r9 = r0 + 16;
                case 0x10394:
                    r3 = 5 << 16;
                    r8 = r6 >>> (r8&0x1f);
                    r3 = r3 + 15796;
                    r3 = r8 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r9;
                    r9 = r0 + 32;
                    r9 = r9 - r2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 >>> (r2&0x1f);
                        pc=0x10574;
                        run_10400(); return;
                    }
                    r3 = r7 >>> (r2&0x1f);
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                        pc=0x107e8;
                        run_10600(); return;
                    }
                    r7 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r3 = r7 ^ 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x103d8:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                        pc=0x103fc;
                        continue;
                    }
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x103f0;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x103f0:
                    r8 = lo;
                    r2 = 1 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x103fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10560;
                        run_10400(); return;
                    }
                case 0x10400:
                    pc=0x10400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10400() throws ExecutionException { /* 0x10400 - 0x10600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10400:
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 24;
                        pc=0x107cc;
                        run_10600(); return;
                    }
                    r6 = r0 + 24;
                    r6 = r0 + 16;
                    r9 = r0 + 16;
                case 0x1041c:
                    r2 = 5 << 16;
                    r6 = r8 >>> (r6&0x1f);
                    r2 = r2 + 15796;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + 32;
                    r9 = r2 + r9;
                    r7 = r7 - r9;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r4 >>> (r9&0x1f);
                        pc=0x10680;
                        run_10600(); return;
                    }
                    r11 = r4 >>> (r9&0x1f);
                    r5 = r4 - r8;
                    r6 = r8 >>> 16;
                    r10 = r8 & 65535;
                    r2 = r0 + 1;
                case 0x10454:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10460;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10460:
                    r7 = r3 >>> 16;
                    r9 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r7 = r11 | r7;
                    { long hilo = (long)(r9) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r11 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10490;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10490:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x104b8;
                        continue;
                    }
                    r7 = r7 + r8;
                    r5 = ((r7 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r9 + -1;
                        pc=0x104b4;
                        continue;
                    }
                    r11 = r9 + -1;
                    r5 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r9 + -2;
                        pc=0x1082c;
                        run_10800(); return;
                    }
                    r9 = r9 + -2;
                case 0x104b4:
                    r9 = r11 + r0;
                case 0x104b8:
                    r4 = r7 - r4;
                    r11 = r3 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104cc;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104cc:
                    r5 = lo;
                    r12 = hi;
                    r3 = r12 << 16;
                    r3 = r3 | r11;
                    { long hilo = (long)(r5) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r7 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x104f8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x104f8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10520;
                        continue;
                    }
                    r3 = r3 + r8;
                    r8 = ((r3 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r5 + -1;
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r4 = r5 + -1;
                    r10 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10780;
                        run_10600(); return;
                    }
                    r5 = r5 + -2;
                case 0x10520:
                    r3 = r9 << 16;
                    /* Next insn is delay slot */ 
                    r3 = r5 | r3;
                    pc=r31;
                    return;
                case 0x1052c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10534:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107b4;
                        run_10600(); return;
                    }
                    r8 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x10394;
                    run_10200(); return;
                case 0x10548:
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107c0;
                        run_10600(); return;
                    }
                    r10 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 16;
                    pc=0x10240;
                    run_10200(); return;
                case 0x10560:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107d4;
                        run_10600(); return;
                    }
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r9 = r0 + r0;
                    pc=0x1041c;
                    continue;
                case 0x10574:
                    r6 = r6 << (r9&0x1f);
                    r6 = r6 | r3;
                    r12 = r4 >>> (r2&0x1f);
                    r8 = r6 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10590;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10590:
                    r14 = r6 & 65535;
                    r2 = r5 >>> (r2&0x1f);
                    r4 = r4 << (r9&0x1f);
                    r4 = r4 | r2;
                    r15 = r4 >>> 16;
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r15;
                    { long hilo = (long)(r13) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x105d0;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x105d0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r7 << (r9&0x1f);
                        pc=0x105ec;
                        continue;
                    }
                    r2 = r7 << (r9&0x1f);
                    r11 = r11 + r6;
                    r3 = ((r11 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r13 + -1;
                        pc=0x10808;
                        run_10800(); return;
                    }
                    r7 = r13 + -1;
                case 0x105e8:
                    r13 = r7 + r0;
                case 0x105ec:
                    r10 = r11 - r10;
                    r4 = r4 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10600;
                        run_10600(); return;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10600:
                    pc=0x10600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10600() throws ExecutionException { /* 0x10600 - 0x10800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10600:
                    r3 = lo;
                    r7 = hi;
                    r7 = r7 << 16;
                    r4 = r7 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1062c;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1062c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10648;
                        continue;
                    }
                    r4 = r4 + r6;
                    r7 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + -1;
                        pc=0x107f4;
                        continue;
                    }
                    r8 = r3 + -1;
                case 0x10644:
                    r3 = r8 + r0;
                case 0x10648:
                    r13 = r13 << 16;
                    r13 = r3 | r13;
                    r4 = r4 - r11;
                    { long hilo = (r13 & 0xffffffffL) * (r2 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r2 = hi;
                    r6 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r3 = lo;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107a0;
                        continue;
                    }
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x10790;
                        continue;
                    }
                case 0x10674:
                    r3 = r13 + r0;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x10680:
                    r8 = r8 << (r7&0x1f);
                    r6 = r8 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10694;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10694:
                    r10 = r8 & 65535;
                    r4 = r4 << (r7&0x1f);
                    r9 = r5 >>> (r9&0x1f);
                    r4 = r4 | r9;
                    r9 = r4 >>> 16;
                    r3 = r5 << (r7&0x1f);
                    r13 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r9;
                    { long hilo = (long)(r13) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x106d8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x106d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10704;
                        continue;
                    }
                    r12 = r12 + r8;
                    r2 = ((r12 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r13 + -1;
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r5 = r13 + -1;
                    r2 = ((r12 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10824;
                        run_10800(); return;
                    }
                    r13 = r13 + -2;
                    r12 = r12 + r8;
                case 0x10704:
                    r7 = r12 - r7;
                    r4 = r4 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10718;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10718:
                    r2 = lo;
                    r9 = hi;
                    r9 = r9 << 16;
                    r9 = r9 | r4;
                    { long hilo = (long)(r2) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10744;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10744:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10770;
                        continue;
                    }
                    r9 = r9 + r8;
                    r4 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r2 + -1;
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r7 = r2 + -1;
                    r4 = ((r9 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1081c;
                        run_10800(); return;
                    }
                    r2 = r2 + -2;
                    r9 = r9 + r8;
                case 0x10770:
                    r13 = r13 << 16;
                    r5 = r9 - r5;
                    /* Next insn is delay slot */ 
                    r2 = r2 | r13;
                    pc=0x10454;
                    run_10400(); return;
                case 0x10780:
                    /* Next insn is delay slot */ 
                    r5 = r4 + r0;
                    pc=0x10520;
                    run_10400(); return;
                case 0x10788:
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    pc=0x10350;
                    run_10200(); return;
                case 0x10790:
                    r5 = r5 << (r9&0x1f);
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10674;
                        continue;
                    }
                case 0x107a0:
                    r3 = r13 + -1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107ac:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107b4:
                    r8 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x10394;
                    run_10200(); return;
                case 0x107c0:
                    r10 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107cc:
                    /* Next insn is delay slot */ 
                    r9 = r0 + 24;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107d4:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r9 = r0 + 8;
                    pc=0x1041c;
                    run_10400(); return;
                case 0x107e0:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10240;
                    run_10200(); return;
                case 0x107e8:
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x107f4:
                    r7 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -2;
                        pc=0x10644;
                        continue;
                    }
                    r3 = r3 + -2;
                case 0x10800:
                    pc=0x10800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10800() throws ExecutionException { /* 0x10800 - 0x10a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10800:
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10648;
                    run_10600(); return;
                case 0x10808:
                    r3 = ((r11 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r13 + -2;
                        pc=0x105e8;
                        run_10400(); return;
                    }
                    r13 = r13 + -2;
                    /* Next insn is delay slot */ 
                    r11 = r11 + r6;
                    pc=0x105ec;
                    run_10400(); return;
                case 0x1081c:
                    /* Next insn is delay slot */ 
                    r2 = r7 + r0;
                    pc=0x10770;
                    run_10600(); return;
                case 0x10824:
                    /* Next insn is delay slot */ 
                    r13 = r5 + r0;
                    pc=0x10704;
                    run_10600(); return;
                case 0x1082c:
                    /* Next insn is delay slot */ 
                    r7 = r7 + r8;
                    pc=0x104b8;
                    run_10400(); return;
                case 0x10834:
                    /* Next insn is delay slot */ 
                    r5 = r5 + r8;
                    pc=0x102e8;
                    run_10200(); return;
                case 0x1083c:
                    r8 = r7 + r0;
                    r9 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r4 + r0;
                        pc=0x1098c;
                        continue;
                    }
                    r2 = r4 + r0;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 1 << 16;
                        pc=0x10a18;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = 256 << 16;
                        pc=0x10b80;
                        run_10a00(); return;
                    }
                    r3 = 256 << 16;
                    r3 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e18;
                        run_10e00(); return;
                    }
                    r10 = r0 + r0;
                case 0x10874:
                    r3 = 5 << 16;
                    r6 = r7 >>> (r6&0x1f);
                    r3 = r3 + 15796;
                    r3 = r6 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r12 = r0 + 32;
                    r10 = r3 + r10;
                    r12 = r12 - r10;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 << (r12&0x1f);
                        pc=0x10cdc;
                        run_10c00(); return;
                    }
                    r4 = r4 << (r12&0x1f);
                    r10 = r5 >>> (r10&0x1f);
                    r8 = r7 << (r12&0x1f);
                    r2 = r4 | r10;
                    r9 = r5 << (r12&0x1f);
                case 0x108ac:
                    r10 = r8 >>> 16;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108bc;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108bc:
                    r13 = r8 & 65535;
                    r11 = r9 >>> 16;
                    r7 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r11 = r3 | r11;
                    { long hilo = (long)(r7) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x108f0;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x108f0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r11 = r11 + r8;
                    r2 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 - r7;
                        pc=0x10918;
                        continue;
                    }
                    r2 = r11 - r7;
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e5c;
                        run_10e00(); return;
                    }
                case 0x10914:
                    r2 = r11 - r7;
                case 0x10918:
                    r9 = r9 & 65535;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10928;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10928:
                    r3 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r4 = r4 | r9;
                    { long hilo = (long)(r3) * ((long)r13); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        if(r10!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                        }
                        pc=0x10954;
                        continue;
                    }
                    if(r10!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r10 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r10 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10954:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1097c;
                        continue;
                    }
                    r4 = r4 + r8;
                case 0x1097c:
                    r3 = r4 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x1098c:
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b60;
                        run_10a00(); return;
                    }
                    r3 = 1 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b6c;
                        run_10a00(); return;
                    }
                    r3 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r3 = 256 << 16;
                    r3 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r0 + 24;
                        pc=0x10df0;
                        run_10c00(); return;
                    }
                    r9 = r0 + 24;
                    r9 = r0 + 16;
                    r10 = r0 + 16;
                case 0x109c0:
                    r8 = 5 << 16;
                    r9 = r6 >>> (r9&0x1f);
                    r8 = r8 + 15796;
                    r8 = r9 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 + r10;
                    r10 = r0 + 32;
                    r10 = r10 - r3;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        r13 = r4 >>> (r3&0x1f);
                        pc=0x10bac;
                        run_10a00(); return;
                    }
                    r13 = r4 >>> (r3&0x1f);
                    r3 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r5 - r7;
                        pc=0x10a08;
                        run_10a00(); return;
                    }
                    r3 = r5 - r7;
                    r3 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e64;
                        run_10e00(); return;
                    }
                case 0x10a00:
                    pc=0x10a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10a00() throws ExecutionException { /* 0x10a00 - 0x10c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10a00:
                    r3 = r5 - r7;
                case 0x10a08:
                    r4 = r4 - r6;
                    r5 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r5;
                    pc=r31;
                    return;
                case 0x10a18:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 1 << 16;
                        pc=0x10a38;
                        continue;
                    }
                    r2 = 1 << 16;
                    r2 = r0 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x10a30;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a30:
                    r8 = lo;
                    r2 = 1 << 16;
                case 0x10a38:
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                        pc=0x10b98;
                        continue;
                    }
                    r2 = (r8&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r2 = 256 << 16;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 24;
                        pc=0x10e10;
                        run_10e00(); return;
                    }
                    r3 = r0 + 24;
                    r3 = r0 + 16;
                    r6 = r0 + 16;
                case 0x10a5c:
                    r2 = 5 << 16;
                    r3 = r8 >>> (r3&0x1f);
                    r2 = r2 + 15796;
                    r2 = r3 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r12 = r0 + 32;
                    r6 = r2 + r6;
                    r12 = r12 - r6;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 >>> (r6&0x1f);
                        pc=0x10ce4;
                        run_10c00(); return;
                    }
                    r10 = r4 >>> (r6&0x1f);
                    r6 = r4 - r8;
                    r2 = r8 >>> 16;
                    r7 = r8 & 65535;
                case 0x10a90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10a9c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10a9c:
                    r10 = r9 >>> 16;
                    r4 = lo;
                    r3 = hi;
                    r3 = r3 << 16;
                    r10 = r3 | r10;
                    { long hilo = (long)(r4) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10acc;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10acc:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10aec;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10aec;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e54;
                        run_10e00(); return;
                    }
                case 0x10aec:
                    r4 = r10 - r4;
                    r9 = r9 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b00;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b00:
                    r3 = lo;
                    r5 = hi;
                    r5 = r5 << 16;
                    r9 = r5 | r9;
                    { long hilo = (long)(r3) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r5 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10b2c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r4 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r4 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10b2c:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r9 = r9 + r8;
                    r2 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b50;
                        continue;
                    }
                    r2 = ((r9 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e4c;
                        run_10e00(); return;
                    }
                case 0x10b50:
                    r3 = r9 - r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r3 >>> (r12&0x1f);
                    pc=r31;
                    return;
                case 0x10b60:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10b6c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10de4;
                        run_10c00(); return;
                    }
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r10 = r0 + r0;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10b80:
                    r3 = ((r7 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10df8;
                        run_10c00(); return;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 16;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10b98:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e04;
                        run_10e00(); return;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x10a5c;
                    continue;
                case 0x10bac:
                    r2 = r7 >>> (r3&0x1f);
                    r6 = r6 << (r10&0x1f);
                    r6 = r6 | r2;
                    r9 = r6 >>> 16;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10bc8;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10bc8:
                    r2 = r6 & 65535;
                    r11 = r5 >>> (r3&0x1f);
                    r4 = r4 << (r10&0x1f);
                    r4 = r4 | r11;
                    r15 = r4 >>> 16;
                    r7 = r7 << (r10&0x1f);
                    r14 = lo;
                    r12 = hi;
                    r12 = r12 << 16;
                    r12 = r12 | r15;
                    { long hilo = (long)(r14) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = lo;
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                case 0x10c00:
                    pc=0x10c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10c00() throws ExecutionException { /* 0x10c00 - 0x10e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10c00:
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c0c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c0c:
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 << (r10&0x1f);
                        pc=0x10c28;
                        continue;
                    }
                    r5 = r5 << (r10&0x1f);
                    r12 = r12 + r6;
                    r8 = ((r12 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r14 + -1;
                        pc=0x10e38;
                        run_10e00(); return;
                    }
                    r13 = r14 + -1;
                case 0x10c24:
                    r14 = r13 + r0;
                case 0x10c28:
                    r11 = r12 - r11;
                    r4 = r4 & 65535;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c3c;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c3c:
                    r8 = lo;
                    r13 = hi;
                    { long hilo = (long)(r8) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r13 << 16;
                    r4 = r2 | r4;
                    r12 = lo;
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        if(r9!=0) {
                        hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                        }
                        pc=0x10c70;
                        continue;
                    }
                    if(r9!=0) {
                    hi = (int)((r11 & 0xffffffffL) % (r9 & 0xffffffffL)); lo = (int)((r11 & 0xffffffffL) / (r9 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10c70:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c8c;
                        continue;
                    }
                    r4 = r4 + r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r8 + -1;
                        pc=0x10e24;
                        run_10e00(); return;
                    }
                    r9 = r8 + -1;
                case 0x10c88:
                    r8 = r9 + r0;
                case 0x10c8c:
                    r14 = r14 << 16;
                    r8 = r8 | r14;
                    r4 = r4 - r12;
                    { long hilo = (r8 & 0xffffffffL) * (r7 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r8 = hi;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    r9 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        continue;
                    }
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        r2 = r4 - r8;
                        pc=0x10e6c;
                        run_10e00(); return;
                    }
                    r2 = r4 - r8;
                    r7 = lo;
                case 0x10cbc:
                    r7 = r5 - r7;
                    r5 = ((r5 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r2 - r5;
                    r3 = r2 << (r3&0x1f);
                    r7 = r7 >>> (r10&0x1f);
                    r2 = r2 >>> (r10&0x1f);
                    /* Next insn is delay slot */ 
                    r3 = r3 | r7;
                    pc=r31;
                    return;
                case 0x10cdc:
                    /* Next insn is delay slot */ 
                    r12 = r0 + r0;
                    pc=0x108ac;
                    run_10800(); return;
                case 0x10ce4:
                    r8 = r8 << (r12&0x1f);
                    r2 = r8 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10cf8;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10cf8:
                    r7 = r8 & 65535;
                    r6 = r5 >>> (r6&0x1f);
                    r4 = r4 << (r12&0x1f);
                    r6 = r4 | r6;
                    r3 = r6 >>> 16;
                    r9 = r5 << (r12&0x1f);
                    r13 = lo;
                    r11 = hi;
                    r11 = r11 << 16;
                    r11 = r11 | r3;
                    { long hilo = (long)(r13) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d3c;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d3c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                    r3 = ((r11 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10d60;
                        continue;
                    }
                    r3 = ((r11 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d60;
                        continue;
                    }
                    r11 = r11 + r8;
                case 0x10d60:
                    r5 = r11 - r5;
                    r3 = r6 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10d74;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10d74:
                    r6 = lo;
                    r10 = hi;
                    r10 = r10 << 16;
                    r10 = r10 | r3;
                    { long hilo = (long)(r6) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        if(r2!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                        }
                        pc=0x10da0;
                        continue;
                    }
                    if(r2!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r2 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r2 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x10da0:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                    r3 = ((r10 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10dc4;
                        continue;
                    }
                    r3 = ((r10 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dc4;
                        continue;
                    }
                    r10 = r10 + r8;
                case 0x10dc4:
                    /* Next insn is delay slot */ 
                    r6 = r10 - r6;
                    pc=0x10a90;
                    run_10a00(); return;
                case 0x10dcc:
                    r7 = r9 - r7;
                    r6 = r8 - r6;
                    r2 = ((r9 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=0x10cbc;
                    continue;
                case 0x10de4:
                    r9 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df0:
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10df8:
                    r6 = r0 + 24;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 24;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e00:
                    pc=0x10e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10e00() throws ExecutionException { /* 0x10e00 - 0x11000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10e00:
                    r10 = r0 + 24;
                case 0x10e04:
                    r3 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e10:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x10a5c;
                    run_10a00(); return;
                case 0x10e18:
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r10 = r0 + 8;
                    pc=0x10874;
                    run_10800(); return;
                case 0x10e24:
                    r2 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + -2;
                        pc=0x10c88;
                        run_10c00(); return;
                    }
                    r8 = r8 + -2;
                    /* Next insn is delay slot */ 
                    r4 = r4 + r6;
                    pc=0x10c8c;
                    run_10c00(); return;
                case 0x10e38:
                    r8 = ((r12 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r14 = r14 + -2;
                        pc=0x10c24;
                        run_10c00(); return;
                    }
                    r14 = r14 + -2;
                    /* Next insn is delay slot */ 
                    r12 = r12 + r6;
                    pc=0x10c28;
                    run_10c00(); return;
                case 0x10e4c:
                    /* Next insn is delay slot */ 
                    r9 = r9 + r8;
                    pc=0x10b50;
                    run_10a00(); return;
                case 0x10e54:
                    /* Next insn is delay slot */ 
                    r10 = r10 + r8;
                    pc=0x10aec;
                    run_10a00(); return;
                case 0x10e5c:
                    /* Next insn is delay slot */ 
                    r11 = r11 + r8;
                    pc=0x10914;
                    run_10800(); return;
                case 0x10e64:
                    /* Next insn is delay slot */ 
                    r3 = r5 + r0;
                    pc=r31;
                    return;
                case 0x10e6c:
                    r2 = ((r5 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dcc;
                        run_10c00(); return;
                    }
                    r7 = lo;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x10cbc;
                    run_10c00(); return;
                case 0x10e84:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+7168)>>>12][((r2+7168)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x10edc;
                        continue;
                    }
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = 5 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r16 + 7164;
                    r17 = r0 + -1;
                case 0x10eb4:
                    /* Next insn is delay slot */ 
                    r16 = r16 + -4;
                    pc=r2;
                    r31=0x10ebc;
                    return;
                case 0x10ebc:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x10eb4;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                case 0x10edc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10ee4:
                    r2 = r4 + 1;
                case 0x10ee8:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x10ee8;
                        continue;
                    }
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=r31;
                    return;
                case 0x10f00:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x10f28;
                    return;
                case 0x10f28:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    pc = 0x10f30;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f34;
                        return;
                    }
                case 0x10f34:
                    r2 = r0 + 1;
                    r3 = r0 + 1;
                    pc = 0x10f3c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10f40;
                        return;
                    }
                case 0x10f40:
                case 0x11000:
                    pc=0x11000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11000() throws ExecutionException { /* 0x11000 - 0x11200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r28 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1107c;
                        continue;
                    }
                case 0x11018:
                    writePages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x11024;
                    pc=0x10000;
                    run_10000(); return;
                case 0x11024:
                    r4 = 1 << 16;
                    r4 = r4 + 56;
                    /* Next insn is delay slot */ 
                    r31=0x11034;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x11034:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1108c;
                        continue;
                    }
                    r2 = r16 + 4;
                    r4 = r0 + r0;
                case 0x1104c:
                    r2 = r2 + 4;
                    r6 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1104c;
                        continue;
                    }
                case 0x11060:
                    r6 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11070;
                    pc=0x12c00;
                    run_12c00(); return;
                case 0x11070:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1107c;
                    pc=0x1b000;
                    run_1b000(); return;
                case 0x1107c:
                    r2 = 6 << 16;
                    r28 = r2 + -6720;
                    /* Next insn is delay slot */ 
                    pc=0x11018;
                    continue;
                case 0x1108c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11060;
                    continue;
                case 0x11200:
                    pc=0x11200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11200() throws ExecutionException { /* 0x11200 - 0x11400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11200:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1121c;
                    pc=0x17400;
                    run_17400(); return;
                case 0x1121c:
                    r3 = r0 + 17;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x11284;
                        continue;
                    }
                    r3 = r0 + 18;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x11268;
                        continue;
                    }
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x11254;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + 8220;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11254;
                    pc=0x14200;
                    run_14200(); return;
                case 0x11254:
                    r4 = 5 << 16;
                    r4 = r4 + 8192;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11268;
                    pc=0x14200;
                    run_14200(); return;
                case 0x11268:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11284:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11400:
                    pc=0x11400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11400() throws ExecutionException { /* 0x11400 - 0x11600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11400:
                    r4 = 5 << 16;
                    r5 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r4 = r4 + 8252;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1141c;
                    pc=0x22600;
                    run_22600(); return;
                case 0x1141c:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11428;
                    pc=0x1b000;
                    run_1b000(); return;
                case 0x11428:
                case 0x11600:
                    pc=0x11600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11600() throws ExecutionException { /* 0x11600 - 0x11800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11600:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x11624;
                    pc=0x17a00;
                    run_17a00(); return;
                case 0x11624:
                    r5 = 5 << 16;
                    r4 = r17 + r0;
                    r5 = r5 + 8572;
                    r6 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11640;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x11640:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1164c;
                    pc=0x1b000;
                    run_1b000(); return;
                case 0x1164c:
                case 0x11800:
                    pc=0x11800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11800() throws ExecutionException { /* 0x11800 - 0x11a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11800:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11818;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x11818:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11824;
                    pc=0x25600;
                    run_25600(); return;
                case 0x11824:
                    r4 = 5 << 16;
                    r4 = r4 + 8580;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1183c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1183c:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11854;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x11854:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11860;
                    pc=0x25600;
                    run_25600(); return;
                case 0x11860:
                    r4 = 5 << 16;
                    r4 = r4 + 8580;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11878;
                    pc=0x14200;
                    run_14200(); return;
                case 0x11878:
                case 0x11a00:
                    pc=0x11a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11a00() throws ExecutionException { /* 0x11a00 - 0x11c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11a00:
                    r4 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    r29 = r29 + -616;
                    r5 = r28 + -32764;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r31;
                    writePages[(r29+608)>>>12][((r29+608)>>>2)&0x3ff] = r30;
                    writePages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff] = r23;
                    writePages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff] = r22;
                    writePages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff] = r21;
                    writePages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff] = r20;
                    writePages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff] = r19;
                    writePages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff] = r18;
                    writePages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff] = r17;
                    writePages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x11a3c;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x11a3c:
                    writePages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12234;
                        run_12200(); return;
                    }
                    r3 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11a8c;
                        continue;
                    }
                    r4 = 5 << 16;
                    r3 = r0 + 97;
                    r4 = r4 + 8640;
                    r5 = r0 + 1;
                    r6 = r0 + 143;
                    r7 = r2 + r0;
                    addr=r28+-32764;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x11a7c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x11a7c:
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                case 0x11a8c:
                    r4 = r29 + 48;
                    r5 = r0 + r0;
                    r6 = r0 + 508;
                    r18 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x11aa4;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x11aa4:
                    r4 = r0 + r0;
                    r5 = r18 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x11ab4;
                    pc=0x26600;
                    run_26600(); return;
                case 0x11ab4:
                    r5 = 5 << 16;
                    r4 = r2 + r0;
                    r5 = r5 + 8784;
                    /* Next insn is delay slot */ 
                    r31=0x11ac8;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x11ac8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12224;
                        run_12200(); return;
                    }
                    r3 = r0 + -1;
                    writePages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff] = r3;
                    r17 = r0 + -1;
                    writePages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff] = r3;
                    writePages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff] = r3;
                    r16 = r0 + r0;
                    r18 = r18 + 15732;
                    r21 = 5 << 16;
                    r22 = 5 << 16;
                case 0x11af4:
                    r4 = 5 << 16;
                    r19 = r4 + 8832;
                    r20 = r0 + 1;
                case 0x11b00:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11d60;
                        run_11c00(); return;
                    }
                case 0x11b08:
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11b18;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x11b18:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11d9c;
                        run_11c00(); return;
                    }
                    r4 = readPages[(r21+23512)>>>12][((r21+23512)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c30;
                        run_11c00(); return;
                    }
                    r23 = r22 + 23516;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11b60;
                    continue;
                case 0x11b48:
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r23 = r23 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c30;
                        run_11c00(); return;
                    }
                case 0x11b60:
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11b6c;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x11b6c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11b48;
                        continue;
                    }
                    if(r30 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x11c44;
                        run_11c00(); return;
                    }
                    r2 = r30 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c78;
                        run_11c00(); return;
                    }
                    r2 = r0 + 2;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11cb4;
                        run_11c00(); return;
                    }
                    r2 = r0 + 3;
                    if(r30 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11b00;
                        continue;
                    }
                    r4 = r0 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11bb0;
                    pc=0x26600;
                    run_26600(); return;
                case 0x11bb0:
                    r16 = r2 + r0;
                    r2 = 5 << 16;
                    r4 = readPages[(r2+23664)>>>12][((r2+23664)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11d7c;
                        run_11c00(); return;
                    }
                    r3 = 5 << 16;
                    r19 = r3 + 23668;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11bfc;
                    continue;
                case 0x11be4:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r19 = r19 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11d7c;
                        run_11c00(); return;
                    }
                case 0x11bfc:
                    r5 = r16 + r0;
                case 0x11c00:
                    pc=0x11c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11c00() throws ExecutionException { /* 0x11c00 - 0x11e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11c00:
                    /* Next insn is delay slot */ 
                    r31=0x11c08;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x11c08:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11be4;
                        run_11a00(); return;
                    }
                    r20 = (r20&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11d8c;
                        continue;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff] = r3;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11af4;
                    run_11a00(); return;
                case 0x11c30:
                    r4 = 5 << 16;
                    r4 = r4 + 8836;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11c44;
                    pc=0x14200;
                    run_14200(); return;
                case 0x11c44:
                    r4 = r0 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11c54;
                    pc=0x26600;
                    run_26600(); return;
                case 0x11c54:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11c68;
                    pc=0x27000;
                    run_27000(); return;
                case 0x11c68:
                    writePages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff] = r2;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11af4;
                    run_11a00(); return;
                case 0x11c78:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11b00;
                        run_11a00(); return;
                    }
                    r4 = r0 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11c90;
                    pc=0x26600;
                    run_26600(); return;
                case 0x11c90:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11ca4;
                    pc=0x27000;
                    run_27000(); return;
                case 0x11ca4:
                    writePages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff] = r2;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11af4;
                    run_11a00(); return;
                case 0x11cb4:
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x11d1c;
                    continue;
                case 0x11cc0:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11ccc;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x11ccc:
                    r3 = (r2&0xffffffffL) < (127&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x121b0;
                        run_12000(); return;
                    }
                    r4 = r29 + 48;
                    r3 = r2 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x121c4;
                        run_12000(); return;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r19;
                    r3 = r17 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11d08;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x11d08:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x11d14;
                    pc=0x14e00;
                    run_14e00(); return;
                case 0x11d14:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11d50;
                        continue;
                    }
                case 0x11d1c:
                    r4 = r0 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11d2c;
                    pc=0x26600;
                    run_26600(); return;
                case 0x11d2c:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11d3c;
                    pc=0x14e00;
                    run_14e00(); return;
                case 0x11d3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11cc0;
                        continue;
                    }
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x121f0;
                        run_12000(); return;
                    }
                case 0x11d50:
                    r2 = r0 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x11af4;
                    run_11a00(); return;
                case 0x11d60:
                    r4 = r0 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11d70;
                    pc=0x26600;
                    run_26600(); return;
                case 0x11d70:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11b08;
                    run_11a00(); return;
                case 0x11d7c:
                    r4 = 5 << 16;
                    r4 = r4 + 9000;
                    /* Next insn is delay slot */ 
                    r31=0x11d8c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x11d8c:
                    writePages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff] = r0;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x11af4;
                    run_11a00(); return;
                case 0x11d9c:
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11e4c;
                        run_11e00(); return;
                    }
                    r4 = 5 << 16;
                    r7 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r4 = r4 + 9032;
                    r5 = r0 + 1;
                    r6 = r0 + 22;
                    /* Next insn is delay slot */ 
                    r31=0x11dc4;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x11dc4:
                    r3 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1209c;
                        run_12000(); return;
                    }
                    r20 = 5 << 16;
                    r18 = r29 + 48;
                    r16 = r0 + r0;
                    r22 = r0 + 1;
                    r20 = r20 + 9272;
                    r19 = 5 << 16;
                    r21 = 5 << 16;
                    /* Next insn is delay slot */ 
                    pc=0x11e0c;
                    run_11e00(); return;
                case 0x11df8:
                    r16 = r16 + 1;
                    r2 = r17 < r16 ? 1 : 0;
                case 0x11e00:
                    pc=0x11e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11e00() throws ExecutionException { /* 0x11e00 - 0x12000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11e00:
                    r18 = r18 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11f10;
                        continue;
                    }
                case 0x11e0c:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x11df8;
                        run_11c00(); return;
                    }
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r2 = r19 + 11160;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x121d8;
                        run_12000(); return;
                    }
                case 0x11e2c:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r5 = r20 + r0;
                    r6 = r16 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11e44;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x11e44:
                    /* Next insn is delay slot */ 
                    pc=0x11df8;
                    run_11c00(); return;
                case 0x11e4c:
                    r3 = readPages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11e74;
                        continue;
                    }
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r5 = r5 + 9824;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11e74;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x11e74:
                    r3 = readPages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11e9c;
                        continue;
                    }
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r5 = r5 + 9868;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11e9c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x11e9c:
                    r3 = readPages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11ec8;
                        continue;
                    }
                    r6 = ((r0 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r5 = r5 + 9916;
                    r6 = r6 << 13;
                    /* Next insn is delay slot */ 
                    r31=0x11ec8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x11ec8:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11ed4;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x11ed4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x121e4;
                        run_12000(); return;
                    }
                    r31 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r30 = readPages[(r29+608)>>>12][((r29+608)>>>2)&0x3ff];
                    r23 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    r22 = readPages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff];
                    r21 = readPages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff];
                    r20 = readPages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff];
                    r19 = readPages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff];
                    r18 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r17 = readPages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff];
                    r16 = readPages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff];
                    r29 = r29 + 616;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x11f10:
                    r5 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r18 = 5 << 16;
                    r20 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x11f28;
                    pc=0x1e600;
                    run_1e600(); return;
                case 0x11f28:
                    r23 = r29 + 48;
                    r22 = r0 + r0;
                    r16 = r0 + 1;
                    r18 = r18 + 9468;
                    r20 = r20 + 9320;
                    r21 = 5 << 16;
                    r19 = 5 << 16;
                    /* Next insn is delay slot */ 
                    pc=0x11f94;
                    continue;
                case 0x11f4c:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12218;
                        run_12200(); return;
                    }
                    r2 = r19 + 11160;
                case 0x11f5c:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r22;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r5 = r20 + r0;
                    r6 = r22 + r0;
                    r7 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x11f80;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x11f80:
                    r22 = r22 + 1;
                    r2 = r17 < r22 ? 1 : 0;
                    r23 = r23 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11fc4;
                        continue;
                    }
                case 0x11f94:
                    r2 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x11f4c;
                        continue;
                    }
                    r7 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r0 + 1;
                    r6 = r0 + 22;
                    /* Next insn is delay slot */ 
                    r31=0x11fbc;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x11fbc:
                    /* Next insn is delay slot */ 
                    pc=0x11f80;
                    continue;
                case 0x11fc4:
                    r5 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x11fd4;
                    pc=0x1e600;
                    run_1e600(); return;
                case 0x11fd4:
                    r4 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r5 = r28 + -32760;
                    /* Next insn is delay slot */ 
                    r31=0x11fe4;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x11fe4:
                    writePages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12210;
                        run_12200(); return;
                    }
                    r3 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12060;
                        run_12000(); return;
                    }
                case 0x12000:
                    pc=0x12000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12000() throws ExecutionException { /* 0x12000 - 0x12200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12000:
                    r7 = r2 + r0;
                case 0x12004:
                    r4 = 5 << 16;
                    r4 = r4 + 9644;
                    r5 = r0 + 1;
                    r6 = r0 + 154;
                    /* Next insn is delay slot */ 
                    r31=0x1201c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x1201c:
                    r4 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12028;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x12028:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e4c;
                        run_11e00(); return;
                    }
                    r16 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                case 0x12034:
                    /* Next insn is delay slot */ 
                    r31=0x1203c;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x1203c:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12048;
                    pc=0x25600;
                    run_25600(); return;
                case 0x12048:
                    r4 = 5 << 16;
                    r4 = r4 + 9800;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12060;
                    pc=0x14200;
                    run_14200(); return;
                case 0x12060:
                    r4 = 5 << 16;
                    r3 = r0 + 97;
                    r7 = r2 + r0;
                    r4 = r4 + 9492;
                    r5 = r0 + 1;
                    r6 = r0 + 150;
                    addr=r28+-32760;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x12084;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x12084:
                    r2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r7 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x12004;
                    continue;
                case 0x1209c:
                    r18 = 5 << 16;
                    r22 = r29 + 48;
                    r16 = r0 + r0;
                    r19 = r0 + 1;
                    r20 = 5 << 16;
                    r21 = 5 << 16;
                    r18 = r18 + 9056;
                    /* Next insn is delay slot */ 
                    pc=0x120e4;
                    continue;
                case 0x120c0:
                    r6 = r20 + 8620;
                case 0x120c4:
                    r5 = r18 + r0;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x120d4;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x120d4:
                    r2 = r17 < r16 ? 1 : 0;
                    r22 = r22 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12100;
                        continue;
                    }
                case 0x120e4:
                    r2 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x120c0;
                        continue;
                    }
                    r6 = r21 + 8616;
                    /* Next insn is delay slot */ 
                    pc=0x120c4;
                    continue;
                case 0x12100:
                    r5 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r19 = 5 << 16;
                    r23 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x12118;
                    pc=0x1e600;
                    run_1e600(); return;
                case 0x12118:
                    r18 = r29 + 48;
                    r16 = r0 + r0;
                    r22 = r0 + 1;
                    r19 = r19 + 9068;
                    r21 = 5 << 16;
                    r20 = 5 << 16;
                    r23 = r23 + 11160;
                    /* Next insn is delay slot */ 
                    pc=0x12150;
                    continue;
                case 0x1213c:
                    r16 = r16 + 1;
                    r2 = r17 < r16 ? 1 : 0;
                    r18 = r18 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11fd4;
                        run_11e00(); return;
                    }
                case 0x12150:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x1213c;
                        continue;
                    }
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12200;
                        run_12200(); return;
                    }
                    r3 = r23 + r0;
                    r2 = r23 + r0;
                case 0x12174:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    r5 = r19 + r0;
                    r6 = r16 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x121a8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x121a8:
                    /* Next insn is delay slot */ 
                    pc=0x1213c;
                    continue;
                case 0x121b0:
                    r4 = 5 << 16;
                    r4 = r4 + 8880;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x121c4;
                    pc=0x14200;
                    run_14200(); return;
                case 0x121c4:
                    r4 = 5 << 16;
                    r4 = r4 + 8920;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x121d8;
                    pc=0x14200;
                    run_14200(); return;
                case 0x121d8:
                    r2 = r21 + 8624;
                    /* Next insn is delay slot */ 
                    pc=0x11e2c;
                    run_11e00(); return;
                case 0x121e4:
                    r16 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x12034;
                    continue;
                case 0x121f0:
                    r4 = 5 << 16;
                    r4 = r4 + 8956;
                    /* Next insn is delay slot */ 
                    r31=0x12200;
                    pc=0x14200;
                    run_14200(); return;
                case 0x12200:
                    pc=0x12200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12200() throws ExecutionException { /* 0x12200 - 0x12400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12200:
                    r3 = r21 + 8624;
                    r2 = r20 + 10328;
                    /* Next insn is delay slot */ 
                    pc=0x12174;
                    run_12000(); return;
                case 0x12210:
                    /* Next insn is delay slot */ 
                    r31=0x12218;
                    pc=0x11800;
                    run_11800(); return;
                case 0x12218:
                    r2 = r21 + 10328;
                    /* Next insn is delay slot */ 
                    pc=0x11f5c;
                    run_11e00(); return;
                case 0x12224:
                    r4 = 5 << 16;
                    r4 = r4 + 8788;
                    /* Next insn is delay slot */ 
                    r31=0x12234;
                    pc=0x14200;
                    run_14200(); return;
                case 0x12234:
                    /* Next insn is delay slot */ 
                    r31=0x1223c;
                    pc=0x1183c;
                    run_11800(); return;
                case 0x1223c:
                case 0x12400:
                    pc=0x12400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12400() throws ExecutionException { /* 0x12400 - 0x12600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12400:
                    r29 = r29 + -360;
                    r4 = r29 + 44;
                    r5 = r0 + r0;
                    r6 = r0 + 251;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r31;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r30;
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r23;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r22;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r21;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r20;
                    writePages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff] = r19;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r18;
                    writePages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff] = r17;
                    writePages[(r29+320)>>>12][((r29+320)>>>2)&0x3ff] = r16;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x12444;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x12444:
                    r4 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    r5 = r28 + -32760;
                    /* Next insn is delay slot */ 
                    r31=0x12454;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x12454:
                    writePages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12ab8;
                        run_12a00(); return;
                    }
                    r3 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x124a4;
                        continue;
                    }
                    r4 = 5 << 16;
                    r3 = r0 + 97;
                    r4 = r4 + 9492;
                    r5 = r0 + 1;
                    r6 = r0 + 150;
                    r7 = r2 + r0;
                    addr=r28+-32760;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x12494;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x12494:
                    r2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff] = r2;
                case 0x124a4:
                    r17 = 5 << 16;
                    r4 = r0 + r0;
                    r5 = r17 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x124b8;
                    pc=0x26600;
                    run_26600(); return;
                case 0x124b8:
                    r5 = r17 + 15732;
                    r4 = r0 + r0;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x124cc;
                    pc=0x26600;
                    run_26600(); return;
                case 0x124cc:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x124d8;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x124d8:
                    r5 = r17 + 15732;
                    r4 = r0 + r0;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x124ec;
                    pc=0x26600;
                    run_26600(); return;
                case 0x124ec:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x124f8;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x124f8:
                    r4 = r0 + r0;
                    r5 = r17 + 15732;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1250c;
                    pc=0x26600;
                    run_26600(); return;
                case 0x1250c:
                    r4 = r0 + r0;
                    r5 = r17 + 15732;
                    writePages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x12520;
                    pc=0x26600;
                    run_26600(); return;
                case 0x12520:
                    r5 = 5 << 16;
                    r4 = r2 + r0;
                    r5 = r5 + 8784;
                    /* Next insn is delay slot */ 
                    r31=0x12534;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x12534:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12aa4;
                        run_12a00(); return;
                    }
                    r4 = r0 + 16;
                    r17 = r17 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x1254c;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x1254c:
                    r4 = r0 + r0;
                    r5 = r17 + r0;
                    r19 = r2 + r0;
                    r23 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12564;
                    pc=0x26600;
                    run_26600(); return;
                case 0x12564:
                    r5 = 5 << 16;
                    r4 = r2 + r0;
                    r5 = r5 + 8832;
                    r22 = r0 + r0;
                    r18 = r0 + 34;
                    r30 = r29 + 40;
                    r21 = r0 + 32;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1258c;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x1258c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x126bc;
                        run_12600(); return;
                    }
                case 0x12594:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x125a0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x125a0:
                    r4 = r16 + r2;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x12648;
                        run_12600(); return;
                    }
                    r4 = r30 + r0;
                    r5 = r16 + r0;
                    r6 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x125c8;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x125c8:
                    r5 = r17 + r0;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x125d8;
                    pc=0x26600;
                    run_26600(); return;
                case 0x125d8:
                    r4 = r30 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x125e8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x125e8:
                    r4 = r30 + r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r21&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r2 + 1;
                    r4 = r30 + r4;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12604;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x12600:
                    pc=0x12600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12600() throws ExecutionException { /* 0x12600 - 0x12800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12600:
                case 0x12604:
                    r4 = r16 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12614;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x12614:
                    r2 = r16 + r2;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x125c8;
                        run_12400(); return;
                    }
                    r4 = r20 - r30;
                    /* Next insn is delay slot */ 
                    r31=0x12634;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x12634:
                    r4 = r2 + r0;
                    r5 = r30 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12648;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x12648:
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r16;
                    r4 = r0 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1265c;
                    pc=0x26600;
                    run_26600(); return;
                case 0x1265c:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r2;
                    r5 = r17 + r0;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12670;
                    pc=0x26600;
                    run_26600(); return;
                case 0x12670:
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r2;
                    r4 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x12680;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x12680:
                    writePages[(r23+12)>>>12][((r23+12)>>>2)&0x3ff] = r2;
                    r4 = r0 + r0;
                    r5 = r17 + r0;
                    r23 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12698;
                    pc=0x26600;
                    run_26600(); return;
                case 0x12698:
                    r5 = 5 << 16;
                    r4 = r2 + r0;
                    r5 = r5 + 8832;
                    r22 = r22 + 1;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x126b4;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x126b4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12594;
                        run_12400(); return;
                    }
                case 0x126bc:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a90;
                        run_12a00(); return;
                    }
                    r2 = r22 < 32 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a7c;
                        run_12a00(); return;
                    }
                    r5 = 5 << 16;
                    r4 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    writePages[(r23+12)>>>12][((r23+12)>>>2)&0x3ff] = r0;
                    r5 = r5 + 10068;
                    /* Next insn is delay slot */ 
                    r31=0x126e8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x126e8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12988;
                        run_12800(); return;
                    }
                    r2 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r2 = r2 + 15;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r2;
                    r9 = r19 + r0;
                    r7 = r0 + r0;
                    r8 = r0 + r0;
                    r5 = r5 + 12036;
                case 0x12710:
                    r3 = readPages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12950;
                        run_12800(); return;
                    }
                    r3 = r3 + 1;
                    r4 = r0 + r0;
                case 0x12730:
                    r6 = r2 + -31;
                    r2 = r2 + -32;
                    r6 = r6 << 2;
                    r2 = r2 << 2;
                    r6 = r5 + r6;
                    r2 = r5 + r2;
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r6 - r2;
                    r4 = r4 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12730;
                        continue;
                    }
                    r8 = r8 + 1;
                    r7 = r7 + r4;
                    r9 = readPages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff];
                    if(r8 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x12710;
                        continue;
                    }
                case 0x12780:
                    r2 = readPages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff];
                    r18 = 5 << 16;
                    r7 = r7 + r2;
                    r20 = 5 << 16;
                    r21 = 5 << 16;
                    r23 = r7 + -1;
                    r16 = r19 + r0;
                    r17 = r0 + r0;
                    r18 = r18 + 10080;
                    r20 = r20 + 10108;
                    r21 = r21 + 10092;
                    /* Next insn is delay slot */ 
                    pc=0x127d8;
                    continue;
                case 0x127b4:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r17 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x127cc;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x127cc:
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r22 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x1281c;
                        run_12800(); return;
                    }
                case 0x127d8:
                    r30 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x127ec;
                    pc=0x26000;
                    run_26000(); return;
                case 0x127ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x127b4;
                        continue;
                    }
                    r4 = r30 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12804;
                    pc=0x26000;
                    run_26000(); return;
                case 0x12800:
                    pc=0x12800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12800() throws ExecutionException { /* 0x12800 - 0x12a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12800:
                case 0x12804:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x127b4;
                        run_12600(); return;
                    }
                    r17 = r17 + 1;
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r22 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x127d8;
                        run_12600(); return;
                    }
                case 0x1281c:
                    r2 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r6 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r7 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r23;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r5 = r5 + 10128;
                    r21 = 5 << 16;
                    r20 = 5 << 16;
                    r23 = 5 << 16;
                    r18 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r31=0x12868;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x12868:
                    r16 = r0 + r0;
                    r21 = r21 + 10208;
                    r20 = r20 + 10096;
                    r23 = r23 + 10092;
                    r18 = r18 + 10232;
                case 0x1287c:
                    r4 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r6 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r7 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12894;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x12894:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x128a8;
                    pc=0x26000;
                    run_26000(); return;
                case 0x128a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x128c8;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x128c0;
                    pc=0x26000;
                    run_26000(); return;
                case 0x128c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12970;
                        continue;
                    }
                case 0x128c8:
                    r6 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x128e0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x128e0:
                    r19 = readPages[(r19+12)>>>12][((r19+12)>>>2)&0x3ff];
                    if(r22 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x1287c;
                        continue;
                    }
                    r4 = 5 << 16;
                    r7 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r4 = r4 + 10240;
                    r5 = r0 + 1;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x12908;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x12908:
                    r4 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12914;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x12914:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a4c;
                        run_12a00(); return;
                    }
                    r31 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    r30 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r23 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r22 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    r21 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r20 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r19 = readPages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff];
                    r18 = readPages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff];
                    r17 = readPages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff];
                    r16 = readPages[(r29+320)>>>12][((r29+320)>>>2)&0x3ff];
                    r29 = r29 + 360;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x12950:
                    r4 = r0 + r0;
                    r8 = r8 + 1;
                    r7 = r7 + r4;
                    r9 = readPages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff];
                    if(r8 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x12710;
                        run_12600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12780;
                    run_12600(); return;
                case 0x12970:
                    r5 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    r4 = r0 + 38;
                    /* Next insn is delay slot */ 
                    r31=0x12980;
                    pc=0x1e600;
                    run_1e600(); return;
                case 0x12980:
                    /* Next insn is delay slot */ 
                    pc=0x128c8;
                    continue;
                case 0x12988:
                    r2 = r22 << 1;
                    r30 = r22 << 4;
                    r9 = r19 + r0;
                    r30 = r30 - r2;
                    r3 = readPages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff];
                    r2 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r30 = r2 + r30;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r30;
                    r7 = r0 + r0;
                    r8 = r0 + r0;
                    r5 = r5 + 12036;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a40;
                        run_12a00(); return;
                    }
                case 0x129c4:
                    r3 = r3 + 1;
                    r4 = r0 + r0;
                case 0x129cc:
                    r6 = r2 + -31;
                    r2 = r2 + -32;
                    r6 = r6 << 2;
                    r2 = r2 << 2;
                    r6 = r5 + r6;
                    r2 = r5 + r2;
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r6 - r2;
                    r4 = r4 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                case 0x12a00:
                    pc=0x12a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12a00() throws ExecutionException { /* 0x12a00 - 0x12c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12a00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x129cc;
                        run_12800(); return;
                    }
                case 0x12a08:
                    r2 = r7 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a18;
                        continue;
                    }
                    r7 = r4 + r0;
                case 0x12a18:
                    r8 = r8 + 1;
                    r9 = readPages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff];
                    if(r8 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x12780;
                        run_12600(); return;
                    }
                    r3 = readPages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x129c4;
                        run_12800(); return;
                    }
                case 0x12a40:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12a08;
                    continue;
                case 0x12a4c:
                    r16 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12a58;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x12a58:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12a64;
                    pc=0x25600;
                    run_25600(); return;
                case 0x12a64:
                    r4 = 5 << 16;
                    r4 = r4 + 9800;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12a7c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x12a7c:
                    r4 = 5 << 16;
                    r5 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r4 = r4 + 10036;
                    /* Next insn is delay slot */ 
                    r31=0x12a90;
                    pc=0x14200;
                    run_14200(); return;
                case 0x12a90:
                    r4 = 5 << 16;
                    r5 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r4 = r4 + 10012;
                    /* Next insn is delay slot */ 
                    r31=0x12aa4;
                    pc=0x14200;
                    run_14200(); return;
                case 0x12aa4:
                    r4 = 5 << 16;
                    r5 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r4 = r4 + 9964;
                    /* Next insn is delay slot */ 
                    r31=0x12ab8;
                    pc=0x14200;
                    run_14200(); return;
                case 0x12ab8:
                    /* Next insn is delay slot */ 
                    r31=0x12ac0;
                    pc=0x11800;
                    run_11800(); return;
                case 0x12ac0:
                case 0x12c00:
                    pc=0x12c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12c00() throws ExecutionException { /* 0x12c00 - 0x12e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12c00:
                    r29 = r29 + -216;
                    r6 = 5 << 16;
                    r6 = r6 + 10344;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r4;
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r5;
                    r4 = r29 + 216;
                    r5 = r29 + 220;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r31;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r30;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r23;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r22;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r21;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r20;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r19;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r18;
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = r17;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x12c4c;
                    pc=0x15e00;
                    run_15e00(); return;
                case 0x12c4c:
                    r2 = r0 + 1;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13c7c;
                        run_13c00(); return;
                    }
                    r2 = r0 + 1;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r0;
                case 0x12c70:
                    r3 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r0 + 45;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x13754;
                        run_13600(); return;
                    }
                    r2 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b6c;
                        run_13a00(); return;
                    }
                case 0x12ca4:
                    r2 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b4c;
                        run_13a00(); return;
                    }
                case 0x12cb4:
                    r2 = 5 << 16;
                    r4 = r16 + r0;
                    r5 = r2 + 8996;
                    /* Next insn is delay slot */ 
                    r31=0x12cc8;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x12cc8:
                    r23 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13f8c;
                        run_13e00(); return;
                    }
                    r4 = r0 | 65000;
                    /* Next insn is delay slot */ 
                    r31=0x12ce0;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x12ce0:
                    r21 = r2 + r0;
                    r22 = r0 + 1;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r0;
                    r16 = r0 + r0;
                    r18 = r0 + -1;
                    r17 = r0 + 10;
                    r19 = r0 + -1;
                case 0x12cfc:
                    r2 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x12df0;
                        continue;
                    }
                case 0x12d14:
                    r2 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r20 = tmp;
                    if(r20 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x12e0c;
                        run_12e00(); return;
                    }
                case 0x12d34:
                    r2 = r0 + 13;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12e0c;
                        run_12e00(); return;
                    }
                    r2 = r0 + 44;
                    if(r20 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12f4c;
                        run_12e00(); return;
                    }
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12d94;
                        continue;
                    }
                    r20 = r0 + 32;
                case 0x12d58:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12d94;
                        continue;
                    }
                    r2 = r0 + 123;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12f34;
                        run_12e00(); return;
                    }
                    r2 = r0 + 40;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12f34;
                        run_12e00(); return;
                    }
                case 0x12d78:
                    r5 = r0 + 125;
                    if(r20 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x12e20;
                        run_12e00(); return;
                    }
                    r2 = r0 + 41;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12e20;
                        run_12e00(); return;
                    }
                case 0x12d90:
                    r22 = r0 + 1;
                case 0x12d94:
                    if(r20 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x12e38;
                        run_12e00(); return;
                    }
                case 0x12d9c:
                    r30 = r20 << 24;
                    r30 = r30 >> 24;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12db0;
                    pc=0x14c00;
                    run_14c00(); return;
                case 0x12db0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12f10;
                        run_12e00(); return;
                    }
                case 0x12db8:
                    r2 = r0 + 32;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12cfc;
                        continue;
                    }
                    if(r18 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x12cfc;
                        continue;
                    }
                    r3 = r21 + r16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = r2 + -1;
                    r18 = r0 + 32;
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x12d14;
                        continue;
                    }
                case 0x12df0:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12e00;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x12e00:
                    pc=0x12e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12e00() throws ExecutionException { /* 0x12e00 - 0x13000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12e00:
                    r20 = r2 + r0;
                    if(r20 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x12d34;
                        run_12c00(); return;
                    }
                case 0x12e0c:
                    r20 = r0 + 32;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12d78;
                        run_12c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12d94;
                    run_12c00(); return;
                case 0x12e20:
                    r3 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r22 = r0 + 1;
                    r3 = r3 + -1;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r3;
                    if(r20 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x12d9c;
                        run_12c00(); return;
                    }
                case 0x12e38:
                    r2 = r21 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r21 + r0;
                    r5 = r16 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x12e50;
                    pc=0x18000;
                    run_18000(); return;
                case 0x12e50:
                    r3 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13fb8;
                        run_13e00(); return;
                    }
                    r22 = 5 << 16;
                    r4 = r21 + r0;
                    r5 = r22 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x12e74;
                    pc=0x26600;
                    run_26600(); return;
                case 0x12e74:
                    r18 = r2 + r0;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r0;
                    r19 = r0 + r0;
                    r30 = 5 << 16;
                case 0x12e84:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13390;
                        run_13200(); return;
                    }
                    r4 = readPages[(r30+23692)>>>12][((r30+23692)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13740;
                        run_13600(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 23696;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12ed0;
                    continue;
                case 0x12eb8:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13740;
                        run_13600(); return;
                    }
                case 0x12ed0:
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12edc;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x12edc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12eb8;
                        continue;
                    }
                    r2 = (r17&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13740;
                        run_13600(); return;
                    }
                    r5 = 5 << 16;
                    r17 = r17 << 2;
                    r5 = r5 + 11888;
                    r17 = r5 + r17;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x12f10:
                    r5 = r0 + 59;
                    if(r20 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x12f84;
                        continue;
                    }
                case 0x12f1c:
                    r2 = r21 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r30&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 + 1;
                    r18 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x12cfc;
                    run_12c00(); return;
                case 0x12f34:
                    r3 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x12d78;
                    run_12c00(); return;
                case 0x12f4c:
                    r2 = r0 + 34;
                    if(r20 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12d58;
                        run_12c00(); return;
                    }
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12d90;
                        run_12c00(); return;
                    }
                    r4 = r0 + 34;
                    /* Next insn is delay slot */ 
                    r31=0x12f6c;
                    pc=0x14c00;
                    run_14c00(); return;
                case 0x12f6c:
                    r22 = r0 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12db8;
                        run_12c00(); return;
                    }
                    r30 = r0 + 34;
                    /* Next insn is delay slot */ 
                    pc=0x12f1c;
                    continue;
                case 0x12f84:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12f1c;
                        continue;
                    }
                case 0x12f8c:
                    r2 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x12fe4;
                        continue;
                    }
                    r2 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x12f8c;
                        continue;
                    }
                case 0x12fc4:
                    r4 = r23 + r0;
                    r5 = r0 + -1;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x12fd8;
                    pc=0x1f400;
                    run_1f400(); return;
                case 0x12fd8:
                    r22 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x12cfc;
                    run_12c00(); return;
                case 0x12fe4:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x12ff4;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x12ff4:
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x12f8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12fc4;
                    continue;
                case 0x13000:
                    pc=0x13000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13000() throws ExecutionException { /* 0x13000 - 0x13200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13000:
                case 0x13004:
                    r4 = 5 << 16;
                    r7 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r4 = r4 + 10696;
                    r5 = r0 + 1;
                    r6 = r0 + 23;
                    /* Next insn is delay slot */ 
                    r31=0x13020;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x13020:
                    r3 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13c8c;
                        run_13c00(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13f58;
                        run_13e00(); return;
                    }
                case 0x13040:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1304c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1304c:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + 10780;
                    r6 = r3 + 2;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1306c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1306c:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13078;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x13078:
                    r2 = (r2&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13090;
                        continue;
                    }
                    r3 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    addr=r3+15;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x13090:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r6 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r16 = 5 << 16;
                    r5 = r16 + 10804;
                    /* Next insn is delay slot */ 
                    r31=0x130a8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x130a8:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x130b4;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x130b4:
                    r3 = r2 < 15 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x130e8;
                        continue;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 15064;
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r5 + 10820;
                    r6 = r0 + 15;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x130e8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x130e8:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13f48;
                        run_13e00(); return;
                    }
                    r7 = 5 << 16;
                    r7 = r7 + 10296;
                case 0x13100:
                    r3 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r6 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r5 = r5 + 10844;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x13180;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13180:
                    r4 = 5 << 16;
                    r7 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r4 = r4 + 11164;
                    r5 = r0 + 1;
                    r6 = r0 + 89;
                    /* Next insn is delay slot */ 
                    r31=0x1319c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x1319c:
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13d6c;
                        run_13c00(); return;
                    }
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r5 = r5 + 11256;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x131c4;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x131c4:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r6 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r7 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r5 + 11308;
                    /* Next insn is delay slot */ 
                    r31=0x131e8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x131e8:
                    r4 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x131f4;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x131f4:
                    r2 = (r2&0xffffffffL) < (13&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1320c;
                        run_13200(); return;
                    }
                case 0x13200:
                    pc=0x13200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13200() throws ExecutionException { /* 0x13200 - 0x13400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13200:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    addr=r3+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1320c:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r6 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r5 = r16 + 10804;
                    /* Next insn is delay slot */ 
                    r31=0x13220;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13220:
                    r4 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1322c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1322c:
                    r3 = r2 < 12 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13260;
                        continue;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 11392;
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r5 + 10820;
                    r6 = r0 + 12;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13260;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13260:
                    r4 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1326c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x1326c:
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13284;
                        continue;
                    }
                    r3 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    addr=r3+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x13284:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r16 + 10804;
                    /* Next insn is delay slot */ 
                    r31=0x13298;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13298:
                    r4 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x132a4;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x132a4:
                    r3 = r2 < 4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x132d8;
                        continue;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 15064;
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r5 + 10820;
                    r6 = r0 + 4;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x132d8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x132d8:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r6 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + 11396;
                    /* Next insn is delay slot */ 
                    r31=0x132f0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x132f0:
                    r4 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x132fc;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x132fc:
                    r2 = (r2&0xffffffffL) < (63&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13314;
                        continue;
                    }
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    addr=r3+62;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x13314:
                    r4 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13320;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x13320:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r6 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + 11424;
                    r7 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x1333c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x1333c:
                    r4 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13348;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x13348:
                    r2 = (r2&0xffffffffL) < (96&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13360;
                        continue;
                    }
                    r3 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    addr=r3+95;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x13360:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r5 = r5 + 11464;
                    /* Next insn is delay slot */ 
                    r31=0x13378;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13378:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13384;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x13384:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13fc8;
                        run_13e00(); return;
                    }
                    r19 = r0 + 1;
                case 0x13390:
                    r4 = r0 + r0;
                    r5 = r22 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x133a0;
                    pc=0x26600;
                    run_26600(); return;
                case 0x133a0:
                    r18 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12e84;
                        run_12e00(); return;
                    }
                    r3 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r3;
                case 0x133bc:
                    r2 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12c70;
                        run_12c00(); return;
                    }
                    r3 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13c7c;
                        run_13c00(); return;
                    }
                    r31 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r30 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r23 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r22 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r21 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r20 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                case 0x13400:
                    pc=0x13400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13400() throws ExecutionException { /* 0x13400 - 0x13600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13400:
                    r19 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r18 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r17 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    r16 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 216;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x13420:
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1400c;
                        run_14000(); return;
                    }
                    r4 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    r5 = r28 + -32764;
                    /* Next insn is delay slot */ 
                    r31=0x13438;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x13438:
                    writePages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1401c;
                        run_14000(); return;
                    }
                    r3 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13488;
                        continue;
                    }
                    r4 = 5 << 16;
                    r3 = r0 + 97;
                    r4 = r4 + 8640;
                    r5 = r0 + 1;
                    r6 = r0 + 143;
                    r7 = r2 + r0;
                    addr=r28+-32764;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x13478;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x13478:
                    r2 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff] = r2;
                case 0x13488:
                    r4 = r0 + r0;
                    r5 = r22 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x13498;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13498:
                    r18 = r2 + r0;
                    r2 = 5 << 16;
                    r4 = readPages[(r2+23632)>>>12][((r2+23632)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13aac;
                        run_13a00(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 23636;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x134e4;
                    continue;
                case 0x134cc:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13aac;
                        run_13a00(); return;
                    }
                case 0x134e4:
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x134f0;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x134f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x134cc;
                        continue;
                    }
                    r3 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13ac0;
                        run_13a00(); return;
                    }
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b3c;
                        run_13a00(); return;
                    }
                    if(r17 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13aac;
                        run_13a00(); return;
                    }
                    r3 = r0 + 14;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r3;
                case 0x13520:
                    r18 = 5 << 16;
                    r4 = r0 + r0;
                    r5 = r18 + 10520;
                    /* Next insn is delay slot */ 
                    r31=0x13534;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13534:
                    r4 = r0 + r0;
                    r5 = r18 + 10520;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x13548;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13548:
                    r4 = r0 + r0;
                    r5 = r18 + 10520;
                    /* Next insn is delay slot */ 
                    r31=0x13558;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13558:
                    r4 = r0 + r0;
                    r5 = r18 + 10520;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x1356c;
                    pc=0x26600;
                    run_26600(); return;
                case 0x1356c:
                    r4 = r0 + r0;
                    r5 = r18 + 10520;
                    /* Next insn is delay slot */ 
                    r31=0x1357c;
                    pc=0x26600;
                    run_26600(); return;
                case 0x1357c:
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13af0;
                        run_13a00(); return;
                    }
                    r3 = r0 + 128;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r3;
                case 0x13598:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x135a4;
                    pc=0x27200;
                    run_27200(); return;
                case 0x135a4:
                    r4 = r29 + 92;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x135b4;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x135b4:
                    r4 = readPages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff];
                    r3 = r0 + 100;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r3; lo = r4/r3;
                        pc=0x135c8;
                        continue;
                    }
                    hi = r4%r3; lo = r4/r3;
                    throw new ExecutionException("Break");
                case 0x135c8:
                    r3 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r3 = r3 + 1;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r3;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r5 = hi;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    r5 = r22 + 15732;
                case 0x13600:
                    pc=0x13600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13600() throws ExecutionException { /* 0x13600 - 0x13800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13600:
                    /* Next insn is delay slot */ 
                    r31=0x13608;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13608:
                    r5 = 5 << 16;
                    r4 = r2 + r0;
                    r5 = r5 + 8784;
                    /* Next insn is delay slot */ 
                    r31=0x1361c;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x1361c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ff8;
                        run_13e00(); return;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 10248;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = r2 + 10288;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                case 0x13648:
                    r5 = 5 << 16;
                    r19 = r22 + 15732;
                    r17 = r5 + 8832;
                case 0x13654:
                    r4 = r0 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13664;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13664:
                    r4 = r2 + r0;
                    r5 = r17 + r0;
                    r23 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13678;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x13678:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13004;
                        run_13000(); return;
                    }
                    r2 = 5 << 16;
                    r4 = readPages[(r2+23600)>>>12][((r2+23600)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ad8;
                        run_13a00(); return;
                    }
                    r3 = 5 << 16;
                    r16 = r3 + 23604;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x136c8;
                    continue;
                case 0x136b0:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13ad8;
                        run_13a00(); return;
                    }
                case 0x136c8:
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x136d4;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x136d4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x136b0;
                        continue;
                    }
                    r2 = (r20&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13654;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 11908;
                    r20 = r20 << 2;
                    r20 = r2 + r20;
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x13708:
                    /* Next insn is delay slot */ 
                    r31=0x13710;
                    pc=0x12400;
                    run_12400(); return;
                case 0x13710:
                    /* Next insn is delay slot */ 
                    pc=0x13390;
                    run_13200(); return;
                case 0x13718:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13f7c;
                        run_13e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x13730;
                    pc=0x11a00;
                    run_11a00(); return;
                case 0x13730:
                    r3 = r0 + 1;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13390;
                    run_13200(); return;
                case 0x13740:
                    r4 = 5 << 16;
                    r4 = r4 + 11528;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13754;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13754:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 104;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13bf4;
                        run_13a00(); return;
                    }
                    r4 = r3 < 105 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x137a0;
                        continue;
                    }
                    r2 = r0 + 115;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13bd8;
                        run_13a00(); return;
                    }
                    r2 = r0 + 116;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13c04;
                        run_13c00(); return;
                    }
                    r2 = r0 + 111;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13b8c;
                        run_13a00(); return;
                    }
                case 0x13794:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x137a0;
                    pc=0x16000;
                    run_16000(); return;
                case 0x137a0:
                    r4 = r0 + 63;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13bf4;
                        run_13a00(); return;
                    }
                    r4 = r0 + 86;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x13bc8;
                        run_13a00(); return;
                    }
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13794;
                        continue;
                    }
                    r5 = 5 << 16;
                    r4 = r29 + 96;
                    r5 = r5 + 11936;
                    r6 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r31=0x137d8;
                    pc=0x16a00;
                    run_16a00(); return;
                case 0x137d8:
                    /* Next insn is delay slot */ 
                    pc=0x133bc;
                    run_13200(); return;
                case 0x137e0:
                    r5 = r22 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x137ec;
                    pc=0x26600;
                    run_26600(); return;
                case 0x137ec:
                    r5 = 5 << 16;
                    r4 = readPages[(r5+23532)>>>12][((r5+23532)>>>2)&0x3ff];
                    r19 = r2 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                case 0x13800:
                    pc=0x13800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13800() throws ExecutionException { /* 0x13800 - 0x13a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13800:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b14;
                        run_13a00(); return;
                    }
                    r2 = 5 << 16;
                    r16 = r2 + 23536;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13834;
                    continue;
                case 0x1381c:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b14;
                        run_13a00(); return;
                    }
                case 0x13834:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13840;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x13840:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1381c;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13c2c;
                        run_13c00(); return;
                    }
                    r2 = r17 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13c48;
                        run_13c00(); return;
                    }
                    r2 = r0 + 2;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13ba8;
                        run_13a00(); return;
                    }
                    r2 = r0 + 3;
                    if(r17 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    r2 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    r3 = r0 + 128;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13898:
                    r5 = r22 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x138a4;
                    pc=0x26600;
                    run_26600(); return;
                case 0x138a4:
                    r19 = r2 + r0;
                    r2 = 5 << 16;
                    r4 = readPages[(r2+23572)>>>12][((r2+23572)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b00;
                        run_13a00(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 23576;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x138f0;
                    continue;
                case 0x138d8:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b00;
                        run_13a00(); return;
                    }
                case 0x138f0:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x138fc;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x138fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x138d8;
                        continue;
                    }
                    r2 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    r17 = r17 >> 1;
                    r17 = r17 + 129;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13928:
                    r5 = r22 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x13934;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13934:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13940;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x13940:
                    r5 = r22 + 15732;
                    r4 = r0 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x13954;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13954:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13960;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x13960:
                    r5 = r22 + 15732;
                    r4 = r0 + r0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x13974;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13974:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13980;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x13980:
                    r5 = r22 + 15732;
                    r4 = r0 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x13994;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13994:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x139a0;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x139a0:
                    r4 = r0 + r0;
                    r5 = r22 + 15732;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x139b4;
                    pc=0x26600;
                    run_26600(); return;
                case 0x139b4:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x139c0;
                    pc=0x1a800;
                    run_1a800(); return;
                case 0x139c0:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x139cc:
                    r5 = r18 + 10520;
                    /* Next insn is delay slot */ 
                    r31=0x139d8;
                    pc=0x26600;
                    run_26600(); return;
                case 0x139d8:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x139e4:
                    r5 = r22 + 15732;
                    /* Next insn is delay slot */ 
                    r31=0x139f0;
                    pc=0x26600;
                    run_26600(); return;
                case 0x139f0:
                    r3 = 5 << 16;
                    r4 = readPages[(r3+23552)>>>12][((r3+23552)>>>2)&0x3ff];
                    r19 = r2 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                case 0x13a00:
                    pc=0x13a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13a00() throws ExecutionException { /* 0x13a00 - 0x13c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13a00:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b28;
                        continue;
                    }
                    r5 = 5 << 16;
                    r16 = r5 + 23556;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x13a38;
                    continue;
                case 0x13a20:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b28;
                        continue;
                    }
                case 0x13a38:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13a44;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x13a44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13a20;
                        continue;
                    }
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    r2 = r17 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13c70;
                        run_13c00(); return;
                    }
                    r17 = r17 < 4 ? 1 : 0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13a7c:
                    r5 = r18 + 10520;
                    /* Next insn is delay slot */ 
                    r31=0x13a88;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13a88:
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13a94:
                    r5 = r18 + 10520;
                    /* Next insn is delay slot */ 
                    r31=0x13aa0;
                    pc=0x26600;
                    run_26600(); return;
                case 0x13aa0:
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13aac:
                    r4 = 5 << 16;
                    r4 = r4 + 10484;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13ac0;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13ac0:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13aac;
                        continue;
                    }
                    r3 = r0 + 130;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13520;
                    run_13400(); return;
                case 0x13ad8:
                    r4 = 5 << 16;
                    r6 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r4 = r4 + 10560;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13af0;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13af0:
                    r3 = r0 + 131;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13598;
                    run_13400(); return;
                case 0x13b00:
                    r4 = 5 << 16;
                    r5 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r4 = r4 + 10596;
                    /* Next insn is delay slot */ 
                    r31=0x13b14;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13b14:
                    r4 = 5 << 16;
                    r5 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r4 = r4 + 10628;
                    /* Next insn is delay slot */ 
                    r31=0x13b28;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13b28:
                    r4 = 5 << 16;
                    r5 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r4 = r4 + 10656;
                    /* Next insn is delay slot */ 
                    r31=0x13b3c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13b3c:
                    r3 = r0 + 6;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13520;
                    run_13400(); return;
                case 0x13b4c:
                    r5 = 5 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + 10372;
                    /* Next insn is delay slot */ 
                    r31=0x13b60;
                    pc=0x17000;
                    run_17000(); return;
                case 0x13b60:
                    writePages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x12cb4;
                    run_12c00(); return;
                case 0x13b6c:
                    r5 = 5 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + 10368;
                    /* Next insn is delay slot */ 
                    r31=0x13b80;
                    pc=0x17000;
                    run_17000(); return;
                case 0x13b80:
                    writePages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x12ca4;
                    run_12c00(); return;
                case 0x13b8c:
                    r4 = r29 + 96;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x13b9c;
                    pc=0x16800;
                    run_16800(); return;
                case 0x13b9c:
                    writePages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x133bc;
                    run_13200(); return;
                case 0x13ba8:
                    r2 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    r3 = r0 + 192;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13bc8:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13bd8;
                    pc=0x11600;
                    run_11600(); return;
                case 0x13bd8:
                    r4 = r29 + 96;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x13be8;
                    pc=0x16800;
                    run_16800(); return;
                case 0x13be8:
                    writePages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x133bc;
                    run_13200(); return;
                case 0x13bf4:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13c04;
                    pc=0x11400;
                    run_11400(); return;
                case 0x13c00:
                    pc=0x13c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13c00() throws ExecutionException { /* 0x13c00 - 0x13e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13c00:
                case 0x13c04:
                    r4 = r29 + 96;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x13c14;
                    pc=0x16800;
                    run_16800(); return;
                case 0x13c14:
                    r5 = r2 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13c24;
                    pc=0x11200;
                    run_11200(); return;
                case 0x13c24:
                    /* Next insn is delay slot */ 
                    pc=0x133bc;
                    run_13200(); return;
                case 0x13c2c:
                    r2 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13c48:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    r2 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13648;
                        run_13600(); return;
                    }
                    r3 = r0 + 64;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13c70:
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x13648;
                    run_13600(); return;
                case 0x13c7c:
                    r4 = 5 << 16;
                    r4 = r4 + 10352;
                    /* Next insn is delay slot */ 
                    r31=0x13c8c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13c8c:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r6 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + 11032;
                    /* Next insn is delay slot */ 
                    r31=0x13ca4;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13ca4:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13cb0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x13cb0:
                    r2 = (r2&0xffffffffL) < (17&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13cc8;
                        continue;
                    }
                    r3 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    addr=r3+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x13cc8:
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r6 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r16 = 5 << 16;
                    r5 = r16 + 10804;
                    /* Next insn is delay slot */ 
                    r31=0x13ce0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13ce0:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13cec;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x13cec:
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13d20;
                        continue;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 11052;
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r5 + 10820;
                    r6 = r0 + 16;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13d20;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13d20:
                    r3 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r6 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r7 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r5 = r5 + 11056;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x13d64;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13d64:
                    /* Next insn is delay slot */ 
                    pc=0x13180;
                    run_13000(); return;
                case 0x13d6c:
                    r18 = 5 << 16;
                    r17 = 5 << 16;
                    r18 = r18 + 11972;
                    r19 = r0 + 49;
                    r17 = r17 + 11280;
                case 0x13d80:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r29 + 56;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+87;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+86;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+85;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+84;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+83;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+82;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    addr=r29+81;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 2;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    addr=r18+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x13e00:
                    pc=0x13e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13e00() throws ExecutionException { /* 0x13e00 - 0x14000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13e00:
                    r2 = r19 - r2;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+75;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+74;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+73;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+72;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+71;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+70;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    addr=r29+69;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 2;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    addr=r18+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r19 - r2;
                    addr=r29+68;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+63;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+62;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+61;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+60;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+59;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    r3 = r3 >>> 1;
                    addr=r29+58;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 1;
                    r2 = r2 + 48;
                    addr=r29+57;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 2;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r4 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r2 = r19 - r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    r6 = r29 + 80;
                    r5 = r17 + r0;
                    r7 = r29 + 68;
                    addr=r29+88;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+76;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+56;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+64;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x13f2c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x13f2c:
                    r2 = 5 << 16;
                    r18 = r18 + 3;
                    r2 = r2 + 12035;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13d80;
                        run_13c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x131c4;
                    run_13000(); return;
                case 0x13f48:
                    r7 = 5 << 16;
                    r7 = r7 + 15064;
                    /* Next insn is delay slot */ 
                    pc=0x13100;
                    run_13000(); return;
                case 0x13f58:
                    r4 = 5 << 16;
                    r7 = readPages[(r28+-32396)>>>12][((r28+-32396)>>>2)&0x3ff];
                    r4 = r4 + 10720;
                    r5 = r0 + 1;
                    r6 = r0 + 56;
                    /* Next insn is delay slot */ 
                    r31=0x13f74;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x13f74:
                    /* Next insn is delay slot */ 
                    pc=0x13040;
                    run_13000(); return;
                case 0x13f7c:
                    r4 = 5 << 16;
                    r4 = r4 + 11488;
                    /* Next insn is delay slot */ 
                    r31=0x13f8c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13f8c:
                    /* Next insn is delay slot */ 
                    r31=0x13f94;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x13f94:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13fa0;
                    pc=0x25600;
                    run_25600(); return;
                case 0x13fa0:
                    r4 = 5 << 16;
                    r4 = r4 + 10376;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13fb8;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13fb8:
                    r4 = 5 << 16;
                    r4 = r4 + 10412;
                    /* Next insn is delay slot */ 
                    r31=0x13fc8;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13fc8:
                    r16 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13fd4;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x13fd4:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13fe0;
                    pc=0x25600;
                    run_25600(); return;
                case 0x13fe0:
                    r4 = 5 << 16;
                    r4 = r4 + 9800;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x13ff8;
                    pc=0x14200;
                    run_14200(); return;
                case 0x13ff8:
                    r4 = 5 << 16;
                    r5 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                case 0x14000:
                    pc=0x14000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14000() throws ExecutionException { /* 0x14000 - 0x14200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14000:
                    r4 = r4 + 10524;
                    /* Next insn is delay slot */ 
                    r31=0x1400c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1400c:
                    r4 = 5 << 16;
                    r4 = r4 + 10444;
                    /* Next insn is delay slot */ 
                    r31=0x1401c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1401c:
                    /* Next insn is delay slot */ 
                    r31=0x14024;
                    pc=0x1183c;
                    run_11800(); return;
                case 0x14024:
                case 0x14200:
                    pc=0x14200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14200() throws ExecutionException { /* 0x14200 - 0x14400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14200:
                    r29 = r29 + -32;
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 12428;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x14238;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x14238:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r29 + 36;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x14254;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x14254:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14268;
                    pc=0x1e600;
                    run_1e600(); return;
                case 0x14268:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x14274;
                    pc=0x1b000;
                    run_1b000(); return;
                case 0x14274:
                case 0x14400:
                    pc=0x14400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14400() throws ExecutionException { /* 0x14400 - 0x14600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14400:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + -33;
                    r2 = r4 & r2;
                    r2 = r2 + -65;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14600:
                    pc=0x14600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14600() throws ExecutionException { /* 0x14600 - 0x14800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14600:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14628;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14628:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14800:
                    pc=0x14800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14800() throws ExecutionException { /* 0x14800 - 0x14a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14800:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = ~(r0 | r4);
                    r2 = r2 >>> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14a00:
                    pc=0x14a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14a00() throws ExecutionException { /* 0x14a00 - 0x14c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14a00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14a24;
                        continue;
                    }
                    r4 = r4 ^ 9;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14a24:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14c00:
                    pc=0x14c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14c00() throws ExecutionException { /* 0x14c00 - 0x14e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14c00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 32;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14c28;
                        continue;
                    }
                    r2 = r4 + -9;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14c28:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x14e00:
                    pc=0x14e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14e00() throws ExecutionException { /* 0x14e00 - 0x15000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14e00:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15000:
                    pc=0x15000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15000() throws ExecutionException { /* 0x15000 - 0x15200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15000:
                    r4 = r4 + -97;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15180:
                case 0x15200:
                    pc=0x15200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15200() throws ExecutionException { /* 0x15200 - 0x15400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15200:
                    r4 = r4 + -65;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15400:
                    pc=0x15400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15400() throws ExecutionException { /* 0x15400 - 0x15600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15400:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15600:
                    pc=0x15600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15600() throws ExecutionException { /* 0x15600 - 0x15800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15600:
                    r4 = r4 + -48;
                    r2 = r4 & 255;
                    r2 = (r2&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15800:
                    pc=0x15800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15800() throws ExecutionException { /* 0x15800 - 0x15a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15800:
                    r4 = r4 & 255;
                    r2 = r4 & 223;
                    r2 = r2 + -65;
                    r2 = (r2&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15828;
                        continue;
                    }
                    r4 = r4 + -48;
                    r2 = (r4&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15828:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15a00:
                    pc=0x15a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15a00() throws ExecutionException { /* 0x15a00 - 0x15c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15a00:
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    r2 = r0 + 34;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15a24;
                        continue;
                    }
                    r4 = r4 ^ 39;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15a24:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15c00:
                    pc=0x15c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15c00() throws ExecutionException { /* 0x15c00 - 0x15e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15c00:
                    r29 = r29 + -296;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r18;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = 5 << 16;
                    r5 = r5 + 8996;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r19;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x15c38;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x15c38:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15dd0;
                        continue;
                    }
                case 0x15c44:
                    r4 = r29 + 16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15c58;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x15c58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d44;
                        continue;
                    }
                case 0x15c60:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x15c6c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x15c6c:
                    r17 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15c8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15d74;
                    continue;
                case 0x15c80:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d74;
                        continue;
                    }
                    r17 = r16 + r0;
                case 0x15c8c:
                    r16 = r17 + -1;
                    r2 = r29 + 16;
                    r3 = r2 + r16;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x15ca4;
                    pc=0x14c00;
                    run_14c00(); return;
                case 0x15ca4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15c80;
                        continue;
                    }
                case 0x15cac:
                    r2 = r29 + 16;
                    r17 = r2 + r17;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15cc8;
                    continue;
                case 0x15cc4:
                    r16 = r16 + 1;
                case 0x15cc8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x15cd4;
                    pc=0x14c00;
                    run_14c00(); return;
                case 0x15cd4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15cc4;
                        continue;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15c44;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15cf8;
                    pc=0x18400;
                    run_18400(); return;
                case 0x15cf8:
                    r4 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = r2 + r0;
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d80;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x15d14:
                    r5 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r5;
                    r4 = r29 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    r5 = r0 + 256;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15d3c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x15d3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15c60;
                        continue;
                    }
                case 0x15d44:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15d50;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x15d50:
                    r31 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r20 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r19 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r18 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r17 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r16 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r29 = r29 + 296;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15d74:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15cac;
                    continue;
                case 0x15d80:
                    r20 = r4 << 1;
                    r4 = r4 << 3;
                    /* Next insn is delay slot */ 
                    r31=0x15d90;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x15d90:
                    r6 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r5 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r6 << 2;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15dac;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x15dac:
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15db8;
                    pc=0x18200;
                    run_18200(); return;
                case 0x15db8:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r17;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15d14;
                    continue;
                case 0x15dd0:
                    /* Next insn is delay slot */ 
                    r31=0x15dd8;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x15dd8:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15de4;
                    pc=0x25600;
                    run_25600(); return;
                case 0x15de4:
                    r4 = 5 << 16;
                    r4 = r4 + 12436;
                    r5 = r16 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15dfc;
                    pc=0x14200;
                    run_14200(); return;
                case 0x15dfc:
                case 0x15e00:
                    pc=0x15e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15e00() throws ExecutionException { /* 0x15e00 - 0x16000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15e00:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    r20 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x15e48;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x15e48:
                    writePages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f54;
                        continue;
                    }
                case 0x15e5c:
                    r2 = r0 + 8;
                    r4 = r0 + 32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x15e74;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x15e74:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f88;
                        continue;
                    }
                    r16 = r0 + r0;
                    r21 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x15ebc;
                    continue;
                case 0x15e94:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x15e98:
                    r4 = r3 + 1;
                    r16 = r16 + 1;
                    r3 = r3 << 2;
                    r3 = r2 + r3;
                    r2 = r6 < r16 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f84;
                        continue;
                    }
                case 0x15ebc:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r2 = r16 << 2;
                    r2 = r3 + r2;
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ee8;
                        continue;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x15f60;
                        continue;
                    }
                case 0x15ee8:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e94;
                        continue;
                    }
                    r4 = r2 << 3;
                    r22 = r2 << 1;
                    /* Next insn is delay slot */ 
                    r31=0x15f10;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x15f10:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x15f2c;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x15f2c:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15f38;
                    pc=0x18200;
                    run_18200(); return;
                case 0x15f38:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x15e98;
                    continue;
                case 0x15f54:
                    writePages[(r28+-32388)>>>12][((r28+-32388)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x15e5c;
                    continue;
                case 0x15f60:
                    r4 = r29 + 16;
                    r5 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x15f70;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x15f70:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = r6 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ebc;
                        continue;
                    }
                case 0x15f84:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x15f88:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff] = r2;
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r3;
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16000:
                    pc=0x16000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16000() throws ExecutionException { /* 0x16000 - 0x16200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16000:
                    r5 = r4 + r0;
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 12460;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1601c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1601c:
                case 0x16200:
                    pc=0x16200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16200() throws ExecutionException { /* 0x16200 - 0x16400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16200:
                    r5 = r4 + r0;
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 12480;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1621c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1621c:
                case 0x16400:
                    pc=0x16400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16400() throws ExecutionException { /* 0x16400 - 0x16600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16400:
                    r2 = r4 + r0;
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r4 = r4 + 12512;
                    r5 = r2 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x16424;
                    pc=0x14200;
                    run_14200(); return;
                case 0x16424:
                case 0x16600:
                    pc=0x16600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16600() throws ExecutionException { /* 0x16600 - 0x16800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16600:
                    r5 = r4 + r0;
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + 12544;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1661c;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1661c:
                case 0x16800:
                    pc=0x16800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16800() throws ExecutionException { /* 0x16800 - 0x16a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16800:
                    r6 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r3 = r3 + r2;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = r7 + r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16844;
                        continue;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r6 = r6 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16854;
                        continue;
                    }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r6;
                case 0x16844:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16854:
                    r4 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16860;
                    pc=0x16200;
                    run_16200(); return;
                case 0x16860:
                case 0x16a00:
                    pc=0x16a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16a00() throws ExecutionException { /* 0x16a00 - 0x16c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16a00:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    r21 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    r2 = r21 << 2;
                    r19 = r19 + r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r20 = r4 + r0;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    r18 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16a60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16ae0;
                    continue;
                case 0x16a50:
                    r17 = r17 + -1;
                    r16 = r16 + 12;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ae0;
                        continue;
                    }
                case 0x16a60:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16a70;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x16a70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16a50;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16acc;
                        continue;
                    }
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r21;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16aec;
                        continue;
                    }
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                case 0x16aa4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r25;
                    return;
                case 0x16acc:
                    r25 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x16aa4;
                    continue;
                case 0x16ae0:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16aec;
                    pc=0x16000;
                    run_16000(); return;
                case 0x16aec:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16af8;
                    pc=0x16200;
                    run_16200(); return;
                case 0x16af8:
                case 0x16c00:
                    pc=0x16c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16c00() throws ExecutionException { /* 0x16c00 - 0x16e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16c18;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x16c18:
                    r3 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16cc8;
                        continue;
                    }
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ca4;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 46;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16cb4;
                        continue;
                    }
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16cc8;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16cc8;
                        continue;
                    }
                    r4 = r0 + 46;
                    r5 = r0 + 92;
                    r6 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x16c94;
                    continue;
                case 0x16c74:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16cb4;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x16cc8;
                        continue;
                    }
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x16cc8;
                        continue;
                    }
                case 0x16c94:
                    r2 = r2 + -1;
                    r3 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16c74;
                        continue;
                    }
                case 0x16ca4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 46;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x16cc8;
                        continue;
                    }
                case 0x16cb4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16cc8:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16e00:
                    pc=0x16e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16e00() throws ExecutionException { /* 0x16e00 - 0x17000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x16e18;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x16e18:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e7c;
                        continue;
                    }
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 92;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16e7c;
                        continue;
                    }
                    r4 = r0 + 47;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16e7c;
                        continue;
                    }
                    r4 = r0 + 92;
                    r5 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x16e6c;
                    continue;
                case 0x16e50:
                    r3 = r16 + r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x16e7c;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x16e7c;
                        continue;
                    }
                case 0x16e6c:
                    r2 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e50;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x16e7c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17000:
                    pc=0x17000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17000() throws ExecutionException { /* 0x17000 - 0x17200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17000:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17028;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x17028:
                    r17 = r2 + r0;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17134;
                        continue;
                    }
                    r6 = r17 + -1;
                    r6 = r16 + r6;
                    r2 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x170b8;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x170c8;
                        continue;
                    }
                    r2 = r0 + 92;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17134;
                        continue;
                    }
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17134;
                        continue;
                    }
                    r7 = r0 + 46;
                    r8 = r0 + 92;
                    r9 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x170a8;
                    continue;
                case 0x17088:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x170c8;
                        continue;
                    }
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x17134;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x17134;
                        continue;
                    }
                case 0x170a8:
                    r6 = r6 + -1;
                    r3 = ((r6 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17088;
                        continue;
                    }
                case 0x170b8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 46;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17134;
                        continue;
                    }
                case 0x170c8:
                    r4 = r18 + r0;
                    r19 = r6 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x170d8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x170d8:
                    r2 = r2 + 1;
                    r4 = r2 + r19;
                    /* Next insn is delay slot */ 
                    r31=0x170e8;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x170e8:
                    r17 = r2 + r0;
                    r5 = r16 + r0;
                    r6 = r19 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17100;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x17100:
                    r4 = r17 + r19;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17110;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x17110:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17134:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17140;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x17140:
                    r4 = r17 + 1;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x17150;
                    pc=0x17e00;
                    run_17e00(); return;
                case 0x17150:
                    r4 = r2 + r0;
                    r5 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17164;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x17164:
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17174;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x17174:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17200:
                    pc=0x17200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17200() throws ExecutionException { /* 0x17200 - 0x17400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17200:
                    /* Next insn is delay slot */ 
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x17400:
                    pc=0x17400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17400() throws ExecutionException { /* 0x17400 - 0x17600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17400:
                    r2 = 1 << 16;
                    r29 = r29 + -32;
                    r2 = r2 + 29184;
                    r5 = 5 << 16;
                    r5 = r5 + 13320;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r6 = r0 + 30;
                    r7 = r0 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1742c;
                    pc=0x1ac00;
                    run_1ac00(); return;
                case 0x1742c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17448;
                        continue;
                    }
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                case 0x17438:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17448:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x17438;
                    continue;
                case 0x17600:
                    pc=0x17600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17600() throws ExecutionException { /* 0x17600 - 0x17800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17600:
                    r2 = (r4&0xffffffffL) < (29&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1762c;
                        continue;
                    }
                    r2 = r4 << 3;
                    r4 = r4 << 5;
                    r4 = r4 - r2;
                    r2 = 5 << 16;
                    r2 = r2 + 12624;
                    r2 = r2 + r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1762c:
                    r29 = r29 + -24;
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 12572;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 12608;
                    r7 = r0 + 250;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x17658;
                    return;
                case 0x17658:
                case 0x17800:
                    pc=0x17800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17800() throws ExecutionException { /* 0x17800 - 0x17a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17800:
                    r2 = (r4&0xffffffffL) < (29&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1782c;
                        continue;
                    }
                    r2 = r4 << 3;
                    r4 = r4 << 5;
                    r4 = r4 - r2;
                    r2 = 5 << 16;
                    r2 = r2 + 12624;
                    r2 = r2 + r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1782c:
                    r29 = r29 + -24;
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32744)>>>12][((r28+-32744)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 12572;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 12608;
                    r7 = r0 + 250;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x17858;
                    return;
                case 0x17858:
                case 0x17a00:
                    pc=0x17a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17a00() throws ExecutionException { /* 0x17a00 - 0x17c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17a00:
                    r29 = r29 + -32;
                    r2 = r0 + 15;
                    r6 = 5 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r16 + 26468;
                    r5 = r0 + 60;
                    r6 = r6 + 14824;
                    r7 = r0 + 2;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17a34;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x17a34:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 26468;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17c00:
                    pc=0x17c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17c00() throws ExecutionException { /* 0x17c00 - 0x17e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17c00:
                    r2 = r0 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17e00:
                    pc=0x17e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17e00() throws ExecutionException { /* 0x17e00 - 0x18000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e3c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x17e20;
                    pc=0x20400;
                    run_20400(); return;
                case 0x17e20:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e54;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17e3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17e54:
                    r4 = 5 << 16;
                    r4 = r4 + 14832;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x17e68;
                    pc=0x14200;
                    run_14200(); return;
                case 0x17e68:
                case 0x18000:
                    pc=0x18000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18000() throws ExecutionException { /* 0x18000 - 0x18200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18018;
                    pc=0x22c00;
                    run_22c00(); return;
                case 0x18018:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18034;
                        continue;
                    }
                case 0x18020:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18034:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18020;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + 14876;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18050;
                    pc=0x14200;
                    run_14200(); return;
                case 0x18050:
                case 0x18200:
                    pc=0x18200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18200() throws ExecutionException { /* 0x18200 - 0x18400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18200:
                    /* Next insn is delay slot */ 
                    pc=0x20600;
                    run_20600(); return;
                case 0x18400:
                    pc=0x18400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18400() throws ExecutionException { /* 0x18400 - 0x18600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1848c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x18424;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x18424:
                    r16 = r2 + 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18468;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1843c;
                    pc=0x20400;
                    run_20400(); return;
                case 0x1843c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x184a8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x18468:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x1848c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x184a8:
                    r4 = 5 << 16;
                    r4 = r4 + 14832;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x184bc;
                    pc=0x14200;
                    run_14200(); return;
                case 0x184bc:
                case 0x18600:
                    pc=0x18600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18600() throws ExecutionException { /* 0x18600 - 0x18800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18658;
                        continue;
                    }
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1862c;
                    pc=0x20400;
                    run_20400(); return;
                case 0x1862c:
                    r4 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1867c;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x18658:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x1867c:
                    r4 = 5 << 16;
                    r4 = r4 + 14832;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18690;
                    pc=0x14200;
                    run_14200(); return;
                case 0x18690:
                case 0x18800:
                    pc=0x18800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18800() throws ExecutionException { /* 0x18800 - 0x18a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18800:
                    r29 = r29 + -64;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r2 = r4 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r23;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    r18 = r7 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b84;
                        run_18a00(); return;
                    }
                    r23 = 5 << 16;
                    r23 = r23 + 14932;
                case 0x1884c:
                    r2 = r4 & 128;
                    writePages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff] = r23;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18888;
                        continue;
                    }
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x18888;
                        continue;
                    }
                    r18 = r0 - r18;
                    r2 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r17 = r0 - r17;
                    r17 = r17 - r2;
                    r2 = r0 + 45;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x188ac;
                    continue;
                case 0x18888:
                    r2 = r4 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b94;
                        run_18a00(); return;
                    }
                    r2 = r4 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18cac;
                        run_18c00(); return;
                    }
                    r2 = r0 + 32;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                case 0x188ac:
                    r2 = r17 | r18;
                    r22 = r16 + 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d1c;
                        run_18c00(); return;
                    }
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x188d0;
                    continue;
                case 0x188cc:
                    r23 = readPages[(r16+284)>>>12][((r16+284)>>>2)&0x3ff];
                case 0x188d0:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r7 = r20 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x188e8;
                    pc=0x1083c;
                    run_10800(); return;
                case 0x188e8:
                    r23 = r23 + r3;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r19 = r19 + 1;
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18914;
                    pc=0x10208;
                    run_10200(); return;
                case 0x18914:
                    r17 = r2 + r0;
                    r2 = r3 | r2;
                    r18 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188cc;
                        continue;
                    }
                    r4 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r19 = r19 - r22;
                case 0x18930:
                    r2 = r4 & 64;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c90;
                        run_18c00(); return;
                    }
                    r3 = readPages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff];
                case 0x18944:
                    r2 = r4 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1896c;
                        continue;
                    }
                    r2 = readPages[(r16+280)>>>12][((r16+280)>>>2)&0x3ff];
                    r5 = r0 + 16;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x18cb8;
                        run_18c00(); return;
                    }
                    r5 = r0 + 8;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x18cf4;
                        run_18c00(); return;
                    }
                case 0x1896c:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c84;
                        run_18c00(); return;
                    }
                    r3 = r0 + r0;
                case 0x1897c:
                    r2 = r4 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18bf8;
                        run_18a00(); return;
                    }
                    r7 = r3 + r21;
                    r19 = r7 + r19;
                    r7 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r2 = r19 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18bf8;
                        run_18a00(); return;
                    }
                    r4 = r4 & 17;
                    r7 = r7 - r19;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ba8;
                        run_18a00(); return;
                    }
                case 0x189b4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a70;
                        run_18a00(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x189f0;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x189f0:
                    r2 = (r21&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a70;
                        run_18a00(); return;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                case 0x18a00:
                    pc=0x18a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18a00() throws ExecutionException { /* 0x18a00 - 0x18c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18a00:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a30;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x18a30:
                    r21 = (r21&0xffffffffL) < (3&0xffffffffL) ? 1 : 0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a70;
                        continue;
                    }
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    addr=r29+18;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18a70;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x18a70:
                    r2 = readPages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff];
                    r2 = r2 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ad8;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ad4;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 48;
                case 0x18a98:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ac8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x18ac8:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x18a98;
                        continue;
                    }
                case 0x18ad4:
                    r7 = r0 + r0;
                case 0x18ad8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b28;
                        continue;
                    }
                    r3 = r3 + -1;
                    r8 = r0 + 48;
                    r6 = r0 + -1;
                case 0x18aec:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b1c;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x18b1c:
                    r3 = r3 + -1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x18aec;
                        continue;
                    }
                case 0x18b28:
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                case 0x18b30:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c04;
                        run_18c00(); return;
                    }
                    r2 = r2 + -1;
                    r3 = r16 + r2;
                    writePages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff] = r2;
                    addr=r3+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b30;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+272)>>>12][((r16+272)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x18b30;
                    continue;
                case 0x18b84:
                    r23 = 5 << 16;
                    r23 = r23 + 14952;
                    /* Next insn is delay slot */ 
                    pc=0x1884c;
                    run_18800(); return;
                case 0x18b94:
                    r2 = r0 + 43;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x188ac;
                    run_18800(); return;
                case 0x18ba8:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18bf8;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + -1;
                    r7 = r0 + 32;
                case 0x18bbc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18bec;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x18bec:
                    r2 = r2 + -1;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x18bbc;
                        continue;
                    }
                case 0x18bf8:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x189b4;
                    run_18800(); return;
                case 0x18c00:
                    pc=0x18c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18c00() throws ExecutionException { /* 0x18c00 - 0x18e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18c00:
                case 0x18c04:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c54;
                        continue;
                    }
                    r2 = r7 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x18c18:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c48;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x18c48:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x18c18;
                        continue;
                    }
                case 0x18c54:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r23 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18c84:
                    r3 = r3 - r19;
                    /* Next insn is delay slot */ 
                    pc=0x1897c;
                    run_18800(); return;
                case 0x18c90:
                    r4 = r4 | 64;
                    r2 = r0 + 1;
                    writePages[(r16+276)>>>12][((r16+276)>>>2)&0x3ff] = r4;
                    writePages[(r16+292)>>>12][((r16+292)>>>2)&0x3ff] = r2;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x18944;
                    run_18800(); return;
                case 0x18cac:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x188ac;
                    run_18800(); return;
                case 0x18cb8:
                    r6 = r29 + 16;
                    r5 = r6 + r21;
                    r6 = r0 + 48;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r4 & 256;
                    r2 = r21 + 1;
                    r21 = r21 + 2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d28;
                        continue;
                    }
                    r5 = r0 + 88;
                case 0x18ce0:
                    r6 = r29 + 16;
                    r2 = r6 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1896c;
                    run_18800(); return;
                case 0x18cf4:
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c84;
                        continue;
                    }
                    r2 = r29 + r21;
                    r3 = r0 + 48;
                    addr=r2+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r21 + 1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1897c;
                    run_18800(); return;
                case 0x18d1c:
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18930;
                    run_18800(); return;
                case 0x18d28:
                    r5 = r0 + 120;
                    /* Next insn is delay slot */ 
                    pc=0x18ce0;
                    continue;
                case 0x18e00:
                    pc=0x18e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18e00() throws ExecutionException { /* 0x18e00 - 0x19000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18e00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = readPages[(r4+276)>>>12][((r4+276)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r2 = r19 & 64;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f94;
                        continue;
                    }
                    r18 = readPages[(r4+292)>>>12][((r4+292)>>>2)&0x3ff];
                    r4 = r5 + r0;
                    r6 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18e48;
                    pc=0x21200;
                    run_21200(); return;
                case 0x18e48:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e54;
                        continue;
                    }
                    r18 = r2 - r17;
                case 0x18e54:
                    r2 = r19 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ed4;
                        continue;
                    }
                    r2 = readPages[(r16+288)>>>12][((r16+288)>>>2)&0x3ff];
                    r3 = r18 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ed4;
                        continue;
                    }
                    r19 = r19 & 1;
                    r2 = r2 - r18;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ed8;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ed4;
                        continue;
                    }
                    r3 = r2 + -1;
                    r6 = r0 + 32;
                    r2 = r0 + -1;
                case 0x18e98:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    r4 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ec8;
                        continue;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x18ec8:
                    r3 = r3 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18e98;
                        continue;
                    }
                case 0x18ed4:
                    r2 = r0 + r0;
                case 0x18ed8:
                    r6 = r17 + r18;
                case 0x18edc:
                    if(r17 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x18f24;
                        continue;
                    }
                case 0x18ee4:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18edc;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r17 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x18ee4;
                        continue;
                    }
                case 0x18f24:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f74;
                        continue;
                    }
                    r2 = r2 + -1;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                case 0x18f38:
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r3 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18f68;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x18f68:
                    r2 = r2 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x18f38;
                        continue;
                    }
                case 0x18f74:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18f94:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x18fa0;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x18fa0:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x18e54;
                    continue;
                case 0x19000:
                    pc=0x19000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19000() throws ExecutionException { /* 0x19000 - 0x19200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19000:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x190d8;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 15216;
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x1902c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1904c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1906c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r3 = r3 & r2;
                    r2 = r3 + 8;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19094:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 >> 31;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x190b8:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x190d8:
                    r29 = r29 + -24;
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 14972;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r6 + 15004;
                    r7 = r0 + 179;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x19104;
                    return;
                case 0x19104:
                case 0x19200:
                    pc=0x19200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19200() throws ExecutionException { /* 0x19200 - 0x19400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19200:
                    r29 = r29 + -360;
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r22;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r21;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r20;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r19;
                    writePages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff] = r18;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r17;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r31;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r23;
                    writePages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff] = r16;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r22 = 5 << 16;
                    r18 = 5 << 16;
                    r19 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    r20 = r0 + r0;
                    r22 = r22 + 15244;
                    r18 = r18 + 15500;
                    r21 = 5 << 16;
                    r19 = r19 + 15312;
                    r17 = r6 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x192b8;
                        continue;
                    }
                case 0x19268:
                    r2 = r0 + 37;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19318;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x192a4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x192a4:
                    r6 = r17 + r0;
                case 0x192a8:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r17 = r6 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19268;
                        continue;
                    }
                case 0x192b8:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x192e4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x192e4:
                    r31 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    r23 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r22 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r21 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    r20 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r19 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r18 = readPages[(r29+332)>>>12][((r29+332)>>>2)&0x3ff];
                    r17 = readPages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff];
                    r16 = readPages[(r29+324)>>>12][((r29+324)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r29 = r29 + 360;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19318:
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x196c4;
                        run_19600(); return;
                    }
                    r2 = r6 + 3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r17 = r2 + -1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19384;
                        continue;
                    }
                case 0x19340:
                    r3 = r16 + -32;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (17&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x194e4;
                        run_19400(); return;
                    }
                    r3 = r3 << 2;
                    r3 = r22 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x1936c:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 16;
                    r2 = r2 + 1;
                case 0x19378:
                    r17 = r2 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19340;
                        continue;
                    }
                case 0x19384:
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r0 + r0;
                case 0x1938c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19398;
                    pc=0x14e00;
                    run_14e00(); return;
                case 0x19398:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19700;
                        run_19600(); return;
                    }
                    r3 = r0 + 46;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19538;
                        run_19400(); return;
                    }
                case 0x193b0:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r2 | 64;
                    r4 = r0 + 42;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r3;
                    if(r16 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x19918;
                        run_19800(); return;
                    }
                    r4 = r16 + r0;
                    r23 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x193d8;
                    pc=0x14e00;
                    run_14e00(); return;
                case 0x193d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x198d4;
                        run_19800(); return;
                    }
                    r16 = r16 + -48;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x1940c;
                    run_19400(); return;
                case 0x193f0:
                    r2 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                case 0x19400:
                    pc=0x19400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19400() throws ExecutionException { /* 0x19400 - 0x19600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19400:
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r16;
                case 0x1940c:
                    r23 = r23 + 1;
                    addr=r23+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19424;
                    pc=0x14e00;
                    run_14e00(); return;
                case 0x19424:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x193f0;
                        run_19200(); return;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                case 0x19434:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19554;
                        continue;
                    }
                case 0x19450:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    r5 = r0 + 2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19590;
                        continue;
                    }
                case 0x19464:
                    r3 = r0 + -5;
                    r2 = r2 & r3;
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x195a0;
                        continue;
                    }
                case 0x19480:
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x195a0;
                    continue;
                case 0x19494:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 1;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x19378;
                    run_19200(); return;
                case 0x194a8:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 2;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x19378;
                    run_19200(); return;
                case 0x194bc:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 8;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x19378;
                    run_19200(); return;
                case 0x194d0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 | 4;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x19378;
                    run_19200(); return;
                case 0x194e4:
                    r2 = r0 + 42;
                    r3 = r17 + r0;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r23 = r16 + r0;
                    if(r16 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1938c;
                        run_19200(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1994c;
                        run_19800(); return;
                    }
                case 0x1951c:
                    r2 = r5 | 32;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 1;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x1952c:
                    r3 = r0 + 46;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x193b0;
                        run_19200(); return;
                    }
                case 0x19538:
                    r3 = r0 + 2;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = r16 + -76;
                    r3 = r3 & 255;
                    r4 = (r3&0xffffffffL) < (47&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19450;
                        continue;
                    }
                case 0x19554:
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x1956c:
                    r3 = r0 + 5;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 5;
                case 0x19580:
                    r4 = r2 & 6;
                    r3 = r0 + 6;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19464;
                        continue;
                    }
                case 0x19590:
                    r4 = r2 & 17;
                    r3 = r0 + 17;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x19480;
                        continue;
                    }
                case 0x195a0:
                    r3 = r2 & 64;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x195b8;
                        continue;
                    }
                    r3 = r0 + -17;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x195b8:
                    r16 = r16 + -88;
                    r16 = r16 & 255;
                    r3 = (r16&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x198f4;
                        run_19800(); return;
                    }
                    r16 = r16 << 2;
                    r16 = r18 + r16;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x195e4:
                    r3 = r0 + 6;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x19580;
                    continue;
                case 0x19600:
                    pc=0x19600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19600() throws ExecutionException { /* 0x19600 - 0x19800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19600:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 108;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x199b8;
                        run_19800(); return;
                    }
                    r3 = r0 + 3;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x19580;
                    run_19400(); return;
                case 0x19628:
                    r3 = r0 + 4;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x19580;
                    run_19400(); return;
                case 0x19644:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r3 = r0 + 104;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x199d4;
                        run_19800(); return;
                    }
                    r3 = r0 + 1;
                    r17 = r17 + 1;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x19580;
                    run_19400(); return;
                case 0x1966c:
                    r3 = r0 + 7;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 1;
                    r5 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x19580;
                    run_19400(); return;
                case 0x19688:
                    r2 = r2 | 384;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                case 0x19690:
                    r2 = r0 + 16;
                case 0x19694:
                    r4 = r29 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x196a4;
                    pc=0x19000;
                    run_19000(); return;
                case 0x196a4:
                    r6 = r2 + r0;
                    r4 = r29 + 16;
                    r7 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x196b8;
                    pc=0x18800;
                    run_18800(); return;
                case 0x196b8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x192a8;
                    run_19200(); return;
                case 0x196c4:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r6 + 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x192a4;
                        run_19200(); return;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r3 = r2 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x192a8;
                    run_19200(); return;
                case 0x19700:
                    r23 = r23 + -48;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r23;
                    /* Next insn is delay slot */ 
                    pc=0x1972c;
                    continue;
                case 0x19710:
                    r2 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r16 = r16 + -48;
                    r3 = r2 << 1;
                    r2 = r2 << 3;
                    r2 = r3 + r2;
                    r16 = r2 + r16;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r16;
                case 0x1972c:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19744;
                    pc=0x14e00;
                    run_14e00(); return;
                case 0x19744:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19710;
                        continue;
                    }
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r2 | 32;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1952c;
                    run_19400(); return;
                case 0x19764:
                    r20 = r0 + 1;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x192a8;
                    run_19200(); return;
                case 0x19774:
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19994;
                        run_19800(); return;
                    }
                    r2 = 5 << 16;
                    r5 = r5 << 2;
                    r2 = r2 + 15632;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x197a0:
                    r2 = r0 + 10;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = (r5&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c1c;
                        run_19c00(); return;
                    }
                    r5 = r5 << 2;
                    r2 = r21 + 15660;
                    r2 = r2 + r5;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x197d0:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x19694;
                    continue;
                case 0x197e4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c40;
                        run_19c00(); return;
                    }
                case 0x19800:
                    pc=0x19800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19800() throws ExecutionException { /* 0x19800 - 0x19a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19800:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x19810;
                    pc=0x18e00;
                    run_18e00(); return;
                case 0x19810:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x192a8;
                    run_19200(); return;
                case 0x1981c:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19bd8;
                        run_19a00(); return;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19c64;
                        run_19c00(); return;
                    }
                    r4 = r2 & 64;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a20;
                        run_19a00(); return;
                    }
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1986c;
                        continue;
                    }
                case 0x19868:
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                case 0x1986c:
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1987c;
                    pc=0x18e00;
                    run_18e00(); return;
                case 0x1987c:
                    r20 = r0 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x192a8;
                    run_19200(); return;
                case 0x1988c:
                    r2 = r2 | 128;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x19694;
                    run_19600(); return;
                case 0x198a0:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    r3 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r29 + 316;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    addr=r29+316;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+317;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x198c8;
                    pc=0x18e00;
                    run_18e00(); return;
                case 0x198c8:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x192a8;
                    run_19200(); return;
                case 0x198d4:
                    r2 = r0 + 45;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19a34;
                        run_19a00(); return;
                    }
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19434;
                    run_19400(); return;
                case 0x198f4:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 15132;
                    r6 = r6 + 15004;
                    r7 = r0 + 616;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x19918;
                    return;
                case 0x19918:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r4 + 4;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19bc4;
                        run_19a00(); return;
                    }
                    r2 = r3 + r0;
                case 0x1993c:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r17 = r17 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x19538;
                    run_19400(); return;
                case 0x1994c:
                    r2 = r0 - r2;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r2;
                    r5 = r5 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x1951c;
                    run_19400(); return;
                case 0x19960:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x19968:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                case 0x1997c:
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x19994:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 15076;
                    r6 = r6 + 15004;
                    r7 = r0 + 362;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x199b8;
                    return;
                case 0x199b8:
                    r3 = r0 + 3;
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r17 = r17 + 2;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x19580;
                    run_19400(); return;
                case 0x199d4:
                    addr=r17+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r0;
                    r17 = r17 + 2;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x19580;
                    run_19400(); return;
                case 0x199ec:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x19a00:
                    pc=0x19a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19a00() throws ExecutionException { /* 0x19a00 - 0x19c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19a00:
                    r6 = r7 >> 31;
                case 0x19a08:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x19a14;
                    pc=0x18800;
                    run_18800(); return;
                case 0x19a14:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x192a8;
                    run_19200(); return;
                case 0x19a20:
                    r2 = r2 | 64;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19868;
                    run_19800(); return;
                case 0x19a34:
                    r17 = r17 + 2;
                case 0x19a38:
                    r17 = r17 + 1;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x19a50;
                    pc=0x14e00;
                    run_14e00(); return;
                case 0x19a50:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a38;
                        continue;
                    }
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r0 + -65;
                    r2 = r3 & r2;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x19538;
                    run_19400(); return;
                case 0x19a70:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x19a78:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x19968;
                    run_19800(); return;
                case 0x19a98:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1997c;
                    run_19800(); return;
                case 0x19aa4:
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x19aac:
                    r2 = r4 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x19a78;
                    continue;
                case 0x19acc:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x19ad4:
                    r4 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x19aac;
                    continue;
                case 0x19af4:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x19afc:
                    r2 = r3 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x19ad4;
                    continue;
                case 0x19b1c:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x19afc;
                    continue;
                case 0x19b40:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -8;
                    r3 = r3 + 7;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19a08;
                    continue;
                case 0x19b68:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19a08;
                    continue;
                case 0x19b84:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x19a08;
                    continue;
                case 0x19ba4:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r6 = r7 >> 31;
                    /* Next insn is delay slot */ 
                    pc=0x19a08;
                    continue;
                case 0x19bc4:
                    r3 = r0 + -65;
                    r2 = r2 & r3;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1993c;
                    run_19800(); return;
                case 0x19bd8:
                    r2 = r2 | 192;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r2;
                    r2 = r0 + 8;
                    writePages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff] = r2;
                    r2 = r0 + 16;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r3 = r2 + 4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                case 0x19c00:
                    pc=0x19c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19c00() throws ExecutionException { /* 0x19c00 - 0x19e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19c00:
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x19c10;
                    pc=0x18800;
                    run_18800(); return;
                case 0x19c10:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x192a8;
                    run_19200(); return;
                case 0x19c1c:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32740)>>>12][((r28+-32740)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 15024;
                    r6 = r6 + 15004;
                    r7 = r0 + 160;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x19c40;
                    return;
                case 0x19c40:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 15056;
                    r6 = r6 + 15004;
                    r7 = r0 + 571;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x19c64;
                    return;
                case 0x19c64:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 15068;
                    r6 = r6 + 15004;
                    r7 = r0 + 580;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x19c88;
                    return;
                case 0x19c88:
                case 0x19e00:
                    pc=0x19e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19e00() throws ExecutionException { /* 0x19e00 - 0x1a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19e00:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x19e1c;
                    pc=0x19200;
                    run_19200(); return;
                case 0x19e1c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a000:
                    pc=0x1a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a000() throws ExecutionException { /* 0x1a000 - 0x1a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a000:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1a024;
                    pc=0x19200;
                    run_19200(); return;
                case 0x1a024:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a050;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a050;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a050:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 15172;
                    r6 = r6 + 15004;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1a074;
                    return;
                case 0x1a074:
                case 0x1a200:
                    pc=0x1a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a200() throws ExecutionException { /* 0x1a200 - 0x1a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a200:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1a218;
                    pc=0x19200;
                    run_19200(); return;
                case 0x1a218:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a244;
                        continue;
                    }
                    r3 = r2 + 1;
                    r16 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a244;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1a244:
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r4 = readPages[(r28+-32748)>>>12][((r28+-32748)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32756)>>>12][((r28+-32756)>>>2)&0x3ff];
                    r5 = r5 + 15172;
                    r6 = r6 + 15004;
                    r7 = r0 + 676;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1a268;
                    return;
                case 0x1a268:
                case 0x1a400:
                    pc=0x1a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a400() throws ExecutionException { /* 0x1a400 - 0x1a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a400:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = 5 << 16;
                    r4 = r4 + 15688;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1a434;
                    pc=0x14200;
                    run_14200(); return;
                case 0x1a434:
                case 0x1a600:
                    pc=0x1a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a600() throws ExecutionException { /* 0x1a600 - 0x1a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a600:
                    r5 = r4 + r0;
                    r6 = r0 + r0;
                    r4 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x38800;
                    run_38800(); return;
                case 0x1a800:
                    pc=0x1a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a800() throws ExecutionException { /* 0x1a800 - 0x1aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a800:
                    r5 = r0 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x27000;
                    run_27000(); return;
                case 0x1aa00:
                    pc=0x1aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1aa00() throws ExecutionException { /* 0x1aa00 - 0x1ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1aa00:
                    r6 = r0 + r0;
                    r7 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x1ac00:
                    pc=0x1ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ac00() throws ExecutionException { /* 0x1ac00 - 0x1ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ac00:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r6 + r0;
                    r23 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1acac;
                        continue;
                    }
                    r20 = r7 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1acac;
                        continue;
                    }
                    r21 = r4 + r0;
                    r22 = r5 + r0;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ac70;
                    continue;
                case 0x1ac58:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ace0;
                        continue;
                    }
                    r17 = r16 + 1;
                    r2 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1acac;
                        continue;
                    }
                case 0x1ac70:
                    r16 = r18 + r17;
                    r16 = r16 >>> 1;
                    { long hilo = (long)(r16) * ((long)r20); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r21 + r0;
                    r19 = lo;
                    r19 = r22 + r19;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=r23;
                    r31=0x1ac94;
                    return;
                case 0x1ac94:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac58;
                        continue;
                    }
                    r18 = r16 + r0;
                    r2 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac70;
                        continue;
                    }
                case 0x1acac:
                    r2 = r0 + r0;
                case 0x1acb0:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ace0:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1acb0;
                    continue;
                case 0x1ae00:
                    pc=0x1ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ae00() throws ExecutionException { /* 0x1ae00 - 0x1b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ae00:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b000:
                    pc=0x1b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b000() throws ExecutionException { /* 0x1b000 - 0x1b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b000:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b01c;
                    pc=0x38a00;
                    run_38a00(); return;
                case 0x1b01c:
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b03c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1b03c;
                    return;
                case 0x1b03c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b048;
                    pc=0x2a600;
                    run_2a600(); return;
                case 0x1b048:
                case 0x1b200:
                    pc=0x1b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b200() throws ExecutionException { /* 0x1b200 - 0x1b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b200:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b24c;
                        continue;
                    }
                    r17 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b23c;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b338;
                        continue;
                    }
                case 0x1b23c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b26c;
                        continue;
                    }
                case 0x1b24c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b26c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b27c;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x1b27c:
                    r3 = readPages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2a4;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x1b29c;
                    return;
                case 0x1b29c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b348;
                        continue;
                    }
                case 0x1b2a4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b354;
                        continue;
                    }
                case 0x1b2b8:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2e4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2e0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b2e0;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1b2e0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x1b2e4:
                    r5 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b304;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b300;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1b300:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                case 0x1b304:
                    /* Next insn is delay slot */ 
                    r31=0x1b30c;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1b30c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1b318;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x1b318:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b338:
                    /* Next insn is delay slot */ 
                    r31=0x1b340;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1b340:
                    /* Next insn is delay slot */ 
                    pc=0x1b23c;
                    continue;
                case 0x1b348:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1b2a4;
                    continue;
                case 0x1b354:
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b364;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1b364:
                    /* Next insn is delay slot */ 
                    pc=0x1b2b8;
                    continue;
                case 0x1b400:
                    pc=0x1b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b400() throws ExecutionException { /* 0x1b400 - 0x1b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1b200;
                    run_1b200(); return;
                case 0x1b600:
                    pc=0x1b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b600() throws ExecutionException { /* 0x1b600 - 0x1b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b600:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r17 = r5 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b740;
                        continue;
                    }
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 | 2048;
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b7f4;
                        continue;
                    }
                case 0x1b644:
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b71c;
                        continue;
                    }
                    r2 = r2 & 65535;
                    r4 = r2 & 4096;
                    r16 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b80c;
                        run_1b800(); return;
                    }
                    r6 = readPages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff];
                case 0x1b670:
                    r2 = r2 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6a4;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r6 = r6 - r2;
                    r2 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6a4;
                        continue;
                    }
                    r2 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    r6 = r6 - r2;
                case 0x1b6a4:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x1b6b8;
                    return;
                case 0x1b6b8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b844;
                        run_1b800(); return;
                    }
                case 0x1b6c4:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r4 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r3 = r3 & 63487;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 & 4096;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b8c8;
                        run_1b800(); return;
                    }
                case 0x1b6f0:
                    r5 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b71c;
                        continue;
                    }
                    r2 = r17 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b718;
                        continue;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1b718;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1b718:
                    writePages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff] = r0;
                case 0x1b71c:
                    r2 = r0 + r0;
                case 0x1b720:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b740:
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b71c;
                        continue;
                    }
                    r16 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 & 3;
                    r16 = r16 - r18;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b7e8;
                        continue;
                    }
                    r2 = readPages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff];
                case 0x1b770:
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r16 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b794;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b71c;
                    continue;
                case 0x1b784:
                    r16 = r16 - r2;
                    r18 = r18 + r2;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b71c;
                        continue;
                    }
                case 0x1b794:
                    r2 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r6 = r18 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1b7b0;
                    return;
                case 0x1b7b0:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b784;
                        continue;
                    }
                case 0x1b7b8:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1b7e8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b770;
                    continue;
                case 0x1b7f4:
                    r3 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b644;
                        continue;
                    }
                case 0x1b800:
                    pc=0x1b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b800() throws ExecutionException { /* 0x1b800 - 0x1ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b800:
                    /* Next insn is delay slot */ 
                    pc=0x1b71c;
                    run_1b600(); return;
                case 0x1b80c:
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r4 = r19 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x1b824;
                    return;
                case 0x1b824:
                    r6 = r2 + r0;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b890;
                        continue;
                    }
                case 0x1b834:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1b670;
                    run_1b600(); return;
                case 0x1b844:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b6c4;
                        run_1b600(); return;
                    }
                    r2 = r0 + 29;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b86c;
                        continue;
                    }
                    r2 = r0 + 22;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b7b8;
                        run_1b600(); return;
                    }
                case 0x1b86c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    r2 = r2 & 63487;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1b6f0;
                    run_1b600(); return;
                case 0x1b890:
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b834;
                        continue;
                    }
                    r3 = r0 + 29;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b8b8;
                        continue;
                    }
                    r3 = r0 + 22;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1b7b8;
                        run_1b600(); return;
                    }
                case 0x1b8b8:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1b720;
                    run_1b600(); return;
                case 0x1b8c8:
                    writePages[(r17+80)>>>12][((r17+80)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1b6f0;
                    run_1b600(); return;
                case 0x1ba00:
                    pc=0x1ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ba00() throws ExecutionException { /* 0x1ba00 - 0x1bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ba00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba28;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba68;
                        continue;
                    }
                case 0x1ba28:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba50;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ba50:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x1b600;
                    run_1b600(); return;
                case 0x1ba68:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1ba74;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1ba74:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1ba28;
                    continue;
                case 0x1bc00:
                    pc=0x1bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1bc00() throws ExecutionException { /* 0x1bc00 - 0x1be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1bc00:
                    r5 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc18;
                        continue;
                    }
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x1bc18:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r5 = r5 + -17920;
                    /* Next insn is delay slot */ 
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x1be00:
                    pc=0x1be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1be00() throws ExecutionException { /* 0x1be00 - 0x1c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1be00:
                    r2 = r6 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bfa4;
                        continue;
                    }
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r21 = r4 + r0;
                    r22 = r5 + r0;
                    r17 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be54;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf40;
                        continue;
                    }
                case 0x1be54:
                    r18 = r6 + -1;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1bed0;
                    continue;
                case 0x1be64:
                    r2 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be78;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x1be78:
                    r4 = r20 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1be8c;
                    pc=0x21200;
                    run_21200(); return;
                case 0x1be8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf58;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 - r16;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r2 = r2 + r16;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r6 = r16 + r0;
                    r18 = r18 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x1bec4;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x1bec4:
                    r19 = r19 + r16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf0c;
                        continue;
                    }
                case 0x1bed0:
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1be64;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1bef0;
                    pc=0x23800;
                    run_23800(); return;
                case 0x1bef0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf04;
                        continue;
                    }
                    r16 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1be64;
                    continue;
                case 0x1bf04:
                    if(r19 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf98;
                        continue;
                    }
                case 0x1bf0c:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                case 0x1bf14:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1bf40:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x1bf4c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1bf4c:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1be54;
                    continue;
                case 0x1bf58:
                    r2 = r2 + 1;
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r16 = r2 - r20;
                    r3 = r3 - r16;
                    r6 = r16 + r0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    r5 = r20 + r0;
                    r16 = r19 + r16;
                    /* Next insn is delay slot */ 
                    r31=0x1bf88;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x1bf88:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1bf14;
                    continue;
                case 0x1bf98:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1bf14;
                    continue;
                case 0x1bfa4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c000:
                    pc=0x1c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c000() throws ExecutionException { /* 0x1c000 - 0x1c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1be00;
                    run_1be00(); return;
                case 0x1c200:
                    pc=0x1c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c200() throws ExecutionException { /* 0x1c200 - 0x1c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c200:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c400:
                    pc=0x1c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c400() throws ExecutionException { /* 0x1c400 - 0x1c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c400:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1c600:
                    pc=0x1c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c600() throws ExecutionException { /* 0x1c600 - 0x1c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c600:
                    r5 = 2 << 16;
                    r5 = r5 + -19456;
                    /* Next insn is delay slot */ 
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x1c800:
                    pc=0x1c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c800() throws ExecutionException { /* 0x1c800 - 0x1ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c800:
                    r29 = r29 + -32;
                    r2 = r5 << 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r5 << 4;
                    r18 = r18 - r2;
                    r18 = r18 + r5;
                    r18 = r18 << 3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r5 + r0;
                    r5 = r18 + 12;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1c838;
                    pc=0x20800;
                    run_20800(); return;
                case 0x1c838:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c864;
                        continue;
                    }
                    r4 = r2 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r5 = r0 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1c864;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x1c864:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ca00:
                    pc=0x1ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ca00() throws ExecutionException { /* 0x1ca00 - 0x1cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ca00:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r5 = r5 + -19456;
                    /* Next insn is delay slot */ 
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x1cc00:
                    pc=0x1cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1cc00() throws ExecutionException { /* 0x1cc00 - 0x1ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1cc00:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r29 = r29 + -48;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cd7c;
                        continue;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + -14848;
                    writePages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    r16 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r4+740)>>>12][((r4+740)>>>2)&0x3ff] = r2;
                    r2 = r4 + 748;
                    writePages[(r4+744)>>>12][((r4+744)>>>2)&0x3ff] = r2;
                    r22 = r0 + 1;
                    r2 = r0 + 4;
                    r21 = 2 << 16;
                    r20 = 2 << 16;
                    r19 = 2 << 16;
                    r18 = 2 << 16;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r22;
                    writePages[(r4+736)>>>12][((r4+736)>>>2)&0x3ff] = r0;
                    r21 = r21 + 16384;
                    r4 = r16 + 92;
                    r20 = r20 + 17408;
                    r19 = r19 + 17920;
                    r18 = r18 + 18432;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1ccbc;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x1ccbc:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r4 = r16 + 92;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r22&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1cd10;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x1cd10:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                    r16 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r0 + 18;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1cd68;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x1cd68:
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r21;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r20;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r19;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r18;
                case 0x1cd7c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ce00:
                    pc=0x1ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ce00() throws ExecutionException { /* 0x1ce00 - 0x1d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ce00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cf00;
                        continue;
                    }
                case 0x1ce2c:
                    r18 = r18 + 736;
                    r17 = r0 + -1;
                case 0x1ce34:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cee4;
                    continue;
                case 0x1ce50:
                    r2 = r2 + -1;
                    r16 = r16 + 104;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x1cee4;
                        continue;
                    }
                case 0x1ce60:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce50;
                        continue;
                    }
                    r2 = r0 + -1;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1ceb0;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x1ceb0:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    writePages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x1cec4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1cee4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cf14;
                        continue;
                    }
                case 0x1cef4:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ce34;
                    continue;
                case 0x1cf00:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1cf0c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1cf0c:
                    /* Next insn is delay slot */ 
                    pc=0x1ce2c;
                    continue;
                case 0x1cf14:
                    r4 = r19 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x1cf24;
                    pc=0x1c800;
                    run_1c800(); return;
                case 0x1cf24:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cef4;
                        continue;
                    }
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1cec4;
                    continue;
                case 0x1d000:
                    pc=0x1d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d000() throws ExecutionException { /* 0x1d000 - 0x1d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d200:
                    pc=0x1d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d200() throws ExecutionException { /* 0x1d200 - 0x1d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d400:
                    pc=0x1d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d400() throws ExecutionException { /* 0x1d400 - 0x1d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d400:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d600:
                    pc=0x1d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d600() throws ExecutionException { /* 0x1d600 - 0x1d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d600:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1d800:
                    pc=0x1d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d800() throws ExecutionException { /* 0x1d800 - 0x1da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d800:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r5 + -15872;
                    /* Next insn is delay slot */ 
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x1da00:
                    pc=0x1da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1da00() throws ExecutionException { /* 0x1da00 - 0x1dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1da00:
                    r5 = 2 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r5 + -15360;
                    /* Next insn is delay slot */ 
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x1dc00:
                    pc=0x1dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1dc00() throws ExecutionException { /* 0x1dc00 - 0x1de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1dc00:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r19 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dc30;
                    pc=0x3ac00;
                    run_3ac00(); return;
                case 0x1dc30:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcf4;
                        continue;
                    }
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1dc48;
                    pc=0x1ce00;
                    run_1ce00(); return;
                case 0x1dc48:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dcf4;
                        continue;
                    }
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    r7 = r0 + 438;
                    /* Next insn is delay slot */ 
                    r31=0x1dc6c;
                    pc=0x2a620;
                    run_2a600(); return;
                case 0x1dc6c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dce0;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 2 << 16;
                    r2 = r2 + 16384;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    r2 = r2 + 17408;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    r2 = r2 + 17920;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 18432;
                    r17 = r17 & 256;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd18;
                        continue;
                    }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1dce0:
                    /* Next insn is delay slot */ 
                    r31=0x1dce8;
                    pc=0x1d000;
                    run_1d000(); return;
                case 0x1dce8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x1dcf4;
                    pc=0x1d200;
                    run_1d200(); return;
                case 0x1dcf4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1dd18:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x1dd30;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1dd30:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1de00:
                    pc=0x1de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1de00() throws ExecutionException { /* 0x1de00 - 0x1e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1de00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x1e000:
                    pc=0x1e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e000() throws ExecutionException { /* 0x1e000 - 0x1e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e000:
                    r29 = r29 + -32;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r7 = r29 + 44;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1e01c;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x1e01c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e200:
                    pc=0x1e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e200() throws ExecutionException { /* 0x1e200 - 0x1e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e200:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r7 = r29 + 40;
                    r5 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x1e230;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x1e230:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e400:
                    pc=0x1e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e400() throws ExecutionException { /* 0x1e400 - 0x1e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e440;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e440;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x1e438;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1e438:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1e440:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x22800;
                    run_22800(); return;
                case 0x1e600:
                    pc=0x1e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e600() throws ExecutionException { /* 0x1e600 - 0x1e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e65c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e644;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1e63c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1e63c:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1e644:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x22800;
                    run_22800(); return;
                case 0x1e65c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x22800;
                    run_22800(); return;
                case 0x1e800:
                    pc=0x1e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e800() throws ExecutionException { /* 0x1e800 - 0x1ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e800:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = 5 << 16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r18 + 24784;
                    /* Next insn is delay slot */ 
                    r31=0x1e834;
                    pc=0x2a980;
                    run_2a800(); return;
                case 0x1e834:
                    r4 = r17 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e844;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1e844:
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    r5 = r19 - r20;
                    r5 = r5 + -17;
                    r5 = r5 + r16;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        if(r16!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                        }
                        pc=0x1e870;
                        continue;
                    }
                    if(r16!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r16 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r16 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1e870:
                    r20 = lo;
                    r20 = r20 + -1;
                    { long hilo = (long)(r20) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r20 = lo;
                    r16 = r20 < r16 ? 1 : 0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e8b4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e8a0;
                    pc=0x2a720;
                    run_2a600(); return;
                case 0x1e8a0:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e8e8;
                        continue;
                    }
                case 0x1e8b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e8c0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1e8c0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e8e8:
                    r4 = r17 + r0;
                    r5 = r0 - r20;
                    /* Next insn is delay slot */ 
                    r31=0x1e8f8;
                    pc=0x2a720;
                    run_2a600(); return;
                case 0x1e8f8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e958;
                        continue;
                    }
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r19 = r19 - r20;
                    r19 = r19 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    r2 = 5 << 16;
                    r3 = readPages[(r2+26528)>>>12][((r2+26528)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = r3 - r20;
                    writePages[(r2+26528)>>>12][((r2+26528)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    r31=0x1e930;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1e930:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1e958:
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1e968;
                    pc=0x2a720;
                    run_2a600(); return;
                case 0x1e968:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r2 - r3;
                    r5 = r4 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e8b4;
                        continue;
                    }
                    r5 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r4 = r4 | 1;
                    r2 = r2 - r5;
                    r5 = 5 << 16;
                    writePages[(r5+26528)>>>12][((r5+26528)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x1e8b4;
                    continue;
                case 0x1ea00:
                    pc=0x1ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ea00() throws ExecutionException { /* 0x1ea00 - 0x1ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ea00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eba0;
                        continue;
                    }
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ea28;
                    pc=0x22000;
                    run_22000(); return;
                case 0x1ea28:
                    r8 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r6 = r16 + -8;
                    r2 = r8 & r2;
                    r3 = r6 + r2;
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = 5 << 16;
                    r4 = r0 + -4;
                    r7 = r7 + 24784;
                    r5 = r5 & r4;
                    r4 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec44;
                        run_1ec00(); return;
                    }
                    r8 = r8 & 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r5;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb64;
                        continue;
                    }
                    r4 = r0 + r0;
                case 0x1ea74:
                    r8 = r3 + r5;
                    r8 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    r8 = r8 & 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eaac;
                        continue;
                    }
                    r2 = r2 + r5;
                    r5 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec0c;
                        run_1ec00(); return;
                    }
                case 0x1ea9c:
                    r3 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r5;
                case 0x1eaac:
                    r3 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r3 = r6 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb48;
                        continue;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ebb8;
                        continue;
                    }
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ecb8;
                        run_1ec00(); return;
                    }
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r8 = r4 << 1;
                case 0x1eaec:
                    r8 = r8 << 2;
                    r8 = r7 + r8;
                    r3 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1ecd4;
                        run_1ec00(); return;
                    }
                    r4 = r0 + -4;
                case 0x1eb08:
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r5 = r5 & r4;
                    r5 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb30;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb08;
                        continue;
                    }
                case 0x1eb30:
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                case 0x1eb38:
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r2;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r6;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                case 0x1eb48:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x22200;
                    run_22200(); return;
                case 0x1eb64:
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r8 = 5 << 16;
                    r6 = r6 - r4;
                    r2 = r2 + r4;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r8 = r8 + 24792;
                    if(r4 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1ecac;
                        run_1ec00(); return;
                    }
                    r8 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r8;
                    writePages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ea74;
                    continue;
                case 0x1eba0:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ebb8:
                    r2 = r2 >>> 3;
                    r3 = r2 >> 2;
                    r4 = r0 + 1;
                    r3 = r4 << (r3&0x1f);
                    r4 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r3 = r3 | r4;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r3;
                    r7 = r7 + r2;
                    r2 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r7;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r6;
                case 0x1ec00:
                    pc=0x1ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ec00() throws ExecutionException { /* 0x1ec00 - 0x1ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ec00:
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x22200;
                    run_22200(); return;
                case 0x1ec0c:
                    r8 = 5 << 16;
                    r8 = r8 + 24792;
                    if(r5 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea9c;
                        run_1ea00(); return;
                    }
                    r3 = r2 | 1;
                    writePages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff] = r6;
                    writePages[(r7+16)>>>12][((r7+16)>>>2)&0x3ff] = r6;
                    writePages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff] = r5;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r5;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    r6 = r6 + r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1eb48;
                    run_1ea00(); return;
                case 0x1ec44:
                    r8 = r8 & 1;
                    r2 = r5 + r2;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec78;
                        continue;
                    }
                    r3 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r6 = r6 - r3;
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r3 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x1ec78:
                    r5 = readPages[(r28+-32720)>>>12][((r28+-32720)>>>2)&0x3ff];
                    r3 = r2 | 1;
                    r2 = ((r2 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb48;
                        run_1ea00(); return;
                    }
                    r5 = readPages[(r28+-32448)>>>12][((r28+-32448)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1eca4;
                    pc=0x1e800;
                    run_1e800(); return;
                case 0x1eca4:
                    /* Next insn is delay slot */ 
                    pc=0x1eb48;
                    run_1ea00(); return;
                case 0x1ecac:
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x1ea74;
                    run_1ea00(); return;
                case 0x1ecb8:
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ecfc;
                        continue;
                    }
                    r4 = r3 + 91;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1eaec;
                    run_1ea00(); return;
                case 0x1ecd4:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r2;
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1eb38;
                    run_1ea00(); return;
                case 0x1ecfc:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ed1c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1eaec;
                    run_1ea00(); return;
                case 0x1ed1c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ed3c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1eaec;
                    run_1ea00(); return;
                case 0x1ed3c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ed5c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r8 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x1eaec;
                    run_1ea00(); return;
                case 0x1ed5c:
                    r8 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x1eaec;
                    run_1ea00(); return;
                case 0x1ee00:
                    pc=0x1ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ee00() throws ExecutionException { /* 0x1ee00 - 0x1f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ee00:
                    r29 = r29 + -120;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r21;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r23;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r20;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    r21 = r6 + r0;
                    r18 = r7 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee50;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f030;
                        run_1f000(); return;
                    }
                case 0x1ee50:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f04c;
                        run_1f000(); return;
                    }
                case 0x1ee64:
                    r19 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f388;
                        run_1f200(); return;
                    }
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1efc4;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eed4;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eed4;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x1ee9c:
                    r20 = r0 + -1;
                case 0x1eea0:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r23 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r22 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r21 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r20 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 120;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1eed4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r20 = r0 + r0;
                case 0x1eee0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f324;
                        run_1f200(); return;
                    }
                case 0x1eee8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 2074;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef24;
                        continue;
                    }
                    r2 = r2 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0b8;
                        run_1f000(); return;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + 17920;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f064;
                        run_1f000(); return;
                    }
                case 0x1ef1c:
                    r3 = r3 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1ef24:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ef34;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x1ef34:
                    r20 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee9c;
                        continue;
                    }
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x1ef58;
                    return;
                case 0x1ef58:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee9c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef90;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef8c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1ef8c;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1ef8c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x1ef90:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r16 + 92;
                    r2 = r2 & 63455;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1efbc;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x1efbc:
                    /* Next insn is delay slot */ 
                    pc=0x1eea0;
                    continue;
                case 0x1efc4:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1efd4;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x1efd4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 4096;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f2e4;
                        run_1f200(); return;
                    }
                    r20 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x1efec:
                    r3 = r2 & 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f1a0;
                        run_1f000(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f1c8;
                        run_1f000(); return;
                    }
                case 0x1f000:
                    pc=0x1f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f000() throws ExecutionException { /* 0x1f000 - 0x1f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f000:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f01c;
                        continue;
                    }
                    r3 = r3 - r2;
                    r20 = r20 + r3;
                case 0x1f01c:
                    r21 = r21 + r20;
                    r22 = r0 + 1;
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1eee0;
                    run_1ee00(); return;
                case 0x1f030:
                    /* Next insn is delay slot */ 
                    r31=0x1f038;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1f038:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 264;
                    r3 = r3 & 264;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee64;
                        run_1ee00(); return;
                    }
                case 0x1f04c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f05c;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x1f05c:
                    /* Next insn is delay slot */ 
                    pc=0x1ee64;
                    run_1ee00(); return;
                case 0x1f064:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef1c;
                        run_1ee00(); return;
                    }
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1f084;
                    pc=0x2a760;
                    run_2a600(); return;
                case 0x1f084:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f318;
                        run_1f200(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 | 32768;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f318;
                        run_1f200(); return;
                    }
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1f0b8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f1d4;
                        continue;
                    }
                    r23 = r21 + r0;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f204;
                        run_1f200(); return;
                    }
                case 0x1f0cc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f33c;
                        run_1f200(); return;
                    }
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x1f0e4:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r20 = r2 - r3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f368;
                        run_1f200(); return;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r6;
                case 0x1f104:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r20 + r3;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r6 + r2;
                case 0x1f11c:
                    r3 = r23 < r20 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f220;
                        run_1f200(); return;
                    }
                    r3 = r20 + r2;
                    r3 = ((r23 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f220;
                        run_1f200(); return;
                    }
                    r20 = r23 - r20;
                    r4 = r4 + r20;
                    r2 = r2 - r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f170;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f16c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f16c;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1f16c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x1f170:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1f180:
                    r4 = r16 + 92;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x1f194;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x1f194:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1eea0;
                    run_1ee00(); return;
                case 0x1f1a0:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r20 = r20 - r2;
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f1c8;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r20 = r20 - r2;
                case 0x1f1c8:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1f01c;
                    continue;
                case 0x1f1d4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1f1e8;
                    pc=0x2a760;
                    run_2a600(); return;
                case 0x1f1e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef24;
                        run_1ee00(); return;
                    }
                    r23 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r21 + r23;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0cc;
                        continue;
                    }
                case 0x1f200:
                    pc=0x1f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f200() throws ExecutionException { /* 0x1f200 - 0x1f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f200:
                case 0x1f204:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f368;
                        continue;
                    }
                    r6 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1f104;
                    run_1f000(); return;
                case 0x1f220:
                    r20 = readPages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r20 = r0 - r20;
                    r20 = r23 & r20;
                    r4 = r17 + r0;
                    r6 = r20 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x1f244;
                    return;
                case 0x1f244:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef24;
                        run_1ee00(); return;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f284;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1f280;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f280;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1f280:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x1f284:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r23 = r23 - r20;
                    r2 = r2 & 65503;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f180;
                        run_1f000(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f2ac;
                    pc=0x23800;
                    run_23800(); return;
                case 0x1f2ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef24;
                        run_1ee00(); return;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef24;
                        run_1ee00(); return;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 - r23;
                    r3 = r3 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1f180;
                    run_1f000(); return;
                case 0x1f2e4:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x1f2fc;
                    return;
                case 0x1f2fc:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee9c;
                        run_1ee00(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1efec;
                    run_1ee00(); return;
                case 0x1f318:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x1ef1c;
                    run_1ee00(); return;
                case 0x1f324:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x1f334;
                    pc=0x20200;
                    run_20200(); return;
                case 0x1f334:
                    /* Next insn is delay slot */ 
                    pc=0x1eee8;
                    run_1ee00(); return;
                case 0x1f33c:
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x1f354;
                    return;
                case 0x1f354:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0e4;
                        run_1f000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ef24;
                    run_1ee00(); return;
                case 0x1f368:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r2 = r2 - r4;
                    r20 = r20 - r2;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x1f11c;
                    run_1f000(); return;
                case 0x1f388:
                    r2 = r0 + 29;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r20 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x1eea0;
                    run_1ee00(); return;
                case 0x1f400:
                    pc=0x1f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f400() throws ExecutionException { /* 0x1f400 - 0x1f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1f600:
                    pc=0x1f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f600() throws ExecutionException { /* 0x1f600 - 0x1f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f600:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f6cc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r20 = r0 + r0;
                    r18 = r0 + -1;
                case 0x1f638:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f690;
                        continue;
                    }
                case 0x1f64c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f680;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f680;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x1f67c;
                    return;
                case 0x1f67c:
                    r20 = r20 | r2;
                case 0x1f680:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f64c;
                        continue;
                    }
                case 0x1f690:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f638;
                        continue;
                    }
                case 0x1f6a0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f6cc:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1f6a0;
                    continue;
                case 0x1f800:
                    pc=0x1f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f800() throws ExecutionException { /* 0x1f800 - 0x1fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f800:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + 736;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f8dc;
                        continue;
                    }
                    r21 = r5 + r0;
                    r22 = r0 + r0;
                    r18 = r0 + -1;
                case 0x1f840:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f89c;
                        continue;
                    }
                case 0x1f854:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r3 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f88c;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f88c;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r21;
                    r31=0x1f888;
                    return;
                case 0x1f888:
                    r22 = r22 | r2;
                case 0x1f88c:
                    r17 = r17 + -1;
                    r16 = r16 + 104;
                    if(r17 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x1f854;
                        continue;
                    }
                case 0x1f89c:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f840;
                        continue;
                    }
                case 0x1f8ac:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r22 + r0;
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1f8dc:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1f8ac;
                    continue;
                case 0x1fa00:
                    pc=0x1fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fa00() throws ExecutionException { /* 0x1fa00 - 0x1fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fa00:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -64;
                    r2 = r29 + 28;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = lo;
                    r19 = r6 + r0;
                    r20 = r7 + r0;
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa68;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fb14;
                        continue;
                    }
                case 0x1fa68:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fa94;
                        continue;
                    }
                    r3 = r3 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x1fa94:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x1faa8;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x1faa8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1faec;
                        continue;
                    }
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = r18 - r2;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        if(r19!=0) {
                        hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                        }
                        pc=0x1fac8;
                        continue;
                    }
                    if(r19!=0) {
                    hi = (int)((r18 & 0xffffffffL) % (r19 & 0xffffffffL)); lo = (int)((r18 & 0xffffffffL) / (r19 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x1fac8:
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1faec:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r20 + r0;
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fb14:
                    /* Next insn is delay slot */ 
                    r31=0x1fb1c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x1fb1c:
                    /* Next insn is delay slot */ 
                    pc=0x1fa68;
                    continue;
                case 0x1fc00:
                    pc=0x1fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fc00() throws ExecutionException { /* 0x1fc00 - 0x1fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fc00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1fc30;
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x1fc30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fe00:
                    pc=0x1fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fe00() throws ExecutionException { /* 0x1fe00 - 0x20000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fe00:
                    r5 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r5 + 124;
                    /* Next insn is delay slot */ 
                    pc=0x20000;
                    run_20000(); return;
                case 0x20000:
                    pc=0x20000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20000() throws ExecutionException { /* 0x20000 - 0x20200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20000:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x21800;
                    run_21800(); return;
                case 0x20200:
                    pc=0x20200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20200() throws ExecutionException { /* 0x20200 - 0x20400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20200:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -104;
                    r3 = r2 & 65535;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r3 & 2;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r31;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r19;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r18;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20330;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r17 = r4 + r0;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x202f0;
                        continue;
                    }
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x2024c;
                    pc=0x2a760;
                    run_2a600(); return;
                case 0x2024c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x202e4;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 | 32768;
                    r2 = r2 & 61440;
                    r19 = r2 ^ 8192;
                    r19 = (r19&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x20370;
                        continue;
                    }
                case 0x20270:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x20280:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20290;
                    pc=0x20800;
                    run_20800(); return;
                case 0x20290:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20314;
                        continue;
                    }
                    r3 = 2 << 16;
                    r3 = r3 + -14848;
                    writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r3 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r18;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x203a4;
                        continue;
                    }
                case 0x202c4:
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x202e4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                case 0x202f0:
                    r3 = r3 & 128;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20364;
                        continue;
                    }
                    r18 = r0 + 1024;
                case 0x20300:
                    r2 = r2 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20280;
                    continue;
                case 0x20314:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 512;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202c4;
                        continue;
                    }
                    r2 = r2 | 2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x20330:
                    r2 = r16 + 67;
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20364:
                    r18 = r0 + 64;
                    /* Next insn is delay slot */ 
                    pc=0x20300;
                    continue;
                case 0x20370:
                    r2 = 2 << 16;
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r2 + 17920;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20270;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r0 + 1024;
                    r2 = r2 | 1024;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x20280;
                    continue;
                case 0x203a4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x203b4;
                    pc=0x38600;
                    run_38600(); return;
                case 0x203b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202c4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x202c4;
                    continue;
                case 0x20400:
                    pc=0x20400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20400() throws ExecutionException { /* 0x20400 - 0x20600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x20800;
                    run_20800(); return;
                case 0x20600:
                    pc=0x20600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20600() throws ExecutionException { /* 0x20600 - 0x20800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20600:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x20800:
                    pc=0x20800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20800() throws ExecutionException { /* 0x20800 - 0x20a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20800:
                    r2 = r5 + 11;
                    r29 = r29 + -64;
                    r3 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20904;
                        continue;
                    }
                    r17 = r0 + -8;
                    r17 = r2 & r17;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20914;
                        continue;
                    }
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20914;
                        continue;
                    }
                case 0x2085c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20868;
                    pc=0x22000;
                    run_22000(); return;
                case 0x20868:
                    r2 = (r17&0xffffffffL) < (504&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20928;
                        continue;
                    }
                    r18 = 5 << 16;
                    r18 = r18 + 24784;
                    r2 = r18 + r17;
                    r16 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r7 = r17 >>> 3;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20ed8;
                        run_20e00(); return;
                    }
                case 0x20890:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r3 & r2;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                case 0x208b0:
                    r2 = r16 + r2;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = r3 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x208cc;
                    pc=0x22200;
                    run_22200(); return;
                case 0x208cc:
                    r2 = r16 + 8;
                case 0x208d0:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20904:
                    r17 = r0 + 16;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2085c;
                        continue;
                    }
                case 0x20914:
                    r2 = r0 + 12;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x208d0;
                    continue;
                case 0x20928:
                    r2 = r17 >>> 9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20b4c;
                        run_20a00(); return;
                    }
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20db8;
                        run_20c00(); return;
                    }
                    r8 = r17 >>> 6;
                    r8 = r8 + 56;
                    r6 = r8 << 1;
                case 0x2094c:
                    r18 = 5 << 16;
                    r6 = r6 << 2;
                    r18 = r18 + 24784;
                    r6 = r18 + r6;
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x209d0;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 - r17;
                    r2 = r4 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20b5c;
                        run_20a00(); return;
                    }
                    r7 = r0 + -4;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x209c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x20b68;
                    run_20a00(); return;
                case 0x2099c:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r7;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20b5c;
                        run_20a00(); return;
                    }
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20b68;
                        run_20a00(); return;
                    }
                case 0x209c0:
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2099c;
                        continue;
                    }
                case 0x209d0:
                    r7 = r8 + 1;
                case 0x209d4:
                    r9 = 5 << 16;
                    r16 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r9 = r9 + 24792;
                    if(r16 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x20eb0;
                        run_20e00(); return;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r3 & r2;
                    r3 = r2 - r17;
                    r4 = r3 < 16 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e6c;
                        run_20e00(); return;
                    }
                case 0x20a00:
                    pc=0x20a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20a00() throws ExecutionException { /* 0x20a00 - 0x20c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20a00:
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r9;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r9;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x208b0;
                        run_20800(); return;
                    }
                    r3 = (r2&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20de4;
                        run_20c00(); return;
                    }
                    r3 = r2 >>> 3;
                    r2 = r3 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r2&0x1f);
                    r3 = r3 << 3;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = r18 + r3;
                    r2 = r4 | r2;
                    r4 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r16;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r16;
                case 0x20a58:
                    r3 = r7 >> 2;
                    r4 = r0 + 1;
                    r4 = r4 << (r3&0x1f);
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ba0;
                        continue;
                    }
                    r3 = r2 & r4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a98;
                        continue;
                    }
                    r3 = r0 + -4;
                    r7 = r7 & r3;
                case 0x20a84:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a84;
                        continue;
                    }
                case 0x20a98:
                    r8 = r0 + -4;
                case 0x20a9c:
                    r10 = r7 << 3;
                    r10 = r18 + r10;
                    r6 = r10 + r0;
                    r11 = r7 + r0;
                case 0x20aac:
                    r16 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r6 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x20adc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x20ebc;
                    run_20e00(); return;
                case 0x20ac4:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ef4;
                        run_20e00(); return;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x20ebc;
                        run_20e00(); return;
                    }
                case 0x20adc:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r8;
                    r2 = r3 - r17;
                    r5 = r2 < 16 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ac4;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r17;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    r4 = r2 | 1;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r9;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r9;
                    r3 = r3 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20b40;
                    pc=0x22200;
                    run_22200(); return;
                case 0x20b40:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x208d0;
                    run_20800(); return;
                case 0x20b4c:
                    r6 = r0 + 126;
                    r8 = r0 + 63;
                    /* Next insn is delay slot */ 
                    pc=0x2094c;
                    run_20800(); return;
                case 0x20b5c:
                    r8 = r8 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x209d0;
                    run_20800(); return;
                case 0x20b68:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r16 + r3;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20b94;
                    pc=0x22200;
                    run_22200(); return;
                case 0x20b94:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x208d0;
                    run_20800(); return;
                case 0x20ba0:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r21 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 & r2;
                    r2 = ((r21 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20bd0;
                        continue;
                    }
                    r2 = r21 - r17;
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20d88;
                        run_20c00(); return;
                    }
                case 0x20bd0:
                    r22 = readPages[(r28+-32448)>>>12][((r28+-32448)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20bdc;
                    pc=0x2a980;
                    run_2a800(); return;
                case 0x20bdc:
                    r3 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r22 = r22 + 16;
                    r23 = r2 + r0;
                    r2 = r0 + -1;
                    r30 = r16 + r21;
                    r22 = r22 + r17;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20c0c;
                        run_20c00(); return;
                    }
                    r2 = r22 + -1;
                case 0x20c00:
                    pc=0x20c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20c00() throws ExecutionException { /* 0x20c00 - 0x20e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20c00:
                    r2 = r2 + r23;
                    r22 = r0 - r23;
                    r22 = r22 & r2;
                case 0x20c0c:
                    r4 = r19 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20c1c;
                    pc=0x2a720;
                    run_2a600(); return;
                case 0x20c1c:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x20d58;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20f54;
                        run_20e00(); return;
                    }
                case 0x20c38:
                    r3 = 5 << 16;
                    r2 = readPages[(r3+26528)>>>12][((r3+26528)>>>2)&0x3ff];
                    r4 = r23 + -1;
                    r2 = r22 + r2;
                    writePages[(r3+26528)>>>12][((r3+26528)>>>2)&0x3ff] = r2;
                    if(r30 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x210ac;
                        run_21000(); return;
                    }
                case 0x20c54:
                    r6 = readPages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff];
                    r5 = r0 + -1;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x210d0;
                        run_21000(); return;
                    }
                    r30 = r20 - r30;
                    r2 = r2 + r30;
                    writePages[(r3+26528)>>>12][((r3+26528)>>>2)&0x3ff] = r2;
                case 0x20c70:
                    r2 = r20 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21010;
                        run_21000(); return;
                    }
                    r5 = r0 + 8;
                    r2 = r5 - r2;
                    r20 = r20 + r2;
                case 0x20c88:
                    r22 = r20 + r22;
                    r2 = r2 + r23;
                    r4 = r22 & r4;
                    r22 = r2 - r4;
                    r5 = r22 + r0;
                    r4 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x20cac;
                    pc=0x2a720;
                    run_2a600(); return;
                case 0x20cac:
                    r4 = r0 + -1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x210fc;
                        run_21000(); return;
                    }
                    r2 = r2 - r20;
                    r4 = r22 + r2;
                    r4 = r4 | 1;
                case 0x20cc8:
                    r2 = readPages[(r3+26528)>>>12][((r3+26528)>>>2)&0x3ff];
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r20;
                    r2 = r22 + r2;
                    writePages[(r3+26528)>>>12][((r3+26528)>>>2)&0x3ff] = r2;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r4;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x20d28;
                        continue;
                    }
                    r3 = (r21&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21044;
                        run_21000(); return;
                    }
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -12;
                    r3 = r0 + -8;
                    r3 = r21 & r3;
                    r4 = r4 & 1;
                    r4 = r3 | r4;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r4;
                    r5 = r0 + 5;
                    r4 = r16 + r3;
                    r3 = (r3&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r5;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x210dc;
                        run_21000(); return;
                    }
                case 0x20d28:
                    r3 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20d40;
                        continue;
                    }
                    writePages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff] = r2;
                case 0x20d40:
                    r3 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20d58;
                        continue;
                    }
                    writePages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff] = r2;
                case 0x20d58:
                    r16 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 & r2;
                case 0x20d6c:
                    r2 = r3 - r17;
                    r3 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20fd8;
                        run_20e00(); return;
                    }
                    r3 = r2 < 16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20fd8;
                        run_20e00(); return;
                    }
                case 0x20d88:
                    r3 = r17 | 1;
                    r2 = r2 | 1;
                    r17 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r17;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x20dac;
                    pc=0x22200;
                    run_22200(); return;
                case 0x20dac:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x208d0;
                    run_20800(); return;
                case 0x20db8:
                    r3 = (r2&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20f30;
                        run_20e00(); return;
                    }
                    r3 = (r2&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ff0;
                        run_20e00(); return;
                    }
                    r8 = r17 >>> 12;
                    r8 = r8 + 110;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2094c;
                    run_20800(); return;
                case 0x20de4:
                    r3 = r2 >>> 9;
                    r4 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20f40;
                        run_20e00(); return;
                    }
                    r4 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2107c;
                        run_21000(); return;
                    }
                case 0x20e00:
                    pc=0x20e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20e00() throws ExecutionException { /* 0x20e00 - 0x21000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20e00:
                    r4 = r3 + 91;
                    r5 = r4 << 1;
                case 0x20e08:
                    r5 = r5 << 2;
                    r5 = r18 + r5;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2101c;
                        run_21000(); return;
                    }
                    r6 = r0 + -4;
                case 0x20e24:
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 & r6;
                    r4 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e4c;
                        continue;
                    }
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x20e24;
                        continue;
                    }
                case 0x20e4c:
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                case 0x20e54:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r16;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x20a58;
                    run_20a00(); return;
                case 0x20e6c:
                    r2 = r16 + r17;
                    r4 = r3 | 1;
                    r17 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r9;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r9;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20ea4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x20ea4:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x208d0;
                    run_20800(); return;
                case 0x20eb0:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x20a58;
                    run_20a00(); return;
                case 0x20ebc:
                    r11 = r11 + 1;
                    r2 = r11 & 3;
                    r6 = r6 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20aac;
                        run_20a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x20f78;
                    continue;
                case 0x20ed8:
                    r2 = r16 + 8;
                    r16 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r7 = r7 + 2;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x209d4;
                        run_20800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x20890;
                    run_20800(); return;
                case 0x20ef4:
                    r3 = r16 + r3;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x20f24;
                    pc=0x22200;
                    run_22200(); return;
                case 0x20f24:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x208d0;
                    run_20800(); return;
                case 0x20f30:
                    r8 = r2 + 91;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2094c;
                    run_20800(); return;
                case 0x20f40:
                    r4 = r2 >>> 6;
                    r4 = r4 + 56;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x20e08;
                    continue;
                case 0x20f54:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x20d58;
                        run_20c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x20c38;
                    run_20c00(); return;
                case 0x20f64:
                    r2 = r10 + -8;
                    r10 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    r7 = r7 + -1;
                    if(r10 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2115c;
                        run_21000(); return;
                    }
                case 0x20f78:
                    r2 = r7 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20f64;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = ~(r0 | r4);
                    r2 = r3 & r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                case 0x20f94:
                    r4 = r4 << 1;
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ba0;
                        run_20a00(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ba0;
                        run_20a00(); return;
                    }
                    r3 = r2 & r4;
                    r7 = r11 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a9c;
                        run_20a00(); return;
                    }
                case 0x20fbc:
                    r4 = r4 << 1;
                    r3 = r2 & r4;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20fbc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x20a9c;
                    run_20a00(); return;
                case 0x20fd8:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x20fe4;
                    pc=0x22200;
                    run_22200(); return;
                case 0x20fe4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x208d0;
                    run_20800(); return;
                case 0x20ff0:
                    r3 = (r2&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2105c;
                        run_21000(); return;
                    }
                    r8 = r17 >>> 15;
                case 0x21000:
                    pc=0x21000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21000() throws ExecutionException { /* 0x21000 - 0x21200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21000:
                    r8 = r8 + 119;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2094c;
                    run_20800(); return;
                case 0x21010:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20c88;
                    run_20c00(); return;
                case 0x2101c:
                    r2 = r0 + 1;
                    r4 = r4 >> 2;
                    r4 = r2 << (r4&0x1f);
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r4 | r2;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20e54;
                    run_20e00(); return;
                case 0x21044:
                    r2 = r0 + 1;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r16 = r20 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20d6c;
                    run_20c00(); return;
                case 0x2105c:
                    r2 = (r2&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2109c;
                        continue;
                    }
                    r8 = r17 >>> 18;
                    r8 = r8 + 124;
                    r6 = r8 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x2094c;
                    run_20800(); return;
                case 0x2107c:
                    r4 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2110c;
                        continue;
                    }
                    r4 = r2 >>> 12;
                    r4 = r4 + 110;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x20e08;
                    run_20e00(); return;
                case 0x2109c:
                    r6 = r0 + 252;
                    r8 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x2094c;
                    run_20800(); return;
                case 0x210ac:
                    r5 = r30 & r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20c54;
                        run_20c00(); return;
                    }
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = r22 + r21;
                    r4 = r4 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x20d28;
                    run_20c00(); return;
                case 0x210d0:
                    writePages[(r28+-32724)>>>12][((r28+-32724)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x20c70;
                    run_20c00(); return;
                case 0x210dc:
                    r4 = r19 + r0;
                    r5 = r16 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x210ec;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x210ec:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+26528)>>>12][((r2+26528)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x20d28;
                    run_20c00(); return;
                case 0x210fc:
                    r4 = r0 + 1;
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x20cc8;
                    run_20c00(); return;
                case 0x2110c:
                    r4 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2112c;
                        continue;
                    }
                    r4 = r2 >>> 15;
                    r4 = r4 + 119;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x20e08;
                    run_20e00(); return;
                case 0x2112c:
                    r3 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2114c;
                        continue;
                    }
                    r4 = r2 >>> 18;
                    r4 = r4 + 124;
                    r5 = r4 << 1;
                    /* Next insn is delay slot */ 
                    pc=0x20e08;
                    run_20e00(); return;
                case 0x2114c:
                    r5 = r0 + 252;
                    r4 = r0 + 126;
                    /* Next insn is delay slot */ 
                    pc=0x20e08;
                    run_20e00(); return;
                case 0x2115c:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x20f94;
                    run_20e00(); return;
                case 0x21200:
                    pc=0x21200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21200() throws ExecutionException { /* 0x21200 - 0x21400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21200:
                    r2 = r4 & 3;
                    r7 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2125c;
                        continue;
                    }
                    r2 = r6 + -1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21240;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x212b0;
                    continue;
                case 0x21224:
                    r4 = r4 + 1;
                    r3 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21260;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x212b0;
                        continue;
                    }
                    r2 = r2 + -1;
                case 0x21240:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x21224;
                        continue;
                    }
                case 0x21250:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2125c:
                    r2 = r6 + r0;
                case 0x21260:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x212bc;
                        continue;
                    }
                case 0x2126c:
                    r5 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x212b0;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x21250;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x212a4;
                    continue;
                case 0x21294:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1;
                    if(r3 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x21250;
                        continue;
                    }
                case 0x212a4:
                    r4 = r4 + 1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x21294;
                        continue;
                    }
                case 0x212b0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x212bc:
                    r5 = r5 & 255;
                    r3 = r5 << 8;
                    r3 = r3 | r5;
                    r9 = r3 << 16;
                    r8 = 65278 << 16;
                    r6 = 32896 << 16;
                    r9 = r9 | r3;
                    r8 = r8 | 65279;
                    r6 = r6 | 32896;
                case 0x212e0:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r9 ^ r3;
                    r5 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r5 & r3;
                    r3 = r3 & r6;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2126c;
                        continue;
                    }
                    r2 = r2 + -4;
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x212e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2126c;
                    continue;
                case 0x21400:
                    pc=0x21400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21400() throws ExecutionException { /* 0x21400 - 0x21600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x2141c;
                    pc=0x3c000;
                    run_3c000(); return;
                case 0x2141c:
                    r3 = r16 < 1970 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21638;
                        run_21600(); return;
                    }
                    r3 = r16 + -1970;
                    r5 = r3 << 3;
                    r4 = r3 << 6;
                    r4 = r5 + r4;
                    r3 = r4 + r3;
                    r5 = r3 << 2;
                    r4 = r16 + -1969;
                    r3 = r3 + r5;
                    r4 = r4 >> 2;
                    r3 = r3 + r4;
                    r5 = r16 + -1901;
                    r4 = r0 + -100;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r4; lo = r5/r4;
                        pc=0x21464;
                        continue;
                    }
                    hi = r5%r4; lo = r5/r4;
                    throw new ExecutionException("Break");
                case 0x21464:
                    r4 = r16 + -1601;
                    r14 = r0 + 100;
                    r24 = 5 << 16;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    r7 = r2 + r0;
                    r8 = r0 + r0;
                    r11 = r0 + 74;
                    r13 = r0 + 68;
                    r24 = r24 + 16052;
                    r9 = r0 + 7;
                    r10 = r0 + 2;
                    r5 = lo;
                    r5 = r3 + r5;
                    r3 = r0 + 400;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r3; lo = r4/r3;
                        pc=0x214a8;
                        continue;
                    }
                    hi = r4%r3; lo = r4/r3;
                    throw new ExecutionException("Break");
                case 0x214a8:
                    r12 = lo;
                    r12 = r5 + r12;
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r14; lo = r16/r14;
                        pc=0x214c0;
                        continue;
                    }
                    hi = r16%r14; lo = r16/r14;
                    throw new ExecutionException("Break");
                case 0x214c0:
                    r14 = hi;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r3; lo = r16/r3;
                        pc=0x214d8;
                        continue;
                    }
                    hi = r16%r3; lo = r16/r3;
                    throw new ExecutionException("Break");
                case 0x214d8:
                    r16 = r16 & 3;
                    r15 = hi;
                    r15 = (r15&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x214e4:
                    addr=r7+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x21654;
                        run_21600(); return;
                    }
                    if(r3 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x216a4;
                        run_21600(); return;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21624;
                        run_21600(); return;
                    }
                case 0x21504:
                    r3 = r15 + r0;
                case 0x21508:
                    r4 = r3 << 4;
                    r25 = r3 << 6;
                    r25 = r25 - r4;
                    r4 = readPages[(r7+12)>>>12][((r7+12)>>>2)&0x3ff];
                    r25 = r24 + r25;
                    r3 = r4 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x216c4;
                        run_21600(); return;
                    }
                    r17 = r4 << 2;
                    r4 = r25 + -4;
                    r3 = r25 + r0;
                    r4 = r4 + r17;
                    r5 = r12 + r0;
                case 0x2153c:
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r5 = r5 + r6;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2153c;
                        continue;
                    }
                    r17 = r17 + -4;
                case 0x21554:
                    r4 = r5 + 4;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r9; lo = r4/r9;
                        pc=0x21564;
                        continue;
                    }
                    hi = r4%r9; lo = r4/r9;
                    throw new ExecutionException("Break");
                case 0x21564:
                    r4 = readPages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff];
                    r6 = hi;
                    r4 = r4 - r6;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x216b8;
                        run_21600(); return;
                    }
                case 0x21578:
                    r3 = readPages[(r7+16)>>>12][((r7+16)>>>2)&0x3ff];
                    r25 = r25 + r17;
                    r3 = r3 + -1;
                    r6 = r3 << 3;
                    r3 = r6 - r3;
                    r3 = r3 + r4;
                    r4 = readPages[(r25+0)>>>12][((r25+0)>>>2)&0x3ff];
                    r6 = r3 < r4 ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x215b4;
                        continue;
                    }
                case 0x215a4:
                    r3 = r3 + -7;
                    r6 = r3 < r4 ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x215a4;
                        continue;
                    }
                case 0x215b4:
                    r5 = r5 + r3;
                case 0x215b8:
                    r4 = r5 << 7;
                    r3 = r5 << 9;
                    r3 = r3 - r4;
                    r4 = r3 << 4;
                    r3 = r4 - r3;
                    r5 = readPages[(r7+24)>>>12][((r7+24)>>>2)&0x3ff];
                    r4 = r3 << 4;
                    r4 = r4 - r3;
                    r4 = r4 + r5;
                    r5 = readPages[(r7+32)>>>12][((r7+32)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r4 = r4 + r5;
                    writePages[(r7+28)>>>12][((r7+28)>>>2)&0x3ff] = r4;
                    r7 = r7 + 28;
                    if(r8 != r10) {
                        /* Next insn is delay slot */ 
                        pc=0x214e4;
                        continue;
                    }
                    r4 = readPages[(r2+28)>>>12][((r2+28)>>>2)&0x3ff];
                    r3 = readPages[(r2+56)>>>12][((r2+56)>>>2)&0x3ff];
                case 0x21600:
                    pc=0x21600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21600() throws ExecutionException { /* 0x21600 - 0x21800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21600:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r4 < r3 ? 1 : 0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21624:
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21504;
                        run_21400(); return;
                    }
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x21508;
                    run_21400(); return;
                case 0x21638:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21654:
                    r3 = readPages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff];
                    r5 = r3 + r12;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21688;
                        continue;
                    }
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21688;
                        continue;
                    }
                case 0x21670:
                    r3 = r3 < 60 ? 1 : 0;
                    r3 = r3 ^ 1;
                    r5 = r5 + r3;
                    r5 = r5 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x215b8;
                    run_21400(); return;
                case 0x21688:
                    if(r15 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21670;
                        continue;
                    }
                    r3 = r0 + r0;
                    r5 = r5 + r3;
                    r5 = r5 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x215b8;
                    run_21400(); return;
                case 0x216a4:
                    r5 = readPages[(r7+20)>>>12][((r7+20)>>>2)&0x3ff];
                    r5 = r12 + r5;
                    /* Next insn is delay slot */ 
                    pc=0x215b8;
                    run_21400(); return;
                case 0x216b8:
                    r4 = r4 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x21578;
                    run_21400(); return;
                case 0x216c4:
                    r5 = r12 + r0;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x21554;
                    run_21400(); return;
                case 0x21800:
                    pc=0x21800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21800() throws ExecutionException { /* 0x21800 - 0x21a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21800:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r5 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r20 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21834;
                    pc=0x3c000;
                    run_3c000(); return;
                case 0x21834:
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 1 << 16;
                    r7 = r7 + 20864;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r3%r7; lo = r3/r7;
                        pc=0x2184c;
                        continue;
                    }
                    hi = r3%r7; lo = r3/r7;
                    throw new ExecutionException("Break");
                case 0x2184c:
                    r19 = r2 + r0;
                    r5 = hi;
                    r3 = lo;
                    if(r5 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21868;
                        continue;
                    }
                    r5 = r5 + r7;
                    r3 = r3 + -1;
                case 0x21868:
                    r4 = r0 + 3600;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r5%r4; lo = r5/r4;
                        pc=0x21878;
                        continue;
                    }
                    hi = r5%r4; lo = r5/r4;
                    throw new ExecutionException("Break");
                case 0x21878:
                    r2 = r0 + 60;
                    r4 = hi;
                    r5 = lo;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x21898;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x21898:
                    r4 = r3 + 4;
                    r2 = lo;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    r2 = r0 + 7;
                    r6 = hi;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x218c0;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x218c0:
                    r5 = hi;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21b10;
                        run_21a00(); return;
                    }
                case 0x218cc:
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r5;
                    r16 = r0 + 1970;
                    r10 = r28 + -32716;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a9c;
                        run_21a00(); return;
                    }
                    r9 = r0 + 400;
                    r11 = r0 + 100;
                    /* Next insn is delay slot */ 
                    pc=0x21930;
                    continue;
                case 0x218f0:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r11; lo = r16/r11;
                        pc=0x218fc;
                        continue;
                    }
                    hi = r16%r11; lo = r16/r11;
                    throw new ExecutionException("Break");
                case 0x218fc:
                    r5 = hi;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2193c;
                        continue;
                    }
                    r5 = r0 + 1;
                    r7 = r5 << 2;
                    r7 = r10 + r7;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r8 = r3 < r7 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2196c;
                        continue;
                    }
                case 0x21928:
                    r16 = r16 + 1;
                    r3 = r3 - r7;
                case 0x21930:
                    r5 = r16 & 3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x218f0;
                        continue;
                    }
                case 0x2193c:
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r9; lo = r16/r9;
                        pc=0x21948;
                        continue;
                    }
                    hi = r16%r9; lo = r16/r9;
                    throw new ExecutionException("Break");
                case 0x21948:
                    r5 = hi;
                    r5 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r7 = r5 << 2;
                    r7 = r10 + r7;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r8 = r3 < r7 ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21928;
                        continue;
                    }
                case 0x2196c:
                    r2 = r16 + -1900;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    r21 = 5 << 16;
                    r2 = r5 << 4;
                    r5 = r5 << 6;
                    r5 = r5 - r2;
                    r21 = r21 + 16052;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r3;
                    r21 = r21 + r5;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r0;
                    r7 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r2 = r3 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x219d0;
                        continue;
                    }
                    r9 = r21 + 4;
                    r8 = r0 + 1;
                case 0x219b0:
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r8;
                    r3 = r3 - r7;
                    r7 = readPages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r10 = r3 < r7 ? 1 : 0;
                    r9 = r9 + 4;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x219b0;
                        continue;
                    }
                case 0x219d0:
                    r3 = r3 + 1;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a10;
                        run_21a00(); return;
                    }
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r0;
                case 0x219e4:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                case 0x21a00:
                    pc=0x21a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21a00() throws ExecutionException { /* 0x21a00 - 0x21c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21a00:
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21a10:
                    /* Next insn is delay slot */ 
                    r31=0x21a18;
                    pc=0x27400;
                    run_27400(); return;
                case 0x21a18:
                    r2 = readPages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21b1c;
                        continue;
                    }
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x21a4c;
                        continue;
                    }
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x21a44;
                    pc=0x21400;
                    run_21400(); return;
                case 0x21a44:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d60;
                        run_21c00(); return;
                    }
                case 0x21a4c:
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d24;
                        run_21c00(); return;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r19+28)>>>12][((r19+28)>>>2)&0x3ff];
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21b1c;
                        continue;
                    }
                    r3 = readPages[(r19+56)>>>12][((r19+56)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21b1c;
                        continue;
                    }
                case 0x21a88:
                    r2 = r0 + 1;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r19+60)>>>12][((r19+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x21b24;
                    continue;
                case 0x21a9c:
                    r4 = r0 + 400;
                    r6 = r0 + 100;
                    /* Next insn is delay slot */ 
                    pc=0x21ae4;
                    continue;
                case 0x21aac:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r6; lo = r16/r6;
                        pc=0x21ab8;
                        continue;
                    }
                    hi = r16%r6; lo = r16/r6;
                    throw new ExecutionException("Break");
                case 0x21ab8:
                    r2 = hi;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21af4;
                        continue;
                    }
                    r5 = r0 + 1;
                case 0x21ac8:
                    r2 = r5 << 2;
                    r2 = r10 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2196c;
                        run_21800(); return;
                    }
                case 0x21ae4:
                    r16 = r16 + -1;
                    r2 = r16 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21aac;
                        continue;
                    }
                case 0x21af4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r16%r4; lo = r16/r4;
                        pc=0x21b00;
                        continue;
                    }
                    hi = r16%r4; lo = r16/r4;
                    throw new ExecutionException("Break");
                case 0x21b00:
                    r5 = hi;
                    r5 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x21ac8;
                    continue;
                case 0x21b10:
                    r5 = r5 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x218cc;
                    run_21800(); return;
                case 0x21b1c:
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r0;
                case 0x21b20:
                    r4 = readPages[(r19+32)>>>12][((r19+32)>>>2)&0x3ff];
                case 0x21b24:
                    r2 = r0 + 3600;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x21b34;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x21b34:
                    r3 = r0 + 60;
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = hi;
                    r2 = lo;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r3; lo = r4/r3;
                        pc=0x21b58;
                        continue;
                    }
                    hi = r4%r3; lo = r4/r3;
                    throw new ExecutionException("Break");
                case 0x21b58:
                    r5 = hi;
                    r4 = r6 - r5;
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = lo;
                    r3 = r5 - r3;
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r2 = r5 - r2;
                    r5 = r4 < 60 ? 1 : 0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21cf8;
                        run_21c00(); return;
                    }
                    r3 = r3 + 1;
                    r4 = r4 + -60;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                case 0x21b9c:
                    r4 = r3 < 60 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21cd8;
                        run_21c00(); return;
                    }
                    r2 = r2 + 1;
                    r3 = r3 + -60;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                case 0x21bb8:
                    r3 = r2 < 24 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c50;
                        run_21c00(); return;
                    }
                    r3 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 7 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d18;
                        run_21c00(); return;
                    }
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r3;
                case 0x21bf0:
                    r2 = r2 + -24;
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                case 0x21c00:
                    pc=0x21c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21c00() throws ExecutionException { /* 0x21c00 - 0x21e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21c00:
                    r3 = r3 + 1;
                    r4 = r2 << 2;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    r21 = r21 + r4;
                    r4 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r4 < r3 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c40;
                        continue;
                    }
                    r3 = r3 - r4;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r0 + 12;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x21d7c;
                        continue;
                    }
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                case 0x21c40:
                    /* Next insn is delay slot */ 
                    r31=0x21c48;
                    pc=0x27600;
                    run_27600(); return;
                case 0x21c48:
                    /* Next insn is delay slot */ 
                    pc=0x219e4;
                    run_21800(); return;
                case 0x21c50:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c40;
                        continue;
                    }
                    r3 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d70;
                        continue;
                    }
                case 0x21c7c:
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = r2 + 24;
                    r3 = r3 + -1;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c40;
                        continue;
                    }
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21da0;
                        continue;
                    }
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    r2 = r2 << 2;
                case 0x21cb8:
                    r2 = r21 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x21cd0;
                    pc=0x27600;
                    run_27600(); return;
                case 0x21cd0:
                    /* Next insn is delay slot */ 
                    pc=0x219e4;
                    run_21800(); return;
                case 0x21cd8:
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21bb8;
                        run_21a00(); return;
                    }
                    r2 = r2 + -1;
                    r3 = r3 + 60;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x21bb8;
                    run_21a00(); return;
                case 0x21cf8:
                    if(r4 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21b9c;
                        run_21a00(); return;
                    }
                    r3 = r3 + -1;
                    r4 = r4 + 60;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x21b9c;
                    run_21a00(); return;
                case 0x21d18:
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x21bf0;
                    run_21a00(); return;
                case 0x21d24:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r19+28)>>>12][((r19+28)>>>2)&0x3ff];
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a88;
                        run_21a00(); return;
                    }
                    r3 = readPages[(r19+56)>>>12][((r19+56)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21b20;
                        run_21a00(); return;
                    }
                    r4 = readPages[(r19+60)>>>12][((r19+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x21b24;
                    run_21a00(); return;
                case 0x21d60:
                    r2 = r0 + -1;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x21b20;
                    run_21a00(); return;
                case 0x21d70:
                    r3 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x21c7c;
                    continue;
                case 0x21d7c:
                    r2 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r0;
                    r2 = r2 + 1;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x21d98;
                    pc=0x27600;
                    run_27600(); return;
                case 0x21d98:
                    /* Next insn is delay slot */ 
                    pc=0x219e4;
                    run_21800(); return;
                case 0x21da0:
                    r2 = r0 + 11;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r3;
                    r3 = r3 & 3;
                    r2 = r2 + 1899;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21df8;
                        continue;
                    }
                    r3 = r0 + 100;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r3; lo = r2/r3;
                        pc=0x21dd8;
                        continue;
                    }
                    hi = r2%r3; lo = r2/r3;
                    throw new ExecutionException("Break");
                case 0x21dd8:
                    r4 = hi;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21df8;
                        continue;
                    }
                    r2 = r0 + 365;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                    r2 = r0 + 44;
                    /* Next insn is delay slot */ 
                    pc=0x21cb8;
                    continue;
                case 0x21df8:
                    r3 = r0 + 400;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r3; lo = r2/r3;
                        pc=0x21e08;
                        run_21e00(); return;
                    }
                case 0x21e00:
                    pc=0x21e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21e00() throws ExecutionException { /* 0x21e00 - 0x22000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21e00:
                    hi = r2%r3; lo = r2/r3;
                    throw new ExecutionException("Break");
                case 0x21e08:
                    r4 = hi;
                    r2 = (r4&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r2 + 364;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                    r2 = r0 + 44;
                    /* Next insn is delay slot */ 
                    pc=0x21cb8;
                    run_21c00(); return;
                case 0x22000:
                    pc=0x22000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22000() throws ExecutionException { /* 0x22000 - 0x22200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22200:
                    pc=0x22200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22200() throws ExecutionException { /* 0x22200 - 0x22400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22400:
                    pc=0x22400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22400() throws ExecutionException { /* 0x22400 - 0x22600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22400:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r6 = r5 + r0;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x22428;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x22428:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22600:
                    pc=0x22600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22600() throws ExecutionException { /* 0x22600 - 0x22800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22600:
                    r29 = r29 + -32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r6 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r29 + 36;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x22630;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x22630:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22800:
                    pc=0x22800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22800() throws ExecutionException { /* 0x22800 - 0x22a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22828;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x228c8;
                        continue;
                    }
                case 0x22828:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x22874;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                case 0x22854:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22874:
                    r3 = readPages[(r6+24)>>>12][((r6+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x228e8;
                        continue;
                    }
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x22854;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x228c8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x228d8;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x228d8:
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x22828;
                    continue;
                case 0x228e8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x22a00:
                    pc=0x22a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22a00() throws ExecutionException { /* 0x22a00 - 0x22c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a34;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22acc;
                        continue;
                    }
                case 0x22a34:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a84;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                case 0x22a60:
                    r3 = r2 + 1;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22a84:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22adc;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r0 + 10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x22a60;
                        continue;
                    }
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x22ae4;
                    continue;
                case 0x22acc:
                    /* Next insn is delay slot */ 
                    r31=0x22ad4;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x22ad4:
                    /* Next insn is delay slot */ 
                    pc=0x22a34;
                    continue;
                case 0x22adc:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r17 + r0;
                case 0x22ae4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x22c00:
                    pc=0x22c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22c00() throws ExecutionException { /* 0x22c00 - 0x22e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x22e00:
                    pc=0x22e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22e00() throws ExecutionException { /* 0x22e00 - 0x23000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22e00:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r5 + r0;
                    r20 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2314c;
                        run_23000(); return;
                    }
                    r21 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x22e48;
                    pc=0x22000;
                    run_22000(); return;
                case 0x22e48:
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r2 = r20 + 11;
                    r17 = r0 + -4;
                    r4 = (r2&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    r19 = r16 + -8;
                    r17 = r3 & r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f8c;
                        continue;
                    }
                    r4 = r0 + 16;
                    r18 = r0 + 16;
                case 0x22e70:
                    r2 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22fa0;
                        continue;
                    }
                    r2 = r17 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22fe0;
                        continue;
                    }
                    r23 = 5 << 16;
                    r23 = r23 + 24784;
                    r5 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r2 = r19 + r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23184;
                        run_23000(); return;
                    }
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r0 + -2;
                    r7 = r6 & r7;
                    r7 = r2 + r7;
                    r7 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r7 = r7 & 1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22fb4;
                        continue;
                    }
                    r6 = r0 + r0;
                    r2 = r0 + r0;
                case 0x22ecc:
                    r3 = r3 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a4;
                        run_23000(); return;
                    }
                    r22 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r22 = r19 - r22;
                    r7 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r3 = r7 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23298;
                        run_23200(); return;
                    }
                    r3 = r3 + r17;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x232a4;
                        run_23200(); return;
                    }
                    r23 = r6 + r3;
                    r5 = r23 < r4 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23094;
                        run_23000(); return;
                    }
                    r3 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x22f28:
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23270;
                        run_23200(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x231e4;
                        run_23000(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x233c0;
                        run_23200(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x231e8;
                    run_23000(); return;
                case 0x22f8c:
                    r18 = r0 + -8;
                    r18 = r2 & r18;
                    r4 = r18 + r0;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e70;
                        continue;
                    }
                case 0x22fa0:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23020;
                    run_23000(); return;
                case 0x22fb4:
                    r7 = r0 + -4;
                    r6 = r6 & r7;
                    r7 = r6 + r17;
                    r8 = r7 < r4 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ecc;
                        continue;
                    }
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r17 = r7 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                case 0x22fe0:
                    r6 = r17 - r18;
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23054;
                        run_23000(); return;
                    }
                    r3 = r3 & 1;
                    r3 = r3 | r17;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r17 = r19 + r17;
                case 0x23000:
                    pc=0x23000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23000() throws ExecutionException { /* 0x23000 - 0x23200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23000:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                case 0x23010:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2301c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x2301c:
                    r2 = r16 + r0;
                case 0x23020:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23054:
                    r3 = r3 & 1;
                    r5 = r19 + r18;
                    r2 = r6 | 1;
                    r18 = r3 | r18;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r18;
                    r6 = r5 + r6;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 | 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 8;
                    /* Next insn is delay slot */ 
                    r31=0x2308c;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x2308c:
                    /* Next insn is delay slot */ 
                    pc=0x23010;
                    continue;
                case 0x23094:
                    r23 = r3 + r0;
                case 0x23098:
                    r4 = r23 < r4 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f28;
                        run_22e00(); return;
                    }
                case 0x230a4:
                    r5 = r20 + r0;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x230b4;
                    pc=0x20800;
                    run_20800(); return;
                case 0x230b4:
                    r20 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2348c;
                        run_23400(); return;
                    }
                    r3 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r2 + -8;
                    r2 = r0 + -2;
                    r2 = r3 & r2;
                    r2 = r19 + r2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x233a8;
                        run_23200(); return;
                    }
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23258;
                        run_23200(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x231b0;
                        continue;
                    }
                    r2 = r20 + r0;
                    r3 = r16 + r0;
                case 0x23100:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                case 0x23124:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23134;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x23134:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23140;
                    pc=0x22200;
                    run_22200(); return;
                case 0x23140:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23020;
                    continue;
                case 0x2314c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r6 + r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=0x20800;
                    run_20800(); return;
                case 0x23184:
                    r6 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r6 = r6 & r2;
                    r2 = r6 + r17;
                    r7 = r18 + 16;
                    r7 = r2 < r7 ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2321c;
                        run_23200(); return;
                    }
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22ecc;
                    run_22e00(); return;
                case 0x231b0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23374;
                        run_23200(); return;
                    }
                    r2 = r20 + 8;
                    r3 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x23100;
                    continue;
                case 0x231e4:
                    r3 = r19 + r0;
                case 0x231e8:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x23200:
                    pc=0x23200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23200() throws ExecutionException { /* 0x23200 - 0x23400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23200:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r16 = r19 + r0;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22fe0;
                    run_22e00(); return;
                case 0x2321c:
                    r2 = r2 - r18;
                    r19 = r19 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r19;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x2324c;
                    pc=0x22200;
                    run_22200(); return;
                case 0x2324c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23020;
                    run_23000(); return;
                case 0x23258:
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23268;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x23268:
                    /* Next insn is delay slot */ 
                    pc=0x23124;
                    run_23000(); return;
                case 0x23270:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23280;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x23280:
                    r16 = r19 + r0;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r17 = r23 + r0;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x22fe0;
                    run_22e00(); return;
                case 0x23298:
                    r23 = r3 + r17;
                    /* Next insn is delay slot */ 
                    pc=0x23098;
                    run_23000(); return;
                case 0x232a4:
                    r30 = r6 + r3;
                    r2 = r18 + 16;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23094;
                        run_23000(); return;
                    }
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r19 = r22 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23440;
                        run_23400(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23434;
                        run_23400(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23458;
                        run_23400(); return;
                    }
                    r3 = r22 + 16;
                    r16 = r16 + 8;
                case 0x23314:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                case 0x23338:
                    r2 = r30 - r18;
                    r3 = r22 + r18;
                    r2 = r2 | 1;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r3;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 & 1;
                    r18 = r18 | r2;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r31=0x23368;
                    pc=0x22200;
                    run_22200(); return;
                case 0x23368:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23020;
                    run_23000(); return;
                case 0x23374:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x233f4;
                        continue;
                    }
                    r2 = r20 + 16;
                    r3 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x23100;
                    run_23000(); return;
                case 0x233a8:
                    r4 = readPages[(r20+-4)>>>12][((r20+-4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r2 = r4 & r2;
                    r17 = r17 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x22fe0;
                    run_22e00(); return;
                case 0x233c0:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23414;
                        run_23400(); return;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x231e8;
                    run_23000(); return;
                case 0x233f4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r16 + 24;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                case 0x23400:
                    pc=0x23400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23400() throws ExecutionException { /* 0x23400 - 0x23600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23400:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r20 + 24;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x23100;
                    run_23000(); return;
                case 0x23414:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x231e8;
                    run_23000(); return;
                case 0x23434:
                    r3 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23314;
                    run_23200(); return;
                case 0x23440:
                    r4 = r19 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23450;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x23450:
                    /* Next insn is delay slot */ 
                    pc=0x23338;
                    run_23200(); return;
                case 0x23458:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 36;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x234a4;
                        continue;
                    }
                    r3 = r22 + 24;
                    r16 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x23314;
                    run_23200(); return;
                case 0x2348c:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23498;
                    pc=0x22200;
                    run_22200(); return;
                case 0x23498:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x23020;
                    run_23000(); return;
                case 0x234a4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r22 + 32;
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r16 = r16 + 24;
                    writePages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x23314;
                    run_23200(); return;
                case 0x23600:
                    pc=0x23600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23600() throws ExecutionException { /* 0x23600 - 0x23800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23600:
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 9;
                    r3 = r3 & 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23620;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23620:
                    /* Next insn is delay slot */ 
                    pc=0x1bc00;
                    run_1bc00(); return;
                case 0x23800:
                    pc=0x23800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23800() throws ExecutionException { /* 0x23800 - 0x23a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23800:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23838;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239a0;
                        continue;
                    }
                case 0x23838:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2386c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x2386c:
                    r4 = r2 & 32;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2397c;
                        continue;
                    }
                    r4 = r2 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2393c;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x238c4;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x238b0;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x238b0;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x238b0:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a6c;
                        run_23a00(); return;
                    }
                case 0x238c4:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a98;
                        run_23a00(); return;
                    }
                case 0x238d4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r19 = tmp;
                    r18 = r19 & 65535;
                    r2 = r18 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239b0;
                        continue;
                    }
                case 0x238ec:
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r6;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2390c;
                    return;
                case 0x2390c:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23964;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x2391c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2393c:
                    r4 = r2 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ab0;
                        run_23a00(); return;
                    }
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a2c;
                        run_23a00(); return;
                    }
                    r3 = r3 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x238c4;
                    continue;
                case 0x23964:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239f8;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2397c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x239a0:
                    /* Next insn is delay slot */ 
                    r31=0x239a8;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x239a8:
                    /* Next insn is delay slot */ 
                    pc=0x23838;
                    continue;
                case 0x239b0:
                    r2 = r0 + 1;
                    r4 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r5 = 2 << 16;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + 13824;
                    /* Next insn is delay slot */ 
                    r31=0x239cc;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x239cc:
                    r18 = r18 & 9;
                    r2 = r0 + 9;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r19&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x238ec;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x239f0;
                    pc=0x1b600;
                    run_1b600(); return;
                case 0x239f0:
                    /* Next insn is delay slot */ 
                    pc=0x238ec;
                    continue;
                case 0x239f8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x23a00:
                    pc=0x23a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23a00() throws ExecutionException { /* 0x23a00 - 0x23c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23a00:
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23a2c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23a3c;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x23a3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2397c;
                        run_23800(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r3 = r3 & 65527;
                    r3 = r3 << 16;
                    r3 = r3 >> 16;
                    r3 = r3 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x238c4;
                    run_23800(); return;
                case 0x23a6c:
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23a98:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23aa8;
                    pc=0x20200;
                    run_20200(); return;
                case 0x23aa8:
                    /* Next insn is delay slot */ 
                    pc=0x238d4;
                    run_23800(); return;
                case 0x23ab0:
                    r2 = r0 + 9;
                    r3 = r3 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2391c;
                    run_23800(); return;
                case 0x23c00:
                    pc=0x23c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23c00() throws ExecutionException { /* 0x23c00 - 0x23e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c30;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c84;
                        continue;
                    }
                case 0x23c30:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x23c40;
                    pc=0x23800;
                    run_23800(); return;
                case 0x23c40:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c94;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x23c6c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23c84:
                    /* Next insn is delay slot */ 
                    r31=0x23c8c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x23c8c:
                    /* Next insn is delay slot */ 
                    pc=0x23c30;
                    continue;
                case 0x23c94:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x23c6c;
                    continue;
                case 0x23e00:
                    pc=0x23e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23e00() throws ExecutionException { /* 0x23e00 - 0x24000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x24000:
                    pc=0x24000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24000() throws ExecutionException { /* 0x24000 - 0x24200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2401c;
                    pc=0x2a6a0;
                    run_2a600(); return;
                case 0x2401c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24044;
                        continue;
                    }
                    r3 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r3;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24044:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24200:
                    pc=0x24200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24200() throws ExecutionException { /* 0x24200 - 0x24400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24200:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24400:
                    pc=0x24400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24400() throws ExecutionException { /* 0x24400 - 0x24600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24400:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -40;
                    r3 = r2 & 256;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r16 = r5 + r0;
                    r18 = r6 + r0;
                    r17 = r7 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24450;
                        continue;
                    }
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r6 = r0 + r0;
                    r7 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x2444c;
                    pc=0x2a7a0;
                    run_2a600(); return;
                case 0x2444c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                case 0x24450:
                    r3 = r0 + -4097;
                    r2 = r2 & r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r19 + r0;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2a6e0;
                    run_2a600(); return;
                case 0x24600:
                    pc=0x24600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24600() throws ExecutionException { /* 0x24600 - 0x24800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2461c;
                    pc=0x2a7a0;
                    run_2a600(); return;
                case 0x2461c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2464c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 | 4096;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2464c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 61439;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24800:
                    pc=0x24800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24800() throws ExecutionException { /* 0x24800 - 0x24a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24800:
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2a660;
                    run_2a600(); return;
                case 0x24a00:
                    pc=0x24a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24a00() throws ExecutionException { /* 0x24a00 - 0x24c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24a00:
                    r3 = r5 | r4;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24aa4;
                        continue;
                    }
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r7 = 32896 << 16;
                    r4 = r6 & r4;
                    r7 = r7 | 32896;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24aa4;
                        continue;
                    }
                case 0x24a40:
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24aa4;
                        continue;
                    }
                    r2 = r2 + 4;
                    r5 = r5 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = ~(r0 | r3);
                    r4 = r3 + r8;
                    r4 = r6 & r4;
                    r4 = r4 & r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24a40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x24aa4;
                    continue;
                case 0x24aa0:
                    r2 = r4 + r0;
                case 0x24aa4:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24aa0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24c00:
                    pc=0x24c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24c00() throws ExecutionException { /* 0x24c00 - 0x24e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24c00:
                    r2 = r4 | r5;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24c68;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x24c44;
                    continue;
                case 0x24c1c:
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24c54;
                        continue;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24c8c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24c8c;
                        continue;
                    }
                case 0x24c44:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24c1c;
                        continue;
                    }
                case 0x24c54:
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24c60:
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24c54;
                        continue;
                    }
                case 0x24c68:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24c60;
                        continue;
                    }
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24c8c:
                    r2 = r6 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24e00:
                    pc=0x24e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24e00() throws ExecutionException { /* 0x24e00 - 0x25000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24e00:
                    r3 = r4 | r5;
                    r3 = r3 & 3;
                    r2 = r4 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e90;
                        continue;
                    }
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r10 = 65278 << 16;
                    r10 = r10 | 65279;
                    r4 = ~(r0 | r6);
                    r3 = r6 + r10;
                    r9 = 32896 << 16;
                    r3 = r4 & r3;
                    r9 = r9 | 32896;
                    r3 = r3 & r9;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e90;
                        continue;
                    }
                    r3 = r2 + r0;
                case 0x24e44:
                    r3 = r3 + 4;
                    r5 = r5 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = ~(r0 | r6);
                    r7 = r6 + r10;
                    r7 = r8 & r7;
                    r7 = r7 & r9;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e44;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24e90:
                    r3 = r2 + r0;
                case 0x24e94:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24e94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25000:
                    pc=0x25000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25000() throws ExecutionException { /* 0x25000 - 0x25200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25000:
                    r29 = r29 + -24;
                    r2 = (r5&0xffffffffL) < (143&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x254dc;
                        run_25400(); return;
                    }
                    r2 = 5 << 16;
                    r3 = r5 << 2;
                    r2 = r2 + 17740;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x25034:
                    r2 = 5 << 16;
                    r2 = r2 + 16156;
                case 0x2503c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2504c:
                    r2 = 5 << 16;
                    r2 = r2 + 16148;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2505c:
                    r2 = 5 << 16;
                    r2 = r2 + 17640;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2506c:
                    r2 = 5 << 16;
                    r2 = r2 + 17616;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2507c:
                    r2 = 5 << 16;
                    r2 = r2 + 17596;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2508c:
                    r2 = 5 << 16;
                    r2 = r2 + 16836;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2509c:
                    r2 = 5 << 16;
                    r2 = r2 + 17544;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x250ac:
                    r2 = 5 << 16;
                    r2 = r2 + 17568;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x250bc:
                    r2 = 5 << 16;
                    r2 = r2 + 17148;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x250cc:
                    r2 = 5 << 16;
                    r2 = r2 + 17696;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x250dc:
                    r2 = 5 << 16;
                    r2 = r2 + 16372;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x250ec:
                    r2 = 5 << 16;
                    r2 = r2 + 16316;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x250fc:
                    r2 = 5 << 16;
                    r2 = r2 + 16580;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2510c:
                    r2 = 5 << 16;
                    r2 = r2 + 16792;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2511c:
                    r2 = 5 << 16;
                    r2 = r2 + 16564;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2512c:
                    r2 = 5 << 16;
                    r2 = r2 + 17716;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2513c:
                    r2 = 5 << 16;
                    r2 = r2 + 16648;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2514c:
                    r2 = 5 << 16;
                    r2 = r2 + 17016;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2515c:
                    r2 = 5 << 16;
                    r2 = r2 + 17508;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2516c:
                    r2 = 5 << 16;
                    r2 = r2 + 17484;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2517c:
                    r2 = 5 << 16;
                    r2 = r2 + 17464;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2518c:
                    r2 = 5 << 16;
                    r2 = r2 + 17440;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x2519c:
                    r2 = 5 << 16;
                    r2 = r2 + 17408;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x251ac:
                    r2 = 5 << 16;
                    r2 = r2 + 17376;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x251bc:
                    r2 = 5 << 16;
                    r2 = r2 + 17328;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x251cc:
                    r2 = 5 << 16;
                    r2 = r2 + 17300;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x251dc:
                    r2 = 5 << 16;
                    r2 = r2 + 17660;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x251ec:
                    r2 = 5 << 16;
                    r2 = r2 + 17276;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    continue;
                case 0x251fc:
                    r2 = 5 << 16;
                case 0x25200:
                    pc=0x25200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25200() throws ExecutionException { /* 0x25200 - 0x25400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25200:
                    r2 = r2 + 17248;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2520c:
                    r2 = 5 << 16;
                    r2 = r2 + 17228;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2521c:
                    r2 = 5 << 16;
                    r2 = r2 + 17200;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2522c:
                    r2 = 5 << 16;
                    r2 = r2 + 17188;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2523c:
                    r2 = 5 << 16;
                    r2 = r2 + 17168;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2524c:
                    r2 = 5 << 16;
                    r2 = r2 + 17132;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2525c:
                    r2 = 5 << 16;
                    r2 = r2 + 17108;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2526c:
                    r2 = 5 << 16;
                    r2 = r2 + 17088;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2527c:
                    r2 = 5 << 16;
                    r2 = r2 + 17064;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2528c:
                    r2 = 5 << 16;
                    r2 = r2 + 17048;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2529c:
                    r2 = 5 << 16;
                    r2 = r2 + 17040;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x252ac:
                    r2 = 5 << 16;
                    r2 = r2 + 17004;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x252bc:
                    r2 = 5 << 16;
                    r2 = r2 + 16984;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x252cc:
                    r2 = 5 << 16;
                    r2 = r2 + 16956;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x252dc:
                    r2 = 5 << 16;
                    r2 = r2 + 16936;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x252ec:
                    r2 = 5 << 16;
                    r2 = r2 + 16920;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x252fc:
                    r2 = 5 << 16;
                    r2 = r2 + 16908;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2530c:
                    r2 = 5 << 16;
                    r2 = r2 + 16892;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2531c:
                    r2 = 5 << 16;
                    r2 = r2 + 16868;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2532c:
                    r2 = 5 << 16;
                    r2 = r2 + 16852;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2533c:
                    r2 = 5 << 16;
                    r2 = r2 + 16812;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2534c:
                    r2 = 5 << 16;
                    r2 = r2 + 16776;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2535c:
                    r2 = 5 << 16;
                    r2 = r2 + 16760;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2536c:
                    r2 = 5 << 16;
                    r2 = r2 + 16736;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2537c:
                    r2 = 5 << 16;
                    r2 = r2 + 16716;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2538c:
                    r2 = 5 << 16;
                    r2 = r2 + 16684;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2539c:
                    r2 = 5 << 16;
                    r2 = r2 + 16628;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x253ac:
                    r2 = 5 << 16;
                    r2 = r2 + 16612;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x253bc:
                    r2 = 5 << 16;
                    r2 = r2 + 16548;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x253cc:
                    r2 = 5 << 16;
                    r2 = r2 + 16532;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x253dc:
                    r2 = 5 << 16;
                    r2 = r2 + 16512;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x253ec:
                    r2 = 5 << 16;
                    r2 = r2 + 16500;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x253fc:
                    r2 = 5 << 16;
                case 0x25400:
                    pc=0x25400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25400() throws ExecutionException { /* 0x25400 - 0x25600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25400:
                    r2 = r2 + 16476;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2540c:
                    r2 = 5 << 16;
                    r2 = r2 + 16464;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2541c:
                    r2 = 5 << 16;
                    r2 = r2 + 16444;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2542c:
                    r2 = 5 << 16;
                    r2 = r2 + 16424;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2543c:
                    r2 = 5 << 16;
                    r2 = r2 + 16404;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2544c:
                    r2 = 5 << 16;
                    r2 = r2 + 16360;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2545c:
                    r2 = 5 << 16;
                    r2 = r2 + 16344;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2546c:
                    r2 = 5 << 16;
                    r2 = r2 + 16296;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2547c:
                    r2 = 5 << 16;
                    r2 = r2 + 16276;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2548c:
                    r2 = 5 << 16;
                    r2 = r2 + 16248;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x2549c:
                    r2 = 5 << 16;
                    r2 = r2 + 16236;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x254ac:
                    r2 = 5 << 16;
                    r2 = r2 + 16212;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x254bc:
                    r2 = 5 << 16;
                    r2 = r2 + 16196;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x254cc:
                    r2 = 5 << 16;
                    r2 = r2 + 16168;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x254dc:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25510;
                        continue;
                    }
                case 0x254e4:
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x254f8;
                    pc=0x27800;
                    run_27800(); return;
                case 0x254f8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2503c;
                        run_25000(); return;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 11160;
                    /* Next insn is delay slot */ 
                    pc=0x2503c;
                    run_25000(); return;
                case 0x25510:
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x254e4;
                    continue;
                case 0x25600:
                    pc=0x25600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25600() throws ExecutionException { /* 0x25600 - 0x25800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25600:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25000;
                    run_25000(); return;
                case 0x25800:
                    pc=0x25800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25800() throws ExecutionException { /* 0x25800 - 0x25a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25800:
                    r12 = r0 + 1;
                    r7 = r0 + 1;
                    r8 = r0 + r0;
                    r11 = r0 + -1;
                case 0x25810:
                    r3 = r7 + r8;
                    r9 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25860;
                        continue;
                    }
                case 0x25820:
                    r2 = r4 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r2 = r4 + r11;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = ((r10 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x258e4;
                        continue;
                    }
                    r8 = r3 + r0;
                    r7 = r0 + 1;
                    r12 = r3 - r11;
                    r3 = r7 + r8;
                    r9 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25820;
                        continue;
                    }
                case 0x25860:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r12;
                    r13 = r0 + 1;
                    r7 = r0 + 1;
                    r8 = r0 + r0;
                    r2 = r0 + -1;
                case 0x25874:
                    r3 = r7 + r8;
                    r9 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x258c4;
                        continue;
                    }
                case 0x25884:
                    r9 = r4 + r3;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r9 = r4 + r2;
                    r9 = r9 + r7;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r12 = ((r9 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25904;
                        continue;
                    }
                    r8 = r3 + r0;
                    r7 = r0 + 1;
                    r13 = r3 - r2;
                    r3 = r7 + r8;
                    r9 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25884;
                        continue;
                    }
                case 0x258c4:
                    r2 = r2 + 1;
                    r11 = r11 + 1;
                    r3 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2596c;
                        continue;
                    }
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r13;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x258e4:
                    if(r10 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x25924;
                        continue;
                    }
                    r11 = r8 + r0;
                    r12 = r0 + 1;
                    r8 = r8 + 1;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x25810;
                    continue;
                case 0x25904:
                    if(r10 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x25938;
                        continue;
                    }
                    r2 = r8 + r0;
                    r13 = r0 + 1;
                    r8 = r8 + 1;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x25874;
                    continue;
                case 0x25924:
                    if(r7 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x2594c;
                        continue;
                    }
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x25810;
                    continue;
                case 0x25938:
                    if(r7 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x2595c;
                        continue;
                    }
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x25874;
                    continue;
                case 0x2594c:
                    r8 = r3 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x25810;
                    continue;
                case 0x2595c:
                    r8 = r3 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x25874;
                    continue;
                case 0x2596c:
                    r2 = r11 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25a00:
                    pc=0x25a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25a00() throws ExecutionException { /* 0x25a00 - 0x25c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25a00:
                    r29 = r29 + -1104;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    r18 = r29 + 1040;
                    r9 = r5 + r0;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r23;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    r23 = r4 + r0;
                    r17 = r6 + r0;
                    r4 = r6 + r0;
                    r5 = r7 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r9;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r31;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r30;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r22;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    r16 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25a58;
                    pc=0x25800;
                    run_25800(); return;
                case 0x25a58:
                    r9 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r19 = r2 + r0;
                    r3 = r29 + 16;
                case 0x25a64:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    r3 = r3 + 4;
                    if(r18 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x25a64;
                        continue;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25aac;
                        continue;
                    }
                    r2 = r17 + r0;
                    r5 = r16 + r17;
                    r3 = r16 + -1;
                case 0x25a88:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r6 = r29 + 16;
                    r4 = r4 << 2;
                    r4 = r6 + r4;
                    r2 = r2 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r3 = r3 + -1;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x25a88;
                        continue;
                    }
                case 0x25aac:
                    r5 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r17 + r5;
                    r6 = r19 + r0;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x25ac8;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x25ac8:
                    r9 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25ce4;
                        run_25c00(); return;
                    }
                    r20 = r0 + 1;
                    r20 = r20 - r19;
                    r21 = r0 + r0;
                    r18 = r19 + -1;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r20;
                    r20 = r21 + r16;
                    r3 = r17 + r18;
                    r4 = r23 + r9;
                    r5 = r0 + r0;
                    r6 = r20 - r9;
                    r30 = r0 + r0;
                    r22 = r16 + -1;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x25b10;
                    pc=0x21200;
                    run_21200(); return;
                case 0x25b10:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b90;
                        continue;
                    }
                case 0x25b18:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b90;
                        continue;
                    }
                    r2 = r23 + r20;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r29 + 16;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25bc8;
                        continue;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b64;
                        continue;
                    }
                    r3 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r4 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b64;
                        continue;
                    }
                    r2 = r16 - r3;
                case 0x25b64:
                    r21 = r21 + r2;
                    r30 = r0 + r0;
                    r9 = r20 + r0;
                case 0x25b70:
                    r20 = r21 + r16;
                    r4 = r23 + r9;
                    r5 = r0 + r0;
                    r6 = r20 - r9;
                    /* Next insn is delay slot */ 
                    r31=0x25b88;
                    pc=0x21200;
                    run_21200(); return;
                case 0x25b88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b18;
                        continue;
                    }
                case 0x25b90:
                    r2 = r0 + r0;
                case 0x25b94:
                    r31 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r30 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r23 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r22 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r29 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25bc8:
                    r6 = ((r30 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r3 = r30 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25bdc;
                        continue;
                    }
                    r3 = r19 + r0;
                case 0x25bdc:
                    r2 = ((r3 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25c3c;
                        run_25c00(); return;
                    }
                    r5 = r23 + r21;
                    r4 = r17 + r3;
                    r2 = r5 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x25c00:
                    pc=0x25c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25c00() throws ExecutionException { /* 0x25c00 - 0x25e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25c00:
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25c2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25cc8;
                    continue;
                case 0x25c10:
                    r4 = r17 + r3;
                    r2 = r5 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25cc8;
                        continue;
                    }
                case 0x25c2c:
                    r3 = r3 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25c10;
                        continue;
                    }
                case 0x25c3c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e58;
                        run_25e00(); return;
                    }
                    r5 = r23 + r21;
                    r6 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r2 = r5 + r18;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25e58;
                        run_25e00(); return;
                    }
                    r2 = r18 + r0;
                    if(r2 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x25c9c;
                        continue;
                    }
                case 0x25c70:
                    r3 = r2 + -1;
                    r6 = r17 + r2;
                    r4 = r5 + r3;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r6 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x25ca0;
                        continue;
                    }
                    r2 = r3 + r0;
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x25c70;
                        continue;
                    }
                case 0x25c9c:
                    r2 = r30 + r0;
                case 0x25ca0:
                    r30 = r30 + 1;
                    r2 = ((r2 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e64;
                        run_25e00(); return;
                    }
                    r30 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r9 = r20 + r0;
                    r21 = r21 + r30;
                    r30 = r16 - r30;
                    /* Next insn is delay slot */ 
                    pc=0x25b70;
                    run_25a00(); return;
                case 0x25cc8:
                    r2 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r30 = r0 + r0;
                    r8 = r2 + r21;
                    r21 = r8 + r3;
                    r9 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25b70;
                    run_25a00(); return;
                case 0x25ce4:
                    r2 = r16 - r19;
                    r3 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e4c;
                        run_25e00(); return;
                    }
                case 0x25cf4:
                    r18 = r19 + -1;
                    r3 = r17 + r18;
                    r2 = r2 + 1;
                    r30 = r16 + -1;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r3;
                    r3 = r17 + r19;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    r22 = r0 + r0;
                    r20 = ((r19 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r3;
                case 0x25d1c:
                    r21 = r22 + r16;
                    r4 = r23 + r9;
                    r5 = r0 + r0;
                    r6 = r21 - r9;
                    /* Next insn is delay slot */ 
                    r31=0x25d34;
                    pc=0x21200;
                    run_21200(); return;
                case 0x25d34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b90;
                        run_25a00(); return;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25b90;
                        run_25a00(); return;
                    }
                    r2 = r23 + r21;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r29 + 16;
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25e24;
                        run_25e00(); return;
                    }
                    r2 = r23 + r22;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25dc4;
                        continue;
                    }
                    r6 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r3 = r2 + r19;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r19 + r0;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x25db4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x25e34;
                    run_25e00(); return;
                case 0x25d98:
                    r4 = r17 + r3;
                    r5 = r2 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x25e34;
                        run_25e00(); return;
                    }
                case 0x25db4:
                    r3 = r3 + 1;
                    r5 = ((r3 & 0xffffffffL) < (r30 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25d98;
                        continue;
                    }
                case 0x25dc4:
                    r4 = r0 + -1;
                    r3 = r18 + r0;
                    if(r18 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x25b94;
                        run_25a00(); return;
                    }
                    r6 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r4 = r2 + r18;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x25e1c;
                        run_25e00(); return;
                    }
                    r6 = r0 + -1;
                case 0x25df4:
                    r3 = r3 + -1;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x25b94;
                        run_25a00(); return;
                    }
                case 0x25e00:
                    pc=0x25e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25e00() throws ExecutionException { /* 0x25e00 - 0x26000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25e00:
                    r5 = r17 + r3;
                    r4 = r2 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x25df4;
                        run_25c00(); return;
                    }
                case 0x25e1c:
                    r2 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                case 0x25e24:
                    r22 = r22 + r2;
                    r9 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25d1c;
                    run_25c00(); return;
                case 0x25e34:
                    r8 = r22 - r19;
                    r8 = r8 + 1;
                    r22 = r8 + r3;
                    r9 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25d1c;
                    run_25c00(); return;
                case 0x25e4c:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25cf4;
                    run_25c00(); return;
                case 0x25e58:
                    r2 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x25ca0;
                    run_25c00(); return;
                case 0x25e64:
                    r2 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x25b94;
                    run_25a00(); return;
                case 0x26000:
                    pc=0x26000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26000() throws ExecutionException { /* 0x26000 - 0x26200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26000:
                    r29 = r29 + -72;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r23;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r30 = r4 + r0;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26464;
                        run_26400(); return;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r8 = tmp;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x260ac;
                        continue;
                    }
                    r7 = r5 + r0;
                    r9 = r4 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x26074;
                    continue;
                case 0x26064:
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r8 = tmp;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x260a4;
                        continue;
                    }
                case 0x26074:
                    r3 = r3 ^ r8;
                    r3 = (r3&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r9 = r9 + 1;
                    r5 = r5 & r3;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r7 = r7 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26064;
                        continue;
                    }
                case 0x26094:
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26150;
                        continue;
                    }
                case 0x260a4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x260e4;
                        continue;
                    }
                case 0x260ac:
                    r2 = r30 + r0;
                case 0x260b0:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r23 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x260e4:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r30 + 1;
                    r17 = r7 - r16;
                    /* Next insn is delay slot */ 
                    r31=0x260f8;
                    pc=0x41a00;
                    run_41a00(); return;
                case 0x260f8:
                    r22 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26150;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2630c;
                        run_26200(); return;
                    }
                    r30 = r30 + r17;
                    r2 = ((r30 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2615c;
                        continue;
                    }
                    r3 = r0 + 1;
                case 0x26124:
                    r2 = (r17&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26168;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r3 + r0;
                    r6 = r16 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x26148;
                    pc=0x25a00;
                    run_25a00(); return;
                case 0x26148:
                    /* Next insn is delay slot */ 
                    pc=0x260b0;
                    continue;
                case 0x26150:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x260b0;
                    continue;
                case 0x2615c:
                    r3 = r30 - r22;
                    /* Next insn is delay slot */ 
                    pc=0x26124;
                    continue;
                case 0x26168:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x26180;
                    pc=0x25800;
                    run_25800(); return;
                case 0x26180:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = r16 + r5;
                    r6 = r2 + r0;
                    r23 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2619c;
                    pc=0x3d400;
                    run_3d400(); return;
                case 0x2619c:
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26318;
                        run_26200(); return;
                    }
                    r18 = r23 + -1;
                    r2 = r16 + r18;
                    r19 = r0 + 1;
                    r21 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r19 = r19 - r23;
                case 0x261c4:
                    r20 = r30 + r17;
                    r4 = r22 + r3;
                    r5 = r0 + r0;
                    r6 = r20 - r3;
                    /* Next insn is delay slot */ 
                    r31=0x261dc;
                    pc=0x21200;
                    run_21200(); return;
                case 0x261dc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26150;
                        continue;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26150;
                        continue;
                    }
                    r2 = ((r21 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26200;
                        run_26200(); return;
                    }
                    r3 = r23 + r0;
                case 0x26200:
                    pc=0x26200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26200() throws ExecutionException { /* 0x26200 - 0x26400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26200:
                    r2 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26264;
                        continue;
                    }
                    r2 = r22 + r3;
                    r4 = r16 + r3;
                    r2 = r2 + r30;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x262f4;
                        continue;
                    }
                    r6 = r22 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x26254;
                    continue;
                case 0x26238:
                    r4 = r16 + r3;
                    r2 = r6 + r3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x262f4;
                        continue;
                    }
                case 0x26254:
                    r3 = r3 + 1;
                    r5 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26238;
                        continue;
                    }
                case 0x26264:
                    r2 = ((r21 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26474;
                        run_26400(); return;
                    }
                    r6 = r22 + r30;
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r6 + r18;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26474;
                        run_26400(); return;
                    }
                    r3 = r18 + r0;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x262c8;
                        continue;
                    }
                case 0x2629c:
                    r2 = r3 + -1;
                    r5 = r16 + r3;
                    r4 = r6 + r2;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x262cc;
                        continue;
                    }
                    r3 = r2 + r0;
                    if(r3 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x2629c;
                        continue;
                    }
                case 0x262c8:
                    r3 = r21 + r0;
                case 0x262cc:
                    r21 = r21 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26480;
                        run_26400(); return;
                    }
                    r21 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r20 + r0;
                    r30 = r30 + r21;
                    r21 = r17 - r21;
                    /* Next insn is delay slot */ 
                    pc=0x261c4;
                    run_26000(); return;
                case 0x262f4:
                    r30 = r19 + r30;
                    r30 = r30 + r3;
                    r21 = r0 + r0;
                    r3 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x261c4;
                    run_26000(); return;
                case 0x2630c:
                    r2 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x260b0;
                    run_26000(); return;
                case 0x26318:
                    r2 = r17 - r23;
                    r4 = ((r2 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2632c;
                        continue;
                    }
                    r2 = r23 + r0;
                case 0x2632c:
                    r18 = r23 + -1;
                    r2 = r2 + 1;
                    r20 = r0 + 1;
                    r6 = r16 + r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    r19 = ((r23 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r20 = r20 - r23;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                case 0x26350:
                    r21 = r30 + r17;
                    r4 = r22 + r3;
                    r5 = r0 + r0;
                    r6 = r21 - r3;
                    /* Next insn is delay slot */ 
                    r31=0x26368;
                    pc=0x21200;
                    run_21200(); return;
                case 0x26368:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26150;
                        run_26000(); return;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26150;
                        run_26000(); return;
                    }
                    r2 = r22 + r30;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x263e0;
                        continue;
                    }
                    r2 = r22 + r23;
                    r3 = r16 + r23;
                    r2 = r2 + r30;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2644c;
                        run_26400(); return;
                    }
                    r3 = r23 + r0;
                    r2 = r22 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x263d0;
                    continue;
                case 0x263b4:
                    r6 = r16 + r3;
                    r5 = r2 + r3;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r7 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x26450;
                        run_26400(); return;
                    }
                case 0x263d0:
                    r3 = r3 + 1;
                    r5 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x263b4;
                        continue;
                    }
                case 0x263e0:
                    r4 = r0 + -1;
                    r3 = r18 + r0;
                    if(r18 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x260b0;
                        run_26000(); return;
                    }
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r2 + r18;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                case 0x26400:
                    pc=0x26400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26400() throws ExecutionException { /* 0x26400 - 0x26600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26400:
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x26438;
                        continue;
                    }
                    r6 = r0 + -1;
                case 0x26410:
                    r3 = r3 + -1;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x260b0;
                        run_26000(); return;
                    }
                    r5 = r16 + r3;
                    r4 = r2 + r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x26410;
                        continue;
                    }
                case 0x26438:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r21 + r0;
                    r30 = r30 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x26350;
                    run_26200(); return;
                case 0x2644c:
                    r3 = r23 + r0;
                case 0x26450:
                    r30 = r20 + r30;
                    r30 = r30 + r3;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26350;
                    run_26200(); return;
                case 0x26464:
                    r7 = r5 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x26094;
                    run_26000(); return;
                case 0x26474:
                    r3 = r23 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x262cc;
                    run_26200(); return;
                case 0x26480:
                    r2 = r22 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x260b0;
                    run_26000(); return;
                case 0x26600:
                    pc=0x26600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26600() throws ExecutionException { /* 0x26600 - 0x26800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26600:
                    r6 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r0 + 1;
                    r6 = r6 + 92;
                    /* Next insn is delay slot */ 
                    pc=0x26800;
                    run_26800(); return;
                case 0x26800:
                    pc=0x26800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26800() throws ExecutionException { /* 0x26800 - 0x26a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26800:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268c0;
                        continue;
                    }
                case 0x26808:
                    r10 = r4 + 1;
                    addr=r10+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r3 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26824;
                    continue;
                case 0x2681c:
                    if(r9 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x2688c;
                        continue;
                    }
                case 0x26824:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r8 = tmp;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2681c;
                        continue;
                    }
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268dc;
                        continue;
                    }
                case 0x26840:
                    r2 = r10 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r8 = tmp;
                    r3 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2685c;
                    continue;
                case 0x26854:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268a0;
                        continue;
                    }
                case 0x2685c:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    if(r7 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x26854;
                        continue;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268ac;
                        continue;
                    }
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2688c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268ec;
                        continue;
                    }
                    r4 = r10 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26808;
                    continue;
                case 0x268a0:
                    r10 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26840;
                    continue;
                case 0x268ac:
                    r2 = r0 + r0;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x268c0:
                    r4 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26808;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x268dc:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x268ec:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r10;
                    r2 = r4 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26a00:
                    pc=0x26a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26a00() throws ExecutionException { /* 0x26a00 - 0x26c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26a00:
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x26800;
                    run_26800(); return;
                case 0x26c00:
                    pc=0x26c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26c00() throws ExecutionException { /* 0x26c00 - 0x26e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26c00:
                    r29 = r29 + -8;
                    r11 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x26c1c;
                    continue;
                case 0x26c18:
                    r2 = r3 + r0;
                case 0x26c1c:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c18;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x26e18;
                        run_26e00(); return;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x26e2c;
                        run_26e00(); return;
                    }
                    r25 = r0 + r0;
                case 0x26c5c:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d9c;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26d80;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d9c;
                        continue;
                    }
                    r24 = r0 + 10;
                    r7 = r0 + 10;
                case 0x26c88:
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26da8;
                        continue;
                    }
                case 0x26c90:
                    r13 = 32768 << 16;
                case 0x26c94:
                    if(r24 != r0) {
                        /* Next insn is delay slot */ 
                        if(r24!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                        }
                        pc=0x26ca0;
                        continue;
                    }
                    if(r24!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r24 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r24 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x26ca0:
                    r12 = r0 + r0;
                    r2 = r0 + r0;
                    r15 = r0 + 1;
                    r14 = r0 + -1;
                    r16 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x26d08;
                    continue;
                case 0x26cc0:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d48;
                        continue;
                    }
                case 0x26cd0:
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x26cfc;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26dc4;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x26db8;
                        continue;
                    }
                case 0x26cec:
                    { long hilo = (long)(r2) * ((long)r24); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r12 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x26cfc:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x26d08:
                    r9 = r11 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r10 = r9 & 4;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26cc0;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d48;
                        continue;
                    }
                    if(r9 == r15) {
                        /* Next insn is delay slot */ 
                        pc=0x26dd0;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x26d3c:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26cd0;
                        continue;
                    }
                case 0x26d48:
                    r7 = r0 + -1;
                    if(r12 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x26de0;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e0c;
                        run_26e00(); return;
                    }
                case 0x26d5c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d70;
                        continue;
                    }
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e00;
                        run_26e00(); return;
                    }
                case 0x26d6c:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                case 0x26d70:
                    r16 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26d80:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26e4c;
                        run_26e00(); return;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e64;
                        run_26e00(); return;
                    }
                case 0x26d9c:
                    r24 = r7 + r0;
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26c90;
                        continue;
                    }
                case 0x26da8:
                    r13 = 32767 << 16;
                    r13 = r13 | 65535;
                    /* Next insn is delay slot */ 
                    pc=0x26c94;
                    continue;
                case 0x26db8:
                    r9 = r16 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26cec;
                        continue;
                    }
                case 0x26dc4:
                    r12 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x26cfc;
                    continue;
                case 0x26dd0:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x26d3c;
                    continue;
                case 0x26de0:
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e40;
                        run_26e00(); return;
                    }
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                case 0x26df0:
                    r5 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d70;
                        continue;
                    }
                case 0x26e00:
                    pc=0x26e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26e00() throws ExecutionException { /* 0x26e00 - 0x27000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26e00:
                    r5 = r3 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x26d6c;
                    run_26c00(); return;
                case 0x26e0c:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x26d5c;
                    run_26c00(); return;
                case 0x26e18:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x26c5c;
                    run_26c00(); return;
                case 0x26e2c:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26c5c;
                    run_26c00(); return;
                case 0x26e40:
                    r2 = 32768 << 16;
                    /* Next insn is delay slot */ 
                    pc=0x26df0;
                    run_26c00(); return;
                case 0x26e4c:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 16;
                    r3 = r3 + 2;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x26c88;
                    run_26c00(); return;
                case 0x26e64:
                    r24 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x26c88;
                    run_26c00(); return;
                case 0x27000:
                    pc=0x27000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27000() throws ExecutionException { /* 0x27000 - 0x27200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27200:
                    pc=0x27200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27200() throws ExecutionException { /* 0x27200 - 0x27400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r29 + 16;
                    r6 = r0 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x27224;
                    pc=0x2a8b0;
                    run_2a800(); return;
                case 0x27224:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27250;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2723c;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x2723c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27250:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2723c;
                    continue;
                case 0x27400:
                    pc=0x27400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27400() throws ExecutionException { /* 0x27400 - 0x27600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27400:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27600:
                    pc=0x27600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27600() throws ExecutionException { /* 0x27600 - 0x27800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27600:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27800:
                    pc=0x27800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27800() throws ExecutionException { /* 0x27800 - 0x27a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27800:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27a00:
                    pc=0x27a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27a00() throws ExecutionException { /* 0x27a00 - 0x27c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27a00:
                    r29 = r29 + -1328;
                    writePages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff] = r31;
                    writePages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff] = r22;
                    writePages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff] = r21;
                    r22 = r5 + r0;
                    r21 = r4 + r0;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r6;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r7;
                    writePages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff] = r30;
                    writePages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff] = r23;
                    writePages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff] = r20;
                    writePages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff] = r19;
                    writePages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff] = r18;
                    writePages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff] = r17;
                    writePages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x27a44;
                    pc=0x3ce00;
                    run_3ce00(); return;
                case 0x27a44:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x27a5c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x27a5c:
                    writePages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff] = r2;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27a78;
                        continue;
                    }
                    r2 = readPages[(r21+56)>>>12][((r21+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dec;
                        run_27c00(); return;
                    }
                case 0x27a78:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27aac;
                        continue;
                    }
                    r4 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x27aac:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c58;
                        run_27c00(); return;
                    }
                    r4 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c58;
                        run_27c00(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x27c88;
                        run_27c00(); return;
                    }
                case 0x27ad8:
                    r3 = r29 + 40;
                    r2 = 5 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r3;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r0;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = r0;
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = r0;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r0;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r0;
                    r8 = r3 + r0;
                    r19 = r2 + 18712;
                case 0x27b0c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x282a4;
                        run_28200(); return;
                    }
                case 0x27b24:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27b44;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27bb0;
                    continue;
                case 0x27b3c:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x27b58;
                        continue;
                    }
                case 0x27b44:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b3c;
                        continue;
                    }
                case 0x27b58:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27bb0;
                        continue;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d80;
                        run_27c00(); return;
                    }
                    r8 = r8 + 8;
                case 0x27ba0:
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r3;
                case 0x27bb0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27da8;
                        run_27c00(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x27be0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x27be8:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28810;
                        run_28800(); return;
                    }
                    r4 = 5 << 16;
                    r2 = r2 << 2;
                case 0x27c00:
                    pc=0x27c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27c00() throws ExecutionException { /* 0x27c00 - 0x27e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27c00:
                    r4 = r4 + 18340;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x27c18:
                    r17 = r17 | 16;
                case 0x27c1c:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x27c28:
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28800;
                        run_28800(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                case 0x27c48:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x27c58:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27c68;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x27c68:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d48;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x27ad8;
                        run_27a00(); return;
                    }
                case 0x27c88:
                    addr=r22+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ad8;
                        run_27a00(); return;
                    }
                    addr=r29+1078;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r22+28)>>>12][((r22+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+36)>>>12][((r22+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r22+100)>>>12][((r22+100)>>>2)&0x3ff];
                    r2 = r29 + 40;
                    r6 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    r7 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r2;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1064;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r2;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r2;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x27cf4;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x27cf4:
                    r16 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d18;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    r31=0x27d10;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x27d10:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29d78;
                        run_29c00(); return;
                    }
                case 0x27d18:
                    addr=r29+1076;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d3c;
                        continue;
                    }
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x27d3c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27d4c;
                    continue;
                case 0x27d48:
                    r2 = r0 + -1;
                case 0x27d4c:
                    r31 = readPages[(r29+1324)>>>12][((r29+1324)>>>2)&0x3ff];
                    r30 = readPages[(r29+1320)>>>12][((r29+1320)>>>2)&0x3ff];
                    r23 = readPages[(r29+1316)>>>12][((r29+1316)>>>2)&0x3ff];
                    r22 = readPages[(r29+1312)>>>12][((r29+1312)>>>2)&0x3ff];
                    r21 = readPages[(r29+1308)>>>12][((r29+1308)>>>2)&0x3ff];
                    r20 = readPages[(r29+1304)>>>12][((r29+1304)>>>2)&0x3ff];
                    r19 = readPages[(r29+1300)>>>12][((r29+1300)>>>2)&0x3ff];
                    r18 = readPages[(r29+1296)>>>12][((r29+1296)>>>2)&0x3ff];
                    r17 = readPages[(r29+1292)>>>12][((r29+1292)>>>2)&0x3ff];
                    r16 = readPages[(r29+1288)>>>12][((r29+1288)>>>2)&0x3ff];
                    r29 = r29 + 1328;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27d80:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x27d94;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x27d94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        continue;
                    }
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x27ba0;
                    run_27a00(); return;
                case 0x27da8:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x27dcc;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x27dcc:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d48;
                        continue;
                    }
                    r2 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x27d4c;
                    continue;
                case 0x27dec:
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x27df8;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x27df8:
                    /* Next insn is delay slot */ 
                    pc=0x27a78;
                    run_27a00(); return;
                case 0x27e00:
                    pc=0x27e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27e00() throws ExecutionException { /* 0x27e00 - 0x28000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27e00:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x27e10:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x298a4;
                        run_29800(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29784;
                        run_29600(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x27e50;
                    pc=0x21200;
                    run_21200(); return;
                case 0x27e50:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29a38;
                        run_29a00(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2967c;
                        run_29600(); return;
                    }
                case 0x27e70:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x297a0;
                        run_29600(); return;
                    }
                case 0x27e80:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                case 0x27e94:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27eac;
                        continue;
                    }
                case 0x27e9c:
                    r2 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                case 0x27eac:
                    r4 = r17 & 2;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ecc;
                        continue;
                    }
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                case 0x27ecc:
                    r2 = r17 & 132;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28864;
                        run_28800(); return;
                    }
                    r4 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28864;
                        run_28800(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x297ac;
                        run_29600(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x27f2c;
                    continue;
                case 0x27f18:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f88;
                        continue;
                    }
                case 0x27f2c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f18;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x27f64;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x27f64:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f2c;
                        continue;
                    }
                case 0x27f88:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28ee4;
                        run_28e00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x27fb8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ff4;
                        continue;
                    }
                    r3 = r29 + 1206;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d60;
                        run_28c00(); return;
                    }
                    r8 = r8 + 8;
                case 0x27ff4:
                    r3 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28038;
                        run_28000(); return;
                    }
                case 0x28000:
                    pc=0x28000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28000() throws ExecutionException { /* 0x28000 - 0x28200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28000:
                    r3 = r29 + 1204;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d34;
                        run_28c00(); return;
                    }
                    r8 = r8 + 8;
                case 0x28038:
                    r4 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28bcc;
                        run_28a00(); return;
                    }
                case 0x28048:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28118;
                        continue;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2950c;
                        run_29400(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 18696;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x28094;
                    continue;
                case 0x28080:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x280f0;
                        continue;
                    }
                case 0x28094:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28080;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x280cc;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x280cc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28094;
                        continue;
                    }
                case 0x280f0:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28d08;
                        run_28c00(); return;
                    }
                    r8 = r8 + 8;
                case 0x28118:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a64;
                        run_28a00(); return;
                    }
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28968;
                        run_28800(); return;
                    }
                case 0x28150:
                    r8 = r8 + 8;
                case 0x28154:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28250;
                        run_28200(); return;
                    }
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28250;
                        run_28200(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x298e8;
                        run_29800(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x281ac;
                    continue;
                case 0x28198:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28208;
                        run_28200(); return;
                    }
                case 0x281ac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r6 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28198;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x281e4;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x281e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x28200:
                    pc=0x28200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28200() throws ExecutionException { /* 0x28200 - 0x28400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28200:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x281ac;
                        run_28000(); return;
                    }
                case 0x28208:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28250;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28244;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28244:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                case 0x28250:
                    r3 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r5 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2826c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x2826c:
                    r4 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28994;
                        run_28800(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                case 0x2828c:
                    r3 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b24;
                        run_27a00(); return;
                    }
                case 0x282a4:
                    r16 = readPages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x27bb0;
                    run_27a00(); return;
                case 0x282b0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c1c;
                        run_27c00(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x282c8:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x282d8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x29cfc;
                        run_29c00(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2832c;
                        continue;
                    }
                case 0x282fc:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x282fc;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x296d8;
                        run_29600(); return;
                    }
                case 0x2832c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be8;
                    run_27a00(); return;
                case 0x28338:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2878c;
                        run_28600(); return;
                    }
                case 0x28350:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x2836c:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2837c;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x2837c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x289c0;
                        run_28800(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x289c0;
                        run_28800(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28db4;
                        run_28c00(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28db4;
                        run_28c00(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r16 = r29 + 1103;
                case 0x283b4:
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x283cc;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x283cc:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e94;
                    run_27e00(); return;
                case 0x283dc:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x287d0;
                        run_28600(); return;
                    }
                case 0x283f4:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x28400:
                    pc=0x28400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28400() throws ExecutionException { /* 0x28400 - 0x28600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28400:
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x28418:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x28420:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28420;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27be8;
                    run_27a00(); return;
                case 0x28450:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x286bc;
                        run_28600(); return;
                    }
                case 0x28468:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x2847c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29234;
                        run_29200(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x28494:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x284a4:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x284b4:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + 14952;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x28508:
                    r2 = r17 & 8;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29468;
                        run_29400(); return;
                    }
                    r4 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x2852c:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    writePages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x28564;
                    pc=0x40000;
                    run_40000(); return;
                case 0x28564:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x29250;
                        run_29200(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x29944;
                        run_29800(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x2859c:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x296c8;
                        run_29600(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 18316;
                case 0x285b0:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e94;
                    run_27e00(); return;
                case 0x285d8:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x285e8:
                    r2 = 5 << 16;
                    r2 = r2 + 14932;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                case 0x28600:
                    pc=0x28600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28600() throws ExecutionException { /* 0x28600 - 0x28800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28600:
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28704;
                        continue;
                    }
                case 0x2860c:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x28620:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28dc4;
                        run_28c00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28dc4;
                        run_28c00(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+1204;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1205;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x28658:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                case 0x28678:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=0x27eac;
                    run_27e00(); return;
                case 0x286a0:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28468;
                        run_28400(); return;
                    }
                case 0x286bc:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2949c;
                        run_29400(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2847c;
                    run_28400(); return;
                case 0x286e0:
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + 14952;
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2860c;
                        continue;
                    }
                case 0x28704:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29454;
                        run_29400(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x28620;
                    continue;
                case 0x28728:
                    r2 = r17 & 16;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28834;
                        run_28800(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28834;
                        run_28800(); return;
                    }
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x27b0c;
                    run_27a00(); return;
                case 0x28778:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28350;
                        run_28200(); return;
                    }
                case 0x2878c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2947c;
                        run_29400(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x287bc:
                    r2 = r17 & 16;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x283f4;
                        run_28200(); return;
                    }
                case 0x287d0:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x294b0;
                        run_29400(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x28800:
                    pc=0x28800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28800() throws ExecutionException { /* 0x28800 - 0x28a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28800:
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x28810:
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r7;
                    writePages[(r29+1336)>>>12][((r29+1336)>>>2)&0x3ff] = r3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27da8;
                        run_27c00(); return;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x28678;
                    run_28600(); return;
                case 0x28834:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x27b0c;
                    run_27a00(); return;
                case 0x28864:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x27fb8;
                    run_27e00(); return;
                case 0x28870:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28cb0;
                        run_28c00(); return;
                    }
                case 0x28894:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2918c;
                        run_29000(); return;
                    }
                    r8 = r8 + 8;
                case 0x288b4:
                    r4 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r5 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x291bc;
                        run_29000(); return;
                    }
                    r8 = r8 + 8;
                case 0x288e4:
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x28f14;
                        run_28e00(); return;
                    }
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x28920:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28cd8;
                        run_28c00(); return;
                    }
                case 0x28938:
                    r8 = r8 + 8;
                case 0x2893c:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r29 + 1188;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x28950:
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28150;
                        run_28000(); return;
                    }
                case 0x28968:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2897c;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x2897c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28154;
                    run_28000(); return;
                case 0x28994:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x289a8;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x289a8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r0;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2828c;
                    run_28200(); return;
                case 0x289c0:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x28d8c;
                        run_28c00(); return;
                    }
                    r6 = r29 + 1104;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x28a14;
                        run_28a00(); return;
                    }
                    r5 = readPages[(r29+1264)>>>12][((r29+1264)>>>2)&0x3ff];
                case 0x289e4:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x289e4;
                        continue;
                    }
                case 0x28a00:
                    pc=0x28a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28a00() throws ExecutionException { /* 0x28a00 - 0x28c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28a00:
                case 0x28a04:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x283b4;
                    run_28200(); return;
                case 0x28a14:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a14;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a04;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28a04;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x283b4;
                    run_28200(); return;
                case 0x28a64:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28870;
                        run_28800(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x28dd8;
                        run_28c00(); return;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 15064;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29520;
                        run_29400(); return;
                    }
                    r8 = r8 + 8;
                case 0x28acc:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28af0;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28154;
                        run_28000(); return;
                    }
                case 0x28af0:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29718;
                        run_29600(); return;
                    }
                    r8 = r8 + 8;
                case 0x28b2c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28154;
                        run_28000(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28fb0;
                        run_28e00(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 18696;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x28b78;
                    continue;
                case 0x28b64:
                    r8 = r8 + 8;
                case 0x28b68:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28fbc;
                        run_28e00(); return;
                    }
                case 0x28b78:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28b64;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28bb0;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28bb0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28b68;
                    continue;
                case 0x28bcc:
                    r3 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r4 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28048;
                        run_28000(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x299b8;
                        run_29800(); return;
                    }
                    r4 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 18696;
                    r7 = r0 + 16;
                case 0x28c00:
                    pc=0x28c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28c00() throws ExecutionException { /* 0x28c00 - 0x28e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28c00:
                    /* Next insn is delay slot */ 
                    pc=0x28c1c;
                    continue;
                case 0x28c08:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28c80;
                        continue;
                    }
                case 0x28c1c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28c08;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x28c58;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28c58:
                    r7 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28c1c;
                        continue;
                    }
                case 0x28c80:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29208;
                        run_29200(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x28048;
                    run_28000(); return;
                case 0x28cb0:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28894;
                        run_28800(); return;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28938;
                        run_28800(); return;
                    }
                case 0x28cd8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28cec;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28cec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x2893c;
                    run_28800(); return;
                case 0x28d08:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28d1c;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28d1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28118;
                    run_28000(); return;
                case 0x28d34:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28d48;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28d48:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28038;
                    run_28000(); return;
                case 0x28d60:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28d74;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28d74:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x27ff4;
                    run_27e00(); return;
                case 0x28d8c:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28fd0;
                        run_28e00(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+1103;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r4;
                    r16 = r29 + 1103;
                    /* Next insn is delay slot */ 
                    pc=0x283b4;
                    run_28200(); return;
                case 0x28db4:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r0;
                    r16 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=0x283b4;
                    run_28200(); return;
                case 0x28dc4:
                    r4 = r0 + 2;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x28dd8:
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2954c;
                        run_29400(); return;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28e08;
                        run_28e00(); return;
                    }
                case 0x28e00:
                    pc=0x28e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28e00() throws ExecutionException { /* 0x28e00 - 0x29000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28e00:
                    r20 = r4 + r0;
                case 0x28e08:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28e3c;
                        continue;
                    }
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x297cc;
                        run_29600(); return;
                    }
                    r8 = r8 + 8;
                case 0x28e3c:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x297c0;
                        run_29600(); return;
                    }
                case 0x28e44:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29038;
                        run_29000(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x294d0;
                        run_29400(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 18696;
                    r30 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x28e90;
                    continue;
                case 0x28e7c:
                    r8 = r8 + 8;
                case 0x28e80:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x294dc;
                        run_29400(); return;
                    }
                case 0x28e90:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28e7c;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28ec8;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28ec8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28e80;
                    continue;
                case 0x28ee4:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28ef8;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28ef8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x27fb8;
                    run_27e00(); return;
                case 0x28f14:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2893c;
                        run_28800(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x291ec;
                        run_29000(); return;
                    }
                    r4 = 5 << 16;
                    r23 = r4 + 18696;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x28f5c;
                    continue;
                case 0x28f48:
                    r8 = r8 + 8;
                case 0x28f4c:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x291f4;
                        run_29000(); return;
                    }
                case 0x28f5c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28f48;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x28f94;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x28f94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28f4c;
                    continue;
                case 0x28fb0:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 18696;
                case 0x28fbc:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x28950;
                    run_28800(); return;
                case 0x28fd0:
                    r6 = r29 + 1104;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x28fdc:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x28fe8;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x28fe8:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28fdc;
                        continue;
                    }
                case 0x29000:
                    pc=0x29000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29000() throws ExecutionException { /* 0x29000 - 0x29200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29000:
                    r6 = r6 - r16;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x283b4;
                    run_28200(); return;
                case 0x29014:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x29028;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x29028:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x29038:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29064;
                        continue;
                    }
                    r4 = r17 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29098;
                        continue;
                    }
                case 0x29064:
                    r4 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r5 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x297f8;
                        run_29600(); return;
                    }
                    r8 = r8 + 8;
                case 0x29098:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x290b8;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x290b8:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x290ec;
                        continue;
                    }
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2986c;
                        run_29800(); return;
                    }
                    r8 = r8 + 8;
                case 0x290ec:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29860;
                        run_29800(); return;
                    }
                case 0x290f4:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28154;
                        run_28000(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28fb0;
                        run_28e00(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 18696;
                    r18 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x29138;
                    continue;
                case 0x29124:
                    r8 = r8 + 8;
                case 0x29128:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28fbc;
                        run_28e00(); return;
                    }
                case 0x29138:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29124;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x29170;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x29170:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x29128;
                    continue;
                case 0x2918c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x291a0;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x291a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x288b4;
                    run_28800(); return;
                case 0x291bc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x291d0;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x291d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x288e4;
                    run_28800(); return;
                case 0x291ec:
                    r5 = 5 << 16;
                    r23 = r5 + 18696;
                case 0x291f4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                case 0x29200:
                    pc=0x29200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29200() throws ExecutionException { /* 0x29200 - 0x29400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29200:
                    /* Next insn is delay slot */ 
                    pc=0x28920;
                    run_28800(); return;
                case 0x29208:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2921c;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x2921c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28048;
                    run_28000(); return;
                case 0x29234:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x29250:
                    f12 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x29264;
                    pc=0x40000;
                    run_40000(); return;
                case 0x29264:
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29688;
                        run_29600(); return;
                    }
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29bf4;
                        run_29a00(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29b14;
                        run_29a00(); return;
                    }
                case 0x29290:
                    r2 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29b68;
                        run_29a00(); return;
                    }
                    f0 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = f0;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = f1;
                case 0x292b8:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29968;
                        run_29800(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29968;
                        run_29800(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29b5c;
                        run_29a00(); return;
                    }
                    r5 = r30 + r0;
                case 0x292e0:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff] = r5;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x29320;
                    pc=0x39200;
                    run_39200(); return;
                case 0x29320:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+1280)>>>12][((r29+1280)>>>2)&0x3ff];
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29344;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29350;
                        continue;
                    }
                case 0x29344:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29c00;
                        run_29c00(); return;
                    }
                case 0x29350:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x299d8;
                        run_29800(); return;
                    }
                case 0x29360:
                    f0 = r0;
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x299cc;
                        run_29800(); return;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x293bc;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x2939c:
                    r3 = r2 + 1;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2939c;
                        continue;
                    }
                case 0x293bc:
                    r2 = r2 - r16;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29918;
                        run_29800(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29da0;
                        run_29c00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29c0c;
                        run_29c00(); return;
                    }
                case 0x293f0:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                case 0x29400:
                    pc=0x29400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29400() throws ExecutionException { /* 0x29400 - 0x29600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29400:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29b90;
                        run_29a00(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29bc8;
                        run_29a00(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29dbc;
                        run_29c00(); return;
                    }
                case 0x29420:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                case 0x2942c:
                    r5 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x298f8;
                        run_29800(); return;
                    }
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e94;
                    run_27e00(); return;
                case 0x29454:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x28620;
                    run_28600(); return;
                case 0x29468:
                    r2 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x2852c;
                    run_28400(); return;
                case 0x2947c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x2949c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2847c;
                    run_28400(); return;
                case 0x294b0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2836c;
                    run_28200(); return;
                case 0x294d0:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 18696;
                case 0x294dc:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29014;
                        run_29000(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x29038;
                    run_29000(); return;
                case 0x2950c:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r4 + 18696;
                    /* Next insn is delay slot */ 
                    pc=0x280f0;
                    run_28000(); return;
                case 0x29520:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x29534;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x29534:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28acc;
                    run_28a00(); return;
                case 0x2954c:
                    r4 = 5 << 16;
                    r4 = r4 + 15064;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x296e8;
                        run_29600(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x29588:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x295ac;
                        continue;
                    }
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x295ac;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28154;
                        run_28000(); return;
                    }
                case 0x295ac:
                    r3 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1256)>>>12][((r29+1256)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29b28;
                        run_29a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x295e8:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2976c;
                        run_29600(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29828;
                        run_29800(); return;
                    }
                case 0x29600:
                    pc=0x29600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29600() throws ExecutionException { /* 0x29600 - 0x29800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29600:
                    r5 = 5 << 16;
                    r23 = r5 + 18696;
                    r20 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x29628;
                    continue;
                case 0x29614:
                    r8 = r8 + 8;
                case 0x29618:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29830;
                        run_29800(); return;
                    }
                case 0x29628:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29614;
                        continue;
                    }
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x29660;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x29660:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x29618;
                    continue;
                case 0x2967c:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x27e70;
                    run_27e00(); return;
                case 0x29688:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29958;
                        run_29800(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 18324;
                case 0x2969c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e94;
                    run_27e00(); return;
                case 0x296c8:
                    r16 = 5 << 16;
                    r16 = r16 + 18320;
                    /* Next insn is delay slot */ 
                    pc=0x285b0;
                    run_28400(); return;
                case 0x296d8:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be8;
                    run_27a00(); return;
                case 0x296e8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x296fc;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x296fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x29588;
                    run_29400(); return;
                case 0x29718:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2972c;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x2972c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28b2c;
                    run_28a00(); return;
                case 0x29744:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x29758;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x29758:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                case 0x2976c:
                    r4 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x28950;
                    run_28800(); return;
                case 0x29784:
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x29790;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x29790:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e80;
                        run_27e00(); return;
                    }
                case 0x297a0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e80;
                    run_27e00(); return;
                case 0x297ac:
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x27f88;
                    run_27e00(); return;
                case 0x297c0:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x28e44;
                    run_28e00(); return;
                case 0x297cc:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x297e0;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x297e0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x28e3c;
                    run_28e00(); return;
                case 0x297f8:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                case 0x29800:
                    pc=0x29800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29800() throws ExecutionException { /* 0x29800 - 0x29a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29800:
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x2980c;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x2980c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x29098;
                    run_29000(); return;
                case 0x29828:
                    r4 = 5 << 16;
                    r23 = r4 + 18696;
                case 0x29830:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r2;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29744;
                        run_29600(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x2976c;
                    run_29600(); return;
                case 0x29860:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x290f4;
                    run_29000(); return;
                case 0x2986c:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x29880;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x29880:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r3 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r5 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x290ec;
                    run_29000(); return;
                case 0x298a4:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x298b8;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x298b8:
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29cf0;
                        run_29c00(); return;
                    }
                case 0x298c4:
                    r16 = 5 << 16;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    r16 = r16 + 18332;
                    /* Next insn is delay slot */ 
                    pc=0x27eac;
                    run_27e00(); return;
                case 0x298e8:
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x28208;
                    run_28200(); return;
                case 0x298f8:
                    r3 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e9c;
                    run_27e00(); return;
                case 0x29918:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29a58;
                        run_29a00(); return;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29a58;
                        run_29a00(); return;
                    }
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x293f0;
                    run_29200(); return;
                case 0x29944:
                    r2 = r0 + 45;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x2859c;
                    run_28400(); return;
                case 0x29958:
                    r16 = 5 << 16;
                    r16 = r16 + 18328;
                    /* Next insn is delay slot */ 
                    pc=0x2969c;
                    run_29600(); return;
                case 0x29968:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1200;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 1196;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    r2 = r29 + 1180;
                    r6 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    writePages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x299a4;
                    pc=0x39200;
                    run_39200(); return;
                case 0x299a4:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+1284)>>>12][((r29+1284)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x29350;
                    run_29200(); return;
                case 0x299b8:
                    r5 = 5 << 16;
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r23 = r5 + 18696;
                    /* Next insn is delay slot */ 
                    pc=0x28c80;
                    run_28c00(); return;
                case 0x299cc:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x293bc;
                    run_29200(); return;
                case 0x299d8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x299fc;
                        continue;
                    }
                case 0x299e8:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x29360;
                    run_29200(); return;
                case 0x299fc:
                    f0 = r0;
                case 0x29a00:
                    pc=0x29a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29a00() throws ExecutionException { /* 0x29a00 - 0x29c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29a00:
                    f2 = readPages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x299e8;
                        run_29800(); return;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x29360;
                    run_29200(); return;
                case 0x29a38:
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r30;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    addr=r29+1206;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x27e94;
                    run_27e00(); return;
                case 0x29a58:
                    r18 = r18 + -2;
                case 0x29a5c:
                    r2 = r2 + -1;
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r2;
                    addr=r29+1188;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29d3c;
                        run_29c00(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x29a78:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29c38;
                        run_29c00(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+1191;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1190;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 1192;
                    r4 = r29 + 1188;
                case 0x29a9c:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ae8;
                        continue;
                    }
                case 0x29ac0:
                    r3 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29b04;
                        continue;
                    }
                case 0x29adc:
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2942c;
                    run_29400(); return;
                case 0x29ae8:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ac0;
                        continue;
                    }
                    r2 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29adc;
                        continue;
                    }
                case 0x29b04:
                    r2 = r0 + r0;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x2942c;
                    run_29400(); return;
                case 0x29b14:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29290;
                        run_29200(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x29290;
                    run_29200(); return;
                case 0x29b28:
                    r4 = r21 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 1168;
                    /* Next insn is delay slot */ 
                    r31=0x29b3c;
                    pc=0x46c00;
                    run_46c00(); return;
                case 0x29b3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27dcc;
                        run_27c00(); return;
                    }
                    r18 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    r2 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r3 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r8 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x295e8;
                    run_29400(); return;
                case 0x29b5c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x292e0;
                    run_29200(); return;
                case 0x29b68:
                    r3 = readPages[(r29+1248)>>>12][((r29+1248)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+1252)>>>12][((r29+1252)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+1272)>>>12][((r29+1272)>>>2)&0x3ff] = r2;
                    writePages[(r29+1276)>>>12][((r29+1276)>>>2)&0x3ff] = r4;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x292b8;
                    run_29200(); return;
                case 0x29b90:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29d2c;
                        run_29c00(); return;
                    }
                    r2 = r0 + 1;
                case 0x29ba4:
                    r3 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29be4;
                        continue;
                    }
                case 0x29bbc:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x2942c;
                    run_29400(); return;
                case 0x29bc8:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29bbc;
                        continue;
                    }
                case 0x29be4:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x2942c;
                    run_29400(); return;
                case 0x29bf4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x29290;
                    run_29200(); return;
                case 0x29c00:
                    pc=0x29c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29c00() throws ExecutionException { /* 0x29c00 - 0x29e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29c00:
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x293bc;
                    run_29200(); return;
                case 0x29c0c:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29d50;
                        continue;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ccc;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ccc;
                        continue;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2942c;
                    run_29400(); return;
                case 0x29c38:
                    r6 = r29 + 1187;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x29c44:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x29c50;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x29c50:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29c44;
                        continue;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29dac;
                        continue;
                    }
                    r2 = r29 + 1190;
                    /* Next insn is delay slot */ 
                    pc=0x29ca0;
                    continue;
                case 0x29c9c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x29ca0:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x29c9c;
                        continue;
                    }
                    r4 = r29 + 1188;
                    r2 = r4 - r3;
                    r3 = r29 + 1190;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x29a9c;
                    run_29a00(); return;
                case 0x29ccc:
                    r3 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2942c;
                        run_29400(); return;
                    }
                case 0x29ce4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2942c;
                    run_29400(); return;
                case 0x29cf0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x298c4;
                    run_29800(); return;
                case 0x29cfc:
                    r3 = readPages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28800;
                        run_28800(); return;
                    }
                    writePages[(r29+1340)>>>12][((r29+1340)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27be0;
                    run_27a00(); return;
                case 0x29d2c:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x29ba4;
                    run_29a00(); return;
                case 0x29d3c:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+1189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x29a78;
                    run_29a00(); return;
                case 0x29d50:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29d84;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29d84;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2942c;
                    run_29400(); return;
                case 0x29d78:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x27d18;
                    run_27c00(); return;
                case 0x29d84:
                    r30 = r30 + 2;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2942c;
                        run_29400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x29ce4;
                    continue;
                case 0x29da0:
                    r2 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x29a5c;
                    run_29a00(); return;
                case 0x29dac:
                    r2 = r29 + 1190;
                    r4 = r29 + 1188;
                    /* Next insn is delay slot */ 
                    pc=0x29a9c;
                    run_29a00(); return;
                case 0x29dbc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x29420;
                    run_29400(); return;
                case 0x29e00:
                    pc=0x29e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29e00() throws ExecutionException { /* 0x29e00 - 0x2a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x2a000:
                    pc=0x2a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a000() throws ExecutionException { /* 0x2a000 - 0x2a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a038;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a1e4;
                        continue;
                    }
                case 0x2a038:
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 65535;
                    r4 = r3 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a1b8;
                        continue;
                    }
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a1b8;
                        continue;
                    }
                case 0x2a06c:
                    r3 = r3 & 8192;
                    r18 = r18 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0f4;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a124;
                        continue;
                    }
                case 0x2a094:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2a168;
                        continue;
                    }
                case 0x2a0c0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a18c;
                        continue;
                    }
                case 0x2a0d4:
                    r2 = r18 + r0;
                case 0x2a0d8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a0f4:
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r3 - r4;
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a094;
                        continue;
                    }
                case 0x2a124:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a134;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x2a134:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a180;
                        continue;
                    }
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0c0;
                        continue;
                    }
                case 0x2a168:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a178;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x2a178:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0d4;
                        continue;
                    }
                case 0x2a180:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2a0d8;
                    continue;
                case 0x2a18c:
                    r2 = r0 + 10;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0d4;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a1a8;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x2a1a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2a180;
                    continue;
                case 0x2a1b8:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a1c8;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2a1c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a180;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = r2 & 65535;
                    /* Next insn is delay slot */ 
                    pc=0x2a06c;
                    continue;
                case 0x2a1e4:
                    /* Next insn is delay slot */ 
                    r31=0x2a1ec;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x2a1ec:
                    /* Next insn is delay slot */ 
                    pc=0x2a038;
                    continue;
                case 0x2a200:
                    pc=0x2a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a200() throws ExecutionException { /* 0x2a200 - 0x2a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x2a400:
                    pc=0x2a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a400() throws ExecutionException { /* 0x2a400 - 0x2a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a434;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a544;
                        continue;
                    }
                case 0x2a434:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                    r2 = r6 & 65535;
                    r3 = r2 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a4a4;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a4d4;
                        continue;
                    }
                case 0x2a45c:
                    r4 = r2 & 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a504;
                        continue;
                    }
                    r2 = r2 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a554;
                        continue;
                    }
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                case 0x2a480:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a51c;
                        continue;
                    }
                case 0x2a488:
                    r2 = r0 + r0;
                case 0x2a48c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a4a4:
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a5b0;
                        continue;
                    }
                    r2 = r2 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a564;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x2a4c0:
                    r2 = r6 | 8;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 65535;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a45c;
                        continue;
                    }
                case 0x2a4d4:
                    r5 = r2 & 640;
                    r4 = r0 + 512;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2a45c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a4f4;
                    pc=0x20200;
                    run_20200(); return;
                case 0x2a4f4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2a45c;
                    continue;
                case 0x2a504:
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r0 - r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a488;
                        continue;
                    }
                case 0x2a51c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + r0;
                    r4 = r3 & 128;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a48c;
                        continue;
                    }
                    r3 = r3 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2a48c;
                    continue;
                case 0x2a544:
                    /* Next insn is delay slot */ 
                    r31=0x2a54c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x2a54c:
                    /* Next insn is delay slot */ 
                    pc=0x2a434;
                    continue;
                case 0x2a554:
                    r2 = r0 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2a480;
                    continue;
                case 0x2a564:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a594;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2a590;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2a58c;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x2a58c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                case 0x2a590:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2a594:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r0 + -37;
                    r6 = r6 & r2;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x2a4c0;
                    continue;
                case 0x2a5b0:
                    r2 = r0 + 9;
                    r6 = r6 | 64;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r6&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2a48c;
                    continue;
                case 0x2a600:
                    pc=0x2a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a600() throws ExecutionException { /* 0x2a600 - 0x2a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a600:
                    r2 = r0 + 1;
                    pc = 0x2a604;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a608;
                        return;
                    }
                case 0x2a608:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a610:
                    r2 = r0 + 2;
                    pc = 0x2a614;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a618;
                        return;
                    }
                case 0x2a618:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a620:
                    r2 = r0 + 3;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a634;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a638;
                        return;
                    }
                case 0x2a638:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a650;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a650:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a660:
                    r2 = r0 + 4;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a674;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a678;
                        return;
                    }
                case 0x2a678:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a690;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a690:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a6a0:
                    r2 = r0 + 5;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a6b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a6b8;
                        return;
                    }
                case 0x2a6b8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a6d0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a6e0:
                    r2 = r0 + 6;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a6f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a6f8;
                        return;
                    }
                case 0x2a6f8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a710;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a710:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a720:
                    r2 = r0 + 7;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a734;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a738;
                        return;
                    }
                case 0x2a738:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a750;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a750:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a760:
                    r2 = r0 + 8;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a774;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a778;
                        return;
                    }
                case 0x2a778:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a790;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a790:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a7a0:
                    r2 = r0 + 10;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a7b4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a7b8;
                        return;
                    }
                case 0x2a7b8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a7d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a7d0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a7e0:
                    r2 = r0 + 11;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a7f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a7f8;
                        return;
                    }
                case 0x2a7f8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                case 0x2a800:
                    pc=0x2a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a800() throws ExecutionException { /* 0x2a800 - 0x2aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a800:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a810;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a810:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a820:
                    r2 = r0 + 12;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a834;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a838;
                        return;
                    }
                case 0x2a838:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a850;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a850:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a860:
                    r2 = r0 + 13;
                    pc = 0x2a864;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a868;
                        return;
                    }
                case 0x2a868:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a870:
                    r2 = r0 + 14;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a884;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a888;
                        return;
                    }
                case 0x2a888:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a8a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a8a0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a8b0:
                    r2 = r0 + 15;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a8c4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a8c8;
                        return;
                    }
                case 0x2a8c8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a8e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a8e0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a8f0:
                    r2 = r0 + 16;
                    pc = 0x2a8f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a8f8;
                        return;
                    }
                case 0x2a8f8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a900:
                    r2 = r0 + 17;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a914;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a918;
                        return;
                    }
                case 0x2a918:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a930;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a930:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a940:
                    r2 = r0 + 18;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a954;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a958;
                        return;
                    }
                case 0x2a958:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a970;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a970:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a980:
                    r2 = r0 + 19;
                    pc = 0x2a984;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a988;
                        return;
                    }
                case 0x2a988:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a990:
                    r2 = r0 + 20;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a9a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a9a8;
                        return;
                    }
                case 0x2a9a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a9c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a9c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2a9d0:
                    r2 = r0 + 21;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2a9e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2a9e8;
                        return;
                    }
                case 0x2a9e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aa00;
                        run_2aa00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aa00:
                    pc=0x2aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2aa00() throws ExecutionException { /* 0x2aa00 - 0x2ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2aa00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2aa10:
                    r2 = r0 + 22;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2aa24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2aa28;
                        return;
                    }
                case 0x2aa28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aa40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aa40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2aa50:
                    r2 = r0 + 23;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2aa64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2aa68;
                        return;
                    }
                case 0x2aa68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aa80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aa80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2aa90:
                    r2 = r0 + 24;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2aaa4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2aaa8;
                        return;
                    }
                case 0x2aaa8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aac0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aac0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2aad0:
                    r2 = r0 + 25;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2aae4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2aae8;
                        return;
                    }
                case 0x2aae8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab00;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ab00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ab10:
                    r2 = r0 + 26;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ab24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ab28;
                        return;
                    }
                case 0x2ab28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ab40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ab50:
                    r2 = r0 + 27;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ab64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ab68;
                        return;
                    }
                case 0x2ab68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ab80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ab90:
                    r2 = r0 + 28;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2aba4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2aba8;
                        return;
                    }
                case 0x2aba8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2abc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2abc0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2abd0:
                    r2 = r0 + 29;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2abe4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2abe8;
                        return;
                    }
                case 0x2abe8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac00;
                        run_2ac00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ac00:
                    pc=0x2ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ac00() throws ExecutionException { /* 0x2ac00 - 0x2ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ac00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ac10:
                    r2 = r0 + 30;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ac24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ac28;
                        return;
                    }
                case 0x2ac28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ac40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ac50:
                    r2 = r0 + 31;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ac64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ac68;
                        return;
                    }
                case 0x2ac68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ac80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ac90:
                    r2 = r0 + 32;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2aca4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2aca8;
                        return;
                    }
                case 0x2aca8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2acc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2acc0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2acd0:
                    r2 = r0 + 33;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ace4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ace8;
                        return;
                    }
                case 0x2ace8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ad00;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ad00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ad10:
                    r2 = r0 + 34;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ad24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ad28;
                        return;
                    }
                case 0x2ad28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ad40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ad40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ad50:
                    r2 = r0 + 35;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ad64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ad68;
                        return;
                    }
                case 0x2ad68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ad80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ad80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ad90:
                    r2 = r0 + 36;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2adb0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2adb4;
                        return;
                    }
                case 0x2adb4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2adcc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2adcc:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2addc:
                    r2 = r0 + 37;
                    pc = 0x2ade0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ade4;
                        return;
                    }
                case 0x2ade4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2adec:
                    r2 = r0 + 38;
                    pc = 0x2adf0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2adf4;
                        return;
                    }
                case 0x2adf4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2adfc:
                    r2 = r0 + 39;
                case 0x2ae00:
                    pc=0x2ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ae00() throws ExecutionException { /* 0x2ae00 - 0x2b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ae00:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ae10;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ae14;
                        return;
                    }
                case 0x2ae14:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ae2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ae2c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ae3c:
                    r2 = r0 + 40;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ae50;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ae54;
                        return;
                    }
                case 0x2ae54:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ae6c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ae6c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ae7c:
                    r2 = r0 + 41;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ae90;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ae94;
                        return;
                    }
                case 0x2ae94:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aeac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aeac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2aebc:
                    r2 = r0 + 42;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2aed0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2aed4;
                        return;
                    }
                case 0x2aed4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aeec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aeec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2aefc:
                    r2 = r0 + 43;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2af10;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2af14;
                        return;
                    }
                case 0x2af14:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2af2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2af2c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2af3c:
                    r2 = r0 + 44;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2af50;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2af54;
                        return;
                    }
                case 0x2af54:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2af6c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2af6c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2af7c:
                    r2 = r0 + 45;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2af90;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2af94;
                        return;
                    }
                case 0x2af94:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2afac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2afac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2afbc:
                    r2 = r0 + 46;
                    pc = 0x2afc0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2afc4;
                        return;
                    }
                case 0x2afc4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2afcc:
                    r2 = r0 + 47;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2afe0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2afe4;
                        return;
                    }
                case 0x2afe4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2affc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2affc:
                    r4 = r10 + r0;
                case 0x2b000:
                    pc=0x2b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b000() throws ExecutionException { /* 0x2b000 - 0x2b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b000:
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b00c:
                    r2 = r0 + 51;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b020;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b024;
                        return;
                    }
                case 0x2b024:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b03c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b03c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b04c:
                    r2 = r0 + 52;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b060;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b064;
                        return;
                    }
                case 0x2b064:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b07c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b07c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b08c:
                    r2 = r0 + 53;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2b0ac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b0b0;
                        return;
                    }
                case 0x2b0b0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b0c8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b0d8:
                    r2 = r0 + 55;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b0ec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b0f0;
                        return;
                    }
                case 0x2b0f0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b108;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b108:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b118:
                    r2 = r0 + 54;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b12c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b130;
                        return;
                    }
                case 0x2b130:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b148;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b148:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b158:
                    r2 = r0 + 56;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b16c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b170;
                        return;
                    }
                case 0x2b170:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b188;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b188:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b198:
                    r2 = r0 + 57;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b1ac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b1b0;
                        return;
                    }
                case 0x2b1b0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b1c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b1c8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b1d8:
                    r2 = r0 + 58;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b1ec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b1f0;
                        return;
                    }
                case 0x2b1f0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b208;
                        run_2b200(); return;
                    }
                case 0x2b200:
                    pc=0x2b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b200() throws ExecutionException { /* 0x2b200 - 0x2b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b208:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b218:
                    r2 = r0 + 59;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b22c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b230;
                        return;
                    }
                case 0x2b230:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b248;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b248:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b258:
                    r2 = r0 + 60;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2b278;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b27c;
                        return;
                    }
                case 0x2b27c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b294;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b294:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b2a4:
                    r2 = r0 + 61;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2b2c4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b2c8;
                        return;
                    }
                case 0x2b2c8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b2e0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b2f0:
                    r2 = r0 + 62;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b304;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b308;
                        return;
                    }
                case 0x2b308:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b320;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b320:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b330:
                    r2 = r0 + 63;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b344;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b348;
                        return;
                    }
                case 0x2b348:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b360;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b360:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b370:
                    r2 = r0 + 64;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b384;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b388;
                        return;
                    }
                case 0x2b388:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b3a0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b3b0:
                    r2 = r0 + 65;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2b3d0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b3d4;
                        return;
                    }
                case 0x2b3d4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b3ec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b3fc:
                    r2 = r0 + 66;
                case 0x2b400:
                    pc=0x2b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b400() throws ExecutionException { /* 0x2b400 - 0x2b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b400:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2b41c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b420;
                        return;
                    }
                case 0x2b420:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b438;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b438:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b448:
                    r2 = r0 + 67;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2b468;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b46c;
                        return;
                    }
                case 0x2b46c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b484;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b484:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b494:
                    r2 = r0 + 73;
                    pc = 0x2b498;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b49c;
                        return;
                    }
                case 0x2b49c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b4a4:
                    r2 = r0 + 68;
                    pc = 0x2b4a8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b4ac;
                        return;
                    }
                case 0x2b4ac:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b4b4:
                    r2 = r0 + 70;
                    pc = 0x2b4b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b4bc;
                        return;
                    }
                case 0x2b4bc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b4c4:
                    r2 = r0 + 69;
                    pc = 0x2b4c8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b4cc;
                        return;
                    }
                case 0x2b4cc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b4d4:
                    r2 = r0 + 71;
                    pc = 0x2b4d8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b4dc;
                        return;
                    }
                case 0x2b4dc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b4e4:
                    r2 = r0 + 82;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b4f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b4fc;
                        return;
                    }
                case 0x2b4fc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b514;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b514:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b524:
                    r2 = r0 + 83;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b538;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b53c;
                        return;
                    }
                case 0x2b53c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b554;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b554:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b564:
                    r2 = r0 + 84;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b578;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b57c;
                        return;
                    }
                case 0x2b57c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b594;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b594:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b5a4:
                    r2 = r0 + 85;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b5b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b5bc;
                        return;
                    }
                case 0x2b5bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b5d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b5d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b5e4:
                    r2 = r0 + 80;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b5f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b5fc;
                        return;
                    }
                case 0x2b5fc:
                    r11 = r2 + 255;
                case 0x2b600:
                    pc=0x2b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b600() throws ExecutionException { /* 0x2b600 - 0x2b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b600:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b614;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b614:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b624:
                    r2 = r0 + 86;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b638;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b63c;
                        return;
                    }
                case 0x2b63c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b654;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b654:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b664:
                    r2 = r0 + 81;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b678;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b67c;
                        return;
                    }
                case 0x2b67c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b694;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b694:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b6a4:
                    r2 = r0 + 87;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b6b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b6bc;
                        return;
                    }
                case 0x2b6bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b6d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b6e4:
                    r2 = r0 + 88;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b6f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b6fc;
                        return;
                    }
                case 0x2b6fc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b714;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b714:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b724:
                    r2 = r0 + 78;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b738;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b73c;
                        return;
                    }
                case 0x2b73c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b754;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b754:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b764:
                    r2 = r0 + 76;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b778;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b77c;
                        return;
                    }
                case 0x2b77c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b794;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b794:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b7a4:
                    r2 = r0 + 77;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b7b8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b7bc;
                        return;
                    }
                case 0x2b7bc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b7d4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b7d4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b7e4:
                    r2 = r0 + 74;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b7f8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b7fc;
                        return;
                    }
                case 0x2b7fc:
                    r11 = r2 + 255;
                case 0x2b800:
                    pc=0x2b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b800() throws ExecutionException { /* 0x2b800 - 0x2ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b800:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b814;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b814:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b824:
                    r2 = r0 + 75;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b838;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b83c;
                        return;
                    }
                case 0x2b83c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b854;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b854:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b864:
                    r2 = r0 + 79;
                    pc = 0x2b868;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b86c;
                        return;
                    }
                case 0x2b86c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b874:
                    r2 = r0 + 72;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b888;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b88c;
                        return;
                    }
                case 0x2b88c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b8a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b8a4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b8b4:
                    r2 = r0 + 90;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b8c8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b8cc;
                        return;
                    }
                case 0x2b8cc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b8e4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b8e4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b8f4:
                    r2 = r0 + 89;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b908;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b90c;
                        return;
                    }
                case 0x2b90c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b924;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b924:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2b934:
                    r2 = r0 + 91;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2b948;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2b94c;
                        return;
                    }
                case 0x2b94c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b964;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2b964:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ba00;
                    run_2ba00(); return;
                case 0x2ba00:
                    pc=0x2ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ba00() throws ExecutionException { /* 0x2ba00 - 0x2bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ba00:
                    r5 = r0 - r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2bc00:
                    pc=0x2bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2bc00() throws ExecutionException { /* 0x2bc00 - 0x2be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2bc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a940;
                    run_2a800(); return;
                case 0x2be00:
                    pc=0x2be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2be00() throws ExecutionException { /* 0x2be00 - 0x2c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2be00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b724;
                    run_2b600(); return;
                case 0x2c000:
                    pc=0x2c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c000() throws ExecutionException { /* 0x2c000 - 0x2c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ac10;
                    run_2ac00(); return;
                case 0x2c200:
                    pc=0x2c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c200() throws ExecutionException { /* 0x2c200 - 0x2c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ac50;
                    run_2ac00(); return;
                case 0x2c400:
                    pc=0x2c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c400() throws ExecutionException { /* 0x2c400 - 0x2c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2aa10;
                    run_2aa00(); return;
                case 0x2c600:
                    pc=0x2c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c600() throws ExecutionException { /* 0x2c600 - 0x2c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a9d0;
                    run_2a800(); return;
                case 0x2c800:
                    pc=0x2c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c800() throws ExecutionException { /* 0x2c800 - 0x2ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2aa50;
                    run_2aa00(); return;
                case 0x2ca00:
                    pc=0x2ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ca00() throws ExecutionException { /* 0x2ca00 - 0x2cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ca00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2aa90;
                    run_2aa00(); return;
                case 0x2cc00:
                    pc=0x2cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2cc00() throws ExecutionException { /* 0x2cc00 - 0x2ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2cc00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ab10;
                    run_2aa00(); return;
                case 0x2ce00:
                    pc=0x2ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ce00() throws ExecutionException { /* 0x2ce00 - 0x2d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ce00:
                    r29 = r29 + -40;
                    r2 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce70;
                        continue;
                    }
                    r6 = r5 + r0;
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ce40;
                    pc=0x2ab50;
                    run_2aa00(); return;
                case 0x2ce40:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2cec4;
                        continue;
                    }
                case 0x2ce4c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ce70:
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x2ce7c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ce88;
                    pc=0x20400;
                    run_20400(); return;
                case 0x2ce88:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2cea0;
                    pc=0x2ab50;
                    run_2aa00(); return;
                case 0x2cea0:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce4c;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ceb4;
                    pc=0x20600;
                    run_20600(); return;
                case 0x2ceb4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce7c;
                        continue;
                    }
                case 0x2cec4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d000:
                    pc=0x2d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d000() throws ExecutionException { /* 0x2d000 - 0x2d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ab50;
                    run_2aa00(); return;
                case 0x2d200:
                    pc=0x2d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d200() throws ExecutionException { /* 0x2d200 - 0x2d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ad10;
                    run_2ac00(); return;
                case 0x2d400:
                    pc=0x2d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d400() throws ExecutionException { /* 0x2d400 - 0x2d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ac90;
                    run_2ac00(); return;
                case 0x2d600:
                    pc=0x2d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d600() throws ExecutionException { /* 0x2d600 - 0x2d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d600:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b764;
                    run_2b600(); return;
                case 0x2d800:
                    pc=0x2d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d800() throws ExecutionException { /* 0x2d800 - 0x2da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d800:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b7a4;
                    run_2b600(); return;
                case 0x2da00:
                    pc=0x2da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2da00() throws ExecutionException { /* 0x2da00 - 0x2dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2da00:
                    r3 = r4 + r0;
                    r2 = r5 & 65535;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 & 65535;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2aefc;
                    run_2ae00(); return;
                case 0x2dc00:
                    pc=0x2dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2dc00() throws ExecutionException { /* 0x2dc00 - 0x2de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2dc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b7e4;
                    run_2b600(); return;
                case 0x2de00:
                    pc=0x2de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2de00() throws ExecutionException { /* 0x2de00 - 0x2e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2de00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b824;
                    run_2b800(); return;
                case 0x2e000:
                    pc=0x2e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e000() throws ExecutionException { /* 0x2e000 - 0x2e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2acd0;
                    run_2ac00(); return;
                case 0x2e200:
                    pc=0x2e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e200() throws ExecutionException { /* 0x2e200 - 0x2e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e200:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2e230;
                    pc=0x2ad90;
                    run_2ac00(); return;
                case 0x2e230:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e400:
                    pc=0x2e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e400() throws ExecutionException { /* 0x2e400 - 0x2e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2adfc;
                    run_2ac00(); return;
                case 0x2e600:
                    pc=0x2e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e600() throws ExecutionException { /* 0x2e600 - 0x2e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + 18728;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2e628;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x2e628:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e800:
                    pc=0x2e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e800() throws ExecutionException { /* 0x2e800 - 0x2ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e800:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ae3c;
                    run_2ae00(); return;
                case 0x2ea00:
                    pc=0x2ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ea00() throws ExecutionException { /* 0x2ea00 - 0x2ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ea00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ae7c;
                    run_2ae00(); return;
                case 0x2ec00:
                    pc=0x2ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ec00() throws ExecutionException { /* 0x2ec00 - 0x2ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ec00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r7 = r6 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r7 >> 16;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2aebc;
                    run_2ae00(); return;
                case 0x2ee00:
                    pc=0x2ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ee00() throws ExecutionException { /* 0x2ee00 - 0x2f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ee00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2af3c;
                    run_2ae00(); return;
                case 0x2f000:
                    pc=0x2f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f000() throws ExecutionException { /* 0x2f000 - 0x2f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2af7c;
                    run_2ae00(); return;
                case 0x2f200:
                    pc=0x2f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f200() throws ExecutionException { /* 0x2f200 - 0x2f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2afcc;
                    run_2ae00(); return;
                case 0x2f400:
                    pc=0x2f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f400() throws ExecutionException { /* 0x2f400 - 0x2f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b00c;
                    run_2b000(); return;
                case 0x2f600:
                    pc=0x2f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f600() throws ExecutionException { /* 0x2f600 - 0x2f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b04c;
                    run_2b000(); return;
                case 0x2f800:
                    pc=0x2f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f800() throws ExecutionException { /* 0x2f800 - 0x2fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f800:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2f840;
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x2f840:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fa00:
                    pc=0x2fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fa00() throws ExecutionException { /* 0x2fa00 - 0x2fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fa00:
                    r2 = r4 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r3 = r0 + 8;
                    r8 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r16 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2fa64;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2faa8;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2fac8;
                        continue;
                    }
                case 0x2fa44:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fa64:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r9 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r8 + r0;
                    r7 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2fa94;
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x2fa94:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2faa8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fac8:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 18768;
                    /* Next insn is delay slot */ 
                    r31=0x2fae0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x2fae0:
                    /* Next insn is delay slot */ 
                    pc=0x2fa44;
                    continue;
                case 0x2fc00:
                    pc=0x2fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fc00() throws ExecutionException { /* 0x2fc00 - 0x2fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b0d8;
                    run_2b000(); return;
                case 0x2fe00:
                    pc=0x2fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fe00() throws ExecutionException { /* 0x2fe00 - 0x30000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fe00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b118;
                    run_2b000(); return;
                case 0x30000:
                    pc=0x30000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30000() throws ExecutionException { /* 0x30000 - 0x30200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b198;
                    run_2b000(); return;
                case 0x30200:
                    pc=0x30200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30200() throws ExecutionException { /* 0x30200 - 0x30400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b158;
                    run_2b000(); return;
                case 0x30400:
                    pc=0x30400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30400() throws ExecutionException { /* 0x30400 - 0x30600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30400:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b1d8;
                    run_2b000(); return;
                case 0x30600:
                    pc=0x30600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30600() throws ExecutionException { /* 0x30600 - 0x30800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b8f4;
                    run_2b800(); return;
                case 0x30800:
                    pc=0x30800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30800() throws ExecutionException { /* 0x30800 - 0x30a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30800:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b218;
                    run_2b200(); return;
                case 0x30a00:
                    pc=0x30a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30a00() throws ExecutionException { /* 0x30a00 - 0x30c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30a00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x30a38;
                    pc=0x2b2a4;
                    run_2b200(); return;
                case 0x30a38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30c00:
                    pc=0x30c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30c00() throws ExecutionException { /* 0x30c00 - 0x30e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30c00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x30c38;
                    pc=0x2b258;
                    run_2b200(); return;
                case 0x30c38:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30e00:
                    pc=0x30e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30e00() throws ExecutionException { /* 0x30e00 - 0x31000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30e00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b330;
                    run_2b200(); return;
                case 0x31000:
                    pc=0x31000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31000() throws ExecutionException { /* 0x31000 - 0x31200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b2f0;
                    run_2b200(); return;
                case 0x31200:
                    pc=0x31200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31200() throws ExecutionException { /* 0x31200 - 0x31400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31200:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b370;
                    run_2b200(); return;
                case 0x31400:
                    pc=0x31400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31400() throws ExecutionException { /* 0x31400 - 0x31600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31400:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31440;
                    pc=0x2b3b0;
                    run_2b200(); return;
                case 0x31440:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31600:
                    pc=0x31600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31600() throws ExecutionException { /* 0x31600 - 0x31800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31600:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31640;
                    pc=0x2b3fc;
                    run_2b200(); return;
                case 0x31640:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31800:
                    pc=0x31800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31800() throws ExecutionException { /* 0x31800 - 0x31a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31800:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31838;
                    pc=0x2b448;
                    run_2b400(); return;
                case 0x31838:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31a00:
                    pc=0x31a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31a00() throws ExecutionException { /* 0x31a00 - 0x31c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31a00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31a30;
                    pc=0x2b4e4;
                    run_2b400(); return;
                case 0x31a30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31c00:
                    pc=0x31c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31c00() throws ExecutionException { /* 0x31c00 - 0x31e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31c00:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31c30;
                    pc=0x2b524;
                    run_2b400(); return;
                case 0x31c30:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31e00:
                    pc=0x31e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31e00() throws ExecutionException { /* 0x31e00 - 0x32000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b874;
                    run_2b800(); return;
                case 0x32000:
                    pc=0x32000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32000() throws ExecutionException { /* 0x32000 - 0x32200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32000:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b564;
                    run_2b400(); return;
                case 0x32200:
                    pc=0x32200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32200() throws ExecutionException { /* 0x32200 - 0x32400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b5a4;
                    run_2b400(); return;
                case 0x32400:
                    pc=0x32400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32400() throws ExecutionException { /* 0x32400 - 0x32600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32400:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b5e4;
                    run_2b400(); return;
                case 0x32600:
                    pc=0x32600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32600() throws ExecutionException { /* 0x32600 - 0x32800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32600:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b624;
                    run_2b600(); return;
                case 0x32800:
                    pc=0x32800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32800() throws ExecutionException { /* 0x32800 - 0x32a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32800:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b664;
                    run_2b600(); return;
                case 0x32a00:
                    pc=0x32a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32a00() throws ExecutionException { /* 0x32a00 - 0x32c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32a00:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b6a4;
                    run_2b600(); return;
                case 0x32c00:
                    pc=0x32c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32c00() throws ExecutionException { /* 0x32c00 - 0x32e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2b6e4;
                    run_2b600(); return;
                case 0x32e00:
                    pc=0x32e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32e00() throws ExecutionException { /* 0x32e00 - 0x33000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32e00:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b8b4;
                    run_2b800(); return;
                case 0x33000:
                    pc=0x33000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33000() throws ExecutionException { /* 0x33000 - 0x33200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b934;
                    run_2b800(); return;
                case 0x33200:
                    pc=0x33200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33200() throws ExecutionException { /* 0x33200 - 0x33400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2ab90;
                    run_2aa00(); return;
                case 0x33400:
                    pc=0x33400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33400() throws ExecutionException { /* 0x33400 - 0x33600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33400:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3345c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3342c;
                    pc=0x2ab50;
                    run_2aa00(); return;
                case 0x3342c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x334b4;
                        continue;
                    }
                case 0x33438:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3345c:
                    r18 = r4 + r0;
                    r16 = r0 + 256;
                    r19 = r0 + -1;
                    r20 = r0 + 34;
                case 0x3346c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33478;
                    pc=0x20400;
                    run_20400(); return;
                case 0x33478:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x33490;
                    pc=0x2ab50;
                    run_2aa00(); return;
                case 0x33490:
                    if(r2 != r19) {
                        /* Next insn is delay slot */ 
                        pc=0x33438;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x334a4;
                    pc=0x20600;
                    run_20600(); return;
                case 0x334a4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = r16 << 1;
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x3346c;
                        continue;
                    }
                case 0x334b4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33600:
                    pc=0x33600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33600() throws ExecutionException { /* 0x33600 - 0x33800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33600:
                    r6 = r5 + r0;
                    r7 = r0 + r0;
                    r5 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2ab10;
                    run_2aa00(); return;
                case 0x33800:
                    pc=0x33800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33800() throws ExecutionException { /* 0x33800 - 0x33a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33800:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r5 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + 18728;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33828;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x33828:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33a00:
                    pc=0x33a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33a00() throws ExecutionException { /* 0x33a00 - 0x33c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33a00:
                    r8 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r3 = r0 + 8;
                    r2 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x33a5c;
                        continue;
                    }
                    r16 = r4 + r0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33a74;
                        continue;
                    }
                    r3 = r0 + 2;
                    if(r6 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x33a94;
                        continue;
                    }
                case 0x33a3c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33a5c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x33a74:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33a94:
                    r3 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r5 + 18768;
                    /* Next insn is delay slot */ 
                    r31=0x33ab0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x33ab0:
                    /* Next insn is delay slot */ 
                    pc=0x33a3c;
                    continue;
                case 0x33c00:
                    pc=0x33c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33c00() throws ExecutionException { /* 0x33c00 - 0x33e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33c00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33e00:
                    pc=0x33e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33e00() throws ExecutionException { /* 0x33e00 - 0x34000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33e00:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33e10;
                    pc=0x3c200;
                    run_3c200(); return;
                case 0x33e10:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e30;
                        continue;
                    }
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r2 = r2 + 18804;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33e30:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34000:
                    pc=0x34000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34000() throws ExecutionException { /* 0x34000 - 0x34200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34000:
                    r29 = r29 + -32;
                    r2 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x340b8;
                        continue;
                    }
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34088;
                        continue;
                    }
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r5 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34088;
                        continue;
                    }
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x34050;
                    pc=0x40c00;
                    run_40c00(); return;
                case 0x34050:
                    r17 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34068;
                        continue;
                    }
                case 0x3405c:
                    r2 = r0 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                case 0x34068:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34088:
                    /* Next insn is delay slot */ 
                    r31=0x34090;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x34090:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 22;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x340b8:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34068;
                        continue;
                    }
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x340cc;
                    pc=0x40c00;
                    run_40c00(); return;
                case 0x340cc:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x340e0;
                    pc=0x40c00;
                    run_40c00(); return;
                case 0x340e0:
                    /* Next insn is delay slot */ 
                    pc=0x3405c;
                    continue;
                case 0x34200:
                    pc=0x34200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34200() throws ExecutionException { /* 0x34200 - 0x34400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34200:
                    r29 = r29 + -96;
                    r5 = r0 + r0;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r17;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x3421c;
                    pc=0x46800;
                    run_46800(); return;
                case 0x3421c:
                    r17 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x342ec;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x34238;
                    pc=0x46600;
                    run_46600(); return;
                case 0x34238:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x342b4;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 16384;
                    r3 = r3 & 61440;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x342b4;
                        continue;
                    }
                    r4 = r0 + 20;
                    /* Next insn is delay slot */ 
                    r31=0x34260;
                    pc=0x20400;
                    run_20400(); return;
                case 0x34260:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x342f8;
                        continue;
                    }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r4 = r0 + 4096;
                    /* Next insn is delay slot */ 
                    r31=0x3427c;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3427c:
                    r3 = r0 + 4096;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34320;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x3429c:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x342b4:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x342c0;
                    pc=0x46200;
                    run_46200(); return;
                case 0x342c0:
                    /* Next insn is delay slot */ 
                    r31=0x342c8;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x342c8:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r0 + 20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r16 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x342ec:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3429c;
                    continue;
                case 0x342f8:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34304;
                    pc=0x46200;
                    run_46200(); return;
                case 0x34304:
                    /* Next insn is delay slot */ 
                    r31=0x3430c;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x3430c:
                    r3 = r0 + 12;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3429c;
                    continue;
                case 0x34320:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3432c;
                    pc=0x46200;
                    run_46200(); return;
                case 0x3432c:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34338;
                    pc=0x20600;
                    run_20600(); return;
                case 0x34338:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3429c;
                    continue;
                case 0x34400:
                    pc=0x34400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34400() throws ExecutionException { /* 0x34400 - 0x34600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34400:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34418;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x34418:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34484;
                        continue;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x34484;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x3443c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + r6;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x344c4;
                        continue;
                    }
                    r3 = r5 - r3;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x344c4;
                        continue;
                    }
                    r4 = r6 + r4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                case 0x34470:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34484:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x344a0;
                    pc=0x2ad90;
                    run_2ac00(); return;
                case 0x344a0:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x344dc;
                        continue;
                    }
                    r5 = r2 + r0;
                    r6 = r0 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3443c;
                    continue;
                case 0x344c4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x344dc:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x34470;
                    continue;
                case 0x34600:
                    pc=0x34600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34600() throws ExecutionException { /* 0x34600 - 0x34800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34624;
                    pc=0x20600;
                    run_20600(); return;
                case 0x34624:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x34630;
                    pc=0x20600;
                    run_20600(); return;
                case 0x34630:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x46200;
                    run_46200(); return;
                case 0x34800:
                    pc=0x34800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34800() throws ExecutionException { /* 0x34800 - 0x34a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34800:
                    r2 = r4 >>> 16;
                    r29 = r29 + -40;
                    r2 = r2 & 255;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r4 >>> 8;
                    r2 = r2 & 255;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r16 = 5 << 16;
                    r2 = r4 & 255;
                    r7 = r4 + r0;
                    r6 = 5 << 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r4 = r16 + 31988;
                    r5 = r0 + 18;
                    r6 = r6 + 18820;
                    r7 = r7 >>> 24;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34850;
                    pc=0x41400;
                    run_41400(); return;
                case 0x34850:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + 31988;
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34a00:
                    pc=0x34a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34a00() throws ExecutionException { /* 0x34a00 - 0x34c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34a00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34c00:
                    pc=0x34c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34c00() throws ExecutionException { /* 0x34c00 - 0x34e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34c00:
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c28;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 19072;
                    r4 = r4 << 2;
                    r4 = r4 + r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34c28:
                    r2 = 5 << 16;
                    r2 = r2 + 18832;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34e00:
                    pc=0x34e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34e00() throws ExecutionException { /* 0x34e00 - 0x35000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34e00:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34e44;
                        continue;
                    }
                    r3 = 5 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 19072;
                    r2 = r2 + r3;
                    r5 = 5 << 16;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r5 + 18848;
                    /* Next insn is delay slot */ 
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x34e44:
                    r7 = 5 << 16;
                    r5 = 5 << 16;
                    r7 = r7 + 18832;
                    r5 = r5 + 18848;
                    /* Next insn is delay slot */ 
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x35000:
                    pc=0x35000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35000() throws ExecutionException { /* 0x35000 - 0x35200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35000:
                    r29 = r29 + -40;
                    r2 = r0 + 2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x350d4;
                        continue;
                    }
                    r2 = r0 + 4;
                    r17 = r5 + r0;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x350d4;
                        continue;
                    }
                    r18 = r4 + r0;
                    r5 = r18 + r0;
                    r4 = r29 + 16;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x3504c;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x3504c:
                    r5 = r18 + r0;
                    r4 = r28 + -32424;
                    r6 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x35060;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x35060:
                    r18 = 5 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r18 + 31860;
                    r7 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x3507c;
                    pc=0x2b8f4;
                    run_2b800(); return;
                case 0x3507c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x350f4;
                        continue;
                    }
                    r2 = 5 << 16;
                    r18 = r18 + 31860;
                    writePages[(r2+31840)>>>12][((r2+31840)>>>2)&0x3ff] = r18;
                    r3 = r28 + -32428;
                    r2 = r2 + 31840;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r28 + -32432;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r28 + -32424;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff] = r0;
                    writePages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff] = r3;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x350d4:
                    r2 = r0 + r0;
                case 0x350d8:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x350f4:
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x350d8;
                    continue;
                case 0x35200:
                    pc=0x35200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35200() throws ExecutionException { /* 0x35200 - 0x35400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35200:
                    r29 = r29 + -1064;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r2 = r0 + 1024;
                    r5 = r18 + r0;
                    r6 = r29 + 16;
                    r7 = r29 + 1040;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r31;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x35238;
                    pc=0x2b1d8;
                    run_2b000(); return;
                case 0x35238:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3531c;
                        continue;
                    }
                    r17 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r9 = 5 << 16;
                    r9 = r9 + 30816;
                    r4 = r9 + r0;
                    r5 = r29 + 16;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35260;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x35260:
                    r9 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35340;
                        continue;
                    }
                    r16 = 5 << 16;
                    r3 = r0 + r0;
                    r7 = r0 + r0;
                    r2 = r0 + r0;
                    r16 = r16 + 29788;
                    /* Next insn is delay slot */ 
                    pc=0x3528c;
                    continue;
                case 0x35288:
                    r3 = r2 + r0;
                case 0x3528c:
                    r8 = r16 + r3;
                    r2 = r9 + r2;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    r2 = r3 + 4;
                    r3 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r7 = r7 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35288;
                        continue;
                    }
                case 0x352ac:
                    r2 = r7 << 2;
                    r17 = 5 << 16;
                    r2 = r16 + r2;
                    r4 = r17 + 29660;
                    r5 = r18 + r0;
                    r6 = r0 + 128;
                    r17 = r17 + 29660;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x352d4;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x352d4:
                    r2 = 5 << 16;
                    writePages[(r2+29640)>>>12][((r2+29640)>>>2)&0x3ff] = r17;
                    r3 = r28 + -32436;
                    r2 = r2 + 29640;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    r3 = r0 + 4;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff] = r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3531c:
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    writePages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    r29 = r29 + 1064;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35340:
                    r16 = 5 << 16;
                    r7 = r0 + r0;
                    r16 = r16 + 29788;
                    /* Next insn is delay slot */ 
                    pc=0x352ac;
                    continue;
                case 0x35400:
                    pc=0x35400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35400() throws ExecutionException { /* 0x35400 - 0x35600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35400:
                    r29 = r29 + -1088;
                    r5 = 5 << 16;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    r30 = r4 + r0;
                    r4 = 5 << 16;
                    r4 = r4 + 18856;
                    r5 = r5 + 8996;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x35448;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x35448:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35528;
                        continue;
                    }
                    r21 = 6 << 16;
                    r22 = 5 << 16;
                    r21 = r21 + -32504;
                    r23 = 6 << 16;
                    r22 = r22 + 18868;
                    r18 = 5 << 16;
                    r20 = 6 << 16;
                    r19 = r21 + r0;
                case 0x35474:
                    r16 = r0 + 35;
                case 0x35478:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3548c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x3548c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3551c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x35478;
                        continue;
                    }
                    r2 = r23 + -26352;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r7 = r18 + 32008;
                    /* Next insn is delay slot */ 
                    r31=0x354c4;
                    pc=0x41600;
                    run_41600(); return;
                case 0x354c4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3551c;
                        continue;
                    }
                    r16 = r20 + -26360;
                    r2 = r18 + 32008;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r4 = r30 + r0;
                    r2 = r28 + -32420;
                    r5 = r19 + r0;
                    writePages[(r20+-26360)>>>12][((r20+-26360)>>>2)&0x3ff] = r19;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32420)>>>12][((r28+-32420)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x354fc;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x354fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35474;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35510;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x35510:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3552c;
                    continue;
                case 0x3551c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35528;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x35528:
                    r2 = r0 + r0;
                case 0x3552c:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35600:
                    pc=0x35600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35600() throws ExecutionException { /* 0x35600 - 0x35800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35600:
                    r29 = r29 + -1088;
                    r5 = 5 << 16;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    r23 = r4 & 65535;
                    r4 = 5 << 16;
                    r4 = r4 + 18856;
                    r5 = r5 + 8996;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x35648;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x35648:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3571c;
                        continue;
                    }
                    r20 = 6 << 16;
                    r21 = 5 << 16;
                    r20 = r20 + -32504;
                    r22 = 6 << 16;
                    r21 = r21 + 18868;
                    r18 = 5 << 16;
                    r19 = 6 << 16;
                    r30 = r20 + r0;
                case 0x35674:
                    r16 = r0 + 35;
                case 0x35678:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3568c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x3568c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35710;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x35678;
                        continue;
                    }
                    r2 = r22 + -26352;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    r5 = r21 + r0;
                    r6 = r20 + r0;
                    r7 = r18 + 32008;
                    /* Next insn is delay slot */ 
                    r31=0x356c4;
                    pc=0x41600;
                    run_41600(); return;
                case 0x356c4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35710;
                        continue;
                    }
                    r16 = r19 + -26360;
                    r2 = r18 + 32008;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r28 + -32420;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r19+-26360)>>>12][((r19+-26360)>>>2)&0x3ff] = r30;
                    writePages[(r28+-32420)>>>12][((r28+-32420)>>>2)&0x3ff] = r0;
                    if(r2 != r23) {
                        /* Next insn is delay slot */ 
                        pc=0x35674;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35704;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x35704:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35720;
                    continue;
                case 0x35710:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3571c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x3571c:
                    r2 = r0 + r0;
                case 0x35720:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r29 = r29 + 1088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35800:
                    pc=0x35800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35800() throws ExecutionException { /* 0x35800 - 0x35a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35800:
                    r6 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    r29 = r29 + -2088;
                    writePages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff] = r31;
                    writePages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff] = r17;
                    writePages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3590c;
                        continue;
                    }
                    r4 = r29 + 1048;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x3582c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x3582c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3590c;
                        continue;
                    }
                    addr=r29+1048;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x358bc;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -26352;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 1048;
                case 0x35854:
                    r5 = 5 << 16;
                    r17 = 6 << 16;
                    r16 = 5 << 16;
                    r5 = r5 + 18868;
                    r6 = r17 + -32504;
                    r7 = r16 + 32008;
                    /* Next insn is delay slot */ 
                    r31=0x35874;
                    pc=0x41600;
                    run_41600(); return;
                case 0x35874:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3590c;
                        continue;
                    }
                    r2 = 6 << 16;
                    r17 = r17 + -32504;
                    writePages[(r2+-26360)>>>12][((r2+-26360)>>>2)&0x3ff] = r17;
                    r16 = r16 + 32008;
                    r2 = r2 + -26360;
                    r3 = r28 + -32420;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                    writePages[(r28+-32420)>>>12][((r28+-32420)>>>2)&0x3ff] = r0;
                case 0x358a4:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x358bc:
                    r6 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3590c;
                        continue;
                    }
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x358dc;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x358dc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3590c;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x35928;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -26352;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=0x35854;
                    continue;
                case 0x3590c:
                    r31 = readPages[(r29+2084)>>>12][((r29+2084)>>>2)&0x3ff];
                    r17 = readPages[(r29+2080)>>>12][((r29+2080)>>>2)&0x3ff];
                    r16 = readPages[(r29+2076)>>>12][((r29+2076)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2088;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35928:
                    /* Next insn is delay slot */ 
                    r31=0x35930;
                    pc=0x35800;
                    continue;
                case 0x35930:
                    /* Next insn is delay slot */ 
                    pc=0x358a4;
                    continue;
                case 0x35a00:
                    pc=0x35a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35a00() throws ExecutionException { /* 0x35a00 - 0x35c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35a00:
                    r4 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35a1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x35a1c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x35a1c:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + 18856;
                    r5 = r5 + 8996;
                    /* Next insn is delay slot */ 
                    r31=0x35a34;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x35a34:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35c00:
                    pc=0x35c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35c00() throws ExecutionException { /* 0x35c00 - 0x35e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35c00:
                    r4 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35c1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x35c1c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x35c1c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35e00:
                    pc=0x35e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35e00() throws ExecutionException { /* 0x35e00 - 0x36000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35e00:
                    r29 = r29 + -1104;
                    r5 = 5 << 16;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r4;
                    r4 = 5 << 16;
                    r4 = r4 + 18884;
                    r5 = r5 + 8996;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r31;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r30;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r23;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r22;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x35e48;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x35e48:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f60;
                        continue;
                    }
                    r20 = 6 << 16;
                    r20 = r20 + -27384;
                    r19 = 6 << 16;
                    r18 = r20 + r0;
                case 0x35e64:
                    r16 = r0 + 35;
                case 0x35e68:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35e7c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x35e7c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f54;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x35e68;
                        continue;
                    }
                    r3 = 6 << 16;
                    r2 = r3 + -26336;
                    r3 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r22 = r3 + -29432;
                    r8 = 6 << 16;
                    r3 = 6 << 16;
                    r2 = 6 << 16;
                    r2 = r2 + -26334;
                    r21 = r8 + -30456;
                    r30 = r3 + -31480;
                    r5 = 5 << 16;
                    r23 = 6 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 18896;
                    r6 = r20 + r0;
                    r7 = r23 + -28408;
                    /* Next insn is delay slot */ 
                    r31=0x35ef0;
                    pc=0x41600;
                    run_41600(); return;
                case 0x35ef0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35f54;
                        continue;
                    }
                    r2 = 5 << 16;
                    r4 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r16 = r19 + -26344;
                    r10 = r23 + -28408;
                    r2 = r2 + 11160;
                    r5 = r18 + r0;
                    writePages[(r19+-26344)>>>12][((r19+-26344)>>>2)&0x3ff] = r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r22;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r21;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x35f34;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x35f34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35e64;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35f48;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x35f48:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x35f64;
                    continue;
                case 0x35f54:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x35f60;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x35f60:
                    r2 = r0 + r0;
                case 0x35f64:
                    r31 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r30 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r23 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r22 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r29 = r29 + 1104;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36000:
                    pc=0x36000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36000() throws ExecutionException { /* 0x36000 - 0x36200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36000:
                    r29 = r29 + -1112;
                    r4 = r4 & 65535;
                    r5 = 5 << 16;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r4;
                    r4 = 5 << 16;
                    r4 = r4 + 18884;
                    r5 = r5 + 8996;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r17;
                    writePages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff] = r31;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r30;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r23;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r22;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r21;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r20;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r19;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r18;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x3604c;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x3604c:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36160;
                        continue;
                    }
                    r19 = 6 << 16;
                    r22 = 6 << 16;
                    r19 = r19 + -27384;
                    r18 = 6 << 16;
                case 0x36068:
                    r16 = r0 + 35;
                case 0x3606c:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36080;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x36080:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36154;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x3606c;
                        continue;
                    }
                    r2 = r22 + -26336;
                    r3 = 6 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r3 + -29432;
                    r8 = 6 << 16;
                    r3 = 6 << 16;
                    r2 = 6 << 16;
                    r2 = r2 + -26334;
                    r23 = r8 + -30456;
                    r30 = r3 + -31480;
                    r5 = 5 << 16;
                    r21 = 6 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r23;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r4 = r29 + 40;
                    r5 = r5 + 18896;
                    r6 = r19 + r0;
                    r7 = r21 + -28408;
                    /* Next insn is delay slot */ 
                    r31=0x360f0;
                    pc=0x41600;
                    run_41600(); return;
                case 0x360f0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36154;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -27384;
                    writePages[(r18+-26344)>>>12][((r18+-26344)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r16 = r18 + -26344;
                    r2 = r2 + 11160;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r10 = r21 + -28408;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r10;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r20;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r23;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r30;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x36068;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36148;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x36148:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36164;
                    continue;
                case 0x36154:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36160;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x36160:
                    r2 = r0 + r0;
                case 0x36164:
                    r31 = readPages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff];
                    r30 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r23 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r22 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r21 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r20 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r19 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r18 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r17 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r16 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r29 = r29 + 1112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36200:
                    pc=0x36200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36200() throws ExecutionException { /* 0x36200 - 0x36400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36200:
                    r6 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    r29 = r29 + -2112;
                    writePages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff] = r31;
                    writePages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff] = r20;
                    writePages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff] = r19;
                    writePages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff] = r18;
                    writePages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff] = r17;
                    writePages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36390;
                        continue;
                    }
                    r4 = r29 + 1064;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x36238;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x36238:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36390;
                        continue;
                    }
                    addr=r29+1064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + 35;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x36310;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -26336;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 6 << 16;
                    r2 = 6 << 16;
                    r17 = 6 << 16;
                    r16 = 6 << 16;
                    r2 = r2 + -26334;
                    r18 = r18 + -29432;
                    r17 = r17 + -30456;
                    r16 = r16 + -31480;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 1064;
                case 0x36290:
                    r5 = 5 << 16;
                    r20 = 6 << 16;
                    r19 = 6 << 16;
                    r5 = r5 + 18896;
                    r6 = r20 + -27384;
                    r7 = r19 + -28408;
                    /* Next insn is delay slot */ 
                    r31=0x362b0;
                    pc=0x41600;
                    run_41600(); return;
                case 0x362b0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36390;
                        continue;
                    }
                    r2 = 6 << 16;
                    r20 = r20 + -27384;
                    r3 = 5 << 16;
                    writePages[(r2+-26344)>>>12][((r2+-26344)>>>2)&0x3ff] = r20;
                    r19 = r19 + -28408;
                    r2 = r2 + -26344;
                    r3 = r3 + 11160;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r18;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r17;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r16;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r3;
                case 0x362ec:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36310:
                    r6 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36390;
                        continue;
                    }
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x36330;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x36330:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36390;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x363b8;
                        continue;
                    }
                    r2 = 6 << 16;
                    r2 = r2 + -26336;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r18 = 6 << 16;
                    r2 = 6 << 16;
                    r17 = 6 << 16;
                    r16 = 6 << 16;
                    r2 = r2 + -26334;
                    r18 = r18 + -29432;
                    r17 = r17 + -30456;
                    r16 = r16 + -31480;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r4 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=0x36290;
                    continue;
                case 0x36390:
                    r31 = readPages[(r29+2108)>>>12][((r29+2108)>>>2)&0x3ff];
                    r20 = readPages[(r29+2104)>>>12][((r29+2104)>>>2)&0x3ff];
                    r19 = readPages[(r29+2100)>>>12][((r29+2100)>>>2)&0x3ff];
                    r18 = readPages[(r29+2096)>>>12][((r29+2096)>>>2)&0x3ff];
                    r17 = readPages[(r29+2092)>>>12][((r29+2092)>>>2)&0x3ff];
                    r16 = readPages[(r29+2088)>>>12][((r29+2088)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 2112;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x363b8:
                    /* Next insn is delay slot */ 
                    r31=0x363c0;
                    pc=0x36200;
                    continue;
                case 0x363c0:
                    /* Next insn is delay slot */ 
                    pc=0x362ec;
                    continue;
                case 0x36400:
                    pc=0x36400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36400() throws ExecutionException { /* 0x36400 - 0x36600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36400:
                    r4 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3641c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3641c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x3641c:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + 18856;
                    r5 = r5 + 8996;
                    /* Next insn is delay slot */ 
                    r31=0x36434;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x36434:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r2;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36600:
                    pc=0x36600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36600() throws ExecutionException { /* 0x36600 - 0x36800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36600:
                    r4 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3661c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3661c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x3661c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff] = r0;
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36800:
                    pc=0x36800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36800() throws ExecutionException { /* 0x36800 - 0x36a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36800:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x36820;
                    pc=0x3b000;
                    run_3b000(); return;
                case 0x36820:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r16 = 5 << 16;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x36834;
                    pc=0x1bc00;
                    run_1bc00(); return;
                case 0x36834:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r4 = r16 + 28616;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x3684c;
                    pc=0x1c000;
                    run_1c000(); return;
                case 0x3684c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x368b8;
                        continue;
                    }
                    r4 = r16 + 28616;
                    /* Next insn is delay slot */ 
                    r31=0x36860;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x36860:
                    r17 = r2 + -1;
                    r16 = r16 + 28616;
                    r3 = r16 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 10;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x36880;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x36880:
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r17 = r16 + r17;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r31=0x36898;
                    pc=0x1e600;
                    run_1e600(); return;
                case 0x36898:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x368b8:
                    r17 = r0 + r0;
                    r16 = r16 + 28616;
                    /* Next insn is delay slot */ 
                    pc=0x36880;
                    continue;
                case 0x36a00:
                    pc=0x36a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36a00() throws ExecutionException { /* 0x36a00 - 0x36c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36a00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r0 + 128;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r18 = r5 + r0;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36a2c;
                    pc=0x20400;
                    run_20400(); return;
                case 0x36a2c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36abc;
                        continue;
                    }
                    r4 = r2 + r0;
                    r5 = r0 + 128;
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36a50;
                    pc=0x48600;
                    run_48600(); return;
                case 0x36a50:
                    r3 = r2 < 128 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36a78;
                        continue;
                    }
                case 0x36a5c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36a78:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x36a88;
                    pc=0x22c00;
                    run_22c00(); return;
                case 0x36a88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36ac8;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r17 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x48a00;
                    run_48a00(); return;
                case 0x36abc:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x36a5c;
                    continue;
                case 0x36ac8:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x36ad4;
                    pc=0x20600;
                    run_20600(); return;
                case 0x36ad4:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x36a5c;
                    continue;
                case 0x36c00:
                    pc=0x36c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36c00() throws ExecutionException { /* 0x36c00 - 0x36e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36c00:
                    r4 = 5 << 16;
                    r4 = r4 + 18932;
                    /* Next insn is delay slot */ 
                    pc=0x3ba00;
                    run_3ba00(); return;
                case 0x36e00:
                    pc=0x36e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36e00() throws ExecutionException { /* 0x36e00 - 0x37000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36e00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36eb4;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36eb4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x36e38;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x36e38:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36f0c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x36ee0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x36e78;
                    continue;
                case 0x36e68:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x36ee0;
                        continue;
                    }
                case 0x36e78:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x36e68;
                        continue;
                    }
                case 0x36e84:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x36fb4;
                        continue;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 18944;
                case 0x36e9c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = 5 << 16;
                    addr=r2+27592;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 27592;
                    /* Next insn is delay slot */ 
                    pc=0x36ec4;
                    continue;
                case 0x36eb4:
                    r2 = 5 << 16;
                    r3 = r0 + 11776;
                    addr=r2+27592;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 27592;
                case 0x36ec4:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36ee0:
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x36efc;
                    continue;
                case 0x36eec:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x36f0c;
                        continue;
                    }
                case 0x36efc:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36eec;
                        continue;
                    }
                case 0x36f0c:
                    r4 = r0 + 47;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x36f30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x36e84;
                    continue;
                case 0x36f20:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x36f40;
                        continue;
                    }
                case 0x36f30:
                    r2 = r2 + -1;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36f20;
                        continue;
                    }
                case 0x36f40:
                    r2 = r2 - r16;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36f98;
                        continue;
                    }
                    r17 = r2 + 1;
                    r18 = 5 << 16;
                    r4 = r18 + 27592;
                    r5 = r16 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x36f70;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x36f70:
                    r2 = r18 + 27592;
                    r17 = r17 + r2;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36f98:
                    /* Next insn is delay slot */ 
                    r31=0x36fa0;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x36fa0:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x36ec4;
                    continue;
                case 0x36fb4:
                    r3 = 5 << 16;
                    r3 = r3 + 18940;
                    /* Next insn is delay slot */ 
                    pc=0x36e9c;
                    continue;
                case 0x37000:
                    pc=0x37000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37000() throws ExecutionException { /* 0x37000 - 0x37200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3714c;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3714c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x37034;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x37034:
                    r2 = r2 + -1;
                    r2 = r16 + r2;
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3718c;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x370e0;
                        continue;
                    }
                    r4 = r0 + 47;
                    /* Next insn is delay slot */ 
                    pc=0x37074;
                    continue;
                case 0x37064:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x370d4;
                        continue;
                    }
                case 0x37074:
                    r2 = r2 + -1;
                    if(r2 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x37064;
                        continue;
                    }
                case 0x37080:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 47;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37174;
                        continue;
                    }
                case 0x37090:
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                case 0x37098:
                    r16 = r2 + 1;
                    r17 = 5 << 16;
                    r6 = r16 + r0;
                    r4 = r17 + 26568;
                    /* Next insn is delay slot */ 
                    r31=0x370b0;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x370b0:
                    r2 = r17 + 26568;
                    r16 = r16 + r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x370bc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x370d4:
                    r3 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37090;
                        continue;
                    }
                case 0x370e0:
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r3 = r0 + 47;
                    r5 = r2 + r0;
                    r4 = r0 + 47;
                    if(r6 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37110;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x37090;
                    continue;
                case 0x37100:
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3711c;
                        continue;
                    }
                case 0x37110:
                    r5 = r5 + -1;
                    if(r5 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x37100;
                        continue;
                    }
                case 0x3711c:
                    r2 = r2 - r5;
                    r3 = r2 + 2;
                    r3 = (r3&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37098;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x37138;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37138:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x370bc;
                    continue;
                case 0x3714c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r3 = r0 + 11776;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    addr=r2+26568;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 26568;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37174:
                    r2 = 5 << 16;
                    r3 = r0 + 12032;
                    addr=r2+26568;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + 26568;
                    /* Next insn is delay slot */ 
                    pc=0x370bc;
                    continue;
                case 0x3718c:
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37080;
                        continue;
                    }
                    r5 = r2 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x37098;
                    continue;
                case 0x37200:
                    pc=0x37200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37200() throws ExecutionException { /* 0x37200 - 0x37400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37200:
                    r29 = r29 + -72;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3723c;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x3723c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37298;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 18768;
                    /* Next insn is delay slot */ 
                    r31=0x3726c;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x3726c:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x37274:
                    /* Next insn is delay slot */ 
                    r31=0x3727c;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x3727c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3765c;
                        run_37600(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x372d0;
                    continue;
                case 0x37298:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x372c0;
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x372c0:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37274;
                        continue;
                    }
                case 0x372cc:
                    r18 = r0 + r0;
                case 0x372d0:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+31;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x372f4;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x372f4:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37350;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 18768;
                    /* Next insn is delay slot */ 
                    r31=0x37324;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x37324:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x3732c:
                    /* Next insn is delay slot */ 
                    r31=0x37334;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37334:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37670;
                        run_37600(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x37384;
                    continue;
                case 0x37350:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x37378;
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x37378:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3732c;
                        continue;
                    }
                case 0x37384:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+63;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x373a8;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x373a8:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37404;
                        run_37400(); return;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 18768;
                    /* Next insn is delay slot */ 
                    r31=0x373d8;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x373d8:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x373e0:
                    /* Next insn is delay slot */ 
                    r31=0x373e8;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x373e8:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37684;
                        run_37600(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x37438;
                    run_37400(); return;
                case 0x37400:
                    pc=0x37400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37400() throws ExecutionException { /* 0x37400 - 0x37600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37400:
                case 0x37404:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x3742c;
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x3742c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x373e0;
                        run_37200(); return;
                    }
                case 0x37438:
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 4;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    addr=r17+95;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3745c;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x3745c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = r17 + 96;
                    r19 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x374bc;
                        continue;
                    }
                    r4 = readPages[(r19+12)>>>12][((r19+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 18768;
                    /* Next insn is delay slot */ 
                    r31=0x37490;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x37490:
                    r2 = r0 + 22;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                case 0x37498:
                    /* Next insn is delay slot */ 
                    r31=0x374a0;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x374a0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37698;
                        run_37600(); return;
                    }
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x374f0;
                    continue;
                case 0x374bc:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = r19 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x374e4;
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x374e4:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x37498;
                        continue;
                    }
                case 0x374f0:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    addr=r17+127;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r2 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37560;
                        continue;
                    }
                    r4 = r0 + 32;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x37524;
                    continue;
                case 0x37514:
                    r3 = r3 + -1;
                    r16 = r16 + 1;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x37560;
                        continue;
                    }
                case 0x37524:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r5 = r5 + -9;
                    r5 = r5 & 255;
                    r5 = (r5&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37514;
                        continue;
                    }
                    r2 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x375e4;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r16 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x37524;
                        continue;
                    }
                case 0x37560:
                    r2 = r0 + 6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x37580;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37580:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x375f0;
                        continue;
                    }
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r5 + 18768;
                    /* Next insn is delay slot */ 
                    r31=0x375b0;
                    pc=0x1e200;
                    run_1e200(); return;
                case 0x375b0:
                    r2 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x375b8:
                    /* Next insn is delay slot */ 
                    r31=0x375c0;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x375c0:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37650;
                        run_37600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x375d8;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x375d8:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x37624;
                    run_37600(); return;
                case 0x375e4:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x37514;
                    continue;
                case 0x375f0:
                    r2 = r29 + 40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                case 0x37600:
                    pc=0x37600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37600() throws ExecutionException { /* 0x37600 - 0x37800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37600:
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    r7 = r17 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x37618;
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x37618:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x375b8;
                        run_37400(); return;
                    }
                case 0x37624:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    addr=r17+159;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r29 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37650:
                    r18 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x37624;
                    continue;
                case 0x3765c:
                    /* Next insn is delay slot */ 
                    r31=0x37664;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37664:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x372cc;
                    run_37200(); return;
                case 0x37670:
                    /* Next insn is delay slot */ 
                    r31=0x37678;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37678:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x37384;
                    run_37200(); return;
                case 0x37684:
                    /* Next insn is delay slot */ 
                    r31=0x3768c;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x3768c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x37438;
                    run_37400(); return;
                case 0x37698:
                    /* Next insn is delay slot */ 
                    r31=0x376a0;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x376a0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    pc=0x374f0;
                    run_37400(); return;
                case 0x37800:
                    pc=0x37800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37800() throws ExecutionException { /* 0x37800 - 0x37a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37800:
                    r29 = r29 + -56;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r4 + r0;
                    r2 = r29 + 40;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r5 = r29 + 32;
                    r6 = r0 + 2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37844;
                    pc=0x2b08c;
                    run_2b000(); return;
                case 0x37844:
                    r2 = r2 + 1;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r0 - r2;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37a00:
                    pc=0x37a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37a00() throws ExecutionException { /* 0x37a00 - 0x37c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37a00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r17 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x37a2c;
                    pc=0x46400;
                    run_46400(); return;
                case 0x37a2c:
                    r16 = r2 + r0;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x37a64;
                        continue;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a88;
                        continue;
                    }
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x37a4c;
                    pc=0x2b8b4;
                    run_2b800(); return;
                case 0x37a4c:
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x37b3c;
                        continue;
                    }
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37b18;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a94;
                        continue;
                    }
                case 0x37a64:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37a88:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37a94;
                    pc=0x2a600;
                    run_2a600(); return;
                case 0x37a94:
                    r4 = 5 << 16;
                    r4 = r4 + 18948;
                    r5 = r0 + 2;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37aac;
                    pc=0x46800;
                    run_46800(); return;
                case 0x37aac:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37a64;
                        continue;
                    }
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37ad0;
                    pc=0x2aa90;
                    run_2aa00(); return;
                case 0x37ad0:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x37ae4;
                    pc=0x2aa90;
                    run_2aa00(); return;
                case 0x37ae4:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r6 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r31=0x37af8;
                    pc=0x2aa90;
                    run_2aa00(); return;
                case 0x37af8:
                    r2 = r17 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a64;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37b10;
                    pc=0x46200;
                    run_46200(); return;
                case 0x37b10:
                    /* Next insn is delay slot */ 
                    pc=0x37a64;
                    continue;
                case 0x37b18:
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r5 + 18940;
                    /* Next insn is delay slot */ 
                    r31=0x37b2c;
                    pc=0x2aa10;
                    run_2aa00(); return;
                case 0x37b2c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a64;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x37a94;
                    continue;
                case 0x37b3c:
                    r16 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x37a64;
                    continue;
                case 0x37c00:
                    pc=0x37c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37c00() throws ExecutionException { /* 0x37c00 - 0x37e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37c00:
                    r29 = r29 + -80;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r23;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r21;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r20;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r18;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r23 = r4 + r0;
                    r22 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37c38;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37c38:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37c50;
                    pc=0x42600;
                    run_42600(); return;
                case 0x37c50:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37c5c;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37c5c:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r0 + 34;
                    r17 = r29 + 16;
                    r19 = r0 + r0;
                    r20 = r0 + 46;
                    r21 = r0 + 3;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                case 0x37c7c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d44;
                        continue;
                    }
                    if(r4 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x37d24;
                        continue;
                    }
                    r17 = r17 + 4;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                    r23 = r3 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x37cbc;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37cbc:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r23 + r0;
                    r5 = r29 + 32;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37cd4;
                    pc=0x42600;
                    run_42600(); return;
                case 0x37cd4:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x37ce0;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x37ce0:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    if(r2 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x37c7c;
                        continue;
                    }
                case 0x37cf0:
                    r2 = r0 + r0;
                case 0x37cf4:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r23 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r22 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r20 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r18 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37d24:
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r4 = r4 & 255;
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                case 0x37d44:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37de8;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37d80;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37e38;
                        run_37e00(); return;
                    }
                case 0x37d68:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37e6c;
                        run_37e00(); return;
                    }
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x37cf4;
                    continue;
                case 0x37d80:
                    r2 = (r16&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r2 << 24;
                    r2 = r4 | r2;
                    r3 = r3 << 8;
                    r2 = r2 | r3;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x37d68;
                    continue;
                case 0x37de8:
                    r2 = 1 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x37e00:
                    pc=0x37e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37e00() throws ExecutionException { /* 0x37e00 - 0x38000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37e00:
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        run_37c00(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        run_37c00(); return;
                    }
                    r3 = r3 << 16;
                    r2 = r2 << 24;
                    r2 = r3 | r2;
                    r16 = r2 | r16;
                    /* Next insn is delay slot */ 
                    pc=0x37d68;
                    run_37c00(); return;
                case 0x37e38:
                    r2 = 256 << 16;
                    r2 = ((r16 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        run_37c00(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = (r2&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37cf0;
                        run_37c00(); return;
                    }
                    r2 = r2 << 24;
                    r16 = r16 | r2;
                    /* Next insn is delay slot */ 
                    pc=0x37d68;
                    run_37c00(); return;
                case 0x37e6c:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x37cf4;
                    run_37c00(); return;
                case 0x38000:
                    pc=0x38000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38000() throws ExecutionException { /* 0x38000 - 0x38200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38000:
                    r29 = r29 + -32;
                    r5 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38014;
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x38014:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38030;
                        continue;
                    }
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38030:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38200:
                    pc=0x38200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38200() throws ExecutionException { /* 0x38200 - 0x38400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38200:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r5 = r5 & 65535;
                    r2 = r20 < 2 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    r19 = r6 + r0;
                    r22 = r7 + r0;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x383cc;
                        continue;
                    }
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r16 = r0 + 2;
                case 0x38254:
                    r4 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3826c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x3826c;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x3826c:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + 18856;
                    r5 = r5 + 8996;
                    /* Next insn is delay slot */ 
                    r31=0x38284;
                    pc=0x1de00;
                    run_1de00(); return;
                case 0x38284:
                    writePages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff] = r2;
                    r21 = r0 + r0;
                case 0x3828c:
                    /* Next insn is delay slot */ 
                    r31=0x38294;
                    pc=0x35800;
                    run_35800(); return;
                case 0x38294:
                    r18 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3836c;
                        continue;
                    }
                case 0x382a0:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x382ec;
                        continue;
                    }
                    addr=r2+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3828c;
                        continue;
                    }
                    r8 = r19 + 2;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x382e0;
                    continue;
                case 0x382cc:
                    r8 = r8 + 2;
                    addr=r8+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3828c;
                        continue;
                    }
                case 0x382e0:
                    r3 = r3 + 1;
                    if(r3 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x382cc;
                        continue;
                    }
                case 0x382ec:
                    r23 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3828c;
                        continue;
                    }
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x38324;
                    continue;
                case 0x38310:
                    r23 = r23 + 4;
                    r4 = readPages[(r23+-4)>>>12][((r23+-4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3828c;
                        continue;
                    }
                case 0x38324:
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38330;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x38330:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38310;
                        continue;
                    }
                    r2 = r16 < r20 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x383c0;
                        continue;
                    }
                    addr=r18+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r16 << 1;
                    r2 = r19 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x3835c;
                    pc=0x35800;
                    run_35800(); return;
                case 0x3835c:
                    r16 = r16 + 1;
                    r18 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x382a0;
                        continue;
                    }
                case 0x3836c:
                    r4 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38384;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x38384;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x38384:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    r2 = r21 + r0;
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff] = r0;
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x383c0:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3828c;
                    continue;
                case 0x383cc:
                    r16 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x38254;
                    continue;
                case 0x38400:
                    pc=0x38400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38400() throws ExecutionException { /* 0x38400 - 0x38600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38400:
                    r29 = r29 + -96;
                    r6 = r29 + 16;
                    r7 = r29 + 80;
                    r2 = r0 + 32;
                    r5 = r5 & 65535;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x38424;
                    pc=0x38200;
                    run_38200(); return;
                case 0x38424:
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r5 = tmp;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x38438;
                    pc=0x2b6e4;
                    run_2b600(); return;
                case 0x38438:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38600:
                    pc=0x38600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38600() throws ExecutionException { /* 0x38600 - 0x38800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38600:
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c200;
                    run_3c200(); return;
                case 0x38800:
                    pc=0x38800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38800() throws ExecutionException { /* 0x38800 - 0x38a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38800:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38930;
                        continue;
                    }
                case 0x38824:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r8 = r3 < 32 ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x388ac;
                        continue;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38864;
                        continue;
                    }
                case 0x38848:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38864:
                    r4 = r0 + 400;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3887c;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3887c:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38848;
                        continue;
                    }
                    r3 = readPages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff];
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    r3 = r0 + r0;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r0;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r0;
                case 0x388ac:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x388e8;
                        continue;
                    }
                case 0x388b4:
                    r4 = r3 + 1;
                    r3 = r3 + 2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x388e8:
                    r4 = r3 << 2;
                    r4 = r2 + r4;
                    writePages[(r4+136)>>>12][((r4+136)>>>2)&0x3ff] = r6;
                    r8 = readPages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r6 = r6 << (r3&0x1f);
                    r8 = r8 | r6;
                    writePages[(r2+392)>>>12][((r2+392)>>>2)&0x3ff] = r8;
                    writePages[(r4+264)>>>12][((r4+264)>>>2)&0x3ff] = r7;
                    r4 = r0 + 2;
                    if(r17 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x388b4;
                        continue;
                    }
                    r4 = readPages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff];
                    r6 = r4 | r6;
                    writePages[(r2+396)>>>12][((r2+396)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x388b4;
                    continue;
                case 0x38930:
                    r2 = r16 + 332;
                    writePages[(r16+328)>>>12][((r16+328)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x38824;
                    continue;
                case 0x38a00:
                    pc=0x38a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38a00() throws ExecutionException { /* 0x38a00 - 0x38c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38a00:
                    r2 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    r2 = r2 + 328;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r20 = r0 + 1;
                    r21 = r0 + -1;
                case 0x38a48:
                    r2 = readPages[(r28+-32732)>>>12][((r28+-32732)>>>2)&0x3ff];
                    r23 = readPages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff];
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38acc;
                        continue;
                    }
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x38a64:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x38abc;
                        continue;
                    }
                    r18 = r3 + 1;
                    r17 = r23 + 136;
                    r4 = r16 << 2;
                    r18 = r18 << 2;
                    r17 = r17 + r4;
                    r18 = r23 + r18;
                case 0x38a90:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38b00;
                        continue;
                    }
                    r3 = readPages[(r17+128)>>>12][((r17+128)>>>2)&0x3ff];
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x38b00;
                        continue;
                    }
                case 0x38aa8:
                    r16 = r16 + -1;
                    r17 = r17 + -4;
                    r18 = r18 + -4;
                    if(r16 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x38a90;
                        continue;
                    }
                case 0x38abc:
                    r2 = 2 << 16;
                    r2 = r2 + 1536;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38bb4;
                        continue;
                    }
                case 0x38acc:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38b00:
                    r4 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    if(r4 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x38b94;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x38b18:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38aa8;
                        continue;
                    }
                    r5 = readPages[(r23+392)>>>12][((r23+392)>>>2)&0x3ff];
                    r4 = r20 << (r16&0x1f);
                    r5 = r4 & r5;
                    r22 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38b84;
                        continue;
                    }
                    r5 = readPages[(r23+396)>>>12][((r23+396)>>>2)&0x3ff];
                    r4 = r4 & r5;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38ba0;
                        continue;
                    }
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x38b5c;
                    return;
                case 0x38b5c:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x38a48;
                        continue;
                    }
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x38aa8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x38a48;
                    continue;
                case 0x38b84:
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x38b8c;
                    return;
                case 0x38b8c:
                    /* Next insn is delay slot */ 
                    pc=0x38b5c;
                    continue;
                case 0x38b94:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x38b18;
                    continue;
                case 0x38ba0:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x38bac;
                    return;
                case 0x38bac:
                    /* Next insn is delay slot */ 
                    pc=0x38b5c;
                    continue;
                case 0x38bb4:
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38bfc;
                        continue;
                    }
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38c10;
                        run_38c00(); return;
                    }
                    r4 = r23 + r0;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x38be4;
                    pc=0x20600;
                    run_20600(); return;
                case 0x38be4:
                    r23 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                case 0x38bec:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38a64;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x38acc;
                    continue;
                case 0x38bfc:
                    r3 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                case 0x38c00:
                    pc=0x38c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38c00() throws ExecutionException { /* 0x38c00 - 0x38e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38c00:
                    r30 = r23 + r0;
                    r23 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x38bec;
                    run_38a00(); return;
                case 0x38c10:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x38c00;
                    continue;
                case 0x38e00:
                    pc=0x38e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38e00() throws ExecutionException { /* 0x38e00 - 0x39000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38e00:
                    r29 = r29 + -48;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r2 < r17 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39074;
                        run_39000(); return;
                    }
                    r17 = r17 + -1;
                    r12 = r17 << 2;
                    r16 = r5 + 20;
                    r18 = r16 + r12;
                    r19 = r4 + 20;
                    r12 = r19 + r12;
                    r22 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x38e6c;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x38e6c:
                    r22 = lo;
                    r21 = lo;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38f68;
                        continue;
                    }
                    r6 = r16 + r0;
                    r3 = r19 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + r0;
                case 0x38e8c:
                    r6 = r6 + 4;
                    r11 = readPages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff];
                    r8 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r11 & 65535;
                    { long hilo = (long)(r22) * ((long)r10); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r10 = lo;
                    r10 = r4 + r10;
                    r4 = r10 >>> 16;
                    { long hilo = (long)(r22) * ((long)r11); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = r10 & 65535;
                    r7 = r2 - r7;
                    r11 = lo;
                    r9 = r4 + r11;
                    r11 = r8 & 65535;
                    r7 = r7 + r11;
                    r4 = r9 >>> 16;
                    r8 = r8 >>> 16;
                    r9 = r9 & 65535;
                    r2 = r7 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r2;
                    r2 = r8 >> 16;
                    r7 = r7 & 65535;
                    r8 = r8 << 16;
                    r7 = r8 | r7;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r7;
                    r7 = ((r18 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38e8c;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38f68;
                        continue;
                    }
                    r2 = r12 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38f64;
                        continue;
                    }
                    r3 = readPages[(r12+-4)>>>12][((r12+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38f50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x38f64;
                    continue;
                case 0x38f40:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38f64;
                        continue;
                    }
                case 0x38f50:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38f40;
                        continue;
                    }
                case 0x38f64:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x38f68:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x38f74;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x38f74:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39044;
                        run_39000(); return;
                    }
                    r21 = r22 + 1;
                    r3 = r19 + r0;
                    r8 = r0 + r0;
                case 0x38f88:
                    r16 = r16 + 4;
                    r7 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r7 & 65535;
                    r2 = r6 & 65535;
                    r5 = r8 - r5;
                    r5 = r5 + r2;
                    r6 = r6 >>> 16;
                    r7 = r7 >>> 16;
                    r2 = r5 >> 16;
                    r6 = r6 - r7;
                    r6 = r6 + r2;
                    r8 = r6 >> 16;
                    r5 = r5 & 65535;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r18 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38f88;
                        continue;
                    }
                    r3 = r17 << 2;
                    r3 = r19 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39044;
                        run_39000(); return;
                    }
                    r2 = r3 + -4;
                    r4 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39040;
                        run_39000(); return;
                    }
                case 0x39000:
                    pc=0x39000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39000() throws ExecutionException { /* 0x39000 - 0x39200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39000:
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3902c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x39040;
                    continue;
                case 0x3901c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39040;
                        continue;
                    }
                case 0x3902c:
                    r2 = r2 + -4;
                    r3 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r17 = r17 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3901c;
                        continue;
                    }
                case 0x39040:
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r17;
                case 0x39044:
                    r2 = r21 + r0;
                case 0x39048:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39074:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39048;
                    continue;
                case 0x39200:
                    pc=0x39200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39200() throws ExecutionException { /* 0x39200 - 0x39400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39200:
                    r5 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r29 = r29 + -128;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = f20;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = f21;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39270;
                        continue;
                    }
                    r2 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r2 = r3 << (r2&0x1f);
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x3926c;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x3926c:
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r0;
                case 0x39270:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3937c;
                        continue;
                    }
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                case 0x39288:
                    r2 = 32752 << 16;
                    r3 = r18 & r2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39324;
                        continue;
                    }
                    f20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r0;
                    f21 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x393a0;
                        continue;
                    }
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3996c;
                        run_39800(); return;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 15065;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = r2 + 15064;
                case 0x392e8:
                    f20 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    f21 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39324:
                    r8 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r9 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r0 + 9999;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r2;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3990c;
                        run_39800(); return;
                    }
                case 0x3933c:
                    r2 = 5 << 16;
                    r2 = r2 + 19748;
                case 0x39344:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x392e8;
                        continue;
                    }
                    addr=r2+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39930;
                        run_39800(); return;
                    }
                    r3 = r2 + 3;
                case 0x39368:
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x392e8;
                    continue;
                case 0x3937c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = 32767 << 16;
                    r18 = r18 | 65535;
                    r2 = r0 + 1;
                    r18 = r18 & r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x39288;
                    continue;
                case 0x393a0:
                    r2 = r29 + 24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r7 = f20;
                    r2 = r29 + 28;
                    r6 = f21;
                    r4 = r16 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x393c4;
                    pc=0x3f600;
                    run_3f600(); return;
                case 0x393c4:
                    r4 = r18 >>> 20;
                    r17 = r2 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3993c;
                        run_39800(); return;
                    }
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r5 + r4;
                    r2 = r4 < -1041 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39ff0;
                        run_39e00(); return;
                    }
                    r2 = r0 + -1010;
                    r2 = r2 - r4;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 << (r2&0x1f);
                case 0x39400:
                    pc=0x39400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39400() throws ExecutionException { /* 0x39400 - 0x39600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39400:
                    r2 = r4 + 1042;
                    r2 = r6 >>> (r2&0x1f);
                    r18 = r18 | r2;
                case 0x3940c:
                    f0 = r18;
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a598;
                        run_3a400(); return;
                    }
                case 0x39420:
                    r2 = f3;
                    r6 = 65040 << 16;
                    r3 = f2;
                    r2 = r6 + r2;
                    r4 = r4 + -1;
                    r19 = r0 + 1;
                case 0x39438:
                    f4 = r3;
                    f0 = readPages[(r28+-32684)>>>12][((r28+-32684)>>>2)&0x3ff];
                    f5 = r2;
                    f1 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    f6 = r4;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32676)>>>12][((r28+-32676)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32680)>>>12][((r28+-32680)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r28+-32668)>>>12][((r28+-32668)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32672)>>>12][((r28+-32672)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = readPages[(r28+-32660)>>>12][((r28+-32660)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f6)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32664)>>>12][((r28+-32664)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x39f84;
                        run_39e00(); return;
                    }
                case 0x394dc:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = (r8&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f4c;
                        run_39e00(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 19856;
                    r2 = r2 + r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a008;
                        run_3a000(); return;
                    }
                    r8 = r8 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x39530:
                    r4 = r5 - r4;
                    r23 = r4 + -1;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f74;
                        run_39e00(); return;
                    }
                    r18 = r0 + r0;
                case 0x39544:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f5c;
                        run_39e00(); return;
                    }
                    r23 = r23 + r8;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    r22 = r0 + r0;
                case 0x39560:
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3997c;
                        run_39800(); return;
                    }
                    r2 = r3 < 6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a9f8;
                        run_3a800(); return;
                    }
                    r3 = r3 + -4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r3;
                    r8 = r0 + r0;
                case 0x3958c:
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a5b4;
                        run_3a400(); return;
                    }
                    r2 = r9 < 4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a42c;
                        run_3a400(); return;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a1fc;
                        run_3a000(); return;
                    }
                    r2 = r0 + 5;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39980;
                        run_39800(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                case 0x395cc:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r9 = r9 + r3;
                    r30 = r9 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r9;
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a618;
                        run_3a600(); return;
                    }
                    r6 = r30 + r0;
                case 0x395f0:
                    r2 = (r6&0xffffffffL) < (24&0xffffffffL) ? 1 : 0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3aa04;
                        run_3aa00(); return;
                    }
                case 0x39600:
                    pc=0x39600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39600() throws ExecutionException { /* 0x39600 - 0x39800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39600:
                    r3 = r0 + 1;
                    r2 = r0 + 4;
                case 0x39608:
                    r2 = r2 << 1;
                    r4 = r2 + 20;
                    r4 = ((r6 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r5 = r3 + r0;
                    r3 = r3 + 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39608;
                        continue;
                    }
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r5;
                    r21 = r6 + r0;
                case 0x3962c:
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r8;
                    r21 = (r21&0xffffffffL) < (15&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r31=0x39640;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x39640:
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x399b4;
                        run_39800(); return;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x399b4;
                        run_39800(); return;
                    }
                    f8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a62c;
                        run_3a600(); return;
                    }
                    r3 = r8 & 15;
                    r2 = 5 << 16;
                    r3 = r3 << 3;
                    r2 = r2 + 19856;
                    r2 = r3 + r2;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r8 >> 4;
                    r3 = r2 & 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a5e0;
                        run_3a400(); return;
                    }
                    r3 = 5 << 16;
                    f0 = readPages[(r3+19852)>>>12][((r3+19852)>>>2)&0x3ff];
                    r2 = r2 & 15;
                    f1 = readPages[(r3+19848)>>>12][((r3+19848)>>>2)&0x3ff];
                    r8 = r0 + 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x396b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x396f8;
                        continue;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 19816;
                case 0x396c8:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x396e8;
                        continue;
                    }
                    f4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x396e8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x396c8;
                        continue;
                    }
                case 0x396f8:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x396fc:
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3972c;
                        continue;
                    }
                    f2 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a8b4;
                        run_3a800(); return;
                    }
                case 0x3972c:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a500;
                        run_3a400(); return;
                    }
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r30 + r0;
                case 0x3976c:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = r4 + -1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a774;
                        run_3a600(); return;
                    }
                    r3 = 5 << 16;
                    r5 = r5 << 3;
                    r3 = r3 + 19856;
                    r3 = r5 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f6 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f6 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f6 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f4 = r9;
                    r7 = f6;
                    f5 = r8;
                    r5 = r7 + 48;
                    r5 = r5 << 24;
                    r5 = r5 >> 24;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f6)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x398c0;
                        run_39800(); return;
                    }
                case 0x39800:
                    pc=0x39800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39800() throws ExecutionException { /* 0x39800 - 0x39a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39800:
                    f10 = readPages[(r28+-32652)>>>12][((r28+-32652)>>>2)&0x3ff];
                    f11 = readPages[(r28+-32656)>>>12][((r28+-32656)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a980;
                        run_3a800(); return;
                    }
                    r5 = r4 < 2 ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a568;
                        run_3a400(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x39864;
                    continue;
                case 0x39848:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a980;
                        run_3a800(); return;
                    }
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3a568;
                        run_3a400(); return;
                    }
                case 0x39864:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = r3 + 1;
                    r8 = fcsr;
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f12 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f12 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f12 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    { long l = Double.doubleToLongBits(((double)f12)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r9 = f12;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = r9 + 48;
                    r5 = r5 << 24;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    r5 = r5 >> 24;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x39848;
                        continue;
                    }
                case 0x398c0:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                case 0x398c4:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x398d8;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x398d8:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r8 + 1;
                    r9 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff] = r2;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a420;
                        run_3a400(); return;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x392e8;
                    run_39200(); return;
                case 0x3990c:
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r18 = r18 & r2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3933c;
                        run_39200(); return;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + 19736;
                    /* Next insn is delay slot */ 
                    pc=0x39344;
                    run_39200(); return;
                case 0x39930:
                    r3 = r2 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x39368;
                    run_39200(); return;
                case 0x3993c:
                    r2 = f21;
                    r6 = 15 << 16;
                    r6 = r6 | 65535;
                    r5 = 16368 << 16;
                    r6 = r2 & r6;
                    r2 = r6 | r5;
                    r3 = f20;
                    r4 = r4 + -1023;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39438;
                    run_39400(); return;
                case 0x3996c:
                    r2 = 5 << 16;
                    r2 = r2 + 15064;
                    /* Next insn is delay slot */ 
                    pc=0x392e8;
                    run_39200(); return;
                case 0x3997c:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                case 0x39980:
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39994;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x39994:
                    r8 = r0 + -1;
                    r9 = r0 + 1;
                    r20 = r2 + r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r8;
                    r30 = r0 + -1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x399b4:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39b7c;
                        run_39a00(); return;
                    }
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r8 < 15 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39b7c;
                        run_39a00(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + 19856;
                    r2 = r2 + r3;
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a228;
                        run_3a200(); return;
                    }
                case 0x399fc:
                    f6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                case 0x39a00:
                    pc=0x39a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39a00() throws ExecutionException { /* 0x39a00 - 0x39c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39a00:
                    f7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    { long l = Double.doubleToLongBits(((double)f10)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = f10;
                    r3 = r20 + 1;
                    r2 = r4 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39b00;
                        continue;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    f8 = r0;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    f9 = r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x398c4;
                        run_39800(); return;
                    }
                    r2 = r20 + 2;
                    r30 = r20 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x39aac;
                    continue;
                case 0x39a94:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 1;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x398c4;
                        run_39800(); return;
                    }
                case 0x39aac:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r3 = r2 + r0;
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f10 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f10 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f10 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f10)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r5 = f10;
                    r4 = r5 + 48;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x39a94;
                        continue;
                    }
                case 0x39b00:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x39b38;
                        continue;
                    }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x398c4;
                        run_39800(); return;
                    }
                    r4 = f10;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x398c4;
                        run_39800(); return;
                    }
                case 0x39b38:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x39b3c:
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x39b58;
                    continue;
                case 0x39b48:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a6b4;
                        run_3a600(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r3 = r2 + r0;
                case 0x39b58:
                    r2 = r3 + -1;
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x39b48;
                        continue;
                    }
                    r4 = r5 + 1;
                    r4 = r4 << 24;
                    r4 = r4 >> 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x398c4;
                    run_39800(); return;
                case 0x39b7c:
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39fb8;
                        run_39e00(); return;
                    }
                    r9 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r9 = r9 < 2 ? 1 : 0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r9;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2fc;
                        run_3a200(); return;
                    }
                    r3 = r30 + -1;
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a5c0;
                        run_3a400(); return;
                    }
                    r3 = r22 - r3;
                case 0x39bb8:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a878;
                        run_3a800(); return;
                    }
                    r21 = r18 + r0;
                    r2 = r30 + r0;
                case 0x39bc8:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    r18 = r18 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    r31=0x39be4;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x39be4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = r2 + r0;
                case 0x39bec:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39c18;
                        run_39c00(); return;
                    }
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39c18;
                        run_39c00(); return;
                    }
                    r4 = r21 < r23 ? 1 : 0;
                case 0x39c00:
                    pc=0x39c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39c00() throws ExecutionException { /* 0x39c00 - 0x39e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39c00:
                    r2 = r23 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a1f0;
                        run_3a000(); return;
                    }
                case 0x39c0c:
                    r18 = r18 - r2;
                    r21 = r21 - r2;
                    r23 = r23 - r2;
                case 0x39c18:
                    if(r22 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39c94;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a578;
                        run_3a400(); return;
                    }
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39c88;
                        continue;
                    }
                    r6 = r3 + r0;
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x39c50;
                    pc=0x3ea00;
                    run_3ea00(); return;
                case 0x39c50:
                    r5 = r2 + r0;
                    r6 = r17 + r0;
                    r4 = r16 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39c68;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x39c68:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x39c7c;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x39c7c:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r17 = r2 + r0;
                case 0x39c88:
                    r6 = r22 - r3;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2a4;
                        run_3a200(); return;
                    }
                case 0x39c94:
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x39ca4;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x39ca4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r2 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39ccc;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39cc8;
                    pc=0x3ea00;
                    run_3ea00(); return;
                case 0x39cc8:
                    r22 = r2 + r0;
                case 0x39ccc:
                    r7 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a1a0;
                        run_3a000(); return;
                    }
                case 0x39cdc:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x39ce0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a3f0;
                        run_3a200(); return;
                    }
                    r2 = r0 + 1;
                case 0x39cf4:
                    r2 = r2 + r23;
                    r2 = r2 & 31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39fd8;
                        run_39e00(); return;
                    }
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    r4 = r3 < 5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a9dc;
                        run_3a800(); return;
                    }
                    r3 = r0 + 28;
                    r2 = r3 - r2;
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                case 0x39d2c:
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d4c;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39d48;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x39d48:
                    r17 = r2 + r0;
                case 0x39d4c:
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d6c;
                        continue;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39d68;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x39d68:
                    r22 = r2 + r0;
                case 0x39d6c:
                    r8 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a148;
                        run_3a000(); return;
                    }
                case 0x39d7c:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a444;
                        run_3a400(); return;
                    }
                case 0x39d84:
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a014;
                        run_3a000(); return;
                    }
                    if(r21 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39db4;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39db0;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x39db0:
                    r19 = r2 + r0;
                case 0x39db4:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a6d8;
                        run_3a600(); return;
                    }
                    r21 = r19 + r0;
                case 0x39dc8:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = r20 + r30;
                    r8 = r8 & 1;
                    r18 = r20 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r8;
                case 0x39de0:
                    r9 = r18 + -1;
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x39df8;
                    pc=0x38e00;
                    run_38e00(); return;
                case 0x39df8:
                    r4 = r17 + r0;
                    r5 = r19 + r0;
                case 0x39e00:
                    pc=0x39e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39e00() throws ExecutionException { /* 0x39e00 - 0x3a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39e00:
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r23 = r2 + 48;
                    /* Next insn is delay slot */ 
                    r31=0x39e10;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x39e10:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r21 + r0;
                    r30 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39e28;
                    pc=0x3f000;
                    run_3f000(); return;
                case 0x39e28:
                    r3 = r2 + r0;
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a3d4;
                        run_3a200(); return;
                    }
                    r5 = r3 + r0;
                    r4 = r17 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x39e50;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x39e50:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x39e68;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x39e68:
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e98;
                        continue;
                    }
                    r3 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e98;
                        continue;
                    }
                    r8 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a390;
                        run_3a200(); return;
                    }
                case 0x39e98:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a324;
                        run_3a200(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39ec8;
                        continue;
                    }
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39ec8;
                        continue;
                    }
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a324;
                        run_3a200(); return;
                    }
                case 0x39ec8:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a728;
                        run_3a600(); return;
                    }
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r18 + r0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x3a754;
                        run_3a600(); return;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39efc;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x39efc:
                    r17 = r2 + r0;
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    if(r19 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x3a3b8;
                        run_3a200(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x39f20;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x39f20:
                    r5 = r21 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x39f3c;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x39f3c:
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x39de0;
                    run_39c00(); return;
                case 0x39f4c:
                    r3 = r0 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x39530;
                    run_39400(); return;
                case 0x39f5c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    r18 = r18 - r9;
                    r22 = r0 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x39560;
                    run_39400(); return;
                case 0x39f74:
                    r18 = r0 - r23;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39544;
                    run_39400(); return;
                case 0x39f84:
                    f4 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f4)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x394dc;
                        run_39400(); return;
                    }
                    r3 = f4;
                    r3 = r3 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x394dc;
                    run_39400(); return;
                case 0x39fb8:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r22 + r0;
                    r8 = r8 < 2 ? 1 : 0;
                    r21 = r18 + r0;
                    r19 = r0 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x39bec;
                    run_39a00(); return;
                case 0x39fd8:
                    r2 = r0 + 28;
                case 0x39fdc:
                    r18 = r18 + r2;
                    r21 = r21 + r2;
                    r23 = r23 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x39d2c;
                    run_39c00(); return;
                case 0x39ff0:
                    r18 = r0 + -1042;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = r18 - r4;
                    r18 = r7 << (r18&0x1f);
                case 0x3a000:
                    pc=0x3a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a000() throws ExecutionException { /* 0x3a000 - 0x3a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a000:
                    /* Next insn is delay slot */ 
                    pc=0x3940c;
                    run_39400(); return;
                case 0x3a008:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x39530;
                    run_39400(); return;
                case 0x3a014:
                    r18 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a03c;
                    continue;
                case 0x3a020:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a038;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3a038:
                    r17 = r2 + r0;
                case 0x3a03c:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a04c;
                    pc=0x38e00;
                    run_38e00(); return;
                case 0x3a04c:
                    r18 = r18 + 1;
                    r23 = r2 + 48;
                    r2 = r18 - r20;
                    r2 = r2 < r30 ? 1 : 0;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a020;
                        continue;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a318;
                        run_3a200(); return;
                    }
                case 0x3a070:
                    r3 = r20 + r30;
                    r18 = r0 + r0;
                case 0x3a078:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3a090;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x3a090:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a0a4;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x3a0a4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2c0;
                        run_3a200(); return;
                    }
                case 0x3a0b0:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                case 0x3a0b4:
                    r5 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x3a0d0;
                    continue;
                case 0x3a0c0:
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a4b4;
                        run_3a400(); return;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r2 + r0;
                case 0x3a0d0:
                    r2 = r3 + -1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3a0c0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3a0e4:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3a0f8;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x3a0f8:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x398c4;
                        run_39800(); return;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a128;
                        continue;
                    }
                    if(r18 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x3a128;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a124;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x3a124:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                case 0x3a128:
                    r4 = r16 + r0;
                    r5 = r19 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3a13c;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x3a13c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x398c4;
                    run_39800(); return;
                case 0x3a148:
                    r4 = r17 + r0;
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a158;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x3a158:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d7c;
                        run_39c00(); return;
                    }
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r9 = r9 + -1;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x3a184;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3a184:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = r2 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a9a8;
                        run_3a800(); return;
                    }
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x39d7c;
                    run_39c00(); return;
                case 0x3a1a0:
                    r8 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39cdc;
                        run_39c00(); return;
                    }
                    r2 = 15 << 16;
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39cdc;
                        run_39c00(); return;
                    }
                    r2 = 32752 << 16;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39cdc;
                        run_39c00(); return;
                    }
                    r3 = r0 + 1;
                    r18 = r18 + 1;
                    r23 = r23 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x39ce0;
                    run_39c00(); return;
                case 0x3a1f0:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39c0c;
                    run_39c00(); return;
                case 0x3a1fc:
                    r9 = r0 + 1;
                case 0x3a200:
                    pc=0x3a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a200() throws ExecutionException { /* 0x3a200 - 0x3a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a200:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                case 0x3a204:
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a5f0;
                        run_3a400(); return;
                    }
                    r6 = r4 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r30 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x395f0;
                    run_39400(); return;
                case 0x3a228:
                    if(r30 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x399fc;
                        run_39800(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a558;
                        run_3a400(); return;
                    }
                    f0 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f1 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a494;
                        run_3a400(); return;
                    }
                case 0x3a26c:
                    r9 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r20 + r0;
                    r9 = ~(r0 | r9);
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                case 0x3a27c:
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3a290;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x3a290:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a128;
                        run_3a000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x398c4;
                    run_39800(); return;
                case 0x3a2a4:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a2b4;
                    pc=0x3ea00;
                    run_3ea00(); return;
                case 0x3a2b4:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39c94;
                    run_39c00(); return;
                case 0x3a2c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2d4;
                        continue;
                    }
                    r23 = r23 & 1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a0b0;
                        run_3a000(); return;
                    }
                case 0x3a2d4:
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x3a2e4;
                    continue;
                case 0x3a2e0:
                    r3 = r4 + r0;
                case 0x3a2e4:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = r3 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3a0e4;
                    run_3a000(); return;
                case 0x3a2fc:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a888;
                        run_3a800(); return;
                    }
                    r2 = r2 + 1075;
                    r3 = r22 + r0;
                    r21 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39bc8;
                    run_39a00(); return;
                case 0x3a318:
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3a070;
                    run_3a000(); return;
                case 0x3a324:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a374;
                        continue;
                    }
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3a340;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x3a340:
                    r4 = r2 + r0;
                    r5 = r22 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a354;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x3a354:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a98c;
                        run_3a800(); return;
                    }
                case 0x3a35c:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a91c;
                        run_3a800(); return;
                    }
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r3 + 49;
                case 0x3a374:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = r19 + r0;
                    r3 = r7 + 1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a0e4;
                    run_3a000(); return;
                case 0x3a390:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a91c;
                        run_3a800(); return;
                    }
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a374;
                        continue;
                    }
                    r9 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r23 = r9 + 49;
                    /* Next insn is delay slot */ 
                    pc=0x3a374;
                    continue;
                case 0x3a3b8:
                    /* Next insn is delay slot */ 
                    r31=0x3a3c0;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3a3c0:
                    r19 = r2 + r0;
                    r21 = r2 + r0;
                    r18 = r18 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x39de0;
                    run_39c00(); return;
                case 0x3a3d4:
                    r4 = r16 + r0;
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a3e4;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x3a3e4:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x39e98;
                    run_39e00(); return;
                case 0x3a3f0:
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    r2 = r2 << 2;
                case 0x3a400:
                    pc=0x3a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a400() throws ExecutionException { /* 0x3a400 - 0x3a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a400:
                    r2 = r22 + r2;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3a410;
                    pc=0x3e000;
                    run_3e000(); return;
                case 0x3a410:
                    r3 = r0 + 32;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x39cf4;
                    run_39c00(); return;
                case 0x3a420:
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x392e8;
                    run_39200(); return;
                case 0x3a42c:
                    r2 = r0 + 2;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39980;
                        run_39800(); return;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a204;
                    run_3a200(); return;
                case 0x3a444:
                    r8 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r8 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39d84;
                        run_39c00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a26c;
                        run_3a200(); return;
                    }
                    r5 = r22 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 5;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a478;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3a478:
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    r22 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a48c;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x3a48c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a26c;
                        run_3a200(); return;
                    }
                case 0x3a494:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r8 = r8 + 1;
                    r3 = r20 + 1;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x3a27c;
                    run_3a200(); return;
                case 0x3a4b4:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    r9 = r9 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r9;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3a0e4;
                    run_3a000(); return;
                case 0x3a4d0:
                    f4 = r8;
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r2 + r8;
                case 0x3a500:
                    f2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32632)>>>12][((r28+-32632)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = r9;
                    f3 = r8;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a764;
                        run_3a600(); return;
                    }
                    r4 = 32768 << 16;
                    f2 = r9;
                    r2 = r4 ^ r8;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a568;
                        continue;
                    }
                case 0x3a558:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a26c;
                    run_3a200(); return;
                case 0x3a568:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = f8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = f9;
                    /* Next insn is delay slot */ 
                    pc=0x399b4;
                    run_39800(); return;
                case 0x3a578:
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a58c;
                    pc=0x3ea00;
                    run_3ea00(); return;
                case 0x3a58c:
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39c94;
                    run_39c00(); return;
                case 0x3a598:
                    f0 = readPages[(r28+-32692)>>>12][((r28+-32692)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32696)>>>12][((r28+-32696)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x39420;
                    run_39400(); return;
                case 0x3a5b4:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x395cc;
                    run_39400(); return;
                case 0x3a5c0:
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r3 - r22;
                    r7 = r7 + r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r7;
                    r22 = r3 + r0;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39bb8;
                    run_39a00(); return;
                case 0x3a5e0:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x396b8;
                    run_39600(); return;
                case 0x3a5f0:
                    r3 = r0 + 1;
                    r4 = r0 + 1;
                    r21 = r0 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                case 0x3a600:
                    pc=0x3a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a600() throws ExecutionException { /* 0x3a600 - 0x3a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a600:
                    r30 = r0 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3962c;
                    run_39600(); return;
                case 0x3a618:
                    r21 = r30 + r0;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3962c;
                    run_39600(); return;
                case 0x3a62c:
                    r9 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 - r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a8a4;
                        run_3a800(); return;
                    }
                    r4 = r2 & 15;
                    r3 = 5 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 19856;
                    r3 = r4 + r3;
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 >> 4;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a9d0;
                        run_3a800(); return;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 19816;
                    r8 = r0 + 2;
                case 0x3a67c:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a69c;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x3a69c:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a67c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x396fc;
                    run_39600(); return;
                case 0x3a6b4:
                    r8 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    r4 = r0 + 49;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r8;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x398c4;
                    run_39800(); return;
                case 0x3a6d8:
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a6e8;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3a6e8:
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r18 = r2 + r0;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r5 = r19 + 12;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x3a708;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x3a708:
                    r4 = r16 + r0;
                    r5 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3a71c;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x3a71c:
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39dc8;
                    run_39c00(); return;
                case 0x3a728:
                    r2 = r0 + 57;
                    if(r23 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a91c;
                        run_3a800(); return;
                    }
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r18 = r19 + r0;
                    r3 = r9 + 1;
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r23&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a0e4;
                    run_3a000(); return;
                case 0x3a754:
                    r18 = r19 + r0;
                    r19 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a078;
                    run_3a000(); return;
                case 0x3a764:
                    r22 = r0 + r0;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3a494;
                    run_3a400(); return;
                case 0x3a774:
                    r3 = 5 << 16;
                    r6 = r5 << 3;
                    r3 = r3 + 19856;
                    r3 = r6 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r9;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f5 = r8;
                    r3 = r20 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f11 = (int)(l >>> 32); f10 = (int)l; }
                    r6 = fcsr;
                    r6 = fcsr;
                    r1 = r6 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r6;
                    r7 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r6 = r7 + 48;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3a844;
                        run_3a800(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r4 = r20 + r4;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    r6 = r3 + r0;
                case 0x3a7f4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r6 = r6 + 1;
                    r8 = fcsr;
                case 0x3a800:
                    pc=0x3a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a800() throws ExecutionException { /* 0x3a800 - 0x3aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a800:
                    r8 = fcsr;
                    r1 = r8 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f4 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f4 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f4 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r8;
                    r9 = f4;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r10 = r9 + 48;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3a7f4;
                        run_3a600(); return;
                    }
                    r3 = r3 + r5;
                case 0x3a844:
                    f2 = readPages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a940;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x39b3c;
                    run_39a00(); return;
                case 0x3a878:
                    r21 = r18 - r30;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39bc8;
                    run_39a00(); return;
                case 0x3a888:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    r2 = r3 - r2;
                    r21 = r18 + r0;
                    r3 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x39bc8;
                    run_39a00(); return;
                case 0x3a8a4:
                    f0 = f8;
                    f1 = f9;
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x396fc;
                    run_39600(); return;
                case 0x3a8b4:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a4d0;
                        run_3a400(); return;
                    }
                    r9 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a568;
                        run_3a400(); return;
                    }
                    f6 = readPages[(r28+-32644)>>>12][((r28+-32644)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    f7 = readPages[(r28+-32648)>>>12][((r28+-32648)>>>2)&0x3ff];
                    f4 = r8;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r3 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f2 = readPages[(r28+-32636)>>>12][((r28+-32636)>>>2)&0x3ff];
                    r3 = 64704 << 16;
                    f3 = readPages[(r28+-32640)>>>12][((r28+-32640)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r8 = f7;
                    r9 = f6;
                    r8 = r3 + r8;
                    /* Next insn is delay slot */ 
                    pc=0x3976c;
                    run_39600(); return;
                case 0x3a91c:
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r0 + 57;
                    r18 = r19 + r0;
                    r3 = r8 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r21 + r0;
                    r4 = r0 + 57;
                    /* Next insn is delay slot */ 
                    pc=0x3a0b4;
                    run_3a000(); return;
                case 0x3a940:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f11&0xffffffffL) << 32) | (f10&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3a568;
                        run_3a400(); return;
                    }
                    r6 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x3a964;
                    continue;
                case 0x3a960:
                    r3 = r5 + r0;
                case 0x3a964:
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r3 + -1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3a960;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x398c4;
                    run_39800(); return;
                case 0x3a980:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x39b3c;
                    run_39a00(); return;
                case 0x3a98c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a374;
                        run_3a200(); return;
                    }
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a374;
                        run_3a200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3a35c;
                    run_3a200(); return;
                case 0x3a9a8:
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3a9c0;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3a9c0:
                    r19 = r2 + r0;
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x39d7c;
                    run_39c00(); return;
                case 0x3a9d0:
                    r8 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x396fc;
                    run_39600(); return;
                case 0x3a9dc:
                    r4 = r0 + 4;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x39d2c;
                        run_39c00(); return;
                    }
                    r3 = r0 + 60;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x39fdc;
                    run_39e00(); return;
                case 0x3a9f8:
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3958c;
                    run_39400(); return;
                case 0x3aa00:
                    pc=0x3aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3aa00() throws ExecutionException { /* 0x3aa00 - 0x3ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3aa00:
                case 0x3aa04:
                    r21 = r6 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3962c;
                    run_39600(); return;
                case 0x3ac00:
                    pc=0x3ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ac00() throws ExecutionException { /* 0x3ac00 - 0x3ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ac00:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 114;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3ac98;
                        continue;
                    }
                    r3 = r0 + 119;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3ac84;
                        continue;
                    }
                    r3 = r0 + 97;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3ac3c;
                        continue;
                    }
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ac3c:
                    r7 = r0 + 520;
                    r4 = r0 + 1;
                    r2 = r0 + 264;
                case 0x3ac48:
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ac74;
                        continue;
                    }
                    r8 = r0 + 43;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x3acac;
                        continue;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x3acac;
                        continue;
                    }
                case 0x3ac74:
                    r4 = r4 | r7;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ac84:
                    r7 = r0 + 1536;
                    r4 = r0 + 1;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3ac48;
                    continue;
                case 0x3ac98:
                    r7 = r0 + r0;
                    r4 = r0 + r0;
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x3ac48;
                    continue;
                case 0x3acac:
                    r3 = r0 + -29;
                    r4 = r0 + 2;
                    r2 = r2 & r3;
                    r4 = r4 | r7;
                    r2 = r2 | 16;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ae00:
                    pc=0x3ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ae00() throws ExecutionException { /* 0x3ae00 - 0x3b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ae00:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x3ae28;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x3ae28:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r29 + 28;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ae58;
                        continue;
                    }
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3aeb0;
                        continue;
                    }
                case 0x3ae58:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ae84;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r3 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r3 & r2;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r2;
                case 0x3ae84:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    r6 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x3ae98;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x3ae98:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3aeb0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3aebc;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x3aebc:
                    /* Next insn is delay slot */ 
                    pc=0x3ae58;
                    continue;
                case 0x3b000:
                    pc=0x3b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b000() throws ExecutionException { /* 0x3b000 - 0x3b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ae00;
                    run_3ae00(); return;
                case 0x3b200:
                    pc=0x3b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b200() throws ExecutionException { /* 0x3b200 - 0x3b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b200:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b2d4;
                        continue;
                    }
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r21 = r4 + r0;
                    r3 = r2 & 8;
                    r16 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b30c;
                        continue;
                    }
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b30c;
                        continue;
                    }
                    r3 = r2 & 2;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b338;
                        continue;
                    }
                case 0x3b274:
                    r20 = r0 + r0;
                    r18 = r0 + r0;
                case 0x3b27c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b3fc;
                        continue;
                    }
                    r2 = (r18&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r7 = r18 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b29c;
                        continue;
                    }
                    r7 = r0 + 1024;
                case 0x3b29c:
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3b2b0;
                    return;
                case 0x3b2b0:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b43c;
                        run_3b400(); return;
                    }
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r20 + r2;
                    r18 = r18 - r2;
                    r2 = r3 - r2;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b27c;
                        continue;
                    }
                case 0x3b2d4:
                    r2 = r0 + r0;
                case 0x3b2d8:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b30c:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b31c;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x3b31c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b7ec;
                        run_3b600(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r17 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = r2 & 2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b274;
                        continue;
                    }
                case 0x3b338:
                    r3 = r2 & 1;
                    r22 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b458;
                        run_3b400(); return;
                    }
                    r18 = r0 + r0;
                case 0x3b34c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b3e8;
                        continue;
                    }
                case 0x3b354:
                    r3 = r2 & 512;
                    r20 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b538;
                        run_3b400(); return;
                    }
                    r3 = ((r18 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b600;
                        run_3b600(); return;
                    }
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b684;
                        run_3b600(); return;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r23 = r20 + r0;
                    r30 = r20 + r0;
                    r20 = r18 + r0;
                case 0x3b38c:
                    r5 = r22 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b39c;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x3b39c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r30 = r2 - r30;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r30;
                    r3 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                case 0x3b3bc:
                    r22 = r22 + r2;
                    r18 = r18 - r2;
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b2d4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b354;
                        continue;
                    }
                case 0x3b3e8:
                    r22 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3b34c;
                    continue;
                case 0x3b3fc:
                    r20 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x3b400:
                    pc=0x3b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b400() throws ExecutionException { /* 0x3b400 - 0x3b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b400:
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3b27c;
                    run_3b200(); return;
                case 0x3b410:
                    /* Next insn is delay slot */ 
                    r31=0x3b418;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x3b418:
                    r30 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b710;
                        run_3b600(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b434;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x3b434:
                    r2 = r0 + 12;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                case 0x3b43c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3b2d8;
                    run_3b200(); return;
                case 0x3b458:
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    r18 = r0 + r0;
                case 0x3b464:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b520;
                        continue;
                    }
                case 0x3b46c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b654;
                        run_3b600(); return;
                    }
                case 0x3b474:
                    r2 = ((r18 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b488;
                        continue;
                    }
                    r23 = r18 + r0;
                case 0x3b488:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r20 = r23 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b4b8;
                        continue;
                    }
                    r8 = r6 + r7;
                    r2 = r8 < r23 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b73c;
                        run_3b600(); return;
                    }
                case 0x3b4b8:
                    r2 = r23 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5a0;
                        continue;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3b4e0;
                    return;
                case 0x3b4e0:
                    r20 = r2 + r0;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b43c;
                        continue;
                    }
                case 0x3b4f0:
                    r22 = r22 - r20;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b5dc;
                        continue;
                    }
                case 0x3b4fc:
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r30 = r30 + r20;
                    r18 = r18 - r20;
                    r20 = r2 - r20;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r20;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b2d4;
                        run_3b200(); return;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b46c;
                        continue;
                    }
                case 0x3b520:
                    r30 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r18 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = r0 + r0;
                    r17 = r17 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3b464;
                    continue;
                case 0x3b538:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b55c;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b790;
                        run_3b600(); return;
                    }
                case 0x3b55c:
                    r7 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = ((r18 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b618;
                        run_3b600(); return;
                    }
                    r2 = readPages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff];
                    r5 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x3b588;
                    return;
                case 0x3b588:
                    r20 = r2 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b43c;
                        continue;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3bc;
                    run_3b200(); return;
                case 0x3b5a0:
                    r6 = r23 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x3b5b4;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x3b5b4:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r22 = r22 - r20;
                    r2 = r2 - r23;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r23;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b4fc;
                        continue;
                    }
                case 0x3b5dc:
                    r4 = r21 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b5ec;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x3b5ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b43c;
                        continue;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b4fc;
                    continue;
                case 0x3b600:
                    pc=0x3b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b600() throws ExecutionException { /* 0x3b600 - 0x3b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b600:
                    r30 = r18 + r0;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b38c;
                    run_3b200(); return;
                case 0x3b618:
                    r5 = r22 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b628;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x3b628:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r2 = r2 - r18;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3bc;
                    run_3b200(); return;
                case 0x3b654:
                    r4 = r30 + r0;
                    r5 = r0 + 10;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b668;
                    pc=0x21200;
                    run_21200(); return;
                case 0x3b668:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b7dc;
                        continue;
                    }
                    r22 = r2 + 1;
                    r22 = r22 - r30;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3b474;
                    run_3b400(); return;
                case 0x3b684:
                    r4 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r6 = r4 << 1;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r6 + r4;
                    r20 = r4 >>> 31;
                    r23 = r3 - r5;
                    r4 = r20 + r4;
                    r6 = r23 + 1;
                    r20 = r4 >> 1;
                    r6 = r6 + r18;
                    r4 = ((r20 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b7d0;
                        continue;
                    }
                    r20 = r6 + r0;
                case 0x3b6c0:
                    r2 = r2 & 1024;
                    r4 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b410;
                        run_3b400(); return;
                    }
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b6dc;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3b6dc:
                    r30 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b434;
                        run_3b400(); return;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b6fc;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x3b6fc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3b710:
                    r4 = r30 + r23;
                    r3 = r20 - r23;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r30;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r4;
                    r30 = r18 + r0;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    r23 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b38c;
                    run_3b200(); return;
                case 0x3b73c:
                    r6 = r8 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x3b754;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x3b754:
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r8;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b774;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x3b774:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r8 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b43c;
                        run_3b400(); return;
                    }
                    r20 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b4f0;
                    run_3b400(); return;
                case 0x3b790:
                    r5 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b7a0;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x3b7a0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r21 + r0;
                    r2 = r2 + r20;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3b7bc;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x3b7bc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b43c;
                        run_3b400(); return;
                    }
                    r2 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b3bc;
                    run_3b200(); return;
                case 0x3b7d0:
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3b6c0;
                    continue;
                case 0x3b7dc:
                    r22 = r18 + 1;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3b474;
                    run_3b400(); return;
                case 0x3b7ec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x3b2d8;
                    run_3b200(); return;
                case 0x3b800:
                    pc=0x3b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b800() throws ExecutionException { /* 0x3b800 - 0x3ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bc00;
                    run_3bc00(); return;
                case 0x3ba00:
                    pc=0x3ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ba00() throws ExecutionException { /* 0x3ba00 - 0x3bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ba00:
                    r29 = r29 + -32;
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3ba1c;
                    pc=0x3bc00;
                    run_3bc00(); return;
                case 0x3ba1c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3bc00:
                    pc=0x3bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3bc00() throws ExecutionException { /* 0x3bc00 - 0x3be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3bc00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    r21 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3bc38;
                    pc=0x49000;
                    run_49000(); return;
                case 0x3bc38:
                    r16 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bcf0;
                        continue;
                    }
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bd54;
                        continue;
                    }
                    r5 = r0 + 61;
                    r2 = r18 + r0;
                    r4 = r0 + 61;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3bc7c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3bcf0;
                    continue;
                case 0x3bc74:
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3bcf0;
                        continue;
                    }
                case 0x3bc7c:
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bc74;
                        continue;
                    }
                    r17 = r2 - r18;
                case 0x3bc94:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bcf0;
                        continue;
                    }
                    r22 = r0 + 61;
                case 0x3bca8:
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3bcb8;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x3bcb8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bcdc;
                        continue;
                    }
                    r19 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r19 = r19 + r17;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x3bd2c;
                        continue;
                    }
                case 0x3bcdc:
                    r16 = r16 + 4;
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bca8;
                        continue;
                    }
                case 0x3bcf0:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3bcfc;
                    pc=0x49200;
                    run_49200(); return;
                case 0x3bcfc:
                    r2 = r0 + r0;
                case 0x3bd00:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3bd2c:
                    r2 = readPages[(r28+-32736)>>>12][((r28+-32736)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r16 = r16 - r2;
                    r16 = r16 >> 2;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x3bd48;
                    pc=0x49200;
                    run_49200(); return;
                case 0x3bd48:
                    r2 = r19 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x3bd00;
                    continue;
                case 0x3bd54:
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3bc94;
                    continue;
                case 0x3be00:
                    pc=0x3be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3be00() throws ExecutionException { /* 0x3be00 - 0x3c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3be00:
                    r29 = r29 + -32;
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3be14;
                    pc=0x3bc00;
                    run_3bc00(); return;
                case 0x3be14:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c000:
                    pc=0x3c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c000() throws ExecutionException { /* 0x3c000 - 0x3c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c000:
                    r2 = 5 << 16;
                    r2 = r2 + 25816;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c200:
                    pc=0x3c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c200() throws ExecutionException { /* 0x3c200 - 0x3c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c200:
                    /* Next insn is delay slot */ 
                    pc=0x48c00;
                    run_48c00(); return;
                case 0x3c400:
                    pc=0x3c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c400() throws ExecutionException { /* 0x3c400 - 0x3c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c400:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r16 = r6 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c438;
                        continue;
                    }
                    r5 = 5 << 16;
                    r4 = r6 + r0;
                    r5 = r5 + 19752;
                    /* Next insn is delay slot */ 
                    r31=0x3c430;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x3c430:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c45c;
                        continue;
                    }
                case 0x3c438:
                    r17 = 5 << 16;
                case 0x3c43c:
                    r17 = r17 + 11780;
                case 0x3c440:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c45c:
                    r17 = 5 << 16;
                    r4 = r16 + r0;
                    r5 = r17 + 11780;
                    /* Next insn is delay slot */ 
                    r31=0x3c470;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x3c470:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c43c;
                        continue;
                    }
                    r5 = 5 << 16;
                    r4 = r16 + r0;
                    r5 = r5 + 11160;
                    /* Next insn is delay slot */ 
                    r31=0x3c48c;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x3c48c:
                    r17 = r17 + 11780;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c440;
                        continue;
                    }
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c440;
                    continue;
                case 0x3c600:
                    pc=0x3c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c600() throws ExecutionException { /* 0x3c600 - 0x3c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c600:
                    r2 = 5 << 16;
                    r2 = r2 + 25912;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c800:
                    pc=0x3c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c800() throws ExecutionException { /* 0x3c800 - 0x3ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c800:
                    r2 = readPages[(r28+-32616)>>>12][((r28+-32616)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ca00:
                    pc=0x3ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ca00() throws ExecutionException { /* 0x3ca00 - 0x3cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ca00:
                    r2 = 5 << 16;
                    r2 = r2 + 25880;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3cc00:
                    pc=0x3cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3cc00() throws ExecutionException { /* 0x3cc00 - 0x3ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3cc00:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ce00:
                    pc=0x3ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ce00() throws ExecutionException { /* 0x3ce00 - 0x3d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ce00:
                    r2 = 5 << 16;
                    r2 = r2 + 25944;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d000:
                    pc=0x3d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d000() throws ExecutionException { /* 0x3d000 - 0x3d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3c400;
                    run_3c400(); return;
                case 0x3d200:
                    pc=0x3d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d200() throws ExecutionException { /* 0x3d200 - 0x3d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d200:
                    r2 = 5 << 16;
                    r2 = r2 + 25944;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d400:
                    pc=0x3d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d400() throws ExecutionException { /* 0x3d400 - 0x3d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d400:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d49c;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d470;
                        continue;
                    }
                case 0x3d41c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r7 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4ac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3d454;
                    continue;
                case 0x3d440:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + 1;
                    if(r7 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4ac;
                        continue;
                    }
                case 0x3d454:
                    r4 = r4 + 1;
                    r5 = r5 + 1;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3d440;
                        continue;
                    }
                case 0x3d464:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d470:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d49c;
                        continue;
                    }
                    r6 = r6 + -4;
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d470;
                        continue;
                    }
                case 0x3d49c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d41c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d464;
                    continue;
                case 0x3d4ac:
                    r2 = r7 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d600:
                    pc=0x3d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d600() throws ExecutionException { /* 0x3d600 - 0x3d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d600:
                    r3 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r2 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d650;
                        continue;
                    }
                    r7 = r5 + r6;
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d650;
                        continue;
                    }
                    r3 = r4 + r6;
                    r5 = r3 - r6;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d748;
                        continue;
                    }
                case 0x3d630:
                    r7 = r7 + -1;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3d630;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d650:
                    r3 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d750;
                        continue;
                    }
                    r3 = r2 | r5;
                    r3 = r3 & 3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d764;
                        continue;
                    }
                    r7 = r5 + r0;
                    r3 = r2 + r0;
                    r4 = r6 + r0;
                case 0x3d678:
                    r8 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r7 = r7 + 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-12)>>>12][((r7+-12)>>>2)&0x3ff];
                    r3 = r3 + 16;
                    writePages[(r3+-12)>>>12][((r3+-12)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-8)>>>12][((r7+-8)>>>2)&0x3ff];
                    r4 = r4 + -16;
                    writePages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff];
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r8;
                    r8 = (r4&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d678;
                        continue;
                    }
                    r4 = r6 + -16;
                    r4 = r4 >>> 4;
                    r4 = r4 + 1;
                    r4 = r4 << 4;
                    r10 = r6 & 15;
                    r3 = r2 + r4;
                    r5 = r5 + r4;
                    r4 = (r10&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d778;
                        continue;
                    }
                    r8 = r5 + r0;
                    r7 = r3 + r0;
                    r4 = r10 + r0;
                case 0x3d6e8:
                    r8 = r8 + 4;
                    r9 = readPages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    r4 = r4 + -4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r9;
                    r9 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d6e8;
                        continue;
                    }
                    r4 = r10 + -4;
                    r4 = r4 >>> 2;
                    r4 = r4 + 1;
                    r4 = r4 << 2;
                    r6 = r6 & 3;
                    r3 = r3 + r4;
                    r5 = r5 + r4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d770;
                        continue;
                    }
                case 0x3d72c:
                    r6 = r3 + r6;
                case 0x3d730:
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3d730;
                        continue;
                    }
                case 0x3d748:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d750:
                    r3 = r2 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d72c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d770;
                    continue;
                case 0x3d764:
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3d72c;
                    continue;
                case 0x3d770:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d778:
                    r6 = r10 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d72c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d770;
                    continue;
                case 0x3d800:
                    pc=0x3d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d800() throws ExecutionException { /* 0x3d800 - 0x3da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d800:
                    r2 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d870;
                        continue;
                    }
                case 0x3d828:
                    r3 = r17 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d898;
                        continue;
                    }
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                case 0x3d84c:
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                case 0x3d854:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3d870:
                    r5 = r0 + 4;
                    r6 = r0 + 33;
                    /* Next insn is delay slot */ 
                    r31=0x3d880;
                    pc=0x48e00;
                    run_48e00(); return;
                case 0x3d880:
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d828;
                        continue;
                    }
                case 0x3d88c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3d854;
                    continue;
                case 0x3d898:
                    r18 = r0 + 1;
                    r18 = r18 << (r17&0x1f);
                    r6 = r18 + 5;
                    r4 = r16 + r0;
                    r5 = r0 + 1;
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    r31=0x3d8b8;
                    pc=0x48e00;
                    run_48e00(); return;
                case 0x3d8b8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d88c;
                        continue;
                    }
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=0x3d84c;
                    continue;
                case 0x3da00:
                    pc=0x3da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3da00() throws ExecutionException { /* 0x3da00 - 0x3dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3da00:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3da28;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x3da28:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3dc00:
                    pc=0x3dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3dc00() throws ExecutionException { /* 0x3dc00 - 0x3de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3dc00:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    r18 = r4 + r0;
                    r17 = r5 + r0;
                    r3 = r5 + 20;
                    r8 = r0 + r0;
                case 0x3dc2c:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r9 = r11 & 65535;
                    { long hilo = (long)(r9) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r11 >>> 16;
                    r3 = r3 + 4;
                    r9 = lo;
                    r9 = r9 + r7;
                    r7 = r9 >>> 16;
                    { long hilo = (long)(r11) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r9 & 65535;
                    r11 = lo;
                    r10 = r7 + r11;
                    r7 = r10 >>> 16;
                    r10 = r10 << 16;
                    r9 = r10 + r9;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r9;
                    r9 = r8 < r16 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc2c;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dcb0;
                        continue;
                    }
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dcd4;
                        continue;
                    }
                case 0x3dc98:
                    r2 = r16 + 4;
                    r2 = r2 << 2;
                    r2 = r17 + r2;
                    r16 = r16 + 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r7;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r16;
                case 0x3dcb0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r17 + r0;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3dcd4:
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r5 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x3dcec;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3dcec:
                    r6 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r5 = r17 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3dd0c;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x3dd0c:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+76)>>>12][((r18+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    r17 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3dc98;
                    continue;
                case 0x3de00:
                    pc=0x3de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3de00() throws ExecutionException { /* 0x3de00 - 0x3e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3de00:
                    r29 = r29 + -48;
                    r2 = r0 + 9;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r7 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r4%r2; lo = r4/r2;
                        pc=0x3de20;
                        continue;
                    }
                    hi = r4%r2; lo = r4/r2;
                    throw new ExecutionException("Break");
                case 0x3de20:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r18 = r6 + r0;
                    r19 = r7 + r0;
                    r4 = lo;
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3df4c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r5 = r0 + r0;
                case 0x3de5c:
                    r2 = r2 << 1;
                    r8 = r2 < r4 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3de5c;
                        continue;
                    }
                case 0x3de70:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3de7c;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3de7c:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    r3 = r18 < 10 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3df3c;
                        continue;
                    }
                    r21 = r20 + 9;
                    r16 = r21 + r0;
                    r20 = r20 + r18;
                case 0x3dea8:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x3dec8;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3dec8:
                    if(r16 != r20) {
                        /* Next insn is delay slot */ 
                        pc=0x3dea8;
                        continue;
                    }
                    r16 = r21 + r18;
                    r16 = r16 + -8;
                case 0x3ded8:
                    r3 = r18 < r19 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3df14;
                        continue;
                    }
                    r18 = r19 - r18;
                    r18 = r16 + r18;
                case 0x3deec:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r2 + r0;
                    r6 = r0 + 10;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r31=0x3df0c;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3df0c:
                    if(r16 != r18) {
                        /* Next insn is delay slot */ 
                        pc=0x3deec;
                        continue;
                    }
                case 0x3df14:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3df3c:
                    r16 = r20 + 10;
                    r18 = r0 + 9;
                    /* Next insn is delay slot */ 
                    pc=0x3ded8;
                    continue;
                case 0x3df4c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3de70;
                    continue;
                case 0x3e000:
                    pc=0x3e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e000() throws ExecutionException { /* 0x3e000 - 0x3e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e000:
                    r2 = 65535 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e084;
                        continue;
                    }
                    r4 = r4 << 16;
                    r2 = r0 + 16;
                case 0x3e018:
                    r3 = 65280 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e030;
                        continue;
                    }
                    r2 = r2 + 8;
                    r4 = r4 << 8;
                case 0x3e030:
                    r3 = 61440 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e048;
                        continue;
                    }
                    r2 = r2 + 4;
                    r4 = r4 << 4;
                case 0x3e048:
                    r3 = 49152 << 16;
                    r3 = r4 & r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e060;
                        continue;
                    }
                    r2 = r2 + 2;
                    r4 = r4 << 2;
                case 0x3e060:
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e07c;
                        continue;
                    }
                    r3 = 16384 << 16;
                    r4 = r4 & r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e090;
                        continue;
                    }
                    r2 = r0 + 32;
                case 0x3e07c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e084:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e018;
                    continue;
                case 0x3e090:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e200:
                    pc=0x3e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e200() throws ExecutionException { /* 0x3e200 - 0x3e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e200:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e240;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2d0;
                        continue;
                    }
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2dc;
                        continue;
                    }
                    r3 = r3 >>> 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e240:
                    r2 = r3 & 65535;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2b0;
                        continue;
                    }
                    r2 = r0 + r0;
                case 0x3e250:
                    r5 = r3 & 255;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e264;
                        continue;
                    }
                    r2 = r2 + 8;
                    r3 = r3 >>> 8;
                case 0x3e264:
                    r5 = r3 & 15;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e278;
                        continue;
                    }
                    r2 = r2 + 4;
                    r3 = r3 >>> 4;
                case 0x3e278:
                    r5 = r3 & 3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e28c;
                        continue;
                    }
                    r2 = r2 + 2;
                    r3 = r3 >>> 2;
                case 0x3e28c:
                    r5 = r3 & 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c4;
                        continue;
                    }
                    r3 = r3 >>> 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e2c0;
                        continue;
                    }
                    r2 = r0 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e2b0:
                    r3 = r3 >>> 16;
                    r2 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x3e250;
                    continue;
                case 0x3e2c0:
                    r2 = r2 + 1;
                case 0x3e2c4:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e2d0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e2dc:
                    r3 = r3 >>> 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e400:
                    pc=0x3e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e400() throws ExecutionException { /* 0x3e400 - 0x3e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3e41c;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3e41c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r16;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e600:
                    pc=0x3e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e600() throws ExecutionException { /* 0x3e600 - 0x3e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e600:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r2 = r18 < r19 ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    r20 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e64c;
                        continue;
                    }
                    r2 = r18 + r0;
                    r17 = r6 + r0;
                    r18 = r19 + r0;
                    r20 = r5 + r0;
                    r19 = r2 + r0;
                case 0x3e64c:
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r16 = r18 + r19;
                    r2 = r2 < r16 ? 1 : 0;
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e668;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x3e668:
                    /* Next insn is delay slot */ 
                    r31=0x3e670;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3e670:
                    r13 = r2 + 20;
                    r14 = r16 << 2;
                    r14 = r13 + r14;
                    r4 = ((r13 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r3 = r13 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6a0;
                        continue;
                    }
                case 0x3e68c:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e68c;
                        continue;
                    }
                case 0x3e6a0:
                    r12 = r20 + 20;
                    r15 = r19 << 2;
                    r15 = r12 + r15;
                    r24 = r17 + 20;
                    r11 = r18 << 2;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r11 = r24 + r11;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e804;
                        run_3e800(); return;
                    }
                case 0x3e6c4:
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r8 = r9 & 65535;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e760;
                        continue;
                    }
                    r4 = r13 + r0;
                    r3 = r24 + r0;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e6f0;
                    continue;
                case 0x3e6ec:
                    r4 = r7 + r0;
                case 0x3e6f0:
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r6 & 65535;
                    { long hilo = (long)(r5) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = r6 >>> 16;
                    r10 = r7 & 65535;
                    r7 = r7 >>> 16;
                    r3 = r3 + 4;
                    r5 = lo;
                    r5 = r5 + r10;
                    r5 = r5 + r9;
                    { long hilo = (long)(r6) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r5 >>> 16;
                    r5 = r5 & 65535;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r9;
                    r9 = r6 >>> 16;
                    r6 = r6 << 16;
                    r5 = r6 | r5;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    r5 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r7 = r4 + 4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6ec;
                        continue;
                    }
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                case 0x3e760:
                    r9 = r9 >>> 16;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e7f0;
                        continue;
                    }
                    r4 = readPages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff];
                    r5 = r13 + r0;
                    r7 = r4 + r0;
                    r3 = r24 + r0;
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e78c;
                    continue;
                case 0x3e788:
                    r5 = r8 + r0;
                case 0x3e78c:
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    r7 = r7 >>> 16;
                    { long hilo = (long)(r6) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r4 & 65535;
                    r3 = r3 + 4;
                    r8 = r5 + 4;
                    r6 = lo;
                    r6 = r6 + r7;
                    r6 = r6 + r10;
                    r7 = r6 << 16;
                    r4 = r7 | r4;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r4;
                    addr=r3+-4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r7 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    { long hilo = (long)(r4) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r7 & 65535;
                    r6 = r6 >>> 16;
                    r4 = lo;
                    r4 = r4 + r10;
                    r4 = r4 + r6;
                    r6 = ((r3 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r10 = r4 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e788;
                        continue;
                    }
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r4;
                case 0x3e7f0:
                    r12 = r12 + 4;
                    r3 = ((r12 & 0xffffffffL) < (r15 & 0xffffffffL)) ? 1 : 0;
                    r13 = r13 + 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6c4;
                        continue;
                    }
                case 0x3e800:
                    pc=0x3e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e800() throws ExecutionException { /* 0x3e800 - 0x3ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e800:
                case 0x3e804:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e844;
                        continue;
                    }
                    r4 = readPages[(r14+-4)>>>12][((r14+-4)>>>2)&0x3ff];
                    r3 = r14 + -4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e838;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3e844;
                    continue;
                case 0x3e824:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e844;
                        continue;
                    }
                case 0x3e838:
                    r16 = r16 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e824;
                        continue;
                    }
                case 0x3e844:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ea00:
                    pc=0x3ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ea00() throws ExecutionException { /* 0x3ea00 - 0x3ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ea00:
                    r29 = r29 + -40;
                    r2 = r6 & 3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb24;
                        continue;
                    }
                case 0x3ea30:
                    r16 = r16 >> 2;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eacc;
                        continue;
                    }
                    r17 = readPages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb54;
                        continue;
                    }
                case 0x3ea4c:
                    r3 = r16 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea84;
                        continue;
                    }
                case 0x3ea58:
                    r16 = r16 >> 1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eacc;
                        continue;
                    }
                case 0x3ea64:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eaf0;
                        continue;
                    }
                    r17 = r2 + r0;
                case 0x3ea78:
                    r3 = r16 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea58;
                        continue;
                    }
                case 0x3ea84:
                    r4 = r19 + r0;
                    r5 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ea98;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x3ea98:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eb18;
                        continue;
                    }
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r16 = r16 >> 1;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r18 = r2 + r0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ea64;
                        continue;
                    }
                case 0x3eacc:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3eaf0:
                    r5 = r17 + r0;
                    r6 = r17 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3eb04;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x3eb04:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ea78;
                    continue;
                case 0x3eb18:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ea58;
                    continue;
                case 0x3eb24:
                    r2 = r2 + -1;
                    r3 = 5 << 16;
                    r3 = r3 + 19760;
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3eb48;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3eb48:
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ea30;
                    continue;
                case 0x3eb54:
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x3eb64;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3eb64:
                    r17 = r2 + r0;
                    r2 = r0 + 625;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff] = r17;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ea4c;
                    continue;
                case 0x3ec00:
                    pc=0x3ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ec00() throws ExecutionException { /* 0x3ec00 - 0x3ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ec00:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r17 = r6 >> 5;
                    r20 = r17 + r20;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r16 = r20 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r2 < r16 ? 1 : 0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r21 = r6 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ec64;
                        continue;
                    }
                case 0x3ec50:
                    r2 = r2 << 1;
                    r7 = r2 < r16 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ec50;
                        continue;
                    }
                case 0x3ec64:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ec70;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3ec70:
                    r7 = r2 + 20;
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eca0;
                        continue;
                    }
                    r8 = r7 + r0;
                    r3 = r0 + r0;
                case 0x3ec84:
                    r8 = r8 + 4;
                    r3 = r3 + 1;
                    writePages[(r8+-4)>>>12][((r8+-4)>>>2)&0x3ff] = r0;
                    if(r3 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x3ec84;
                        continue;
                    }
                    r3 = r3 << 2;
                    r7 = r7 + r3;
                case 0x3eca0:
                    r10 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = r18 + 20;
                    r10 = r10 << 2;
                    r6 = r21 & 31;
                    r10 = r3 + r10;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed5c;
                        continue;
                    }
                    r4 = r0 + 32;
                    r4 = r4 - r6;
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3ecd4;
                    continue;
                case 0x3ecd0:
                    r7 = r8 + r0;
                case 0x3ecd4:
                    r11 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r11 = r11 << (r6&0x1f);
                    r9 = r9 | r11;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r9;
                    r9 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r11 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    r8 = r7 + 4;
                    r9 = r9 >>> (r4&0x1f);
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ecd0;
                        continue;
                    }
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r9;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed10;
                        continue;
                    }
                    r16 = r20 + 2;
                case 0x3ed10:
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r4 = readPages[(r19+76)>>>12][((r19+76)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r4 + r3;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = r16 + -1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r16;
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r4;
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ed5c:
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed10;
                        continue;
                    }
                    r3 = r3 + 4;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    writePages[(r7+-4)>>>12][((r7+-4)>>>2)&0x3ff] = r6;
                    r6 = ((r3 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ed5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3ed10;
                    continue;
                case 0x3ee00:
                    pc=0x3ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ee00() throws ExecutionException { /* 0x3ee00 - 0x3f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ee00:
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee78;
                        continue;
                    }
                    r3 = r3 << 2;
                    r4 = r4 + 20;
                    r5 = r5 + 20;
                    r2 = r4 + r3;
                    r5 = r5 + r3;
                    /* Next insn is delay slot */ 
                    pc=0x3ee40;
                    continue;
                case 0x3ee34:
                    r3 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee74;
                        continue;
                    }
                case 0x3ee40:
                    r2 = r2 + -4;
                    r5 = r5 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee34;
                        continue;
                    }
                    r3 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee80;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ee74:
                    r2 = r0 + r0;
                case 0x3ee78:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ee80:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f000:
                    pc=0x3f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f000() throws ExecutionException { /* 0x3f000 - 0x3f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f000:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r17 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f034;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x3f034:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f1a4;
                        continue;
                    }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f18c;
                        continue;
                    }
                    r19 = r0 + r0;
                case 0x3f048:
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f058;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3f058:
                    r10 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r13 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r16 + 20;
                    r12 = r10 << 2;
                    r7 = r17 + 20;
                    r13 = r13 << 2;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r19;
                    r12 = r4 + r12;
                    r13 = r7 + r13;
                    r3 = r2 + 20;
                    r5 = r0 + r0;
                case 0x3f084:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r6 = r8 & 65535;
                    r5 = r6 + r5;
                    r11 = r9 & 65535;
                    r6 = r5 - r11;
                    r8 = r8 >>> 16;
                    r9 = r9 >>> 16;
                    r5 = r6 >> 16;
                    r8 = r8 - r9;
                    r8 = r8 + r5;
                    r7 = r7 + 4;
                    r5 = r8 >> 16;
                    r6 = r6 & 65535;
                    r8 = r8 << 16;
                    r6 = r8 | r6;
                    r3 = r3 + 4;
                    r8 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    r4 = r4 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f084;
                        continue;
                    }
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r9 = r3 + r0;
                    r11 = r4 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f148;
                        continue;
                    }
                case 0x3f0f0:
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r6 = r8 & 65535;
                    r6 = r6 + r5;
                    r7 = r6 >> 16;
                    r8 = r8 >>> 16;
                    r7 = r7 + r8;
                    r5 = r7 >> 16;
                    r6 = r6 & 65535;
                    r7 = r7 << 16;
                    r6 = r7 | r6;
                    r3 = r3 + 4;
                    r7 = ((r4 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r6;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f0f0;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r12;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r9 + r3;
                case 0x3f148:
                    r3 = r3 + -4;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f168;
                        continue;
                    }
                case 0x3f154:
                    r3 = r3 + -4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r10 = r10 + -1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f154;
                        continue;
                    }
                case 0x3f168:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r10;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f18c:
                    r2 = r16 + r0;
                    r19 = r0 + 1;
                    r16 = r17 + r0;
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f048;
                    continue;
                case 0x3f1a4:
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f1b4;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3f1b4:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f200:
                    pc=0x3f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f200() throws ExecutionException { /* 0x3f200 - 0x3f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f200:
                    r2 = f13;
                    r4 = 32752 << 16;
                    r2 = r2 & r4;
                    r3 = 64704 << 16;
                    r4 = r2 + r3;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f234;
                        continue;
                    }
                    r3 = r0 + r0;
                    f0 = r3;
                    r2 = r4 + r0;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f234:
                    r4 = r0 - r4;
                    r4 = r4 >> 20;
                    r2 = r4 < 20 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f290;
                        continue;
                    }
                    r5 = r4 < 51 ? 1 : 0;
                    r2 = r0 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f280;
                        continue;
                    }
                    r5 = r0 + 51;
                    r4 = r5 - r4;
                    r5 = r0 + 1;
                    r4 = r5 << (r4&0x1f);
                    r3 = r4 + r0;
                case 0x3f26c:
                    f0 = r3;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f280:
                    r4 = r0 + 1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f26c;
                    continue;
                case 0x3f290:
                    r3 = r0 + r0;
                    r5 = 8 << 16;
                    f0 = r3;
                    r2 = r5 >> (r4&0x1f);
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f400:
                    pc=0x3f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f400() throws ExecutionException { /* 0x3f400 - 0x3f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f400:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r16 = r16 << 2;
                    r18 = r4 + 20;
                    r16 = r18 + r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r4 = r17 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r20 = r5 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3f440;
                    pc=0x3e000;
                    run_3e000(); return;
                case 0x3f440:
                    r3 = r0 + 32;
                    r3 = r3 - r2;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r3 = r2 < 11 ? 1 : 0;
                    r19 = r16 + -4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4c0;
                        continue;
                    }
                    r3 = r0 + 11;
                    r3 = r3 - r2;
                    r5 = r17 >>> (r3&0x1f);
                    r4 = 16368 << 16;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r6 = r5 | r4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f544;
                        continue;
                    }
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r3 = r4 >>> (r3&0x1f);
                case 0x3f488:
                    r2 = r2 + 21;
                    r17 = r17 << (r2&0x1f);
                    r7 = r3 | r17;
                case 0x3f494:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    f0 = r7;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    f1 = r6;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f4c0:
                    r3 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f51c;
                        continue;
                    }
                    r3 = r2 + -11;
                    r4 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f530;
                        continue;
                    }
                case 0x3f4dc:
                    r5 = r0 + 43;
                    r2 = r5 - r2;
                    r17 = r17 << (r3&0x1f);
                    r5 = 16368 << 16;
                    r17 = r17 | r5;
                    r18 = ((r18 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    r5 = r4 >>> (r2&0x1f);
                    r6 = r17 | r5;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f550;
                        continue;
                    }
                    r5 = readPages[(r19+-4)>>>12][((r19+-4)>>>2)&0x3ff];
                    r3 = r4 << (r3&0x1f);
                    r2 = r5 >>> (r2&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x3f494;
                    continue;
                case 0x3f51c:
                    r3 = r2 + -11;
                    r19 = r16 + -8;
                    r4 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f4dc;
                        continue;
                    }
                case 0x3f530:
                    r2 = 16368 << 16;
                    r6 = r17 | r2;
                    r7 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f494;
                    continue;
                case 0x3f544:
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f488;
                    continue;
                case 0x3f550:
                    r2 = r0 + r0;
                    r3 = r4 << (r3&0x1f);
                    r7 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x3f494;
                    continue;
                case 0x3f600:
                    pc=0x3f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f600() throws ExecutionException { /* 0x3f600 - 0x3f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f600:
                    r29 = r29 + -48;
                    r5 = r0 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    r17 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3f62c;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x3f62c:
                    r18 = r2 + r0;
                    r19 = r16 << 1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r19 = r19 >>> 21;
                    r2 = r2 & r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f654;
                        continue;
                    }
                    r3 = 16 << 16;
                    r2 = r2 | r3;
                case 0x3f654:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f6f4;
                        continue;
                    }
                    r4 = r29 + 20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x3f670;
                    pc=0x3e200;
                    run_3e200(); return;
                case 0x3f670:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f764;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                case 0x3f684:
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r16;
                    r3 = r0 + 2;
                    r16 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r16 = r3 - r16;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r16;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f720;
                        continue;
                    }
                case 0x3f6a0:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + -1074;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r16 << 2;
                    r2 = r18 + r2;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    r16 = r16 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x3f6c4;
                    pc=0x3e000;
                    run_3e000(); return;
                case 0x3f6c4:
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f6f4:
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r31=0x3f700;
                    pc=0x3e200;
                    run_3e200(); return;
                case 0x3f700:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + 32;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    r16 = r0 + 1;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f6a0;
                        continue;
                    }
                case 0x3f720:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + -1075;
                    r19 = r19 + r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r19;
                    r3 = r0 + 53;
                    r2 = r3 - r2;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r18 + r0;
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f764:
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r0 - r2;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r16 << (r3&0x1f);
                    r3 = r3 | r4;
                    r16 = r16 >>> (r2&0x1f);
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x3f684;
                    continue;
                case 0x3f800:
                    pc=0x3f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f800() throws ExecutionException { /* 0x3f800 - 0x3fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f800:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    r5 = r29 + 20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f21;
                    /* Next insn is delay slot */ 
                    r31=0x3f834;
                    pc=0x3f400;
                    run_3f400(); return;
                case 0x3f834:
                    r4 = r18 + r0;
                    r5 = r29 + 16;
                    f20 = f0;
                    f21 = f1;
                    r17 = f0;
                    r16 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x3f850;
                    pc=0x3f400;
                    run_3f400(); return;
                case 0x3f850:
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r4 = r5 - r4;
                    r5 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r3 = f0;
                    r5 = r6 - r5;
                    r5 = r5 << 5;
                    r4 = r4 + r5;
                    r2 = f1;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f8c0;
                        continue;
                    }
                    r4 = r4 << 20;
                    f20 = r17;
                    r16 = r4 + r16;
                    f21 = r16;
                case 0x3f894:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    f20 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f8c0:
                    r4 = r4 << 20;
                    f0 = r3;
                    r2 = r2 - r4;
                    f1 = r2;
                    /* Next insn is delay slot */ 
                    pc=0x3f894;
                    continue;
                case 0x3fa00:
                    pc=0x3fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fa00() throws ExecutionException { /* 0x3fa00 - 0x3fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fa00:
                    r2 = r4 < 24 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fa34;
                        continue;
                    }
                    f0 = readPages[(r28+-32604)>>>12][((r28+-32604)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32596)>>>12][((r28+-32596)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32608)>>>12][((r28+-32608)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32600)>>>12][((r28+-32600)>>>2)&0x3ff];
                case 0x3fa1c:
                    r4 = r4 + -1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fa1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fa34:
                    r2 = 5 << 16;
                    r2 = r2 + 19856;
                    r4 = r4 << 3;
                    r4 = r4 + r2;
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fc00:
                    pc=0x3fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fc00() throws ExecutionException { /* 0x3fc00 - 0x3fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fc00:
                    r7 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    r2 = r6 + 20;
                    r8 = r5 >> 5;
                    r7 = r7 << 2;
                    r8 = r8 + 1;
                    r7 = r2 + r7;
                    r8 = r8 << 2;
                    r3 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r4 + r8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc7c;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x3fc34:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc34;
                        continue;
                    }
                    r2 = r7 - r6;
                    r2 = r2 + -21;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r4 = r4 + r2;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc88;
                        continue;
                    }
                case 0x3fc74:
                    r4 = r4 + 4;
                    writePages[(r4+-4)>>>12][((r4+-4)>>>2)&0x3ff] = r0;
                case 0x3fc7c:
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fc74;
                        continue;
                    }
                case 0x3fc88:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fe00:
                    pc=0x3fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fe00() throws ExecutionException { /* 0x3fe00 - 0x40000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fe00:
                    r3 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r4 + 20;
                    r4 = r3 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe74;
                        continue;
                    }
                    r3 = r3 << 2;
                    r3 = r6 + r3;
                case 0x3fe20:
                    r2 = ((r6 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe68;
                        continue;
                    }
                    r2 = r3 + -4;
                    r3 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3feac;
                    continue;
                case 0x3fe48:
                    r2 = r2 + -4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3feac;
                        continue;
                    }
                case 0x3fe5c:
                    r3 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe48;
                        continue;
                    }
                case 0x3fe68:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fe74:
                    r3 = r2 < r3 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3feb8;
                        continue;
                    }
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r3 = r6 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe20;
                        continue;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r2 >>> (r5&0x1f);
                    r5 = r4 << (r5&0x1f);
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe20;
                        continue;
                    }
                case 0x3feac:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3feb8:
                    r2 = r2 << 2;
                    r3 = r6 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x3fe20;
                    continue;
                case 0x40000:
                    pc=0x40000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40000() throws ExecutionException { /* 0x40000 - 0x40200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40000:
                    r4 = f13;
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r3 = r3 & r4;
                    r5 = f12;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40040;
                        continue;
                    }
                    r2 = 65520 << 16;
                    r2 = r3 + r2;
                    r6 = 32736 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40054;
                        continue;
                    }
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40040:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r0 + 3;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40054:
                    r2 = 16 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40070;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40070:
                    r2 = 32752 << 16;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x40088;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40088:
                    r2 = (r5&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40200:
                    pc=0x40200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40200() throws ExecutionException { /* 0x40200 - 0x40400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40200:
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40234;
                        continue;
                    }
                case 0x4021c:
                    r2 = r0 + r0;
                case 0x40220:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40234:
                    r5 = r0 + 128;
                    /* Next insn is delay slot */ 
                    r31=0x40240;
                    pc=0x20800;
                    run_20800(); return;
                case 0x40240:
                    writePages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40280;
                        continue;
                    }
                    r3 = r0 + r0;
                    r4 = r0 + 128;
                    /* Next insn is delay slot */ 
                    pc=0x40264;
                    continue;
                case 0x4025c:
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                case 0x40264:
                    r2 = r2 + r3;
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4025c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4021c;
                    continue;
                case 0x40280:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x40220;
                    continue;
                case 0x40400:
                    pc=0x40400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40400() throws ExecutionException { /* 0x40400 - 0x40600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40400:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40450;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40470;
                        continue;
                    }
                case 0x4042c:
                    r5 = r5 << 2;
                    r5 = r2 + r5;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r6;
                case 0x4043c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40450:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40470:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x40480;
                    pc=0x40200;
                    run_40200(); return;
                case 0x40480:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4049c;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4042c;
                    continue;
                case 0x4049c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4043c;
                    continue;
                case 0x40600:
                    pc=0x40600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40600() throws ExecutionException { /* 0x40600 - 0x40800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40600:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406f0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406c0;
                        continue;
                    }
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406c0;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x406b4;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x40690;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x40674;
                    return;
                case 0x40674:
                    r2 = r0 + r0;
                case 0x40678:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40690:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x406b4:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40678;
                    continue;
                case 0x406c0:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x406cc;
                    pc=0x2a820;
                    run_2a800(); return;
                case 0x406cc:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r16 + r0;
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2a7e0;
                    run_2a600(); return;
                case 0x406f0:
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x40678;
                    continue;
                case 0x40800:
                    pc=0x40800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40800() throws ExecutionException { /* 0x40800 - 0x40a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40800:
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x408e0;
                        continue;
                    }
                    r2 = readPages[(r4+732)>>>12][((r4+732)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x408bc;
                        continue;
                    }
                case 0x40828:
                    r3 = r5 << 2;
                    r3 = r2 + r3;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x408b0;
                        continue;
                    }
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x40898;
                        continue;
                    }
                    r4 = r0 + 1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x40880;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x40868;
                    return;
                case 0x40868:
                    r2 = r0 + r0;
                case 0x4086c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40880:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40898:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x408b0:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4086c;
                    continue;
                case 0x408bc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x408c8;
                    pc=0x40200;
                    run_40200(); return;
                case 0x408c8:
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x408ec;
                        continue;
                    }
                    r2 = readPages[(r16+732)>>>12][((r16+732)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x40828;
                    continue;
                case 0x408e0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x408ec:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4086c;
                    continue;
                case 0x40a00:
                    pc=0x40a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40a00() throws ExecutionException { /* 0x40a00 - 0x40c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40a00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x40600;
                    run_40600(); return;
                case 0x40c00:
                    pc=0x40c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40c00() throws ExecutionException { /* 0x40c00 - 0x40e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x40400;
                    run_40400(); return;
                case 0x40e00:
                    pc=0x40e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40e00() throws ExecutionException { /* 0x40e00 - 0x41000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40e00:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x40200;
                    run_40200(); return;
                case 0x41000:
                    pc=0x41000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41000() throws ExecutionException { /* 0x41000 - 0x41200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x40800;
                    run_40800(); return;
                case 0x41200:
                    pc=0x41200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41200() throws ExecutionException { /* 0x41200 - 0x41400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41200:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x412f4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x412a4;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4126c;
                    pc=0x42800;
                    run_42800(); return;
                case 0x4126c:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x412e4;
                        continue;
                    }
                case 0x41278:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4128c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4128c:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x412a4:
                    r2 = r6 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 160;
                    r6 = r7 + r0;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r2 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x412d8;
                    pc=0x42800;
                    run_42800(); return;
                case 0x412d8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41278;
                        continue;
                    }
                case 0x412e4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x41278;
                    continue;
                case 0x412f4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4128c;
                    continue;
                case 0x41400:
                    pc=0x41400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41400() throws ExecutionException { /* 0x41400 - 0x41600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41400:
                    r29 = r29 + -144;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r17;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r16;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    r17 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x414e8;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x414a0;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x41468;
                    pc=0x42800;
                    run_42800(); return;
                case 0x41468:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x414d8;
                        continue;
                    }
                case 0x41474:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41488;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x41488:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r17 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r16 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x414a0:
                    r2 = r5 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r17 + r0;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x414cc;
                    pc=0x42800;
                    run_42800(); return;
                case 0x414cc:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41474;
                        continue;
                    }
                case 0x414d8:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x41474;
                    continue;
                case 0x414e8:
                    r2 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x41488;
                    continue;
                case 0x41600:
                    pc=0x41600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41600() throws ExecutionException { /* 0x41600 - 0x41800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41600:
                    r29 = r29 + -136;
                    r3 = r0 + 516;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    r16 = r5 + r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r31=0x41630;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x41630:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    r2 = r2 + 16896;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    r6 = r16 + r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x41670;
                    pc=0x44c00;
                    run_44c00(); return;
                case 0x41670:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41800:
                    pc=0x41800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41800() throws ExecutionException { /* 0x41800 - 0x41a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41800:
                    r29 = r29 + -144;
                    r2 = r0 + 516;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r31;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x41834;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x41834:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    r2 = r2 + 16896;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r7 = r29 + 156;
                    r2 = r0 + -1;
                    r4 = r16 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x41874;
                    pc=0x44c00;
                    run_44c00(); return;
                case 0x41874:
                    r31 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r16 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r29 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41a00:
                    pc=0x41a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41a00() throws ExecutionException { /* 0x41a00 - 0x41c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41a00:
                    r3 = r5 & 255;
                    r2 = r4 & 3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b04;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41a40;
                        continue;
                    }
                case 0x41a18:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41af8;
                        continue;
                    }
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x41ba0;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41a18;
                        continue;
                    }
                case 0x41a40:
                    r5 = r5 & 255;
                    r8 = r5 << 8;
                    r5 = r8 | r5;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r8 = r5 << 16;
                    r8 = r8 | r5;
                    r6 = 65278 << 16;
                    r5 = r2 ^ r8;
                    r6 = r6 | 65279;
                    r7 = ~(r0 | r5);
                    r5 = r5 + r6;
                    r5 = r7 & r5;
                    r7 = ~(r0 | r2);
                    r2 = r2 + r6;
                    r2 = r7 & r2;
                    r9 = 32896 << 16;
                    r2 = r5 | r2;
                    r9 = r9 | 32896;
                    r2 = r2 & r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41acc;
                        continue;
                    }
                case 0x41a94:
                    r4 = r4 + 4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r8 ^ r2;
                    r7 = ~(r0 | r5);
                    r5 = r5 + r6;
                    r5 = r7 & r5;
                    r7 = ~(r0 | r2);
                    r2 = r2 + r6;
                    r2 = r7 & r2;
                    r2 = r5 | r2;
                    r2 = r2 & r9;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41a94;
                        continue;
                    }
                case 0x41acc:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41af8;
                        continue;
                    }
                case 0x41adc:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x41ba0;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41adc;
                        continue;
                    }
                case 0x41af8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41b04:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b2c;
                        continue;
                    }
                case 0x41b0c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ba0;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b0c;
                        continue;
                    }
                case 0x41b2c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = 65278 << 16;
                    r6 = r6 | 65279;
                    r3 = ~(r0 | r2);
                    r5 = 32896 << 16;
                    r2 = r2 + r6;
                    r2 = r3 & r2;
                    r5 = r5 | 32896;
                    r2 = r2 & r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b7c;
                        continue;
                    }
                case 0x41b58:
                    r4 = r4 + 4;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + r6;
                    r2 = ~(r0 | r2);
                    r2 = r3 & r2;
                    r2 = r2 & r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b58;
                        continue;
                    }
                case 0x41b7c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ba0;
                        continue;
                    }
                case 0x41b8c:
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b8c;
                        continue;
                    }
                case 0x41ba0:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41c00:
                    pc=0x41c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41c00() throws ExecutionException { /* 0x41c00 - 0x41e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41c00:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ca4;
                        continue;
                    }
                case 0x41c18:
                    r6 = r6 + -1;
                case 0x41c1c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x41d58;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                    r2 = r4 + 1;
                    r5 = r5 + 1;
                    r4 = r4 + r6;
                    /* Next insn is delay slot */ 
                    pc=0x41c6c;
                    continue;
                case 0x41c54:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                    r2 = r2 + 1;
                    r5 = r5 + 1;
                case 0x41c6c:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x41c54;
                        continue;
                    }
                case 0x41c80:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 - r2;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41c98:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41ca4:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c18;
                        continue;
                    }
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x41c18;
                        continue;
                    }
                    r2 = r6 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                    r8 = 65278 << 16;
                    r8 = r8 | 65279;
                    r6 = r3 + r8;
                    r7 = 32896 << 16;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r7 = r7 | 32896;
                    r3 = r3 & r7;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41d38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x41c98;
                    continue;
                case 0x41d00:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x41d64;
                        continue;
                    }
                    r2 = r2 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                    r6 = r3 + r8;
                    r3 = ~(r0 | r3);
                    r3 = r6 & r3;
                    r3 = r3 & r7;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c98;
                        continue;
                    }
                case 0x41d38:
                    r3 = (r2&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41d00;
                        continue;
                    }
                    r6 = r2 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c1c;
                        continue;
                    }
                case 0x41d58:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41c80;
                    continue;
                case 0x41d64:
                    r6 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x41c1c;
                    continue;
                case 0x41e00:
                    pc=0x41e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41e00() throws ExecutionException { /* 0x41e00 - 0x42000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41e00:
                    r2 = r4 + r0;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41e34;
                    continue;
                case 0x41e10:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41fcc;
                        continue;
                    }
                    r5 = r5 + 1;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r6 + -1;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41fd4;
                        continue;
                    }
                case 0x41e34:
                    r7 = r5 & 3;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41e10;
                        continue;
                    }
                    r4 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r12 = r6 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ff8;
                        continue;
                    }
                    r6 = r6 & 3;
                    r12 = r12 - r6;
                    /* Next insn is delay slot */ 
                    pc=0x41e94;
                    continue;
                case 0x41e60:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ec0;
                        continue;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ec8;
                        continue;
                    }
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ed0;
                        continue;
                    }
                    r3 = r3 + 4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ff8;
                        continue;
                    }
                    r12 = r7 + r0;
                case 0x41e94:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r7 = r12 + -4;
                    r5 = r5 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41e60;
                        continue;
                    }
                    r7 = r12 + -3;
                    r3 = r3 + -1;
                case 0x41ec0:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x41ec8:
                    r7 = r7 + 1;
                    r3 = r3 + -1;
                case 0x41ed0:
                    r6 = r7 + r6;
                    r3 = r3 + 4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41fc4;
                        continue;
                    }
                    r4 = r3 & 3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f00;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x41f1c;
                    continue;
                case 0x41ef4:
                    r5 = r3 & 3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f1c;
                        continue;
                    }
                case 0x41f00:
                    r3 = r3 + 1;
                    r6 = r6 + -1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ef4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41f1c:
                    r4 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42068;
                        run_42000(); return;
                    }
                    r5 = r3 + r0;
                    r7 = r6 + r0;
                case 0x41f30:
                    r7 = r7 + -16;
                    r5 = r5 + 16;
                    r8 = (r7&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r5+-16)>>>12][((r5+-16)>>>2)&0x3ff] = r0;
                    writePages[(r5+-12)>>>12][((r5+-12)>>>2)&0x3ff] = r0;
                    writePages[(r5+-8)>>>12][((r5+-8)>>>2)&0x3ff] = r0;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f30;
                        continue;
                    }
                    r5 = r6 + -16;
                    r5 = r5 >>> 4;
                    r5 = r5 + 1;
                    r5 = r5 << 4;
                    r4 = r6 & 15;
                    r3 = r3 + r5;
                case 0x41f6c:
                    r5 = (r4&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41f88;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r0;
                    r4 = r4 + -8;
                    r3 = r3 + 8;
                case 0x41f88:
                    r5 = (r4&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41fa0;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r4 = r4 + -4;
                    r3 = r3 + 4;
                case 0x41fa0:
                    r5 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41fb8;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r4 + -2;
                    r3 = r3 + 2;
                case 0x41fb8:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41fc4;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x41fc4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41fcc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41fd4:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x41fc4;
                        continue;
                    }
                case 0x41fe0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x41fe0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41ff8:
                    r6 = r3 + r6;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x41fc4;
                        continue;
                    }
                case 0x42000:
                    pc=0x42000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42000() throws ExecutionException { /* 0x42000 - 0x42200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42000:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r8 = r5 + 1;
                    r7 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42040;
                        continue;
                    }
                case 0x42020:
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x42060;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42020;
                        continue;
                    }
                case 0x42040:
                    if(r6 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x41fc4;
                        run_41e00(); return;
                    }
                case 0x42048:
                    r7 = r7 + 1;
                    addr=r7+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x42048;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42060:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42068:
                    r4 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x41f6c;
                    run_41e00(); return;
                case 0x42200:
                    pc=0x42200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42200() throws ExecutionException { /* 0x42200 - 0x42400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42200:
                    r12 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42214;
                    continue;
                case 0x42210:
                    r2 = r3 + r0;
                case 0x42214:
                    r3 = r2 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r9 = r9 & 8;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42210;
                        continue;
                    }
                    r9 = r0 + 45;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x423cc;
                        continue;
                    }
                    r9 = r0 + 43;
                    if(r8 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x423e0;
                        continue;
                    }
                    r25 = r0 + r0;
                case 0x42254:
                    r2 = r0 + -17;
                    r2 = r7 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4237c;
                        continue;
                    }
                    r24 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x42274;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r24 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r24 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x42274:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                case 0x42280:
                    r10 = r0 + r0;
                    r2 = r0 + r0;
                    r14 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x422dc;
                    continue;
                case 0x42294:
                    r8 = r8 + -48;
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4231c;
                        continue;
                    }
                case 0x422a4:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42358;
                        continue;
                    }
                    r9 = ((r13 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42358;
                        continue;
                    }
                    if(r2 == r13) {
                        /* Next insn is delay slot */ 
                        pc=0x4234c;
                        continue;
                    }
                case 0x422c0:
                    { long hilo = (long)(r2) * ((long)r15); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r10 = r0 + 1;
                    r2 = lo;
                    r2 = r8 + r2;
                case 0x422d0:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                case 0x422dc:
                    r9 = r12 + r8;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r11 = r9 & 4;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42294;
                        continue;
                    }
                    r9 = r9 & 3;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4231c;
                        continue;
                    }
                    if(r9 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x42364;
                        continue;
                    }
                    r9 = r0 + 87;
                    r8 = r8 - r9;
                case 0x42310:
                    r9 = r8 < r7 ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x422a4;
                        continue;
                    }
                case 0x4231c:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x423b8;
                        continue;
                    }
                    if(r25 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x423ac;
                        continue;
                    }
                case 0x4232c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42374;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42340;
                        continue;
                    }
                    r5 = r3 + -1;
                case 0x42340:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4234c:
                    r9 = r24 < r8 ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x422c0;
                        continue;
                    }
                case 0x42358:
                    r10 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x422d0;
                    continue;
                case 0x42364:
                    r9 = r0 + 55;
                    r8 = r8 - r9;
                    /* Next insn is delay slot */ 
                    pc=0x42310;
                    continue;
                case 0x42374:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4237c:
                    r2 = r0 + 48;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x423f4;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42450;
                        run_42400(); return;
                    }
                    r13 = 6553 << 16;
                    r24 = r0 + 5;
                    r13 = r13 | 39321;
                    r15 = r0 + 10;
                    r7 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x42280;
                    continue;
                case 0x423ac:
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    pc=0x4232c;
                    continue;
                case 0x423b8:
                    r2 = r0 + 34;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4232c;
                    continue;
                case 0x423cc:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x42254;
                    continue;
                case 0x423e0:
                    r3 = r2 + 2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r25 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42254;
                    continue;
                case 0x423f4:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    r2 = r0 + 88;
                    r9 = r9 & 223;
                case 0x42400:
                    pc=0x42400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42400() throws ExecutionException { /* 0x42400 - 0x42600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42400:
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4242c;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42450;
                        continue;
                    }
                    r13 = 8191 << 16;
                    r24 = r0 + 7;
                    r13 = r13 | 65535;
                    r15 = r0 + 8;
                    r7 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x42280;
                    run_42200(); return;
                case 0x4242c:
                    r13 = 4095 << 16;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r24 = r0 + 15;
                    r3 = r3 + 2;
                    r13 = r13 | 65535;
                    r15 = r0 + 16;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x42280;
                    run_42200(); return;
                case 0x42450:
                    r13 = r0 + -1;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x42460;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x42460:
                    r15 = r7 + r0;
                    r24 = hi;
                    r13 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x42280;
                    run_42200(); return;
                case 0x42600:
                    pc=0x42600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42600() throws ExecutionException { /* 0x42600 - 0x42800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42600:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42200;
                    run_42200(); return;
                case 0x42800:
                    pc=0x42800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42800() throws ExecutionException { /* 0x42800 - 0x42a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42800:
                    r29 = r29 + -304;
                    writePages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff] = r31;
                    writePages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff] = r22;
                    writePages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff] = r4;
                    r22 = r5 + r0;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r6;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r7;
                    writePages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff] = r30;
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r23;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r21;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r20;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r19;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r18;
                    writePages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff] = r17;
                    writePages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x42844;
                    pc=0x3ce00;
                    run_3ce00(); return;
                case 0x42844:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4285c;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4285c:
                    writePages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff] = r2;
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42884;
                        continue;
                    }
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44464;
                        run_44400(); return;
                    }
                case 0x42884:
                    r21 = r29 + 40;
                    r2 = 5 << 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r21;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r0;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r0;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r0;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    r19 = r2 + 20428;
                case 0x428b8:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42fa4;
                        run_42e00(); return;
                    }
                case 0x428d0:
                    r3 = r0 + 37;
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x428f0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4295c;
                    continue;
                case 0x428e8:
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x42904;
                        continue;
                    }
                case 0x428f0:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x428e8;
                        continue;
                    }
                case 0x42904:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r17 = r16 - r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4295c;
                        continue;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a04;
                        run_42a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x4294c:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r3 = r3 + r17;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r3;
                case 0x4295c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a2c;
                        run_42a00(); return;
                    }
                    r16 = r16 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r0 + r0;
                    r30 = r0 + -1;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r0;
                    r17 = r0 + r0;
                    r6 = r0 + 42;
                    r7 = r0 + r0;
                case 0x4298c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r3 = r16 + 1;
                case 0x42994:
                    r2 = r18 + -32;
                    r4 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4352c;
                        run_43400(); return;
                    }
                    r4 = 5 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 20056;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x429c4:
                    r17 = r17 | 16;
                case 0x429c8:
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    continue;
                case 0x429d4:
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r7 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r7 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4351c;
                        run_43400(); return;
                    }
                    r7 = r0 - r7;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                case 0x429f4:
                    r17 = r17 | 4;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    continue;
                case 0x42a00:
                    pc=0x42a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42a00() throws ExecutionException { /* 0x42a00 - 0x42c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42a00:
                case 0x42a04:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42a18;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x42a18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        continue;
                    }
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4294c;
                    run_42800(); return;
                case 0x42a2c:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42a50;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x42a50:
                    addr=r22+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a9c;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x42a68:
                    r31 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r30 = readPages[(r29+296)>>>12][((r29+296)>>>2)&0x3ff];
                    r23 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r22 = readPages[(r29+288)>>>12][((r29+288)>>>2)&0x3ff];
                    r21 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r20 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r19 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r18 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r17 = readPages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff];
                    r16 = readPages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff];
                    r29 = r29 + 304;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42a9c:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x42a68;
                    continue;
                case 0x42aa8:
                    r5 = r0 + 43;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    run_42800(); return;
                case 0x42ab8:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r3 + 4;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4460c;
                        run_44600(); return;
                    }
                    r4 = r16 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x444e0;
                        run_44400(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x42af8;
                    pc=0x21200;
                    run_21200(); return;
                case 0x42af8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x448ac;
                        run_44800(); return;
                    }
                    r2 = r2 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r2 = r30 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b1c;
                        continue;
                    }
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                case 0x42b1c:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x444fc;
                        run_44400(); return;
                    }
                case 0x42b2c:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                case 0x42b40:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b58;
                        continue;
                    }
                case 0x42b48:
                    r2 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                case 0x42b58:
                    r4 = r17 & 2;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b78;
                        continue;
                    }
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                case 0x42b78:
                    r2 = r17 & 132;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43550;
                        run_43400(); return;
                    }
                    r4 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r4 - r5;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43550;
                        run_43400(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44548;
                        run_44400(); return;
                    }
                    r4 = r20 + r0;
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r16;
                    r20 = r17 + r0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r23 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42bec;
                    continue;
                case 0x42bd8:
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42c48;
                        run_42c00(); return;
                    }
                case 0x42bec:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r23;
                case 0x42c00:
                    pc=0x42c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42c00() throws ExecutionException { /* 0x42c00 - 0x42e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42c00:
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42bd8;
                        run_42a00(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42c24;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x42c24:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r17 = r17 + -16;
                    r4 = r17 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42bec;
                        run_42a00(); return;
                    }
                case 0x42c48:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r4 + r0;
                case 0x42c58:
                    r3 = r3 + 1;
                    r4 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r20 + r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c1c;
                        run_43c00(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r8 = r8 + 8;
                case 0x42c88:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42cc4;
                        continue;
                    }
                    r3 = r29 + 182;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43a50;
                        run_43a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x42cc4:
                    r3 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d08;
                        continue;
                    }
                    r3 = r29 + 180;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 2;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43a7c;
                        run_43a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x42d08:
                    r4 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r3 = r0 + 128;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x438bc;
                        run_43800(); return;
                    }
                case 0x42d18:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r20 = r30 - r3;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e14;
                        run_42e00(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440c0;
                        run_44000(); return;
                    }
                    r5 = 5 << 16;
                    r23 = r5 + 20412;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r30 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42d7c;
                    continue;
                case 0x42d68:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42dd8;
                        continue;
                    }
                case 0x42d7c:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d68;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42db4;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x42db4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d7c;
                        continue;
                    }
                case 0x42dd8:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x42dec:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                case 0x42e00:
                    pc=0x42e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42e00() throws ExecutionException { /* 0x42e00 - 0x43000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42e00:
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43a24;
                        run_43a00(); return;
                    }
                    r8 = r8 + 8;
                case 0x42e14:
                    r3 = r17 & 256;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43750;
                        run_43600(); return;
                    }
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43654;
                        run_43600(); return;
                    }
                case 0x42e4c:
                    r8 = r8 + 8;
                case 0x42e50:
                    r17 = r17 & 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f50;
                        continue;
                    }
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = r3 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f50;
                        continue;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x445fc;
                        run_44400(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    r17 = r0 + 16;
                    r18 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x42eac;
                    continue;
                case 0x42e98:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f08;
                        continue;
                    }
                case 0x42eac:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r19;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e98;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42ee4;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x42ee4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42eac;
                        continue;
                    }
                case 0x42f08:
                    r3 = r3 + 1;
                    r5 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r2 + r16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f50;
                        continue;
                    }
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x42f44;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x42f44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x42f50:
                    r3 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42f6c;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x42f6c:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43680;
                        run_43600(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                case 0x42f8c:
                    r3 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x428d0;
                        run_42800(); return;
                    }
                case 0x42fa4:
                    r16 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4295c;
                    run_42800(); return;
                case 0x42fb0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x429c8;
                        run_42800(); return;
                    }
                    r5 = r0 + 32;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    run_42800(); return;
                case 0x42fc8:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r4 = r3 + 1;
                    if(r18 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x44b04;
                        run_44a00(); return;
                    }
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4301c;
                        run_43000(); return;
                    }
                case 0x42fec:
                    r4 = r4 + 1;
                    r3 = r30 << 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                case 0x43000:
                    pc=0x43000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43000() throws ExecutionException { /* 0x43000 - 0x43200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43000:
                    r30 = r2 + r30;
                    r2 = r18 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42fec;
                        run_42e00(); return;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44454;
                        run_44400(); return;
                    }
                case 0x4301c:
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42994;
                    run_42800(); return;
                case 0x43028:
                    r17 = r17 | 128;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    run_42800(); return;
                case 0x43038:
                    r7 = r0 + r0;
                    r2 = r18 + -48;
                case 0x43040:
                    r3 = r3 + 1;
                    r4 = r7 << 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r7 = r7 << 3;
                    r7 = r4 + r7;
                    r7 = r7 + r2;
                    r2 = r18 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43040;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x42994;
                    run_42800(); return;
                case 0x43070:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x434ec;
                        run_43400(); return;
                    }
                case 0x43088:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                case 0x430a4:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x430b4;
                        continue;
                    }
                    r5 = r0 + -129;
                    r17 = r17 & r5;
                case 0x430b4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x436ac;
                        run_43600(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x436ac;
                        run_43600(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ad0;
                        run_43a00(); return;
                    }
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ad0;
                        run_43a00(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r16 = r29 + 143;
                case 0x430ec:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r4 = r2 < r30 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43104;
                        continue;
                    }
                    r2 = r30 + r0;
                case 0x43104:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b40;
                    run_42a00(); return;
                case 0x43114:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x434a8;
                        run_43400(); return;
                    }
                case 0x4312c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    continue;
                case 0x43150:
                    r2 = 5 << 16;
                    r2 = r2 + 14932;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43390;
                        run_43200(); return;
                    }
                case 0x43174:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x43188:
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ae0;
                        run_43a00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ae0;
                        run_43a00(); return;
                    }
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r17 = r17 | 2;
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    continue;
                case 0x431c0:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4332c;
                        run_43200(); return;
                    }
                case 0x431d8:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x431ec:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43350;
                        run_43200(); return;
                    }
                case 0x431f4:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    continue;
                case 0x43200:
                    pc=0x43200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43200() throws ExecutionException { /* 0x43200 - 0x43400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43200:
                case 0x43204:
                    r17 = r17 | 64;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    run_42800(); return;
                case 0x43214:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                case 0x43234:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    r3 = r0 + r0;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r5;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r29 + 104;
                    /* Next insn is delay slot */ 
                    pc=0x42b58;
                    run_42a00(); return;
                case 0x4325c:
                    r17 = r17 | 1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    run_42800(); return;
                case 0x4326c:
                    r2 = r17 & 16;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d6c;
                        run_43c00(); return;
                    }
                    r17 = r17 & 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d6c;
                        run_43c00(); return;
                    }
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x428b8;
                    run_42800(); return;
                case 0x432bc:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r0 + 48;
                    addr=r29+180;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 120;
                    addr=r29+181;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r17 = r17 | 2;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + 14952;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    r4 = r0 + 2;
                    r18 = r0 + 120;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    run_43000(); return;
                case 0x43310:
                    r17 = r17 | 16;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x431d8;
                        run_43000(); return;
                    }
                case 0x4332c:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4406c;
                        run_44000(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x431f4;
                        run_43000(); return;
                    }
                case 0x43350:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r3 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    run_43000(); return;
                case 0x4336c:
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + 14952;
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43174;
                        run_43000(); return;
                    }
                case 0x43390:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44058;
                        run_44000(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x43188;
                    run_43000(); return;
                case 0x433b4:
                    r2 = r17 & 8;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44044;
                        run_44000(); return;
                    }
                    r4 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r4 + 7;
                case 0x433d8:
                    r2 = r0 + -8;
                    r2 = r3 & r2;
                    r3 = r2 + 8;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = f0;
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                case 0x43400:
                    pc=0x43400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43400() throws ExecutionException { /* 0x43400 - 0x43600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43400:
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = f1;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x43410;
                    pc=0x40000;
                    run_40000(); return;
                case 0x43410:
                    r3 = r0 + 1;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x43fe4;
                        run_43e00(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x446e0;
                        run_44600(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x43448:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44444;
                        run_44400(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 18320;
                case 0x4345c:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r4 = r0 + 3;
                    r2 = r0 + 3;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b40;
                    run_42a00(); return;
                case 0x43484:
                    r17 = r17 | 8;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    run_42800(); return;
                case 0x43494:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4312c;
                        run_43000(); return;
                    }
                case 0x434a8:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44080;
                        run_44000(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    run_43000(); return;
                case 0x434d8:
                    r2 = r17 & 16;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43088;
                        run_43000(); return;
                    }
                case 0x434ec:
                    r2 = r17 & 64;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440a0;
                        run_44000(); return;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    run_43000(); return;
                case 0x4351c:
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    run_42800(); return;
                case 0x4352c:
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r7;
                    writePages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff] = r3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a2c;
                        run_42a00(); return;
                    }
                    addr=r29+104;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x43234;
                    run_43200(); return;
                case 0x43550:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x42c88;
                    run_42c00(); return;
                case 0x4355c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    r3 = r4 < 2 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x439cc;
                        run_43800(); return;
                    }
                case 0x43580:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43f34;
                        run_43e00(); return;
                    }
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r8 = r8 + 8;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43f88;
                        run_43e00(); return;
                    }
                case 0x435cc:
                    r8 = r8 + 8;
                case 0x435d0:
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x43c4c;
                        run_43c00(); return;
                    }
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r4 = r5 + -1;
                case 0x43600:
                    pc=0x43600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43600() throws ExecutionException { /* 0x43600 - 0x43800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43600:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r2 + r4;
                case 0x4360c:
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x439f4;
                        run_43800(); return;
                    }
                case 0x43624:
                    r8 = r8 + 8;
                case 0x43628:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r29 + 164;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    r2 = r5 + r2;
                case 0x4363c:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e4c;
                        run_42e00(); return;
                    }
                case 0x43654:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43668;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43668:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42e50;
                    run_42e00(); return;
                case 0x43680:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43694;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43694:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42f8c;
                    run_42e00(); return;
                case 0x436ac:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x43aa8;
                        run_43a00(); return;
                    }
                    r6 = r29 + 144;
                    r5 = r0 + 2;
                    r16 = r6 + r0;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x43700;
                        continue;
                    }
                    r5 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                case 0x436d0:
                    r4 = r2 & 15;
                    r4 = r5 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r16 = r16 + -1;
                    r2 = r2 >>> 4;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x436d0;
                        continue;
                    }
                case 0x436f0:
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x430ec;
                    run_43000(); return;
                case 0x43700:
                    r4 = r2 & 7;
                    r16 = r16 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43700;
                        continue;
                    }
                    r2 = r17 & 1;
                    r5 = r16 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x436f0;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x436f0;
                        continue;
                    }
                    r16 = r16 + -1;
                    r6 = r6 - r16;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x430ec;
                    run_43000(); return;
                case 0x43750:
                    r18 = r18 < 102 ? 1 : 0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4355c;
                        run_43400(); return;
                    }
                    f0 = r0;
                    f2 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x43af4;
                        run_43a00(); return;
                    }
                    r3 = 5 << 16;
                    r3 = r3 + 15064;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x440d4;
                        run_44000(); return;
                    }
                    r8 = r8 + 8;
                case 0x437b8:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x437dc;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e50;
                        run_42e00(); return;
                    }
                case 0x437dc:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                case 0x43800:
                    pc=0x43800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43800() throws ExecutionException { /* 0x43800 - 0x43a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43800:
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44418;
                        run_44400(); return;
                    }
                    r8 = r8 + 8;
                case 0x43818:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r3 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e50;
                        run_42e00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d08;
                        run_43c00(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 20412;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x43868;
                    continue;
                case 0x43854:
                    r8 = r8 + 8;
                case 0x43858:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d14;
                        run_43c00(); return;
                    }
                case 0x43868:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43854;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x438a0;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x438a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43858;
                    continue;
                case 0x438bc:
                    r3 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r20 = r3 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d18;
                        run_42c00(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4472c;
                        run_44600(); return;
                    }
                    r4 = 5 << 16;
                    r23 = r4 + 20412;
                    r4 = r23 + r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r17 + r0;
                    r7 = r0 + 16;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43924;
                    continue;
                case 0x43910:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43988;
                        continue;
                    }
                case 0x43924:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r7;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43910;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x43960;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43960:
                    r7 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43924;
                        continue;
                    }
                case 0x43988:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x4399c:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43fb8;
                        run_43e00(); return;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x42d18;
                    run_42c00(); return;
                case 0x439cc:
                    r3 = r17 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43580;
                        run_43400(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43624;
                        run_43600(); return;
                    }
                case 0x439f4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                case 0x43a00:
                    pc=0x43a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43a00() throws ExecutionException { /* 0x43a00 - 0x43c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43a00:
                    /* Next insn is delay slot */ 
                    r31=0x43a08;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43a08:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43628;
                    run_43600(); return;
                case 0x43a24:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43a38;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43a38:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42e14;
                    run_42e00(); return;
                case 0x43a50:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43a64;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43a64:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42cc4;
                    run_42c00(); return;
                case 0x43a7c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43a90;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43a90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42d08;
                    run_42c00(); return;
                case 0x43aa8:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d28;
                        run_43c00(); return;
                    }
                    r2 = r2 + 48;
                    r4 = r0 + 1;
                    addr=r29+143;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r4;
                    r16 = r29 + 143;
                    /* Next insn is delay slot */ 
                    pc=0x430ec;
                    run_43000(); return;
                case 0x43ad0:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r0;
                    r16 = r29 + 144;
                    /* Next insn is delay slot */ 
                    pc=0x430ec;
                    run_43000(); return;
                case 0x43ae0:
                    r4 = r0 + 2;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    run_43000(); return;
                case 0x43af4:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44100;
                        run_44000(); return;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r16 + r3;
                    r20 = r18 - r16;
                    r3 = r4 < r20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43b24;
                        continue;
                    }
                    r20 = r4 + r0;
                case 0x43b24:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43b58;
                        continue;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r3 = r3 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44568;
                        run_44400(); return;
                    }
                    r8 = r8 + 8;
                case 0x43b58:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4455c;
                        run_44400(); return;
                    }
                case 0x43b60:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r20 = r3 - r20;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ddc;
                        run_43c00(); return;
                    }
                    r3 = r20 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a94;
                        run_44a00(); return;
                    }
                    r5 = 5 << 16;
                    r23 = r5 + 20412;
                    r4 = r23 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r16;
                    r23 = r20 + r0;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r18 + r0;
                    r30 = r0 + 16;
                    r18 = r17 + r0;
                    r16 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43bc8;
                    continue;
                case 0x43bb4:
                    r8 = r8 + 8;
                case 0x43bb8:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d9c;
                        run_43c00(); return;
                    }
                case 0x43bc8:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r17;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43bb4;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43c00;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43c00:
                    pc=0x43c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43c00() throws ExecutionException { /* 0x43c00 - 0x43e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43c00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43bb8;
                    run_43a00(); return;
                case 0x43c1c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43c30;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43c30:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42c88;
                    run_42c00(); return;
                case 0x43c4c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r4 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43628;
                        run_43600(); return;
                    }
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a84;
                        run_44a00(); return;
                    }
                    r4 = 5 << 16;
                    r23 = r4 + 20412;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x43c98;
                    continue;
                case 0x43c84:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r8 = r8 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43cf4;
                        continue;
                    }
                case 0x43c98:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c84;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43cd0;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43cd0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43c98;
                        continue;
                    }
                case 0x43cf4:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x4360c;
                    run_43600(); return;
                case 0x43d08:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 20412;
                case 0x43d14:
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + r16;
                    /* Next insn is delay slot */ 
                    pc=0x4363c;
                    run_43600(); return;
                case 0x43d28:
                    r6 = r29 + 144;
                    r16 = r6 + r0;
                    r4 = r0 + 10;
                case 0x43d34:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x43d40;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x43d40:
                    r16 = r16 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d34;
                        continue;
                    }
                    r6 = r6 - r16;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x430ec;
                    run_43000(); return;
                case 0x43d6c:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x428b8;
                    run_42800(); return;
                case 0x43d9c:
                    r4 = r17 + r0;
                    r16 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r17 = r18 + r0;
                    r18 = r20 + r0;
                    r20 = r23 + r0;
                    r23 = r4 + r0;
                case 0x43db4:
                    r3 = r3 + 1;
                    r2 = r2 + r20;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44650;
                        run_44600(); return;
                    }
                    r8 = r8 + 8;
                case 0x43ddc:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = r16 + r3;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r3 < r5 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43e08;
                        run_43e00(); return;
                    }
                    r4 = r17 & 1;
                case 0x43e00:
                    pc=0x43e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43e00() throws ExecutionException { /* 0x43e00 - 0x44000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43e00:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43e3c;
                        continue;
                    }
                case 0x43e08:
                    r4 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r5 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x445cc;
                        run_44400(); return;
                    }
                    r8 = r8 + 8;
                case 0x43e3c:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r18 = r18 - r16;
                    r3 = r4 - r3;
                    r4 = r18 < r3 ? 1 : 0;
                    r20 = r3 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43e5c;
                        continue;
                    }
                    r20 = r18 + r0;
                case 0x43e5c:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x43e90;
                        continue;
                    }
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4467c;
                        run_44600(); return;
                    }
                    r8 = r8 + 8;
                case 0x43e90:
                    if(r20 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x446b4;
                        run_44600(); return;
                    }
                case 0x43e98:
                    r16 = r3 - r20;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e50;
                        run_42e00(); return;
                    }
                    r3 = r16 < 17 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d08;
                        run_43c00(); return;
                    }
                    r5 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 20412;
                    r18 = r0 + 16;
                    r20 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x43ee0;
                    continue;
                case 0x43ecc:
                    r8 = r8 + 8;
                case 0x43ed0:
                    r16 = r16 + -16;
                    r4 = r16 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43d14;
                        run_43c00(); return;
                    }
                case 0x43ee0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43ecc;
                        continue;
                    }
                    r4 = r20 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43f18;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43f18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43ed0;
                    continue;
                case 0x43f34:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43f48;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43f48:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    r3 = r3 + 1;
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x435cc;
                        run_43400(); return;
                    }
                case 0x43f88:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43f9c;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43f9c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x435d0;
                    run_43400(); return;
                case 0x43fb8:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x43fcc;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x43fcc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42d18;
                    run_42c00(); return;
                case 0x43fe4:
                    f12 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    f13 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x43ff8;
                    pc=0x40000;
                    run_40000(); return;
                case 0x43ff8:
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44234;
                        run_44200(); return;
                    }
                case 0x44000:
                    pc=0x44000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44000() throws ExecutionException { /* 0x44000 - 0x44200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44000:
                    r2 = r18 < 72 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44494;
                        run_44400(); return;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + 18328;
                case 0x44018:
                    r2 = r0 + -129;
                    r17 = r17 & r2;
                    r5 = r0 + 3;
                    r2 = r0 + 3;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b40;
                    run_42a00(); return;
                case 0x44044:
                    r2 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r3 = r2 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x433d8;
                    run_43200(); return;
                case 0x44058:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x43188;
                    run_43000(); return;
                case 0x4406c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x431ec;
                    run_43000(); return;
                case 0x44080:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + 1;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    run_43000(); return;
                case 0x440a0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r3;
                    r4 = r0 + r0;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x430a4;
                    run_43000(); return;
                case 0x440c0:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 20412;
                    /* Next insn is delay slot */ 
                    pc=0x42dec;
                    run_42c00(); return;
                case 0x440d4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x440e8;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x440e8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x437b8;
                    run_43600(); return;
                case 0x44100:
                    r4 = 5 << 16;
                    r4 = r4 + 15064;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x444a4;
                        run_44400(); return;
                    }
                    r8 = r8 + 8;
                    r18 = r3 + r0;
                case 0x4413c:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44160;
                        continue;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44160;
                        continue;
                    }
                    r3 = r17 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42e50;
                        run_42e00(); return;
                    }
                case 0x44160:
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x448e0;
                        run_44800(); return;
                    }
                    r8 = r8 + 8;
                case 0x4419c:
                    r18 = r0 - r18;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44530;
                        run_44400(); return;
                    }
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44594;
                        run_44400(); return;
                    }
                    r5 = 5 << 16;
                    r23 = r5 + 20412;
                    r20 = r0 + 16;
                    r30 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x441e0;
                    continue;
                case 0x441cc:
                    r8 = r8 + 8;
                case 0x441d0:
                    r18 = r18 + -16;
                    r4 = r18 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4459c;
                        run_44400(); return;
                    }
                case 0x441e0:
                    r3 = r3 + 1;
                    r2 = r2 + 16;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x441cc;
                        continue;
                    }
                case 0x44200:
                    pc=0x44200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44200() throws ExecutionException { /* 0x44200 - 0x44400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44200:
                    r4 = r30 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x44218;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x44218:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x441d0;
                    run_44000(); return;
                case 0x44234:
                    r9 = r0 + -33;
                    r2 = r0 + -1;
                    r20 = r18 & r9;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x444d4;
                        run_44400(); return;
                    }
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x448cc;
                        run_44800(); return;
                    }
                case 0x44254:
                    r2 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r23 = r17 | 256;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44914;
                        run_44800(); return;
                    }
                    f0 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = f0;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = f1;
                case 0x4427c:
                    r2 = r0 + 102;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44740;
                        run_44600(); return;
                    }
                    r2 = r0 + 70;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44740;
                        run_44600(); return;
                    }
                    r2 = r0 + 69;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4493c;
                        run_44800(); return;
                    }
                    r5 = r30 + r0;
                case 0x442a4:
                    r2 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r5;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x442e4;
                    pc=0x39200;
                    run_39200(); return;
                case 0x442e4:
                    r16 = r2 + r0;
                    r2 = r0 + 103;
                    r5 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44308;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44314;
                        continue;
                    }
                case 0x44308:
                    r2 = r17 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a6c;
                        run_44a00(); return;
                    }
                case 0x44314:
                    r2 = r0 + 70;
                    r4 = r16 + r5;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4484c;
                        run_44800(); return;
                    }
                case 0x44324:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x44720;
                        run_44600(); return;
                    }
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44380;
                        continue;
                    }
                    r5 = r0 + 48;
                case 0x44360:
                    r3 = r2 + 1;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44360;
                        continue;
                    }
                case 0x44380:
                    r2 = r2 - r16;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r2;
                    r2 = r0 + 71;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x446f4;
                        run_44600(); return;
                    }
                    r2 = r18 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b80;
                        run_44a00(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x449ac;
                        run_44800(); return;
                    }
                case 0x443b4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44948;
                        run_44800(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44980;
                        run_44800(); return;
                    }
                    r2 = r4 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b64;
                        run_44a00(); return;
                    }
                case 0x443e4:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r18 = r0 + 103;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                case 0x443f0:
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x446c0;
                        run_44600(); return;
                    }
                case 0x44400:
                    pc=0x44400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44400() throws ExecutionException { /* 0x44400 - 0x44600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44400:
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b40;
                    run_42a00(); return;
                case 0x44418:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4442c;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4442c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43818;
                    run_43800(); return;
                case 0x44444:
                    r16 = 5 << 16;
                    r16 = r16 + 18316;
                    /* Next insn is delay slot */ 
                    pc=0x4345c;
                    run_43400(); return;
                case 0x44454:
                    r30 = r0 + -1;
                    r3 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42994;
                    run_42800(); return;
                case 0x44464:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x44474;
                    pc=0x20800;
                    run_20800(); return;
                case 0x44474:
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b8c;
                        run_44a00(); return;
                    }
                    r2 = r0 + 64;
                    writePages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x42884;
                    run_42800(); return;
                case 0x44494:
                    r16 = 5 << 16;
                    r16 = r16 + 18324;
                    /* Next insn is delay slot */ 
                    pc=0x44018;
                    run_44000(); return;
                case 0x444a4:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x444b8;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x444b8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4413c;
                    run_44000(); return;
                case 0x444d4:
                    r30 = r0 + 6;
                    /* Next insn is delay slot */ 
                    pc=0x44254;
                    run_44200(); return;
                case 0x444e0:
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x444ec;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x444ec:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b2c;
                        run_42a00(); return;
                    }
                case 0x444fc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b2c;
                    run_42a00(); return;
                case 0x44508:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4451c;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4451c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                case 0x44530:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r16;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r4;
                    r2 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4363c;
                    run_43600(); return;
                case 0x44548:
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x42c58;
                    run_42c00(); return;
                case 0x4455c:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43b60;
                    run_43a00(); return;
                case 0x44568:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x4457c;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4457c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43b58;
                    run_43a00(); return;
                case 0x44594:
                    r4 = 5 << 16;
                    r23 = r4 + 20412;
                case 0x4459c:
                    r3 = r3 + 1;
                    r2 = r2 + r18;
                    r4 = r3 < 8 ? 1 : 0;
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r23;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r18;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44508;
                        continue;
                    }
                    r8 = r8 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x44530;
                    continue;
                case 0x445cc:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x445e0;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x445e0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43e3c;
                    run_43e00(); return;
                case 0x445fc:
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                case 0x44600:
                    pc=0x44600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44600() throws ExecutionException { /* 0x44600 - 0x44800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44600:
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    pc=0x42f08;
                    run_42e00(); return;
                case 0x4460c:
                    r3 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r2 = r30 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44620;
                        continue;
                    }
                    r2 = r0 + 6;
                case 0x44620:
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44a78;
                        run_44a00(); return;
                    }
                case 0x4462c:
                    r16 = 5 << 16;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r3 = r0 + r0;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    r16 = r16 + 18332;
                    /* Next insn is delay slot */ 
                    pc=0x42b58;
                    run_42a00(); return;
                case 0x44650:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x44664;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x44664:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43ddc;
                    run_43c00(); return;
                case 0x4467c:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x44690;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x44690:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = r5 - r3;
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43e90;
                    run_43e00(); return;
                case 0x446b4:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x43e98;
                    run_43e00(); return;
                case 0x446c0:
                    r3 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r17 = r23 + r0;
                    r3 = r0 + 45;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b48;
                    run_42a00(); return;
                case 0x446e0:
                    r2 = r0 + 45;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    pc=0x43448;
                    run_43400(); return;
                case 0x446f4:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r3 = r2 < -3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44790;
                        continue;
                    }
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44790;
                        continue;
                    }
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x443b4;
                    run_44200(); return;
                case 0x44720:
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44380;
                    run_44200(); return;
                case 0x4472c:
                    r5 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r5 + 20412;
                    /* Next insn is delay slot */ 
                    pc=0x4399c;
                    run_43800(); return;
                case 0x44740:
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r29 + 176;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r29 + 172;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r29 + 156;
                    r7 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r6 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    r31=0x4477c;
                    pc=0x39200;
                    run_39200(); return;
                case 0x4477c:
                    r16 = r2 + r0;
                    r5 = r30 + r0;
                    r8 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44314;
                    run_44200(); return;
                case 0x44790:
                    r18 = r18 + -2;
                case 0x44794:
                    r2 = r2 + -1;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    addr=r29+164;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b34;
                        run_44a00(); return;
                    }
                    r3 = r0 + 43;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x447b0:
                    r3 = r2 < 10 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x449d8;
                        run_44800(); return;
                    }
                    r2 = r2 + 48;
                    r3 = r0 + 48;
                    addr=r29+167;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+166;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 168;
                    r4 = r29 + 164;
                case 0x447d4:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = r2 - r4;
                    r3 = r3 + r4;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44820;
                        run_44800(); return;
                    }
                case 0x447f8:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                case 0x44800:
                    pc=0x44800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44800() throws ExecutionException { /* 0x44800 - 0x44a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44800:
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4483c;
                        continue;
                    }
                case 0x44814:
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x443f0;
                    run_44200(); return;
                case 0x44820:
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x447f8;
                        run_44600(); return;
                    }
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44814;
                        continue;
                    }
                case 0x4483c:
                    r2 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x443f0;
                    run_44200(); return;
                case 0x4484c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44870;
                        continue;
                    }
                case 0x4485c:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x44324;
                    run_44200(); return;
                case 0x44870:
                    f0 = r0;
                    f2 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    f1 = r0;
                    f3 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4485c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r5;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    r4 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x44324;
                    run_44200(); return;
                case 0x448ac:
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r30;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    addr=r29+182;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x42b40;
                    run_42a00(); return;
                case 0x448cc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44254;
                        run_44200(); return;
                    }
                    r30 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x44254;
                    run_44200(); return;
                case 0x448e0:
                    r4 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r29 + 144;
                    /* Next insn is delay slot */ 
                    r31=0x448f4;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x448f4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a50;
                        run_42a00(); return;
                    }
                    r18 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r2 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r8 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4419c;
                    run_44000(); return;
                case 0x44914:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    r5 = r0 + 45;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = r2;
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = r4;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4427c;
                    run_44200(); return;
                case 0x4493c:
                    r5 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x442a4;
                    run_44200(); return;
                case 0x44948:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44af4;
                        run_44a00(); return;
                    }
                    r2 = r0 + 1;
                case 0x4495c:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4499c;
                        continue;
                    }
                case 0x44974:
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x443f0;
                    run_44200(); return;
                case 0x44980:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    r2 = r3 + r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44974;
                        continue;
                    }
                case 0x4499c:
                    r2 = r0 + r0;
                    r18 = r0 + 103;
                    /* Next insn is delay slot */ 
                    pc=0x443f0;
                    run_44200(); return;
                case 0x449ac:
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44acc;
                        run_44a00(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44aa8;
                        run_44a00(); return;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44aa8;
                        run_44a00(); return;
                    }
                    r2 = r3 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x443f0;
                    run_44200(); return;
                case 0x449d8:
                    r6 = r29 + 163;
                    r3 = r6 + r0;
                    r4 = r0 + 10;
                case 0x449e4:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        hi = r2%r4; lo = r2/r4;
                        pc=0x449f0;
                        continue;
                    }
                    hi = r2%r4; lo = r2/r4;
                    throw new ExecutionException("Break");
                case 0x449f0:
                    r3 = r3 + -1;
                    r5 = hi;
                    r5 = r5 + 48;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x44a00:
                    pc=0x44a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44a00() throws ExecutionException { /* 0x44a00 - 0x44c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44a00:
                    r2 = lo;
                    r5 = r2 < 10 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x449e4;
                        run_44800(); return;
                    }
                    r2 = r2 + 48;
                    r5 = r2 << 24;
                    r4 = r3 + -1;
                    r5 = r5 >> 24;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b70;
                        continue;
                    }
                    r2 = r29 + 166;
                    /* Next insn is delay slot */ 
                    pc=0x44a40;
                    continue;
                case 0x44a3c:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x44a40:
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x44a3c;
                        continue;
                    }
                    r4 = r29 + 164;
                    r2 = r4 - r3;
                    r3 = r29 + 166;
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x447d4;
                    run_44600(); return;
                case 0x44a6c:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44380;
                    run_44200(); return;
                case 0x44a78:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4462c;
                    run_44600(); return;
                case 0x44a84:
                    r5 = 5 << 16;
                    r23 = r5 + 20412;
                    /* Next insn is delay slot */ 
                    pc=0x43cf4;
                    run_43c00(); return;
                case 0x44a94:
                    r4 = 5 << 16;
                    r3 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r23 = r4 + 20412;
                    /* Next insn is delay slot */ 
                    pc=0x43db4;
                    run_43c00(); return;
                case 0x44aa8:
                    r3 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r2 = r30 + 1;
                    r2 = r3 + r2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x443f0;
                        run_44200(); return;
                    }
                case 0x44ac0:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x443f0;
                    run_44200(); return;
                case 0x44acc:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b48;
                        continue;
                    }
                    r17 = r17 & 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44b48;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r0 + 1;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x443f0;
                    run_44200(); return;
                case 0x44af4:
                    r2 = r0 + 2;
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    pc=0x4495c;
                    run_44800(); return;
                case 0x44b04:
                    r3 = readPages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff];
                    r30 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r3 + 4;
                    r3 = r4 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4351c;
                        run_43400(); return;
                    }
                    writePages[(r29+316)>>>12][((r29+316)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r16 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4298c;
                    run_42800(); return;
                case 0x44b34:
                    r3 = r0 + 45;
                    r2 = r0 - r2;
                    addr=r29+165;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x447b0;
                    run_44600(); return;
                case 0x44b48:
                    r30 = r30 + 2;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r30;
                    r2 = r30 + r0;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x443f0;
                        run_44200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44ac0;
                    continue;
                case 0x44b64:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x443e4;
                    run_44200(); return;
                case 0x44b70:
                    r2 = r29 + 166;
                    r4 = r29 + 164;
                    /* Next insn is delay slot */ 
                    pc=0x447d4;
                    run_44600(); return;
                case 0x44b80:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44794;
                    run_44600(); return;
                case 0x44b8c:
                    r3 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x42a68;
                    run_42a00(); return;
                case 0x44c00:
                    pc=0x44c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44c00() throws ExecutionException { /* 0x44c00 - 0x44e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44c00:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -752;
                    writePages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff] = r30;
                    writePages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff] = r20;
                    writePages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff] = r16;
                    writePages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff] = r31;
                    writePages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff] = r23;
                    writePages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff] = r22;
                    writePages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff] = r21;
                    writePages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff] = r19;
                    writePages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff] = r18;
                    writePages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff] = f20;
                    writePages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff] = f21;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    r20 = r7 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c6c;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x44c6c:
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r0;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r21 = r0 + r0;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r0;
                case 0x44c7c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        run_44e00(); return;
                    }
                case 0x44c90:
                    r4 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r3 = r4 + r2;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44d2c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44d08;
                        continue;
                    }
                case 0x44cc0:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c7c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44cc0;
                        continue;
                    }
                case 0x44d08:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44d18;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x44d18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c7c;
                        continue;
                    }
                    r4 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44cc0;
                    continue;
                case 0x44d2c:
                    r3 = r0 + 37;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x44eec;
                        run_44e00(); return;
                    }
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                case 0x44d40:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 255;
                    r5 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44d7c;
                        continue;
                    }
                    r5 = 5 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 20452;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x44d7c:
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 1;
                    r3 = r3 & 3;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44d98;
                        continue;
                    }
                case 0x44d94:
                    r18 = r18 | 1;
                case 0x44d98:
                    r2 = 2 << 16;
                    r2 = r2 + 27648;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x44db0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f74;
                        run_44e00(); return;
                    }
                case 0x44dc0:
                    r2 = r18 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44e94;
                        run_44e00(); return;
                    }
                case 0x44dcc:
                    r2 = r0 + 2;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x450b8;
                        run_45000(); return;
                    }
                    r2 = r19 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ff0;
                        run_44e00(); return;
                    }
                    r2 = r0 + 3;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x451ec;
                        run_45000(); return;
                    }
                    r2 = r0 + 4;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45158;
                        run_45000(); return;
                    }
                    r2 = r23 + -1;
                case 0x44e00:
                    pc=0x44e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44e00() throws ExecutionException { /* 0x44e00 - 0x45000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44e00:
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45908;
                        run_45800(); return;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r0;
                case 0x44e10:
                    r10 = r29 + 24;
                    r19 = r18 | 1920;
                    r3 = r0 + r0;
                    r18 = r0 + r0;
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r0;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r0;
                    r22 = r10 + r0;
                    r11 = r0 + -1921;
                case 0x44e38:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r2 = r5 + -43;
                    r2 = r2 & 255;
                    r7 = (r2&0xffffffffL) < (79&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r4 = 5 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 20936;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x44e7c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44e8c;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x44e8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        continue;
                    }
                case 0x44e94:
                    r4 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44eac;
                    continue;
                case 0x44ea4:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x44eac:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44dcc;
                        run_44c00(); return;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ea4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44e7c;
                    continue;
                case 0x44eec:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f5c;
                        run_45e00(); return;
                    }
                case 0x44efc:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r21 = r21 + 1;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r2;
                    r16 = r16 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c90;
                        run_44c00(); return;
                    }
                case 0x44f40:
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44fb4;
                    continue;
                case 0x44f4c:
                    r18 = r18 | 1;
                case 0x44f50:
                    r2 = 4 << 16;
                    r2 = r2 + 8704;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r0 + 8;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x44dc0;
                        run_44c00(); return;
                    }
                case 0x44f74:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x44f84;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x44f84:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44dc0;
                        run_44c00(); return;
                    }
                case 0x44f8c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44fb0;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        continue;
                    }
                case 0x44fb0:
                    r2 = r0 + -1;
                case 0x44fb4:
                    f20 = readPages[(r29+748)>>>12][((r29+748)>>>2)&0x3ff];
                    r31 = readPages[(r29+740)>>>12][((r29+740)>>>2)&0x3ff];
                    r30 = readPages[(r29+736)>>>12][((r29+736)>>>2)&0x3ff];
                    r23 = readPages[(r29+732)>>>12][((r29+732)>>>2)&0x3ff];
                    r22 = readPages[(r29+728)>>>12][((r29+728)>>>2)&0x3ff];
                    r21 = readPages[(r29+724)>>>12][((r29+724)>>>2)&0x3ff];
                    r20 = readPages[(r29+720)>>>12][((r29+720)>>>2)&0x3ff];
                    r19 = readPages[(r29+716)>>>12][((r29+716)>>>2)&0x3ff];
                    r18 = readPages[(r29+712)>>>12][((r29+712)>>>2)&0x3ff];
                    r17 = readPages[(r29+708)>>>12][((r29+708)>>>2)&0x3ff];
                    r16 = readPages[(r29+704)>>>12][((r29+704)>>>2)&0x3ff];
                    f21 = readPages[(r29+744)>>>12][((r29+744)>>>2)&0x3ff];
                    r29 = r29 + 752;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44ff0:
                    r2 = r0 + 1;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45158;
                        run_45000(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45008;
                        run_45000(); return;
                    }
                case 0x45000:
                    pc=0x45000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45000() throws ExecutionException { /* 0x45000 - 0x45200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45000:
                    r23 = r0 + -1;
                case 0x45008:
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45848;
                        run_45800(); return;
                    }
                    r10 = r29 + 24;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                    r19 = r10 + r0;
                case 0x45024:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x450a4;
                        continue;
                    }
                case 0x45040:
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x450ac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45024;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45078;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x45078:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x450ac;
                        continue;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r19 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45040;
                        continue;
                    }
                case 0x450a4:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        run_44e00(); return;
                    }
                case 0x450ac:
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x450b8:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x450c4;
                        continue;
                    }
                    r23 = r0 + -1;
                case 0x450c4:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b5c;
                        run_45a00(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bfc;
                        run_45a00(); return;
                    }
                    r4 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r0 + r0;
                case 0x450e8:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r4 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x450ac;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    r18 = r18 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r23 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x450ac;
                        continue;
                    }
                    if(r3 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x450e8;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45140;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x45140:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x450ac;
                        continue;
                    }
                    r4 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x450e8;
                    continue;
                case 0x45158:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45164;
                        continue;
                    }
                    r23 = r0 + 1;
                case 0x45164:
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a4c;
                        run_45a00(); return;
                    }
                    r18 = r18 & 16;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f18;
                        run_45e00(); return;
                    }
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x451b4;
                    continue;
                case 0x45188:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r2;
                    r23 = r23 - r2;
                    r2 = r3 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x451ac;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x451ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45f04;
                        run_45e00(); return;
                    }
                case 0x451b4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r2 < r23 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45188;
                        continue;
                    }
                    r2 = r2 - r23;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r18 = r18 + r23;
                    r8 = r2 + r23;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r8;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x451ec:
                    r2 = r23 + -1;
                    r2 = (r2&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45838;
                        run_45800(); return;
                    }
                    r6 = r0 + r0;
                case 0x45200:
                    pc=0x45200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45200() throws ExecutionException { /* 0x45200 - 0x45400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45200:
                    r10 = r29 + 24;
                    r4 = 5 << 16;
                    r11 = r20 + r0;
                    r20 = r16 + r0;
                    r16 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r18 = r18 | 3456;
                    r8 = r0 + r0;
                    r19 = r10 + r0;
                    r7 = r0 + 512;
                    r22 = r4 + 21564;
                case 0x45228:
                    r5 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -43;
                    r2 = r2 & 255;
                    r9 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x456cc;
                        run_45600(); return;
                    }
                    r4 = 5 << 16;
                    r2 = r2 << 2;
                    r4 = r4 + 21252;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4526c:
                    r2 = r3 + r18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        continue;
                    }
                    r2 = r0 + -385;
                    r19 = r19 & r2;
                case 0x45280:
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r22 = r22 + 1;
                case 0x45288:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + -1;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x454b4;
                        run_45400(); return;
                    }
                case 0x452a4:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44e38;
                        run_44e00(); return;
                    }
                case 0x452b4:
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x454f4;
                        run_45400(); return;
                    }
                case 0x452c4:
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46160;
                        run_46000(); return;
                    }
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4535c;
                        continue;
                    }
                    r2 = r18 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x460e0;
                        run_46000(); return;
                    }
                    r2 = r0 + 3;
                    r7 = r18 & 255;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4535c;
                        continue;
                    }
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r16;
                    r23 = r22 + r0;
                    r16 = r7 + r0;
                    r18 = r10 + r0;
                case 0x45310:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45328;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x45328:
                    r3 = r16 + -1;
                    r2 = r23 + r21;
                    r16 = r3 & 255;
                    r4 = r2 - r22;
                    r2 = r16 << 24;
                    r2 = r2 >> 24;
                    r2 = r2 < 4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45310;
                        continue;
                    }
                    r16 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r10 = r18 + r0;
                    r21 = r4 + r0;
                    r22 = r23 + r0;
                case 0x4535c:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x453e4;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46120;
                        run_46000(); return;
                    }
                    addr=r22+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r0 + 101;
                    r23 = r22 + -1;
                    r7 = r21 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x453bc;
                        continue;
                    }
                    r2 = r0 + 69;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x453bc;
                        continue;
                    }
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x453ac;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x453ac:
                    addr=r22+-2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r23 = r22 + -2;
                    r7 = r21 + -2;
                case 0x453bc:
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x453d4;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x453d4:
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r22 = r23 + r0;
                case 0x453e4:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c7c;
                        run_44c00(); return;
                    }
                    r4 = r19 & 1536;
                    r2 = r0 + 1024;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45f7c;
                        run_45e00(); return;
                    }
                case 0x45400:
                    pc=0x45400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45400() throws ExecutionException { /* 0x45400 - 0x45600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45400:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e54;
                        run_45e00(); return;
                    }
                case 0x45414:
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45428;
                    pc=0x4ac00;
                    run_4ac00(); return;
                case 0x45428:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d44;
                        run_45c00(); return;
                    }
                case 0x45438:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f20;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f21;
                case 0x45448:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45460:
                    r2 = r19 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4526c;
                        run_45200(); return;
                    }
                    r2 = r0 + -129;
                    r5 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r19 = r19 & r2;
                    r2 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45288;
                        run_45200(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x452a4;
                        run_45200(); return;
                    }
                case 0x454b4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r3;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x454d0;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x454d0:
                    r3 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44e38;
                        run_44e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x452b4;
                    run_45200(); return;
                case 0x454f4:
                    r2 = r0 + -257;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x452c4;
                    run_45200(); return;
                case 0x45504:
                    r2 = r19 & 512;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = r0 + -641;
                    r19 = r19 & r4;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x45528:
                    r2 = r19 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r2 = r0 + -129;
                    r19 = r19 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x45544:
                    r2 = r0 + 7;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r18 = r0 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x4555c:
                    r2 = r0 + 6;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r18 = r0 + 7;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x45574:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45cac;
                        run_45c00(); return;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d90;
                        run_45c00(); return;
                    }
                case 0x4558c:
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x455a4;
                        continue;
                    }
                    r2 = r0 + 4;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                case 0x455a4:
                    r18 = r18 + 1;
                    r18 = r18 << 24;
                    r18 = r18 >> 24;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x455b8:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45cc4;
                        run_45c00(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x454f4;
                        continue;
                    }
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452c4;
                        run_45200(); return;
                    }
                    r19 = r19 & r11;
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x455f0:
                    r2 = r0 + 2;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r18 = r0 + 3;
                case 0x45600:
                    pc=0x45600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45600() throws ExecutionException { /* 0x45600 - 0x45800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45600:
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x45608:
                    r2 = r19 & 1280;
                    r4 = r0 + 1024;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x45634;
                        continue;
                    }
                    r2 = r19 & 1024;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r2 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x452c4;
                        run_45200(); return;
                    }
                case 0x45634:
                    r2 = r19 & 512;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45654;
                        continue;
                    }
                    r4 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r2 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r22;
                    r4 = r4 - r2;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r4;
                case 0x45654:
                    r19 = r19 & r11;
                    r19 = r19 | 384;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x45668:
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r3 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x45680:
                    r2 = r18 & 1536;
                    if(r2 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x456cc;
                        continue;
                    }
                    r2 = r0 + -513;
                    r18 = r18 & r2;
                    r18 = r18 | 1280;
                    r16 = r0 + 16;
                case 0x4569c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r19 = r19 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x457c4;
                        continue;
                    }
                case 0x456b8:
                    r5 = r5 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r5;
                case 0x456c0:
                    r23 = r23 + -1;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45228;
                        run_45200(); return;
                    }
                case 0x456cc:
                    r2 = r18 & 256;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r16;
                    r16 = r20 + r0;
                    r20 = r11 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x456f8;
                        continue;
                    }
                    r2 = ((r10 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e20;
                        run_45e00(); return;
                    }
                case 0x456f0:
                    if(r10 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        run_44e00(); return;
                    }
                case 0x456f8:
                    r2 = r18 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ce4;
                        run_45c00(); return;
                    }
                case 0x45704:
                    r10 = r19 - r10;
                    r23 = r10 + r8;
                    r21 = r21 + r23;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45718:
                    r2 = r16 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x456cc;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4569c;
                    continue;
                case 0x45734:
                    r2 = r18 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x456cc;
                        continue;
                    }
                    r2 = r0 + -129;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4569c;
                    continue;
                case 0x45750:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4569c;
                    continue;
                case 0x4576c:
                    r2 = r18 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4569c;
                        continue;
                    }
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45788;
                        continue;
                    }
                    r18 = r18 | 512;
                    r16 = r0 + 8;
                case 0x45788:
                    r2 = r18 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d80;
                        run_45c00(); return;
                    }
                    r2 = r0 + -897;
                    r18 = r18 & r2;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x457ac;
                        continue;
                    }
                    r6 = r6 + -1;
                    r23 = r23 + 1;
                case 0x457ac:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x456b8;
                        continue;
                    }
                case 0x457c4:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r6;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r7;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    writePages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff] = r11;
                    /* Next insn is delay slot */ 
                    r31=0x457e8;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x457e8:
                    r6 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r11 = readPages[(r29+692)>>>12][((r29+692)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x456c0;
                        continue;
                    }
                case 0x45800:
                    pc=0x45800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45800() throws ExecutionException { /* 0x45800 - 0x45a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45800:
                    /* Next insn is delay slot */ 
                    pc=0x456cc;
                    run_45600(); return;
                case 0x4580c:
                    r2 = r16 << 1;
                    r2 = r2 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r16 = tmp;
                    r2 = r16 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x456cc;
                        run_45600(); return;
                    }
                    r2 = r0 + -2945;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4569c;
                    run_45600(); return;
                case 0x45838:
                    r6 = r23 + -349;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x45200;
                    run_45200(); return;
                case 0x45848:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r19 = r20 + 4;
                    r22 = r10 + r0;
                    r20 = r18 + r0;
                case 0x4585c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r22 + r3;
                    addr=r3+352;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458dc;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458dc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4585c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x458cc;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x458cc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4585c;
                        continue;
                    }
                    if(r18 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        run_44e00(); return;
                    }
                case 0x458dc:
                    r18 = r20 - r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        run_44e00(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45908:
                    r23 = r23 + -349;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r23;
                    r23 = r0 + 349;
                    /* Next insn is delay slot */ 
                    pc=0x44e10;
                    run_44e00(); return;
                case 0x4591c:
                    r2 = 2 << 16;
                    r2 = r2 + 27648;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r0;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x44db0;
                    run_44c00(); return;
                case 0x45938:
                    r18 = r18 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x44d40;
                    run_44c00(); return;
                case 0x45944:
                    r18 = r18 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x44d40;
                    run_44c00(); return;
                case 0x45950:
                    r18 = r18 | 64;
                    r19 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44db0;
                    run_44c00(); return;
                case 0x45960:
                    r5 = r16 + r0;
                    r4 = r29 + 376;
                    /* Next insn is delay slot */ 
                    r31=0x45970;
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x45970:
                    r16 = r2 + r0;
                    r18 = r18 | 64;
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x44db0;
                    run_44c00(); return;
                case 0x45984:
                    r18 = r18 | 512;
                case 0x45988:
                    r2 = 4 << 16;
                    r2 = r2 + 8704;
                    r3 = r0 + 16;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x44db0;
                    run_44c00(); return;
                case 0x459a8:
                    r18 = r18 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x44d40;
                    run_44c00(); return;
                case 0x459b4:
                    r19 = r0 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x44db0;
                    run_44c00(); return;
                case 0x459c0:
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r2 = r2 + r23;
                    r3 = r3 + -48;
                    r23 = r3 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x44d40;
                    run_44c00(); return;
                case 0x459dc:
                    r18 = r18 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x44d40;
                    run_44c00(); return;
                case 0x459e8:
                    r2 = 4 << 16;
                    r2 = r2 + 8704;
                    r3 = r0 + 10;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r2;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r3;
                    r19 = r0 + 3;
                case 0x45a00:
                    pc=0x45a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45a00() throws ExecutionException { /* 0x45a00 - 0x45c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45a00:
                    /* Next insn is delay slot */ 
                    pc=0x44db0;
                    run_44c00(); return;
                case 0x45a08:
                    r19 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x44db0;
                    run_44c00(); return;
                case 0x45a14:
                    r18 = r18 | 544;
                    /* Next insn is delay slot */ 
                    pc=0x45988;
                    run_45800(); return;
                case 0x45a20:
                    r2 = r18 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c7c;
                        run_44c00(); return;
                    }
                    r2 = r18 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45fa0;
                        run_45e00(); return;
                    }
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r21&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45a4c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x45a6c;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x45a6c:
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r18;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45de4;
                        run_45c00(); return;
                    }
                    r18 = r0 + r0;
                case 0x45a7c:
                    r22 = r0 + r0;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r16 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r20;
                    r20 = r22 + r0;
                case 0x45a94:
                    /* Next insn is delay slot */ 
                    r31=0x45a9c;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x45a9c:
                    if(r2 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        run_44e00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r3 = r4 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r22 = r20 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = r17 + r0;
                    r6 = r29 + 24;
                    r7 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45aec;
                    pc=0x49c00;
                    run_49c00(); return;
                case 0x45aec:
                    r5 = r0 + -1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        run_44e00(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ee0;
                        run_45e00(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b0c;
                        continue;
                    }
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r0;
                case 0x45b0c:
                    r21 = r21 + r22;
                    r23 = r23 + -1;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ef8;
                        run_45e00(); return;
                    }
                    r18 = r18 + 4;
                    r20 = r0 + r0;
                case 0x45b24:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45db0;
                        run_45c00(); return;
                    }
                case 0x45b34:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a94;
                        continue;
                    }
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                case 0x45b44:
                    r3 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45448;
                        run_45400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45b5c:
                    r3 = r29 + 632;
                    r4 = r3 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r18 = r18 & 16;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x45b7c;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x45b7c:
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45df4;
                        run_45c00(); return;
                    }
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                case 0x45b90:
                    r6 = r0 + r0;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r16;
                    r22 = r0 + -2;
                    r16 = r6 + r0;
                case 0x45ba0:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r3 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bd0;
                        continue;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45fb4;
                        run_45e00(); return;
                    }
                case 0x45bd0:
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                case 0x45bd4:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c7c;
                        run_44c00(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45bfc:
                    r19 = r20 + 4;
                case 0x45c00:
                    pc=0x45c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45c00() throws ExecutionException { /* 0x45c00 - 0x45e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45c00:
                    r20 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r18 = r20 + r0;
                case 0x45c0c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r5 + r3;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45c88;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r3 = r3 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r3;
                    r3 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + -1;
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45c88;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45c0c;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45c80;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x45c80:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45c0c;
                        continue;
                    }
                case 0x45c88:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    r18 = r18 - r20;
                    r21 = r21 + r18;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45cac:
                    r2 = r0 + 2;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4558c;
                        run_45400(); return;
                    }
                    r3 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x45cc4:
                    r2 = r0 + 3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x455a4;
                        run_45400(); return;
                    }
                    r2 = r0 + 5;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x455a4;
                        run_45400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x452b4;
                    run_45200(); return;
                case 0x45ce4:
                    r3 = readPages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff];
                    r7 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r10 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r4 = r17 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x45d0c;
                    return;
                case 0x45d0c:
                    r3 = r18 & 32;
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e00;
                        run_45e00(); return;
                    }
                case 0x45d20:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x45d2c:
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x45704;
                    run_45600(); return;
                case 0x45d44:
                    r9 = r19 & 2;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45438;
                        run_45400(); return;
                    }
                    f12 = f0;
                    f13 = f1;
                    r18 = r20 + 4;
                    r19 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x45d64;
                    pc=0x40000;
                    run_40000(); return;
                case 0x45d64:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46078;
                        run_46000(); return;
                    }
                    f20=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f20;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45448;
                    run_45400(); return;
                case 0x45d80:
                    r2 = r0 + -1409;
                    r18 = r18 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4569c;
                    run_45600(); return;
                case 0x45d90:
                    r4 = r19 & 1792;
                    r2 = r0 + 1792;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4558c;
                        run_45400(); return;
                    }
                    r19 = r19 & r11;
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x45280;
                    run_45200(); return;
                case 0x45db0:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45dc0;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x45dc0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b34;
                        run_45a00(); return;
                    }
                    r22 = r20 + r0;
                    r16 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45b44;
                        run_45a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44f8c;
                    run_44e00(); return;
                case 0x45de4:
                    r18 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x45a7c;
                    run_45a00(); return;
                case 0x45df4:
                    r19 = r29 + 640;
                    /* Next insn is delay slot */ 
                    pc=0x45b90;
                    run_45a00(); return;
                case 0x45e00:
                    pc=0x45e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45e00() throws ExecutionException { /* 0x45e00 - 0x46000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45e00:
                    r3 = r18 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d20;
                        run_45c00(); return;
                    }
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x45d2c;
                    run_45c00(); return;
                case 0x45e20:
                    addr=r19+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r22 = r19 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r8;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    r19 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45e44;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x45e44:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r8 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x456f0;
                    run_45600(); return;
                case 0x45e54:
                    r3 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r5 = r3 + 1;
                    r4 = r17 + r0;
                    r7 = r0 + 10;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x45e74;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x45e74:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r22 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r6 = r2 - r3;
                case 0x45e84:
                    r2 = r29 + 363;
                    r2 = ((r22 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e98;
                        continue;
                    }
                    r22 = r29 + 362;
                case 0x45e98:
                    r2 = 5 << 16;
                    r4 = r22 + r0;
                    r5 = r2 + 20444;
                    writePages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x45eb0;
                    pc=0x4aa00;
                    run_4aa00(); return;
                case 0x45eb0:
                    r10 = readPages[(r29+696)>>>12][((r29+696)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r10 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45ec8;
                    pc=0x4ac00;
                    run_4ac00(); return;
                case 0x45ec8:
                    r2 = r19 & 1;
                    f20 = f0;
                    f21 = f1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45d44;
                        run_45c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x45438;
                    run_45400(); return;
                case 0x45ee0:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x45b0c;
                        run_45a00(); return;
                    }
                    r20 = r22 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45b24;
                    run_45a00(); return;
                case 0x45ef8:
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45b24;
                    run_45a00(); return;
                case 0x45f04:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        run_44e00(); return;
                    }
                    r21 = r21 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45f18:
                    r5 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r6 = r0 + 1;
                    r7 = r23 + r0;
                    r18 = r20 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x45f38;
                    pc=0x4e600;
                    run_4e600(); return;
                case 0x45f38:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        run_44e00(); return;
                    }
                    r3 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    r21 = r2 + r21;
                    r3 = r3 + 1;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r3;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45f5c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x45f6c;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x45f6c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44efc;
                        run_44e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44f8c;
                    run_44e00(); return;
                case 0x45f7c:
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r4 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r18 = r3 - r4;
                    r6 = r0 - r18;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45e84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x45414;
                    run_45400(); return;
                case 0x45fa0:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r20 = r20 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x44c7c;
                    run_44c00(); return;
                case 0x45fb4:
                    /* Next insn is delay slot */ 
                    r31=0x45fbc;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x45fbc:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        run_44e00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    r18 = r16 + 1;
                    r16 = r4 + r16;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r5 = r19 + r0;
                case 0x46000:
                    pc=0x46000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46000() throws ExecutionException { /* 0x46000 - 0x46200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46000:
                    r6 = r29 + 24;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46010;
                    pc=0x49c00;
                    run_49c00(); return;
                case 0x46010:
                    r4 = r0 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        run_44e00(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46094;
                        continue;
                    }
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x4602c:
                    /* Next insn is delay slot */ 
                    r31=0x46034;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x46034:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461a0;
                        continue;
                    }
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45bd4;
                        run_45a00(); return;
                    }
                case 0x46048:
                    r18 = r18 + -1;
                    r5 = r29 + 24;
                    r2 = r5 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46068;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x46068:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46048;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x45bd4;
                    run_45a00(); return;
                case 0x46078:
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46084;
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x46084:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = f0;
                    r20 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x45448;
                    run_45400(); return;
                case 0x46094:
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x461c4;
                        continue;
                    }
                    r16 = r18 + r0;
                case 0x460a0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ba0;
                        run_45a00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x460c0;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x460c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45ba0;
                        run_45a00(); return;
                    }
                    r6 = r16 + r0;
                    r16 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f8c;
                        run_44e00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x45bd4;
                    run_45a00(); return;
                case 0x460e0:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    r16 = r10 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        run_44e00(); return;
                    }
                case 0x460f4:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4610c;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x4610c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x460f4;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44fb4;
                    run_44e00(); return;
                case 0x46120:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        run_44e00(); return;
                    }
                    r16 = r10 + r0;
                case 0x46134:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4614c;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x4614c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x46134;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44fb4;
                    run_44e00(); return;
                case 0x46160:
                    r2 = ((r10 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    r23 = r22 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f40;
                        run_44e00(); return;
                    }
                    r16 = r10 + r0;
                case 0x46174:
                    r23 = r23 + -1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4618c;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x4618c:
                    if(r23 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x46174;
                        continue;
                    }
                    r2 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x44fb4;
                    run_44e00(); return;
                case 0x461a0:
                    r3 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r21 = r21 + r18;
                    r23 = r23 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x461d0;
                        continue;
                    }
                    r19 = r19 + 4;
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x460a0;
                    continue;
                case 0x461c4:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4602c;
                    continue;
                case 0x461d0:
                    r16 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x460a0;
                    continue;
                case 0x46200:
                    pc=0x46200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46200() throws ExecutionException { /* 0x46200 - 0x46400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2a660;
                    run_2a600(); return;
                case 0x46400:
                    pc=0x46400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46400() throws ExecutionException { /* 0x46400 - 0x46600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46400:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2aad0;
                    run_2aa00(); return;
                case 0x46600:
                    pc=0x46600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46600() throws ExecutionException { /* 0x46600 - 0x46800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2a760;
                    run_2a600(); return;
                case 0x46800:
                    pc=0x46800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46800() throws ExecutionException { /* 0x46800 - 0x46a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46800:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r29 + 40;
                    r3 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    r5 = r2 + r0;
                    r7 = r6 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x46838;
                    pc=0x2a620;
                    run_2a600(); return;
                case 0x46838:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46a00:
                    pc=0x46a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46a00() throws ExecutionException { /* 0x46a00 - 0x46c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46a00:
                    r2 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    r2 = r2 & 8192;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    r22 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46b08;
                        continue;
                    }
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r23 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r21 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46afc;
                        continue;
                    }
                case 0x46a58:
                    r18 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r16 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r18 = r18 >>> 2;
                    r17 = r0 + r0;
                    if(r18 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46a88;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x46ae4;
                    continue;
                case 0x46a78:
                    r17 = r17 + 1;
                    r16 = r16 + 4;
                    if(r18 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x46ae0;
                        continue;
                    }
                case 0x46a88:
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x46a9c;
                    pc=0x49400;
                    run_49400(); return;
                case 0x46a9c:
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x46a78;
                        continue;
                    }
                    r2 = r0 + -1;
                case 0x46aa8:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r0;
                    writePages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff] = r0;
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46ae0:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                case 0x46ae4:
                    r18 = r18 << 2;
                    r2 = r2 - r18;
                    writePages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff] = r2;
                    r23 = r23 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46a58;
                        continue;
                    }
                case 0x46afc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46aa8;
                    continue;
                case 0x46b08:
                    /* Next insn is delay slot */ 
                    r31=0x46b10;
                    pc=0x3b200;
                    run_3b200(); return;
                case 0x46b10:
                    /* Next insn is delay slot */ 
                    pc=0x46aa8;
                    continue;
                case 0x46c00:
                    pc=0x46c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46c00() throws ExecutionException { /* 0x46c00 - 0x46e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46c00:
                    r3 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46c18;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x46c18:
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46e00:
                    pc=0x46e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46e00() throws ExecutionException { /* 0x46e00 - 0x47000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46e00:
                    r29 = r29 + -1248;
                    writePages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff] = r23;
                    writePages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff] = r20;
                    writePages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff] = r18;
                    writePages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff] = r31;
                    writePages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff] = r30;
                    writePages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff] = r22;
                    writePages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff] = r21;
                    writePages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff] = r19;
                    writePages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff] = r17;
                    writePages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    r23 = r5 + r0;
                    r20 = r6 + r0;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46e54;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4794c;
                        run_47800(); return;
                    }
                case 0x46e54:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 65535;
                    r4 = r2 & 8192;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46e88;
                        continue;
                    }
                    r4 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r0 + -8193;
                    r3 = r3 | 8192;
                    r2 = r4 & r2;
                    writePages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff] = r2;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 & 65535;
                case 0x46e88:
                    r4 = r2 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x477d4;
                        run_47600(); return;
                    }
                    r4 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x477d4;
                        run_47600(); return;
                    }
                    r2 = r2 & 26;
                    r4 = r0 + 10;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x47804;
                        run_47800(); return;
                    }
                case 0x46eb4:
                    r3 = r29 + 1080;
                    writePages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r3 = r29 + 1079;
                    r21 = r29 + 16;
                    r10 = 5 << 16;
                    writePages[(r29+1164)>>>12][((r29+1164)>>>2)&0x3ff] = r3;
                    r3 = r4 - r3;
                    writePages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff] = r3;
                    writePages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff] = r21;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r0;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r0;
                    r22 = r10 + 21972;
                    r3 = r21 + r0;
                    writePages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff] = r18;
                    writePages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff] = r23;
                    r16 = r20 + r0;
                case 0x46f00:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f28;
                        run_47e00(); return;
                    }
                    r4 = r0 + 37;
                    r17 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x46f30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x46f98;
                    continue;
                case 0x46f28:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x46f44;
                        continue;
                    }
                case 0x46f30:
                    r17 = r17 + 1;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46f28;
                        continue;
                    }
                case 0x46f44:
                    r19 = r17 - r16;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46f98;
                        continue;
                    }
                    r2 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r4 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r19 + r4;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46ffc;
                        continue;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e40;
                        run_47e00(); return;
                    }
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r5 = r5 + r19;
                    r3 = r21 + r0;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                case 0x46f98:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fa0;
                        run_47e00(); return;
                    }
                    r2 = r17 + 1;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r30 = r0 + -1;
                    r17 = r0 + r0;
                    r23 = r0 + r0;
                    r7 = r0 + 42;
                case 0x46fc4:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r16 = r2 + 1;
                case 0x46fcc:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d7c;
                        run_47c00(); return;
                    }
                    r5 = 5 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 21600;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x46ffc:
                    r3 = r3 + 8;
                case 0x47000:
                    pc=0x47000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47000() throws ExecutionException { /* 0x47000 - 0x47200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47000:
                    r5 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x46f98;
                    run_46e00(); return;
                case 0x47018:
                    r23 = r23 | 16;
                case 0x4701c:
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x47028:
                    r23 = r23 | 16;
                case 0x4702c:
                    r2 = r23 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47468;
                        run_47400(); return;
                    }
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47468;
                        run_47400(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x47084;
                    continue;
                case 0x47060:
                    r23 = r23 | 16;
                case 0x47064:
                    r2 = r23 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ae8;
                        run_47a00(); return;
                    }
                case 0x47070:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x47084:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r30 + r0;
                    r5 = r0 + r0;
                case 0x47090:
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x470a0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r23 = r23 & r6;
                case 0x470a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47550;
                        run_47400(); return;
                    }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47550;
                        run_47400(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47978;
                        run_47800(); return;
                    }
                case 0x470b8:
                    r18 = r29 + 1080;
                case 0x470bc:
                    r2 = r19 < r30 ? 1 : 0;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r19;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x470d0;
                        continue;
                    }
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r30;
                case 0x470d0:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x470e8;
                        continue;
                    }
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                case 0x470e8:
                    r15 = r23 & 2;
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47104;
                        continue;
                    }
                    r4 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r4 = r4 + 2;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r4;
                case 0x47104:
                    r20 = r23 & 132;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x474c4;
                        run_47400(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r9 = r17 - r5;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x474c4;
                        run_47400(); return;
                    }
                    r2 = r9 < 17 ? 1 : 0;
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48054;
                        run_48000(); return;
                    }
                    writePages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r25 = r0 + 16;
                    writePages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff] = r15;
                    r16 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47170;
                    continue;
                case 0x47154:
                    r7 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x47160:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x471b8;
                        continue;
                    }
                case 0x47170:
                    r2 = r4 + 1;
                    r8 = r8 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r25;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r8;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47154;
                        continue;
                    }
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47488;
                        run_47400(); return;
                    }
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r7 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47170;
                        continue;
                    }
                case 0x471b8:
                    r9 = r16 + r0;
                    r15 = readPages[(r29+1196)>>>12][((r29+1196)>>>2)&0x3ff];
                    r16 = readPages[(r29+1200)>>>12][((r29+1200)>>>2)&0x3ff];
                case 0x471c4:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r5 = r9 + r8;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r7 < 8 ? 1 : 0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4795c;
                        run_47800(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r3 + 8;
                    r4 = r7 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x474e0;
                        run_47400(); return;
                    }
                case 0x471fc:
                    if(r15 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47238;
                        run_47200(); return;
                    }
                case 0x47200:
                    pc=0x47200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47200() throws ExecutionException { /* 0x47200 - 0x47400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47200:
                    r2 = r29 + 1156;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 2;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478e0;
                        run_47800(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x47238:
                    r2 = r0 + 128;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x476bc;
                        run_47600(); return;
                    }
                case 0x47244:
                    r20 = r30 - r19;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4730c;
                        continue;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f90;
                        run_47e00(); return;
                    }
                    r4 = 5 << 16;
                    r8 = r4 + 21956;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r30 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47294;
                    continue;
                case 0x47278:
                    r4 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x47284:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x472dc;
                        continue;
                    }
                case 0x47294:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r30;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47278;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4751c;
                        run_47400(); return;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47294;
                        continue;
                    }
                case 0x472dc:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x472e4:
                    r5 = r5 + r20;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47680;
                        run_47600(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                case 0x4730c:
                    r14 = r19 + r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    r4 = r4 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476a4;
                        run_47600(); return;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e14;
                        run_47e00(); return;
                    }
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                case 0x4733c:
                    r12 = r23 & 4;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4740c;
                        run_47400(); return;
                    }
                    r5 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r18 = r17 - r5;
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4740c;
                        run_47400(); return;
                    }
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x480a8;
                        run_48000(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r19 = r0 + 16;
                    r20 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x473a0;
                    continue;
                case 0x47384:
                    r5 = r4 + 2;
                    r3 = r3 + 8;
                    r4 = r2 + r0;
                case 0x47390:
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x473e8;
                        continue;
                    }
                case 0x473a0:
                    r2 = r4 + 1;
                    r14 = r14 + 16;
                    r5 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47384;
                        continue;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4764c;
                        run_47600(); return;
                    }
                    r18 = r18 + -16;
                    r2 = r18 < 17 ? 1 : 0;
                    r4 = r0 + r0;
                    r5 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x473a0;
                        continue;
                    }
                case 0x473e8:
                    r2 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                    r14 = r14 + r18;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r5;
                    r5 = r5 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                case 0x47400:
                    pc=0x47400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47400() throws ExecutionException { /* 0x47400 - 0x47600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47400:
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r14;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d1c;
                        run_47c00(); return;
                    }
                case 0x4740c:
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47424;
                        continue;
                    }
                    r19 = r17 + r0;
                case 0x47424:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47458;
                        continue;
                    }
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47450;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47450:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        continue;
                    }
                case 0x47458:
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f00;
                    run_46e00(); return;
                case 0x47468:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x47084;
                    run_47000(); return;
                case 0x47488:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r25;
                    /* Next insn is delay slot */ 
                    r31=0x474a0;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x474a0:
                    r25 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r8 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r7 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47160;
                    run_47000(); return;
                case 0x474c4:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                case 0x474d0:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x471fc;
                        run_47000(); return;
                    }
                case 0x474e0:
                    r2 = r29 + 1158;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r5 = r5 + 1;
                    r2 = r4 < 8 ? 1 : 0;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478c4;
                        run_47800(); return;
                    }
                    r7 = r4 + r0;
                    r3 = r3 + 8;
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x471fc;
                    run_47000(); return;
                case 0x4751c:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47530;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47530:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        continue;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47284;
                    run_47200(); return;
                case 0x47550:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x478fc;
                        run_47800(); return;
                    }
                    r6 = r0 + 2;
                    r18 = r29 + 1080;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x475a4;
                        continue;
                    }
                    r6 = readPages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff];
                case 0x47570:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r18 = r18 + -1;
                    r2 = r2 >>> 4;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47570;
                        continue;
                    }
                case 0x47590:
                    r4 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r4 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x470bc;
                    run_47000(); return;
                case 0x475a4:
                    r4 = r2 & 7;
                    r18 = r18 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475a4;
                        continue;
                    }
                    r2 = r23 & 1;
                    r6 = r18 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475e4;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x47590;
                        continue;
                    }
                    r18 = r18 + -1;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x475e4:
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x470bc;
                    run_47000(); return;
                case 0x475f8:
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                case 0x47600:
                    pc=0x47600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47600() throws ExecutionException { /* 0x47600 - 0x47800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47600:
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476b0;
                        continue;
                    }
                    r2 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x47618:
                    r31 = readPages[(r29+1244)>>>12][((r29+1244)>>>2)&0x3ff];
                    r30 = readPages[(r29+1240)>>>12][((r29+1240)>>>2)&0x3ff];
                    r23 = readPages[(r29+1236)>>>12][((r29+1236)>>>2)&0x3ff];
                    r22 = readPages[(r29+1232)>>>12][((r29+1232)>>>2)&0x3ff];
                    r21 = readPages[(r29+1228)>>>12][((r29+1228)>>>2)&0x3ff];
                    r20 = readPages[(r29+1224)>>>12][((r29+1224)>>>2)&0x3ff];
                    r19 = readPages[(r29+1220)>>>12][((r29+1220)>>>2)&0x3ff];
                    r18 = readPages[(r29+1216)>>>12][((r29+1216)>>>2)&0x3ff];
                    r17 = readPages[(r29+1212)>>>12][((r29+1212)>>>2)&0x3ff];
                    r16 = readPages[(r29+1208)>>>12][((r29+1208)>>>2)&0x3ff];
                    r29 = r29 + 1248;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4764c:
                    r4 = r20 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47660;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47660:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47600;
                        continue;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r5 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47390;
                    run_47200(); return;
                case 0x47680:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ef4;
                        run_47e00(); return;
                    }
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r19;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    r14 = r19 + r0;
                    r3 = r21 + r0;
                case 0x476a4:
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4733c;
                    run_47200(); return;
                case 0x476b0:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x47618;
                    continue;
                case 0x476bc:
                    r2 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r20 = r17 - r2;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47244;
                        run_47200(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x480d4;
                        run_48000(); return;
                    }
                    r4 = 5 << 16;
                    r8 = r4 + 21956;
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r16;
                    r9 = r0 + 16;
                    r16 = r8 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47714;
                    continue;
                case 0x476f8:
                    r6 = r7 + 2;
                    r3 = r3 + 8;
                    r7 = r2 + r0;
                case 0x47704:
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4775c;
                        continue;
                    }
                case 0x47714:
                    r2 = r7 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476f8;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47798;
                        continue;
                    }
                    r20 = r20 + -16;
                    r2 = r20 < 17 ? 1 : 0;
                    r7 = r0 + r0;
                    r6 = r0 + 1;
                    r3 = r21 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47714;
                        continue;
                    }
                case 0x4775c:
                    r8 = r16 + r0;
                    r16 = readPages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff];
                case 0x47764:
                    r5 = r5 + r20;
                    r2 = r6 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r8;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff] = r5;
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ed8;
                        run_47e00(); return;
                    }
                    r3 = r3 + 8;
                    r4 = r6 + 1;
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47244;
                    run_47200(); return;
                case 0x47798:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x477b0;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x477b0:
                    r9 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r6 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47704;
                    continue;
                case 0x477d4:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x477e4;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x477e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x476b0;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r4 = r0 + 10;
                    r2 = r3 & 65535;
                    r2 = r2 & 26;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x46eb4;
                        run_46e00(); return;
                    }
                case 0x47800:
                    pc=0x47800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47800() throws ExecutionException { /* 0x47800 - 0x47a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47800:
                case 0x47804:
                    addr=r23+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x46eb4;
                        run_46e00(); return;
                    }
                    addr=r29+1054;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r23+28)>>>12][((r23+28)>>>2)&0x3ff];
                    r4 = r0 + -3;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r23+36)>>>12][((r23+36)>>>2)&0x3ff];
                    r3 = r3 & r4;
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r23+100)>>>12][((r23+100)>>>2)&0x3ff];
                    r2 = r29 + 16;
                    r7 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r2;
                    r4 = r18 + r0;
                    r2 = r0 + 1024;
                    r5 = r29 + 1040;
                    r6 = r20 + r0;
                    writePages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff] = r3;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r2;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r2;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x47870;
                    pc=0x46e00;
                    run_46e00(); return;
                case 0x47870:
                    r21 = r2 + r0;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47894;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r29 + 1040;
                    /* Next insn is delay slot */ 
                    r31=0x4788c;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x4788c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48120;
                        run_48000(); return;
                    }
                case 0x47894:
                    addr=r29+1052;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x478b8;
                        continue;
                    }
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r23+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x478b8:
                    r2 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47618;
                    run_47600(); return;
                case 0x478c4:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e68;
                        run_47e00(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x471fc;
                    run_47000(); return;
                case 0x478e0:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ea4;
                        run_47e00(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47238;
                    run_47200(); return;
                case 0x478fc:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d54;
                        run_47c00(); return;
                    }
                    r18 = r29 + 1080;
                    r4 = r0 + 10;
                case 0x47910:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x4791c;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4791c:
                    r18 = r18 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47910;
                        continue;
                    }
                    r2 = readPages[(r29+1160)>>>12][((r29+1160)>>>2)&0x3ff];
                    r19 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x470bc;
                    run_47000(); return;
                case 0x4794c:
                    /* Next insn is delay slot */ 
                    r31=0x47954;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x47954:
                    /* Next insn is delay slot */ 
                    pc=0x46e54;
                    run_46e00(); return;
                case 0x4795c:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47dac;
                        run_47c00(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x474d0;
                    run_47400(); return;
                case 0x47978:
                    r2 = r23 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x470b8;
                        run_47000(); return;
                    }
                    r2 = r0 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x470bc;
                    run_47000(); return;
                case 0x4799c:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d6c;
                        run_47c00(); return;
                    }
                    r17 = r0 - r17;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                case 0x479bc:
                    r23 = r23 | 4;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x479cc:
                    r6 = r0 + 43;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x479dc:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47de8;
                        run_47c00(); return;
                    }
                    r12 = r23 & 64;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47de8;
                        run_47c00(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                case 0x47a00:
                    pc=0x47a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47a00() throws ExecutionException { /* 0x47a00 - 0x47c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47a00:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x46f00;
                    run_46e00(); return;
                case 0x47a18:
                    r2 = 5 << 16;
                    r2 = r2 + 14952;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47bc8;
                        continue;
                    }
                case 0x47a34:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x47a48:
                    r5 = r23 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e08;
                        run_47e00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47e08;
                        run_47e00(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 | 2;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x47084;
                    run_47000(); return;
                case 0x47a78:
                    r23 = r23 | 64;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x47a88:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r16 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x480f4;
                        run_48000(); return;
                    }
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r30 = r0 + r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47adc;
                        continue;
                    }
                case 0x47aac:
                    r4 = r30 << 1;
                    r5 = r5 + 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r30 = r2 + r30;
                    r2 = r4 + -48;
                    r8 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47aac;
                        continue;
                    }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f80;
                        run_47e00(); return;
                    }
                case 0x47adc:
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fcc;
                    run_46e00(); return;
                case 0x47ae8:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47070;
                        run_47000(); return;
                    }
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47084;
                    run_47000(); return;
                case 0x47b14:
                    r23 = r23 | 128;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x47b24:
                    r17 = r0 + r0;
                    r2 = r4 + -48;
                case 0x47b2c:
                    r4 = r17 << 1;
                    r16 = r16 + 1;
                    r17 = r17 << 3;
                    r17 = r4 + r17;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r17 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x46fcc;
                    run_46e00(); return;
                case 0x47b5c:
                    r23 = r23 | 16;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c30;
                        run_47c00(); return;
                    }
                case 0x47b70:
                    r2 = r23 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47c30;
                        run_47c00(); return;
                    }
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x47b90:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f34;
                        run_47e00(); return;
                    }
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r19 = r30 + r0;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x47090;
                    run_47000(); return;
                case 0x47bac:
                    r2 = 5 << 16;
                    r2 = r2 + 14932;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r2;
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47a34;
                        continue;
                    }
                case 0x47bc8:
                    r2 = r23 & 64;
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f54;
                        run_47e00(); return;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x47a48;
                    continue;
                case 0x47bec:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x47c00:
                    pc=0x47c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47c00() throws ExecutionException { /* 0x47c00 - 0x47e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47c00:
                    r2 = r0 + 1;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x470e8;
                    run_47000(); return;
                case 0x47c20:
                    r2 = r23 & 16;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47b70;
                        run_47a00(); return;
                    }
                case 0x47c30:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x47b90;
                    run_47a00(); return;
                case 0x47c4c:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4701c;
                        run_47000(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x47c64:
                    r23 = r23 | 1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x47c74:
                    r2 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r20 = r2 + 4;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48068;
                        run_48000(); return;
                    }
                    r4 = r18 + r0;
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47ff8;
                        run_47e00(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x47cac;
                    pc=0x21200;
                    run_21200(); return;
                case 0x47cac:
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x480bc;
                        run_48000(); return;
                    }
                    r19 = r2 - r18;
                    r2 = r30 < r19 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f74;
                        run_47e00(); return;
                    }
                case 0x47cc8:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x470bc;
                    run_47000(); return;
                case 0x47cdc:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+1156;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+1157;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 5 << 16;
                    r4 = r4 + 14952;
                    r5 = r5 + 4;
                    writePages[(r29+1188)>>>12][((r29+1188)>>>2)&0x3ff] = r4;
                    r23 = r23 | 2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x47084;
                    run_47000(); return;
                case 0x47d1c:
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fd0;
                        run_47e00(); return;
                    }
                    r19 = readPages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff];
                    r2 = r19 < r17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47f68;
                        run_47e00(); return;
                    }
                case 0x47d38:
                    r3 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    writePages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff] = r0;
                    r3 = r3 + r19;
                    writePages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff] = r3;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f00;
                    run_46e00(); return;
                case 0x47d54:
                    r2 = r2 + 48;
                    addr=r29+1079;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = readPages[(r29+1192)>>>12][((r29+1192)>>>2)&0x3ff];
                    r18 = r29 + 1079;
                    /* Next insn is delay slot */ 
                    pc=0x470bc;
                    run_47000(); return;
                case 0x47d6c:
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x47d7c:
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47fa0;
                        run_47e00(); return;
                    }
                    r5 = r0 + 1;
                    addr=r29+1040;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r5;
                    r19 = r0 + 1;
                    r18 = r29 + 1040;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x470e8;
                    run_47000(); return;
                case 0x47dac:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x47dc4;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47dc4:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x474d0;
                    run_47400(); return;
                case 0x47de8:
                    r5 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r4 = readPages[(r29+1180)>>>12][((r29+1180)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                case 0x47e00:
                    pc=0x47e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47e00() throws ExecutionException { /* 0x47e00 - 0x48000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47e00:
                    /* Next insn is delay slot */ 
                    pc=0x46f00;
                    run_46e00(); return;
                case 0x47e08:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x47084;
                    run_47000(); return;
                case 0x47e14:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47e28;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47e28:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4733c;
                    run_47200(); return;
                case 0x47e40:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47e54;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47e54:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47000;
                    run_47000(); return;
                case 0x47e68:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x47e80;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47e80:
                    r15 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x471fc;
                    run_47000(); return;
                case 0x47ea4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47eb8;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47eb8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47238;
                    run_47200(); return;
                case 0x47ed8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48020;
                        run_48000(); return;
                    }
                    r7 = r0 + r0;
                    r4 = r0 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47244;
                    run_47200(); return;
                case 0x47ef4:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47f08;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47f08:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r4 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4730c;
                    run_47200(); return;
                case 0x47f28:
                    r17 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46f98;
                    run_46e00(); return;
                case 0x47f34:
                    r4 = r0 + 45;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    r19 = r30 + r0;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x47090;
                    run_47000(); return;
                case 0x47f54:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x47a48;
                    run_47a00(); return;
                case 0x47f68:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47d38;
                    run_47c00(); return;
                case 0x47f74:
                    r19 = r30 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47cc8;
                    run_47c00(); return;
                case 0x47f80:
                    r30 = r0 + -1;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fcc;
                    run_46e00(); return;
                case 0x47f90:
                    r2 = 5 << 16;
                    r8 = r2 + 21956;
                    /* Next insn is delay slot */ 
                    pc=0x472e4;
                    run_47200(); return;
                case 0x47fa0:
                    r2 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r18 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r23 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x47600;
                        run_47600(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47fc8;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47fc8:
                    /* Next insn is delay slot */ 
                    pc=0x47600;
                    run_47600(); return;
                case 0x47fd0:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x47fe4;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x47fe4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r14 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4740c;
                    run_47400(); return;
                case 0x47ff8:
                    writePages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x48004;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x48000:
                    pc=0x48000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48000() throws ExecutionException { /* 0x48000 - 0x48200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48000:
                case 0x48004:
                    r19 = r2 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    r3 = readPages[(r29+1204)>>>12][((r29+1204)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x470bc;
                    run_47000(); return;
                case 0x48020:
                    r4 = readPages[(r29+1176)>>>12][((r29+1176)>>>2)&0x3ff];
                    r5 = readPages[(r29+1172)>>>12][((r29+1172)>>>2)&0x3ff];
                    r6 = r29 + 1144;
                    /* Next insn is delay slot */ 
                    r31=0x48034;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x48034:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x475f8;
                        run_47400(); return;
                    }
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    r5 = readPages[(r29+1152)>>>12][((r29+1152)>>>2)&0x3ff];
                    r4 = r7 + 1;
                    r3 = r21 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x47244;
                    run_47200(); return;
                case 0x48054:
                    r7 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r7 = r7 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x471c4;
                    run_47000(); return;
                case 0x48068:
                    r2 = (r30&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r13 = r30 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4807c;
                        continue;
                    }
                    r13 = r0 + 6;
                case 0x4807c:
                    r19 = r13 + r0;
                    r2 = r13 + r0;
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x480e8;
                        continue;
                    }
                case 0x4808c:
                    r10 = 5 << 16;
                    writePages[(r29+1168)>>>12][((r29+1168)>>>2)&0x3ff] = r2;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r18 = r10 + 18332;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x470e8;
                    run_47000(); return;
                case 0x480a8:
                    r5 = readPages[(r29+1148)>>>12][((r29+1148)>>>2)&0x3ff];
                    writePages[(r29+1184)>>>12][((r29+1184)>>>2)&0x3ff] = r22;
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x473e8;
                    run_47200(); return;
                case 0x480bc:
                    r19 = r30 + r0;
                    addr=r29+1158;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r20;
                    r30 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x470bc;
                    run_47000(); return;
                case 0x480d4:
                    r2 = 5 << 16;
                    r6 = r4 + r0;
                    r8 = r2 + 21956;
                    /* Next insn is delay slot */ 
                    pc=0x47764;
                    run_47600(); return;
                case 0x480e8:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4808c;
                    continue;
                case 0x480f4:
                    r4 = readPages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    r30 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r30 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x47d6c;
                        run_47c00(); return;
                    }
                    writePages[(r29+1260)>>>12][((r29+1260)>>>2)&0x3ff] = r2;
                    r30 = r0 + -1;
                    r2 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46fc4;
                    run_46e00(); return;
                case 0x48120:
                    r21 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x47894;
                    run_47800(); return;
                case 0x48200:
                    pc=0x48200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48200() throws ExecutionException { /* 0x48200 - 0x48400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48200:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x46e00;
                    run_46e00(); return;
                case 0x48400:
                    pc=0x48400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48400() throws ExecutionException { /* 0x48400 - 0x48600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48400:
                    r29 = r29 + -136;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r17;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x484e4;
                        continue;
                    }
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4849c;
                        continue;
                    }
                    r2 = r0 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x48464;
                    pc=0x42800;
                    run_42800(); return;
                case 0x48464:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x484d4;
                        continue;
                    }
                case 0x48470:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48484;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x48484:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r17 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r16 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4849c:
                    r2 = r6 + -1;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x484c8;
                    pc=0x42800;
                    run_42800(); return;
                case 0x484c8:
                    r3 = r2 < -1 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48470;
                        continue;
                    }
                case 0x484d4:
                    r3 = r0 + 139;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x48470;
                    continue;
                case 0x484e4:
                    r2 = r0 + 139;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x48484;
                    continue;
                case 0x48600:
                    pc=0x48600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48600() throws ExecutionException { /* 0x48600 - 0x48800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48600:
                    r29 = r29 + -32;
                    r8 = r4 + r0;
                    r3 = r5 + r0;
                    r2 = r6 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r5 = r8 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r6 = r3 + r0;
                    r7 = r2 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x48630;
                    pc=0x48400;
                    run_48400(); return;
                case 0x48630:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48800:
                    pc=0x48800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48800() throws ExecutionException { /* 0x48800 - 0x48a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48800:
                    r29 = r29 + -128;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r5 = r29 + 16;
                    r2 = r0 + -1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x4883c;
                    pc=0x42800;
                    run_42800(); return;
                case 0x4883c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r29 = r29 + 128;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48a00:
                    pc=0x48a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48a00() throws ExecutionException { /* 0x48a00 - 0x48c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48a00:
                    r3 = r4 + r0;
                    r2 = r5 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    r5 = r3 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48800;
                    run_48800(); return;
                case 0x48c00:
                    pc=0x48c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48c00() throws ExecutionException { /* 0x48c00 - 0x48e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48c00:
                    r29 = r29 + -88;
                    r5 = r29 + 16;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x48c14;
                    pc=0x46600;
                    run_46600(); return;
                case 0x48c14:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x48c68;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r0 + 8192;
                    r3 = r3 & 61440;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x48c54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x48c38;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x48c38:
                    r3 = r0 + 25;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                case 0x48c44:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48c54:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48c68:
                    /* Next insn is delay slot */ 
                    r31=0x48c70;
                    pc=0x1ae00;
                    run_1ae00(); return;
                case 0x48c70:
                    r3 = r0 + 9;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48c44;
                    continue;
                case 0x48e00:
                    pc=0x48e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_48e00() throws ExecutionException { /* 0x48e00 - 0x49000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x48e00:
                    { long hilo = (long)(r5) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r5 = lo;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x48e34;
                    pc=0x22000;
                    run_22000(); return;
                case 0x48e34:
                    r2 = 5 << 16;
                    r18 = readPages[(r2+24792)>>>12][((r2+24792)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r20 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x48e50;
                    pc=0x20800;
                    run_20800(); return;
                case 0x48e50:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f7c;
                        continue;
                    }
                    r19 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r16 + -8;
                    r2 = r0 + -4;
                    r19 = r19 & r2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x48f4c;
                        continue;
                    }
                case 0x48e74:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48e80;
                    pc=0x22200;
                    run_22200(); return;
                case 0x48e80:
                    r6 = r19 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f08;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48ed4;
                        continue;
                    }
                    r2 = r16 + r0;
                case 0x48ea0:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r2 = r16 + r0;
                case 0x48eb0:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48ed4:
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48f40;
                        continue;
                    }
                    r2 = r0 + 36;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r0;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x48f68;
                        continue;
                    }
                    r2 = r16 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x48ea0;
                    continue;
                case 0x48f08:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48f18;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x48f18:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r16 + r0;
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x48f40:
                    r2 = r16 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x48ea0;
                    continue;
                case 0x48f4c:
                    r2 = r20 & r2;
                    r3 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x48e74;
                        continue;
                    }
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48e74;
                    continue;
                case 0x48f68:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    r2 = r16 + 24;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x48ea0;
                    continue;
                case 0x48f7c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x48f88;
                    pc=0x22200;
                    run_22200(); return;
                case 0x48f88:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x48eb0;
                    continue;
                case 0x49000:
                    pc=0x49000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49000() throws ExecutionException { /* 0x49000 - 0x49200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49200:
                    pc=0x49200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49200() throws ExecutionException { /* 0x49200 - 0x49400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49400:
                    pc=0x49400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49400() throws ExecutionException { /* 0x49400 - 0x49600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49400:
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -56;
                    r3 = r2 & 8192;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    r16 = r6 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49454;
                        continue;
                    }
                    r2 = r2 | 8192;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff];
                    r2 = r2 | 8192;
                    writePages[(r6+100)>>>12][((r6+100)>>>2)&0x3ff] = r2;
                case 0x49454:
                    /* Next insn is delay slot */ 
                    r31=0x4945c;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x4945c:
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x495c4;
                        continue;
                    }
                case 0x49468:
                    r4 = r19 + r0;
                    r5 = r29 + 16;
                    r6 = r18 + r0;
                    r7 = r16 + 92;
                    /* Next insn is delay slot */ 
                    r31=0x49480;
                    pc=0x50000;
                    run_50000(); return;
                case 0x49480:
                    r20 = r2 + r0;
                    r2 = r0 + -1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x49558;
                        continue;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4954c;
                        continue;
                    }
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x4949c:
                    r17 = r0 + r0;
                    r21 = r0 + 10;
                    /* Next insn is delay slot */ 
                    pc=0x494e4;
                    continue;
                case 0x494ac:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x494c8:
                    r17 = r17 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4954c;
                        continue;
                    }
                case 0x494d8:
                    r2 = r29 + 16;
                    r3 = r2 + r17;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                case 0x494e4:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x494ac;
                        continue;
                    }
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r3 = r3 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49594;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x495ec;
                        continue;
                    }
                    r17 = r17 + 1;
                    r2 = r2 + 1;
                    r3 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x494d8;
                        continue;
                    }
                case 0x4954c:
                    r2 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4956c;
                    continue;
                case 0x49558:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                case 0x4956c:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49594:
                    r4 = r19 + r0;
                    r5 = r5 & 255;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x495a8;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x495a8:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x495b0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x494c8;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4956c;
                    continue;
                case 0x495c4:
                    r2 = r18 + -1;
                    r2 = (r2&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49468;
                        continue;
                    }
                    r5 = r18 << 24;
                    r5 = r5 >> 24;
                    addr=r29+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4949c;
                    continue;
                case 0x495ec:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x49600;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x49600:
                    pc=0x49600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49600() throws ExecutionException { /* 0x49600 - 0x49800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49600:
                    r2 = r2 + 1;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    pc=0x495b0;
                    run_49400(); return;
                case 0x49800:
                    pc=0x49800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49800() throws ExecutionException { /* 0x49800 - 0x49a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4985c;
                        continue;
                    }
                    r3 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49844;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x4983c;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x4983c:
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x49844:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x49400;
                    run_49400(); return;
                case 0x4985c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x49400;
                    run_49400(); return;
                case 0x49a00:
                    pc=0x49a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49a00() throws ExecutionException { /* 0x49a00 - 0x49c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49a00:
                    r2 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49a30;
                        continue;
                    }
                    r2 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r4 = r2 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    r2 = r2 & 255;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49a30:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49c00:
                    pc=0x49c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49c00() throws ExecutionException { /* 0x49c00 - 0x49e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49c00:
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r18 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49c94;
                        continue;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x49c3c;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x49c3c:
                    r5 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x49c5c;
                    return;
                case 0x49c5c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x49c78;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x49c78:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49c94:
                    /* Next insn is delay slot */ 
                    r31=0x49c9c;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x49c9c:
                    r6 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + 11160;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x49cc0;
                    return;
                case 0x49cc0:
                    /* Next insn is delay slot */ 
                    pc=0x49c5c;
                    continue;
                case 0x49e00:
                    pc=0x49e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_49e00() throws ExecutionException { /* 0x49e00 - 0x4a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x49e00:
                    r29 = r29 + -56;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r18;
                    r16 = r5 + r0;
                    r17 = r7 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x49eb0;
                        continue;
                    }
                    r21 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    r18 = r6 + r0;
                    r20 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x49e48;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x49e48:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r21 + r0;
                    r5 = r19 + r0;
                    r6 = r16 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r20;
                    r31=0x49e68;
                    return;
                case 0x49e68:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x49e88;
                        continue;
                    }
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x49e88:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r21 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x49eb0:
                    r18 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x49ec0;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x49ec0:
                    r6 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r0 + r0;
                    r6 = r6 + 11160;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x49ee4;
                    return;
                case 0x49ee4:
                    /* Next insn is delay slot */ 
                    pc=0x49e68;
                    continue;
                case 0x4a000:
                    pc=0x4a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a000() throws ExecutionException { /* 0x4a000 - 0x4a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a000:
                    r29 = r29 + -8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a040;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a04c;
                        continue;
                    }
                case 0x4a014:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a05c;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                case 0x4a034:
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a040:
                    r5 = r29 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a014;
                        continue;
                    }
                case 0x4a04c:
                    r2 = r0 + r0;
                    r29 = r29 + 8;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a05c:
                    r2 = r0 + -2;
                    /* Next insn is delay slot */ 
                    pc=0x4a034;
                    continue;
                case 0x4a200:
                    pc=0x4a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a200() throws ExecutionException { /* 0x4a200 - 0x4a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a200:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r16 = readPages[(r28+-32592)>>>12][((r28+-32592)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4a228;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x4a228:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x4a24c;
                    return;
                case 0x4a24c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a400:
                    pc=0x4a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a400() throws ExecutionException { /* 0x4a400 - 0x4a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a400:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r2 = r0 + 94;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4e8;
                        continue;
                    }
                    r2 = r5 + 1;
                    r7 = r0 + r0;
                    r9 = r0 + r0;
                case 0x4a41c:
                    r3 = r0 + r0;
                    r6 = r0 + 256;
                case 0x4a424:
                    r5 = r4 + r3;
                    r3 = r3 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4a424;
                        continue;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a490;
                        continue;
                    }
                    r5 = r0 + 1;
                    r5 = r5 - r9;
                    r10 = r0 + 45;
                    r9 = r0 + 93;
                case 0x4a450:
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4a458:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r7 = r2 + 1;
                    if(r3 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4a8;
                        continue;
                    }
                    if(r3 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4a49c;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a488;
                        continue;
                    }
                    r8 = r3 + r0;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a450;
                    continue;
                case 0x4a488:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a490:
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a49c:
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a4a8:
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r6 == r9) {
                        /* Next insn is delay slot */ 
                        pc=0x4a500;
                        continue;
                    }
                    r3 = r6 < r8 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a500;
                        continue;
                    }
                    r2 = r2 + 2;
                case 0x4a4c8:
                    r8 = r8 + 1;
                    r3 = r4 + r8;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r8 < r6 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4a4c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4a458;
                    continue;
                case 0x4a4e8:
                    r2 = r5 + 2;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r7 = r0 + 1;
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4a41c;
                    continue;
                case 0x4a500:
                    r8 = r0 + 45;
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4a450;
                    continue;
                case 0x4a600:
                    pc=0x4a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a600() throws ExecutionException { /* 0x4a600 - 0x4a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a600:
                    f0 = readPages[(r28+-32588)>>>12][((r28+-32588)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4a800:
                    pc=0x4a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4a800() throws ExecutionException { /* 0x4a800 - 0x4aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4a800:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 148;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4a848;
                    pc=0x42800;
                    run_42800(); return;
                case 0x4a848:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4aa00:
                    pc=0x4aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4aa00() throws ExecutionException { /* 0x4aa00 - 0x4ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4aa00:
                    r29 = r29 + -136;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r2 | 65535;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r7 = r29 + 144;
                    r6 = r5 + r0;
                    r2 = r0 + -1;
                    r5 = r29 + 16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4aa54;
                    pc=0x42800;
                    run_42800(); return;
                case 0x4aa54:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r29 = r29 + 136;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ac00:
                    pc=0x4ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ac00() throws ExecutionException { /* 0x4ac00 - 0x4ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ac00:
                    r29 = r29 + -216;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r22;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r18;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r31;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r30;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r23;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r21;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r20;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r19;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r17;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = f30;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = f31;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = f28;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = f29;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = f26;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = f27;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = f24;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = f25;
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = f22;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = f23;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = f20;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = f21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    r16 = r5 + r0;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r18 = r4 + r0;
                    r2 = r21 & 255;
                    r4 = 5 << 16;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    r22 = r5 + r0;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r6;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    r4 = r4 + 22004;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b000;
                        run_4b000(); return;
                    }
                case 0x4ac94:
                    r2 = r2 << 2;
                    r2 = r4 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4acac:
                    r7 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + 1;
                case 0x4acb8:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b160;
                        run_4b000(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b160;
                        run_4b000(); return;
                    }
                case 0x4acc8:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x4acd8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4acf4;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x4acf4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b074;
                        run_4b000(); return;
                    }
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                case 0x4ad0c:
                    f30 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    f28 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    f26 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    f24 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    f22 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    f20 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r31 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    f0 = r3;
                    r30 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r23 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r22 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r21 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r19 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r18 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r17 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    f31 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    f29 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    f27 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    f25 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    f23 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    f21 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    f1 = r2;
                    r29 = r29 + 216;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ad78:
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                case 0x4ad7c:
                    r2 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4acc8;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = r0 + 48;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b010;
                        run_4b000(); return;
                    }
                case 0x4ada4:
                    r19 = r0 + r0;
                case 0x4ada8:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c294;
                        run_4c200(); return;
                    }
                    r2 = r16 + 1;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ae10;
                    run_4ae00(); return;
                case 0x4add4:
                    r3 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r3 + r23;
                    r21 = r23 + r21;
                    r23 = r21 + -48;
                case 0x4ade8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                case 0x4ae00:
                    pc=0x4ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ae00() throws ExecutionException { /* 0x4ae00 - 0x4b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ae00:
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ae64;
                        continue;
                    }
                case 0x4ae10:
                    r3 = r20 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ade8;
                        run_4ac00(); return;
                    }
                    r3 = r20 < 9 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4add4;
                        run_4ac00(); return;
                    }
                    r3 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r3 + r30;
                    r21 = r30 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r30 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r17 = r2 + r0;
                    r3 = r21 + -48;
                    r3 = r3 & 255;
                    r3 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    r2 = r2 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ae10;
                        continue;
                    }
                case 0x4ae64:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ae70;
                    pc=0x3ce00;
                    run_3ce00(); return;
                case 0x4ae70:
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x4ae84;
                    pc=0x3ce00;
                    run_3ce00(); return;
                case 0x4ae84:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4ae90;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4ae90:
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4aea4;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x4aea4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b2e4;
                        run_4b200(); return;
                    }
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                    r9 = r0 + r0;
                case 0x4aebc:
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b158;
                        run_4b000(); return;
                    }
                case 0x4aed0:
                    r4 = r0 + r0;
                case 0x4aed4:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b0bc;
                        run_4b000(); return;
                    }
                case 0x4aedc:
                    r3 = r4 - r3;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r3;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aef0;
                        continue;
                    }
                    r20 = r7 + r0;
                case 0x4aef0:
                    r3 = r7 < 17 ? 1 : 0;
                    r2 = r7 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4af04;
                        continue;
                    }
                    r2 = r0 + 16;
                case 0x4af04:
                    f2 = r23;
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bed8;
                        run_4be00(); return;
                    }
                case 0x4af18:
                    r3 = r2 < 10 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4af6c;
                        continue;
                    }
                    r4 = r2 + -9;
                    r3 = 5 << 16;
                    r4 = r4 << 3;
                    r3 = r3 + 19856;
                    r3 = r4 + r3;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f4 = r30;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2ac;
                        run_4c200(); return;
                    }
                case 0x4af60:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                case 0x4af6c:
                    r3 = r7 < 16 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b354;
                        run_4b200(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b2c4;
                        run_4b200(); return;
                    }
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c45c;
                        run_4c400(); return;
                    }
                    r3 = r3 < 23 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c2c8;
                        run_4c200(); return;
                    }
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r3 = r4 << 3;
                    r2 = r2 + 19856;
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x4acd8;
                    run_4ac00(); return;
                case 0x4afe0:
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r21 & 255;
                    r3 = (r2&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ac94;
                        run_4ac00(); return;
                    }
                case 0x4b000:
                    pc=0x4b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b000() throws ExecutionException { /* 0x4b000 - 0x4b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b000:
                    r2 = r0 + 48;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ada4;
                        run_4ac00(); return;
                    }
                case 0x4b010:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 88;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4be68;
                        run_4be00(); return;
                    }
                    r3 = r0 + 120;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4be68;
                        run_4be00(); return;
                    }
                    r2 = r16 + 1;
                    r3 = r0 + 48;
                case 0x4b034:
                    r16 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r2 + 1;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r21 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4b034;
                        continue;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b28c;
                        run_4b200(); return;
                    }
                    r19 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4ada8;
                    run_4ac00(); return;
                case 0x4b064:
                    r3 = r0 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4ad7c;
                    run_4ac00(); return;
                case 0x4b074:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = 32768 << 16;
                    r2 = r5 ^ r4;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4ad0c;
                    run_4ac00(); return;
                case 0x4b08c:
                    r3 = r0 + r0;
                case 0x4b090:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4be08;
                        run_4be00(); return;
                    }
                    r4 = r0 + -33;
                    r4 = r21 & r4;
                    r2 = r0 + 69;
                    r5 = r3 + r0;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4acac;
                        run_4ac00(); return;
                    }
                    r9 = r0 + 1;
                case 0x4b0bc:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b28c;
                        run_4b200(); return;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b28c;
                        run_4b200(); return;
                    }
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4acc8;
                        run_4ac00(); return;
                    }
                    r2 = r0 + 78;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b104;
                        continue;
                    }
                    r2 = r21 < 79 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c518;
                        run_4c400(); return;
                    }
                    r2 = r0 + 105;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4c524;
                        run_4c400(); return;
                    }
                    r2 = r0 + 110;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4acc8;
                        run_4ac00(); return;
                    }
                case 0x4b104:
                    r3 = 5 << 16;
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r3 + 22000;
                case 0x4b110:
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c68c;
                        run_4c600(); return;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = r2 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b148;
                        continue;
                    }
                    r2 = r2 + 32;
                case 0x4b148:
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4b110;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4acc8;
                    run_4ac00(); return;
                case 0x4b158:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4acb8;
                        run_4ac00(); return;
                    }
                case 0x4b160:
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r22 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r0 + 43;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4bca8;
                        run_4bc00(); return;
                    }
                    r2 = r0 + 45;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4bc9c;
                        run_4bc00(); return;
                    }
                    r10 = r0 + 1;
                case 0x4b190:
                    r2 = r22 + 2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r22+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x4b1a0:
                    r2 = r21 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bbc8;
                        run_4ba00(); return;
                    }
                    r2 = r0 + 48;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b1dc;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    r2 = r2 + 1;
                case 0x4b1c8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r2 = r2 + 1;
                    if(r21 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4b1c8;
                        continue;
                    }
                case 0x4b1dc:
                    r2 = r21 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aed0;
                        run_4ae00(); return;
                    }
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r21 + -48;
                    r8 = r11 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r8;
                    addr=r11+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                case 0x4b200:
                    pc=0x4b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b200() throws ExecutionException { /* 0x4b200 - 0x4b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b200:
                    r2 = r21 + -48;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b254;
                        continue;
                    }
                    r2 = r11 + 2;
                case 0x4b21c:
                    r6 = r4 << 1;
                    r4 = r4 << 3;
                    r4 = r6 + r4;
                    r21 = r4 + r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r21 + -48;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r8 = r2 + r0;
                    r6 = r21 + -48;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r2 = r2 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b21c;
                        continue;
                    }
                case 0x4b254:
                    r2 = r8 - r11;
                    r2 = r2 < 9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4be5c;
                        run_4be00(); return;
                    }
                    r2 = r4 < 20000 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4be5c;
                        run_4be00(); return;
                    }
                case 0x4b270:
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aed4;
                        run_4ae00(); return;
                    }
                    r4 = r0 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aedc;
                        run_4ae00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4b0bc;
                    run_4b000(); return;
                case 0x4b28c:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4acd8;
                    run_4ac00(); return;
                case 0x4b29c:
                    r4 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x4b2a8:
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b2c4;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r2 = r2 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x4b2c4:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4acd8;
                    run_4ac00(); return;
                case 0x4b2e4:
                    r4 = r18 + r0;
                    r17 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4b2f4;
                    pc=0x3ce00;
                    run_3ce00(); return;
                case 0x4b2f4:
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4b300;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4b300:
                    r2 = r17 + r2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bbe0;
                        run_4ba00(); return;
                    }
                    r3 = r0 + 48;
                    if(r21 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4b08c;
                        run_4b000(); return;
                    }
                    r3 = r0 + r0;
                    r5 = r0 + 48;
                    /* Next insn is delay slot */ 
                    pc=0x4b334;
                    continue;
                case 0x4b330:
                    r2 = r4 + r0;
                case 0x4b334:
                    r4 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    r3 = r3 + 1;
                    if(r21 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4b330;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4b090;
                    run_4b000(); return;
                case 0x4b354:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r7 - r2;
                    r2 = r3 + r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c110;
                        run_4c000(); return;
                    }
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b3a4;
                        continue;
                    }
                    r4 = 5 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 19856;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x4b3a4:
                    r3 = r0 + -16;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bcfc;
                        run_4bc00(); return;
                    }
                case 0x4b3b4:
                    f4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                case 0x4b3cc:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r23;
                    r5 = r16 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b3e4;
                    pc=0x3de00;
                    run_3de00(); return;
                case 0x4b3e4:
                    r3 = r2 + 12;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    f24 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    r2 = r0 - r3;
                    r3 = r3 >> 31;
                case 0x4b400:
                    pc=0x4b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b400() throws ExecutionException { /* 0x4b400 - 0x4b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b400:
                    r16 = r3 & r2;
                    f20 = readPages[(r28+-32548)>>>12][((r28+-32548)>>>2)&0x3ff];
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    f22 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f25 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    r3 = r0 < r3 ? 1 : 0;
                    f21 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    f23 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r3;
                    f26 = f24;
                    f27 = f25;
                case 0x4b428:
                    r5 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b438;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x4b438:
                    r6 = readPages[(r23+16)>>>12][((r23+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                    r6 = r6 << 2;
                    r21 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b458;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x4b458:
                    r5 = r29 + 24;
                    r7 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = r29 + 32;
                    r6 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b47c;
                    pc=0x3f600;
                    run_3f600(); return;
                case 0x4b47c:
                    r4 = r18 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4b490;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x4b490:
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r19 = r2 + r0;
                    r7 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4a8;
                        continue;
                    }
                    r7 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                case 0x4b4a8:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b920;
                        run_4b800(); return;
                    }
                    r20 = r16 + r2;
                    r3 = r7 + r0;
                case 0x4b4c0:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 - r22;
                    r5 = r2 + r4;
                    r5 = r5 < -1021 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b81c;
                        run_4b800(); return;
                    }
                    r2 = r2 + 1075;
                case 0x4b4dc:
                    r30 = r20 + r2;
                    r4 = r20 < r30 ? 1 : 0;
                    r2 = r3 + r2;
                    r17 = r2 + r22;
                    r2 = r30 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b4fc;
                        continue;
                    }
                    r2 = r20 + r0;
                case 0x4b4fc:
                    r4 = r17 < r2 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b50c;
                        continue;
                    }
                    r2 = r17 + r0;
                case 0x4b50c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b520;
                        continue;
                    }
                    r30 = r30 - r2;
                    r17 = r17 - r2;
                    r20 = r20 - r2;
                case 0x4b520:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b578;
                        continue;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r16 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4b540;
                    pc=0x3ea00;
                    run_3ea00(); return;
                case 0x4b540:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r5 = r2 + r0;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b558;
                    pc=0x3e600;
                    run_3e600(); return;
                case 0x4b558:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4b56c;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4b56c:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x4b578:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b5a0;
                        continue;
                    }
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x4b598;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x4b598:
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                case 0x4b5a0:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b5c0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b5bc;
                    pc=0x3ea00;
                    run_3ea00(); return;
                case 0x4b5bc:
                    r21 = r2 + r0;
                case 0x4b5c0:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b5e0;
                        continue;
                    }
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b5dc;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x4b5dc:
                    r21 = r2 + r0;
                case 0x4b5e0:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b600;
                        run_4b600(); return;
                    }
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b5fc;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x4b5fc:
                    r19 = r2 + r0;
                case 0x4b600:
                    pc=0x4b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b600() throws ExecutionException { /* 0x4b600 - 0x4b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b600:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b614;
                    pc=0x3f000;
                    run_3f000(); return;
                case 0x4b614:
                    r30 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b630;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x4b630:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bef4;
                        run_4be00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bfe8;
                        run_4be00(); return;
                    }
                    r4 = r20 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b650;
                    pc=0x3f800;
                    run_3f800(); return;
                case 0x4b650:
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4b82c;
                        run_4b800(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b930;
                        run_4b800(); return;
                    }
                    r3 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f26;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f27;
                case 0x4b67c:
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    if(r17 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x4b878;
                        run_4b800(); return;
                    }
                case 0x4b690:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b778;
                        continue;
                    }
                    r5 = 1696 << 16;
                    r5 = r5 + 1;
                    r5 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b778;
                        continue;
                    }
                    f0 = readPages[(r28+-32532)>>>12][((r28+-32532)>>>2)&0x3ff];
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32536)>>>12][((r28+-32536)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4b76c;
                        continue;
                    }
                    f0 = readPages[(r28+-32524)>>>12][((r28+-32524)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32528)>>>12][((r28+-32528)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4bb58;
                        run_4ba00(); return;
                    }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f0;
                case 0x4b720:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bb38;
                        run_4ba00(); return;
                    }
                    f4 = r2;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4be38;
                        run_4be00(); return;
                    }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                case 0x4b744:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bba8;
                        run_4ba00(); return;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r2;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x4b764:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                case 0x4b76c:
                    r5 = 1712 << 16;
                    r5 = r2 + r5;
                    r2 = r5 - r17;
                case 0x4b778:
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f28 = r3;
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f29 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4b790;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x4b790:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                case 0x4b7bc:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b7d4;
                        continue;
                    }
                    r3 = 32752 << 16;
                    r3 = r2 & r3;
                    if(r17 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4b9f4;
                        run_4b800(); return;
                    }
                case 0x4b7d4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b7e4;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4b7e4:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b7f4;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4b7f4:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b804;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4b800:
                    pc=0x4b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4b800() throws ExecutionException { /* 0x4b800 - 0x4ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4b800:
                case 0x4b804:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4b814;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4b814:
                    /* Next insn is delay slot */ 
                    pc=0x4b428;
                    run_4b400(); return;
                case 0x4b81c:
                    r2 = r0 + 54;
                    r2 = r2 - r4;
                    /* Next insn is delay slot */ 
                    pc=0x4b4dc;
                    run_4b400(); return;
                case 0x4b82c:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b9b8;
                        continue;
                    }
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r4;
                case 0x4b858:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r5 = 32752 << 16;
                    r17 = r6 & r5;
                    r7 = 32736 << 16;
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    if(r17 != r7) {
                        /* Next insn is delay slot */ 
                        pc=0x4b690;
                        run_4b600(); return;
                    }
                case 0x4b878:
                    r7 = 64688 << 16;
                    r7 = r6 + r7;
                    f28 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r7;
                    f30 = r3;
                    f29 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f31 = r2;
                    f12 = f28;
                    f13 = f29;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r5;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = f2;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    r31=0x4b8b4;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x4b8b4:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f31&0xffffffffL) << 32) | (f30&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f29&0xffffffffL) << 32) | (f28&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f5;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f4;
                    r3 = r5 & r2;
                    r2 = 31904 << 16;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bb0c;
                        run_4ba00(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0b4;
                        run_4c000(); return;
                    }
                case 0x4b8f0:
                    r5 = r0 + -1;
                    r2 = 32751 << 16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r2 | 65535;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4b7d4;
                    run_4b600(); return;
                case 0x4b920:
                    r3 = r7 - r2;
                    r20 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b4c0;
                    run_4b400(); return;
                case 0x4b930:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bae4;
                        run_4ba00(); return;
                    }
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r6;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b9d8;
                        continue;
                    }
                    f2 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4c26c;
                        run_4c200(); return;
                    }
                    f4 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    r2 = 32768 << 16;
                    f5 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r2 = r3 ^ r2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r2;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r4;
                case 0x4b9a8:
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4b67c;
                    run_4b600(); return;
                case 0x4b9b8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = f0;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4b858;
                    continue;
                case 0x4b9d8:
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                case 0x4b9dc:
                    r3 = readPages[(r28+-32540)>>>12][((r28+-32540)>>>2)&0x3ff];
                    r2 = readPages[(r28+-32544)>>>12][((r28+-32544)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f24;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f25;
                    /* Next insn is delay slot */ 
                    pc=0x4b67c;
                    run_4b600(); return;
                case 0x4b9f4:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                case 0x4ba00:
                    pc=0x4ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ba00() throws ExecutionException { /* 0x4ba00 - 0x4bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ba00:
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba4c;
                        continue;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bcb4;
                        run_4bc00(); return;
                    }
                case 0x4ba4c:
                    f0 = readPages[(r28+-32516)>>>12][((r28+-32516)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32520)>>>12][((r28+-32520)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba8c;
                        continue;
                    }
                    f0 = readPages[(r28+-32508)>>>12][((r28+-32508)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32512)>>>12][((r28+-32512)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4b7d4;
                        run_4b600(); return;
                    }
                case 0x4ba8c:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ba9c;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4ba9c:
                    r4 = r18 + r0;
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4baac;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4baac:
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4babc;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4babc:
                    r4 = r18 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4bacc;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4bacc:
                    r4 = r18 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4badc;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4badc:
                    /* Next insn is delay slot */ 
                    pc=0x4acd8;
                    run_4ac00(); return;
                case 0x4bae4:
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4b9d8;
                        run_4b800(); return;
                    }
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bfd0;
                        run_4be00(); return;
                    }
                    r6 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b9dc;
                    run_4b800(); return;
                case 0x4bb0c:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 848 << 16;
                    r2 = r2 + r3;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4b7bc;
                    run_4b600(); return;
                case 0x4bb38:
                    f0 = readPages[(r28+-32564)>>>12][((r28+-32564)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32568)>>>12][((r28+-32568)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4b744;
                    run_4b600(); return;
                case 0x4bb58:
                    f2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r3 = 32768 << 16;
                    f3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f2 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f2 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r2 = f2;
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    pc=0x4b720;
                    run_4b600(); return;
                case 0x4bba8:
                    f0 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    f1 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = f0;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4b764;
                    run_4b600(); return;
                case 0x4bbc8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    r4 = r0 + r0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4aedc;
                        run_4ae00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4b0bc;
                    run_4b000(); return;
                case 0x4bbe0:
                    r7 = r20 + r0;
                    r5 = r0 + r0;
                    r3 = r0 + r0;
                case 0x4bbec:
                    r2 = r21 + -48;
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bcf0;
                        run_4bc00(); return;
                    }
                    r5 = r5 + 1;
                case 0x4bc00:
                    pc=0x4bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4bc00() throws ExecutionException { /* 0x4bc00 - 0x4be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4bc00:
                    r9 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4be24;
                        run_4be00(); return;
                    }
                    r2 = r0 + 1;
                    r4 = r5 + r0;
                    r6 = r7 < 17 ? 1 : 0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4bc60;
                        continue;
                    }
                    r2 = r7 + 1;
                    r8 = r5 + r7;
                    r6 = r7 < 17 ? 1 : 0;
                case 0x4bc30:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bc50;
                        continue;
                    }
                    r4 = r2 < 10 ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bec4;
                        run_4be00(); return;
                    }
                    r4 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                case 0x4bc50:
                    r2 = r2 + 1;
                    r4 = r5 + r0;
                    if(r2 != r8) {
                        /* Next insn is delay slot */ 
                        pc=0x4bc30;
                        continue;
                    }
                case 0x4bc60:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c50c;
                        run_4c400(); return;
                    }
                case 0x4bc68:
                    r2 = r7 + r5;
                    r2 = r2 < 10 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c674;
                        run_4c600(); return;
                    }
                    r2 = r23 << 1;
                    r23 = r23 << 3;
                    r23 = r2 + r23;
                    r23 = r23 + r21;
                case 0x4bc88:
                    r3 = r3 + r4;
                    r7 = r7 + r4;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4be24;
                    run_4be00(); return;
                case 0x4bc9c:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b1a0;
                    run_4b000(); return;
                case 0x4bca8:
                    r10 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b190;
                    run_4b000(); return;
                case 0x4bcb4:
                    r3 = 15 << 16;
                    r3 = r3 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba4c;
                        run_4ba00(); return;
                    }
                    f0 = readPages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4b7d4;
                        run_4b600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4ba8c;
                    run_4ba00(); return;
                case 0x4bcf0:
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4aebc;
                    run_4ae00(); return;
                case 0x4bcfc:
                    r3 = r2 < 309 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0f4;
                        run_4c000(); return;
                    }
                    r2 = r2 >> 4;
                    r3 = r2 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c708;
                        run_4c600(); return;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    r6 = r6 + 19816;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r6 + r0;
                    r4 = r0 + r0;
                case 0x4bd30:
                    r5 = r2 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bd50;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x4bd50:
                    r2 = r2 >> 1;
                    r5 = r2 < 2 ? 1 : 0;
                    r4 = r4 + 1;
                    r3 = r3 + 8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bd30;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x4bd70:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r4 << 3;
                    r6 = r6 + r4;
                    r2 = 64688 << 16;
                    r2 = r2 + r3;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r4 = 31904 << 16;
                    r4 = r4 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    r3 = r2 & r5;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c0f4;
                        run_4c000(); return;
                    }
                    r4 = 31888 << 16;
                    r4 = r4 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c578;
                        run_4c400(); return;
                    }
                    r2 = r2 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                case 0x4be00:
                    pc=0x4be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4be00() throws ExecutionException { /* 0x4be00 - 0x4c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4be00:
                    /* Next insn is delay slot */ 
                    pc=0x4b3cc;
                    run_4b200(); return;
                case 0x4be08:
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r21 + -48;
                    r9 = r16 + r0;
                    r7 = r0 + r0;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c370;
                        run_4c200(); return;
                    }
                    r5 = r0 + 1;
                case 0x4be24:
                    r2 = r9 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r21 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4bbec;
                    run_4ba00(); return;
                case 0x4be38:
                    f0 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x4b744;
                    run_4b600(); return;
                case 0x4be5c:
                    r4 = r0 + 19999;
                    /* Next insn is delay slot */ 
                    pc=0x4b270;
                    run_4b200(); return;
                case 0x4be68:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r29 + 36;
                    r19 = 5 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = r18 + r0;
                    r5 = r29 + 40;
                    r6 = r19 + 26020;
                    r7 = r29 + 32;
                    /* Next insn is delay slot */ 
                    r31=0x4be94;
                    pc=0x50c00;
                    run_50c00(); return;
                case 0x4be94:
                    r17 = r2 & 7;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b28c;
                        run_4b200(); return;
                    }
                    r3 = r0 + 6;
                    if(r17 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4c380;
                        run_4c200(); return;
                    }
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4acd8;
                    run_4ac00(); return;
                case 0x4bec4:
                    r4 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r4 + r30;
                    /* Next insn is delay slot */ 
                    pc=0x4bc50;
                    run_4bc00(); return;
                case 0x4bed8:
                    f2 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x4af18;
                    run_4ae00(); return;
                case 0x4bef4:
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c04c;
                        run_4c000(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c04c;
                        run_4c000(); return;
                    }
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 & r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c04c;
                        run_4c000(); return;
                    }
                    r3 = 32752 << 16;
                    r2 = 1712 << 16;
                    r3 = r3 & r16;
                    r2 = r2 + 1;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c04c;
                        run_4c000(); return;
                    }
                    r2 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4bf64;
                        continue;
                    }
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c04c;
                        run_4c000(); return;
                    }
                case 0x4bf64:
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x4bf78;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x4bf78:
                    r4 = r2 + r0;
                    r5 = r19 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4bf8c;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x4bf8c:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c04c;
                        run_4c000(); return;
                    }
                    r2 = r16 + r0;
                case 0x4bf98:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c6b8;
                        run_4c600(); return;
                    }
                    r3 = 32752 << 16;
                    r4 = 1712 << 16;
                    r3 = r2 & r3;
                    r4 = r4 + 1;
                    r4 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c6b8;
                        run_4c600(); return;
                    }
                    r2 = 880 << 16;
                    r2 = r2 + 1;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c054;
                        run_4c000(); return;
                    }
                case 0x4bfd0:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ba8c;
                    run_4ba00(); return;
                case 0x4bfe8:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c33c;
                        run_4c200(); return;
                    }
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r3 = r2 & r4;
                case 0x4c000:
                    pc=0x4c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c000() throws ExecutionException { /* 0x4c000 - 0x4c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c000:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4c5a0;
                        run_4c400(); return;
                    }
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                case 0x4c010:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c04c;
                        continue;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4c030;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x4c030:
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                case 0x4c04c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba8c;
                        run_4ba00(); return;
                    }
                case 0x4c054:
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r0;
                    f0 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = 14672 << 16;
                    f2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r4;
                    f1 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba8c;
                        run_4ba00(); return;
                    }
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ba8c;
                        run_4ba00(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4ba8c;
                    run_4ba00(); return;
                case 0x4c0b4:
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4b8f0;
                        run_4b800(); return;
                    }
                    r2 = r0 + 34;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4ba8c;
                    run_4ba00(); return;
                case 0x4c0f4:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                case 0x4c0fc:
                    r2 = 32752 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b2c4;
                    run_4b200(); return;
                case 0x4c110:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b3b4;
                        run_4b200(); return;
                    }
                    r2 = r0 - r2;
                    r3 = r2 & 15;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c158;
                        continue;
                    }
                    r4 = 5 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + 19856;
                    r3 = r3 + r4;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f3;
                case 0x4c158:
                    r2 = r2 >> 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b3b4;
                        run_4b200(); return;
                    }
                    r3 = r2 < 32 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c254;
                        run_4c200(); return;
                    }
                    r3 = r2 & 16;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c71c;
                        run_4c600(); return;
                    }
                    r22 = r0 + r0;
                case 0x4c180:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c1d0;
                        continue;
                    }
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = 5 << 16;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r3 + 22216;
                case 0x4c198:
                    r4 = r2 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c1b8;
                        continue;
                    }
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x4c1b8:
                    r2 = r2 >> 1;
                    r3 = r3 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c198;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = f0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = f1;
                case 0x4c1d0:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c218;
                        run_4c200(); return;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r0 + 107;
                    r2 = r3 << 1;
                    r2 = r2 >>> 21;
                    r2 = r4 - r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c218;
                        run_4c200(); return;
                    }
                    r4 = r2 < 32 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c76c;
                        run_4c600(); return;
                    }
                case 0x4c200:
                    pc=0x4c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c200() throws ExecutionException { /* 0x4c200 - 0x4c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c200:
                    r4 = r2 < 53 ? 1 : 0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c78c;
                        run_4c600(); return;
                    }
                    r2 = 880 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x4c218:
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    f2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f0 = r0;
                    f3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4b3cc;
                        run_4b200(); return;
                    }
                case 0x4c254:
                    r2 = r0 + 34;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4acd8;
                    run_4ac00(); return;
                case 0x4c26c:
                    f2 = readPages[(r28+-32580)>>>12][((r28+-32580)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32572)>>>12][((r28+-32572)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32584)>>>12][((r28+-32584)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32576)>>>12][((r28+-32576)>>>2)&0x3ff];
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = f2;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = f3;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f4;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x4b9a8;
                    run_4b800(); return;
                case 0x4c294:
                    r17 = r16 + r0;
                    r30 = r0 + r0;
                    r23 = r0 + r0;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ae64;
                    run_4ae00(); return;
                case 0x4c2ac:
                    f4 = readPages[(r28+-32556)>>>12][((r28+-32556)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x4af60;
                    run_4ae00(); return;
                case 0x4c2c8:
                    r3 = r0 + 37;
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r3 - r7;
                    r3 = r3 < r4 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b354;
                        run_4b200(); return;
                    }
                    r2 = r0 + 15;
                    r7 = r2 - r7;
                    r2 = 5 << 16;
                    r2 = r2 + 19856;
                    r3 = r7 << 3;
                    r3 = r3 + r2;
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r4 - r7;
                    r3 = r3 << 3;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = r3 + r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    /* Next insn is delay slot */ 
                    pc=0x4acd8;
                    run_4ac00(); return;
                case 0x4c33c:
                    r2 = 15 << 16;
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r2 | 65535;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c4a8;
                        run_4c400(); return;
                    }
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c4a8;
                        run_4c400(); return;
                    }
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4bf98;
                    run_4be00(); return;
                case 0x4c370:
                    r4 = r0 + 1;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4bc68;
                    run_4bc00(); return;
                case 0x4c380:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c3b8;
                        continue;
                    }
                    r5 = readPages[(r19+26020)>>>12][((r19+26020)>>>2)&0x3ff];
                    r4 = r29 + 24;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r31=0x4c3a4;
                    pc=0x3fc00;
                    run_3fc00(); return;
                case 0x4c3a4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4c3b4;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x4c3b4:
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                case 0x4c3b8:
                    r3 = (r17&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b2a8;
                        run_4b200(); return;
                    }
                    r3 = 5 << 16;
                    r17 = r17 << 2;
                    r3 = r3 + 22188;
                    r3 = r3 + r17;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    return;
                case 0x4c3e8:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4b2a8;
                    run_4b200(); return;
                case 0x4c400:
                    pc=0x4c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c400() throws ExecutionException { /* 0x4c400 - 0x4c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c400:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    r3 = 65519 << 16;
                    r4 = r4 + 1075;
                    r3 = r3 | 65535;
                    r4 = r4 << 20;
                    r3 = r5 & r3;
                    r3 = r4 | r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4b2a8;
                    run_4b200(); return;
                case 0x4c430:
                    r3 = 32767 << 16;
                    r3 = r3 | 65535;
                    r5 = r0 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4b2a8;
                    run_4b200(); return;
                case 0x4c44c:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b2a8;
                    run_4b200(); return;
                case 0x4c45c:
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r4 < -22 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4b354;
                        run_4b200(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r4 << 3;
                    r3 = r3 + 19856;
                    r2 = r3 - r2;
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x4acd8;
                    run_4ac00(); return;
                case 0x4c4a8:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c04c;
                        run_4c000(); return;
                    }
                    f12 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x4c4d0;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x4c4d0:
                    f4 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    f5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f0 = r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f4;
                    f1 = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f5;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x4bfd0;
                        run_4be00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4c04c;
                    run_4c000(); return;
                case 0x4c50c:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4be24;
                    run_4be00(); return;
                case 0x4c518:
                    r2 = r0 + 73;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4acc8;
                        run_4ac00(); return;
                    }
                case 0x4c524:
                    r4 = 5 << 16;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r4 + 21988;
                case 0x4c530:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c618;
                        run_4c600(); return;
                    }
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c568;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x4c568:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4c530;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4acc8;
                    run_4ac00(); return;
                case 0x4c578:
                    r2 = 848 << 16;
                    r2 = r5 + r2;
                    f2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f3;
                    /* Next insn is delay slot */ 
                    pc=0x4b3cc;
                    run_4b200(); return;
                case 0x4c5a0:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c6fc;
                        run_4c600(); return;
                    }
                    r3 = 32752 << 16;
                    r5 = 1696 << 16;
                    r3 = r4 & r3;
                    r5 = r5 + 1;
                    r5 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c6fc;
                        run_4c600(); return;
                    }
                    r5 = r0 + 107;
                    r3 = r3 >>> 20;
                    r3 = r5 - r3;
                    r5 = r0 + -1;
                    r3 = r5 << (r3&0x1f);
                case 0x4c5dc:
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4c010;
                        run_4c000(); return;
                    }
                    r2 = 32752 << 16;
                    r4 = r4 & r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    r2 = 16 << 16;
                    r2 = r4 + r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                case 0x4c600:
                    pc=0x4c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c600() throws ExecutionException { /* 0x4c600 - 0x4c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c600:
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4c04c;
                    run_4c000(); return;
                case 0x4c618:
                    r4 = 5 << 16;
                    r7 = r2 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r4 = r4 + 21992;
                case 0x4c628:
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r2 = r2 + 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c668;
                        continue;
                    }
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = r3 + -65;
                    r6 = r6 & 255;
                    r6 = (r6&0xffffffffL) < (26&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4c65c;
                        continue;
                    }
                    r3 = r3 + 32;
                case 0x4c65c:
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x4c628;
                        continue;
                    }
                    r2 = r7 + 1;
                case 0x4c668:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4c0fc;
                    run_4c000(); return;
                case 0x4c674:
                    r2 = r30 << 1;
                    r30 = r30 << 3;
                    r30 = r2 + r30;
                    r30 = r30 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x4bc88;
                    run_4bc00(); return;
                case 0x4c68c:
                    r2 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 40;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4c728;
                        continue;
                    }
                case 0x4c6a4:
                    r4 = 32760 << 16;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4b2c4;
                    run_4b200(); return;
                case 0x4c6b8:
                    r3 = 32752 << 16;
                    r2 = r2 & r3;
                    r3 = 65520 << 16;
                    r3 = r2 + r3;
                    r5 = r0 + -1;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r5;
                    r2 = r3 | r2;
                    f0 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    pc=0x4c04c;
                    run_4c000(); return;
                case 0x4c6fc:
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4c5dc;
                    run_4c400(); return;
                case 0x4c708:
                    r6 = 5 << 16;
                    r4 = r0 + r0;
                    r6 = r6 + 19816;
                    /* Next insn is delay slot */ 
                    pc=0x4bd70;
                    run_4bc00(); return;
                case 0x4c71c:
                    r22 = r0 + 106;
                    /* Next insn is delay slot */ 
                    pc=0x4c180;
                    run_4c000(); return;
                case 0x4c728:
                    r5 = 5 << 16;
                    r4 = r29 + 40;
                    r5 = r5 + 26000;
                    r6 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x4c740;
                    pc=0x51800;
                    run_51800(); return;
                case 0x4c740:
                    r3 = r0 + 5;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4c6a4;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = 32752 << 16;
                    r2 = r3 | r2;
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4b2c4;
                    run_4b200(); return;
                case 0x4c76c:
                    r3 = r0 + -1;
                    r2 = r3 << (r2&0x1f);
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4c218;
                    run_4c200(); return;
                case 0x4c78c:
                    r4 = r0 + -1;
                    r2 = r4 << (r2&0x1f);
                    r2 = r2 & r3;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4c218;
                    run_4c200(); return;
                case 0x4c800:
                    pc=0x4c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4c800() throws ExecutionException { /* 0x4c800 - 0x4ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4c800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ac00;
                    run_4ac00(); return;
                case 0x4ca00:
                    pc=0x4ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ca00() throws ExecutionException { /* 0x4ca00 - 0x4cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ca00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r29 = r29 + -32;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f20;
                    /* Next insn is delay slot */ 
                    r31=0x4ca28;
                    pc=0x4ac00;
                    run_4ac00(); return;
                case 0x4ca28:
                    f12 = f0;
                    f13 = f1;
                    f20 = f0;
                    f21 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x4ca38;
                    pc=0x40000;
                    run_40000(); return;
                case 0x4ca38:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ca60;
                        continue;
                    }
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))));
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ca60:
                    f20 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    f21 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x4a600;
                    run_4a600(); return;
                case 0x4cc00:
                    pc=0x4cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4cc00() throws ExecutionException { /* 0x4cc00 - 0x4ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4cc00:
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r23 = r6 + r0;
                    r18 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cdfc;
                        continue;
                    }
                    r20 = r4 + r0;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r30 = r0 + r0;
                    r16 = r0 + r0;
                case 0x4cc58:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ccc4;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r19 = r3 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ccd8;
                        continue;
                    }
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r2 & 1152;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cce8;
                        continue;
                    }
                    r22 = r19 + r0;
                case 0x4cc88:
                    r5 = r30 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4cc98;
                    pc=0x3d600;
                    run_3d600(); return;
                case 0x4cc98:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r3 = r3 - r19;
                    r4 = r4 + r22;
                    r2 = r2 - r16;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r3;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cdfc;
                        continue;
                    }
                case 0x4ccc4:
                    r30 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4cc58;
                    continue;
                case 0x4ccd8:
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cc88;
                    continue;
                case 0x4cce8:
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r6 = r16 + 1;
                    r21 = r4 - r5;
                    r4 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r6 = r6 + r21;
                    r22 = r4 << 1;
                    r4 = r22 + r4;
                    r22 = r4 >>> 31;
                    r22 = r22 + r4;
                    r22 = r22 >> 1;
                    r4 = ((r22 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cd98;
                        continue;
                    }
                    r2 = r2 & 1024;
                    r22 = r6 + r0;
                    r4 = r20 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cdac;
                        continue;
                    }
                case 0x4cd30:
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4cd3c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x4cd3c:
                    r19 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cdd0;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4cd5c;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x4cd5c:
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1153;
                    r2 = r2 & r3;
                    r2 = r2 | 128;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4cd70:
                    r4 = r19 + r21;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r22;
                    r22 = r22 - r21;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r19;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r22;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r4;
                    r19 = r16 + r0;
                    r22 = r16 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4cc88;
                    continue;
                case 0x4cd98:
                    r2 = r2 & 1024;
                    r6 = r22 + r0;
                    r4 = r20 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cd30;
                        continue;
                    }
                case 0x4cdac:
                    /* Next insn is delay slot */ 
                    r31=0x4cdb4;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x4cdb4:
                    r19 = r2 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4cd70;
                        continue;
                    }
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4cdd0;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x4cdd0:
                    r2 = r0 + 12;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff] = r0;
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4ce00;
                    run_4ce00(); return;
                case 0x4cdfc:
                    writePages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff] = r0;
                case 0x4ce00:
                    pc=0x4ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ce00() throws ExecutionException { /* 0x4ce00 - 0x4d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ce00:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4d000:
                    pc=0x4d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d000() throws ExecutionException { /* 0x4d000 - 0x4d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d000:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -224;
                    r2 = r2 & 128;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r17;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r16;
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r31;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r30;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r23;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r22;
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r21;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r20;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r19;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r18;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r4;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d05c;
                        continue;
                    }
                    r2 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dfe4;
                        run_4de00(); return;
                    }
                case 0x4d05c:
                    r5 = r29 + 119;
                    r21 = r29 + 120;
                    r4 = r29 + 16;
                    r2 = 5 << 16;
                    r6 = r21 - r5;
                    r18 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r4;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r0;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                    r3 = r4 + r0;
                    r22 = r2 + 22628;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r5;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r6;
                case 0x4d098:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da98;
                        run_4da00(); return;
                    }
                case 0x4d0a8:
                    r4 = r0 + 37;
                    r19 = r17 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4d128;
                    continue;
                case 0x4d0c0:
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0dc;
                        continue;
                    }
                case 0x4d0c8:
                    r19 = r19 + 1;
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0c0;
                        continue;
                    }
                case 0x4d0dc:
                    r20 = r19 - r17;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d128;
                        continue;
                    }
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    r2 = r2 + 1;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcdc;
                        run_4dc00(); return;
                    }
                    r3 = r3 + 8;
                case 0x4d118:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = r2 + r20;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r2;
                case 0x4d128:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df60;
                        run_4de00(); return;
                    }
                    r2 = r19 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r0 + r0;
                    r23 = r0 + -1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                    r19 = r0 + r0;
                    r7 = r0 + 42;
                    r8 = r0 + r0;
                case 0x4d158:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r17 = r2 + 1;
                case 0x4d160:
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d6dc;
                        run_4d600(); return;
                    }
                case 0x4d170:
                    r5 = 5 << 16;
                    r2 = r2 << 2;
                    r5 = r5 + 22256;
                    r2 = r5 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4d190:
                    r19 = r19 | 16;
                case 0x4d194:
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    continue;
                case 0x4d1a0:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r8 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de3c;
                        run_4de00(); return;
                    }
                    r8 = r0 - r8;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                case 0x4d1c0:
                    r19 = r19 | 4;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    continue;
                case 0x4d1d0:
                    r6 = r0 + 43;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    continue;
                case 0x4d1e0:
                    r2 = r19 & 16;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4deac;
                        run_4de00(); return;
                    }
                    r19 = r19 & 64;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df8c;
                        run_4de00(); return;
                    }
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                case 0x4d200:
                    pc=0x4d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d200() throws ExecutionException { /* 0x4d200 - 0x4d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d200:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4d098;
                    run_4d000(); return;
                case 0x4d21c:
                    r2 = 5 << 16;
                    r2 = r2 + 14952;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                case 0x4d230:
                    r2 = r19 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d248;
                        continue;
                    }
                    r2 = r19 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de90;
                        run_4de00(); return;
                    }
                case 0x4d248:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                case 0x4d25c:
                    r5 = r19 & 1;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d7c8;
                        run_4d600(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d7c8;
                        run_4d600(); return;
                    }
                    r5 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = r19 | 2;
                    r4 = r0 + 2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                case 0x4d290:
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d2a0;
                        continue;
                    }
                    r6 = r0 + -129;
                    r19 = r19 & r6;
                case 0x4d2a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db0c;
                        run_4da00(); return;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db0c;
                        run_4da00(); return;
                    }
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d2c4;
                        continue;
                    }
                    r2 = r19 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de74;
                        run_4de00(); return;
                    }
                case 0x4d2c4:
                    r30 = r21 + r0;
                case 0x4d2c8:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r6 < r23 ? 1 : 0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d2e4;
                        continue;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r23;
                case 0x4d2e4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d38c;
                        continue;
                    }
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d38c;
                    continue;
                case 0x4d304:
                    r19 = r19 | 64;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    run_4d000(); return;
                case 0x4d314:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d654;
                        run_4d600(); return;
                    }
                case 0x4d328:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                case 0x4d33c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d67c;
                        run_4d600(); return;
                    }
                case 0x4d344:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d290;
                    continue;
                case 0x4d358:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r6;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r30 = r29 + 80;
                case 0x4d388:
                    r23 = r0 + r0;
                case 0x4d38c:
                    r4 = r19 & 2;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d3ac;
                        continue;
                    }
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r5 = r5 + 2;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                case 0x4d3ac:
                    r6 = r19 & 132;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r6;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d7d4;
                        run_4d600(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = r2 - r4;
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d7d4;
                        run_4d600(); return;
                    }
                    r2 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e048;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d40c;
                    run_4d400(); return;
                case 0x4d3f8:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                case 0x4d400:
                    pc=0x4d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d400() throws ExecutionException { /* 0x4d400 - 0x4d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d400:
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d470;
                        continue;
                    }
                case 0x4d40c:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d3f8;
                        run_4d200(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x4d448;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4d448:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d40c;
                        continue;
                    }
                case 0x4d470:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r20 + r5;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dde0;
                        run_4dc00(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4d7dc;
                    run_4d600(); return;
                case 0x4d4a4:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d5a0;
                        continue;
                    }
                case 0x4d4b8:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                case 0x4d4d0:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d290;
                    run_4d200(); return;
                case 0x4d4e4:
                    r2 = 5 << 16;
                    r2 = r2 + 14932;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d230;
                    run_4d200(); return;
                case 0x4d500:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d7a0;
                        run_4d600(); return;
                    }
                case 0x4d514:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d4d0;
                    continue;
                case 0x4d534:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r0 + 48;
                    addr=r29+132;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r0 + 120;
                    addr=r29+133;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = 5 << 16;
                    r4 = r4 + 14952;
                    r5 = r5 + 4;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r4;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r19 = r19 | 2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4d4d0;
                    continue;
                case 0x4d578:
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d194;
                        run_4d000(); return;
                    }
                    r6 = r0 + 32;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    run_4d000(); return;
                case 0x4d590:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d4b8;
                        continue;
                    }
                case 0x4d5a0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dee8;
                        run_4de00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4d4d0;
                    continue;
                case 0x4d5c8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    r30 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r20 = r6 + 4;
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e010;
                        run_4e000(); return;
                    }
                    r4 = r30 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dfac;
                        run_4de00(); return;
                    }
                    r5 = r0 + r0;
                    r6 = r23 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4d604;
                    pc=0x21200;
                    run_21200(); return;
                case 0x4d600:
                    pc=0x4d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d600() throws ExecutionException { /* 0x4d600 - 0x4d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d600:
                case 0x4d604:
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e078;
                        run_4e000(); return;
                    }
                    r2 = r2 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    r2 = r23 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d628;
                        continue;
                    }
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                case 0x4d628:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4d63c:
                    r19 = r19 | 16;
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d328;
                        run_4d200(); return;
                    }
                case 0x4d654:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4decc;
                        run_4de00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d344;
                        run_4d200(); return;
                    }
                case 0x4d67c:
                    r4 = r0 + 45;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 - r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r5 = r0 + 45;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4d290;
                    run_4d200(); return;
                case 0x4d69c:
                    r8 = r0 + r0;
                    r2 = r4 + -48;
                case 0x4d6a4:
                    r4 = r8 << 1;
                    r17 = r17 + 1;
                    r8 = r8 << 3;
                    r8 = r4 + r8;
                    addr=r17+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r8 = r8 + r2;
                    r2 = r4 + -48;
                    r5 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d6a4;
                        continue;
                    }
                    r2 = r4 + -32;
                    r5 = (r2&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d170;
                        run_4d000(); return;
                    }
                case 0x4d6dc:
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df60;
                        run_4de00(); return;
                    }
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    r4 = r0 + 1;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    r30 = r29 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x4d388;
                    run_4d200(); return;
                case 0x4d710:
                    r19 = r19 | 128;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    run_4d000(); return;
                case 0x4d720:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r5 = r17 + 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x4e09c;
                        run_4e000(); return;
                    }
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r23 = r0 + r0;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d774;
                        continue;
                    }
                case 0x4d744:
                    r4 = r23 << 1;
                    r5 = r5 + 1;
                    r23 = r23 << 3;
                    r23 = r4 + r23;
                    addr=r5+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r23 = r2 + r23;
                    r2 = r4 + -48;
                    r9 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d744;
                        continue;
                    }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dfd4;
                        run_4de00(); return;
                    }
                case 0x4d774:
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d160;
                    run_4d000(); return;
                case 0x4d780:
                    r19 = r19 | 1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    run_4d000(); return;
                case 0x4d790:
                    r2 = r19 & 16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d514;
                        run_4d400(); return;
                    }
                case 0x4d7a0:
                    r2 = r19 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df04;
                        run_4de00(); return;
                    }
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r5 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4d4d0;
                    run_4d400(); return;
                case 0x4d7c8:
                    r4 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4d4d0;
                    run_4d400(); return;
                case 0x4d7d4:
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                case 0x4d7dc:
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d81c;
                        run_4d800(); return;
                    }
                    r4 = r29 + 134;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                case 0x4d800:
                    pc=0x4d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4d800() throws ExecutionException { /* 0x4d800 - 0x4da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4d800:
                    r5 = r5 + 1;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd80;
                        run_4dc00(); return;
                    }
                    r3 = r3 + 8;
                case 0x4d81c:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d85c;
                        continue;
                    }
                    r4 = r29 + 132;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r4 = r0 + 2;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    r5 = r5 + 2;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ddb0;
                        run_4dc00(); return;
                    }
                    r3 = r3 + 8;
                case 0x4d85c:
                    r6 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r4 = r0 + 128;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4dbac;
                        run_4da00(); return;
                    }
                case 0x4d86c:
                    r4 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r23 = r23 - r4;
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d940;
                        continue;
                    }
                    r4 = r23 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df50;
                        run_4de00(); return;
                    }
                    r4 = 5 << 16;
                    r20 = r4 + 22612;
                    r9 = r0 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d8b4;
                    continue;
                case 0x4d8a0:
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d918;
                        continue;
                    }
                case 0x4d8b4:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8a0;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    r31=0x4d8f0;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4d8f0:
                    r9 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r23 = r23 + -16;
                    r4 = r23 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d8b4;
                        continue;
                    }
                case 0x4d918:
                    r2 = r2 + 1;
                    r5 = r5 + r23;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd04;
                        run_4dc00(); return;
                    }
                    r3 = r3 + 8;
                case 0x4d940:
                    r6 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r5 = r6 + r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r6;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dca4;
                        run_4dc00(); return;
                    }
                    r3 = r3 + 8;
                case 0x4d96c:
                    r19 = r19 & 4;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da50;
                        run_4da00(); return;
                    }
                    r2 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r4 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r19 = r2 - r4;
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da50;
                        run_4da00(); return;
                    }
                    r2 = r19 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e058;
                        run_4e000(); return;
                    }
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    r23 = r0 + 16;
                    r6 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d9c8;
                    continue;
                case 0x4d9b4:
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da24;
                        run_4da00(); return;
                    }
                case 0x4d9c8:
                    r2 = r2 + 1;
                    r6 = r6 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r22;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r23;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9b4;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4da00;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4da00:
                    pc=0x4da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4da00() throws ExecutionException { /* 0x4da00 - 0x4dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4da00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        continue;
                    }
                    r19 = r19 + -16;
                    r4 = r19 < 17 ? 1 : 0;
                    r6 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d9c8;
                        run_4d800(); return;
                    }
                case 0x4da24:
                    r5 = r6 + r0;
                case 0x4da28:
                    r2 = r2 + 1;
                    r6 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r5 = r5 + r19;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r19;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de4c;
                        run_4de00(); return;
                    }
                case 0x4da50:
                    r2 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r3 = r2 < r4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da6c;
                        continue;
                    }
                    r2 = r4 + r0;
                case 0x4da6c:
                    r3 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r3;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4daa4;
                        continue;
                    }
                case 0x4da84:
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r0;
                    r3 = r29 + 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d0a8;
                        run_4d000(); return;
                    }
                case 0x4da98:
                    r19 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d128;
                    run_4d000(); return;
                case 0x4daa4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dab8;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4dab8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4da84;
                        continue;
                    }
                case 0x4dac0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dcd0;
                        run_4dc00(); return;
                    }
                    r2 = r0 + -1;
                case 0x4dad8:
                    r31 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r30 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r23 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r22 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r21 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r20 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r19 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r18 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r17 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r16 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r29 = r29 + 224;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4db0c:
                    r6 = r0 + 1;
                    if(r4 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd34;
                        run_4dc00(); return;
                    }
                    r6 = r0 + 2;
                    r30 = r21 + r0;
                    if(r4 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4db5c;
                        continue;
                    }
                    r6 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                case 0x4db2c:
                    r4 = r2 & 15;
                    r4 = r6 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r30 = r30 + -1;
                    r2 = r2 >>> 4;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db2c;
                        continue;
                    }
                    r4 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4db5c:
                    r4 = r2 & 7;
                    r30 = r30 + -1;
                    r4 = r4 + 48;
                    r2 = r2 >>> 3;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4db5c;
                        continue;
                    }
                    r2 = r19 & 1;
                    r6 = r30 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de2c;
                        run_4de00(); return;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd70;
                        run_4dc00(); return;
                    }
                    r30 = r30 + -1;
                    r4 = r21 - r30;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4dbac:
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r6 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r9 = r4 - r6;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4d86c;
                        run_4d800(); return;
                    }
                    r4 = r9 < 17 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e068;
                        run_4e000(); return;
                    }
                    r6 = 5 << 16;
                    r20 = r6 + 22612;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r17;
                    r10 = r0 + 16;
                    r17 = r20 + r0;
                    r20 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4dc04;
                    run_4dc00(); return;
                case 0x4dbf0:
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r3 = r3 + 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dc68;
                        run_4dc00(); return;
                    }
                case 0x4dc00:
                    pc=0x4dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4dc00() throws ExecutionException { /* 0x4dc00 - 0x4de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4dc00:
                case 0x4dc04:
                    r2 = r2 + 1;
                    r5 = r5 + 16;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r10;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dbf0;
                        run_4da00(); return;
                    }
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x4dc40;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4dc40:
                    r10 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r20 = r20 + -16;
                    r4 = r20 < 17 ? 1 : 0;
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dc04;
                        continue;
                    }
                case 0x4dc68:
                    r9 = r20 + r0;
                    r20 = r17 + r0;
                    r17 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                case 0x4dc74:
                    r2 = r2 + 1;
                    r5 = r5 + r9;
                    r4 = r2 < 8 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r20;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r9;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r5;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4df20;
                        run_4de00(); return;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x4d86c;
                    run_4d800(); return;
                case 0x4dca4:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dcb8;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4dcb8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d96c;
                    run_4d800(); return;
                case 0x4dcd0:
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4dad8;
                    run_4da00(); return;
                case 0x4dcdc:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dcf0;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4dcf0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d118;
                    run_4d000(); return;
                case 0x4dd04:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dd18;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4dd18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d940;
                    run_4d800(); return;
                case 0x4dd34:
                    r4 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de10;
                        run_4de00(); return;
                    }
                    r30 = r21 + r0;
                    r4 = r0 + 10;
                case 0x4dd48:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        if(r4!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                        }
                        pc=0x4dd54;
                        continue;
                    }
                    if(r4!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r4 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r4 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4dd54:
                    r30 = r30 + -1;
                    r6 = hi;
                    r6 = r6 + 48;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dd48;
                        continue;
                    }
                case 0x4dd70:
                    r2 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4dd80:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4dd94;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4dd94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d81c;
                    run_4d800(); return;
                case 0x4ddb0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ddc4;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4ddc4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d85c;
                    run_4d800(); return;
                case 0x4dde0:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ddf4;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4ddf4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                case 0x4de00:
                    pc=0x4de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4de00() throws ExecutionException { /* 0x4de00 - 0x4e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4de00:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d7dc;
                    run_4d600(); return;
                case 0x4de10:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r2 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4de2c:
                    r6 = r21 - r30;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4de3c:
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    run_4d000(); return;
                case 0x4de4c:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4de60;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4de60:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4da50;
                    run_4da00(); return;
                case 0x4de74:
                    r6 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r29+119;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r6;
                    r30 = r29 + 119;
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4de90:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4d25c;
                    run_4d200(); return;
                case 0x4deac:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x4d098;
                    run_4d000(); return;
                case 0x4decc:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4d33c;
                    run_4d200(); return;
                case 0x4dee8:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + 1;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4d4d0;
                    run_4d400(); return;
                case 0x4df04:
                    r6 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    pc=0x4d4d0;
                    run_4d400(); return;
                case 0x4df20:
                    r4 = r18 + r0;
                    r5 = r16 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4df34;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4df34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r3 = r29 + 16;
                    /* Next insn is delay slot */ 
                    pc=0x4d86c;
                    run_4d800(); return;
                case 0x4df50:
                    r6 = 5 << 16;
                    r20 = r6 + 22612;
                    /* Next insn is delay slot */ 
                    pc=0x4d918;
                    run_4d800(); return;
                case 0x4df60:
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4dac0;
                        run_4da00(); return;
                    }
                    r4 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r6 = r29 + 120;
                    /* Next insn is delay slot */ 
                    r31=0x4df84;
                    pc=0x4cc00;
                    run_4cc00(); return;
                case 0x4df84:
                    /* Next insn is delay slot */ 
                    pc=0x4dac0;
                    run_4da00(); return;
                case 0x4df8c:
                    r5 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r6 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r6;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    pc=0x4d098;
                    run_4d000(); return;
                case 0x4dfac:
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r31=0x4dfb8;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x4dfb8:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    r3 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4dfd4:
                    r23 = r0 + -1;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d160;
                    run_4d000(); return;
                case 0x4dfe4:
                    r5 = r0 + 64;
                    /* Next insn is delay slot */ 
                    r31=0x4dff0;
                    pc=0x20800;
                    run_20800(); return;
                case 0x4dff0:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e0c8;
                        run_4e000(); return;
                    }
                case 0x4e000:
                    pc=0x4e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e000() throws ExecutionException { /* 0x4e000 - 0x4e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e000:
                    r2 = r0 + 64;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x4d05c;
                    run_4d000(); return;
                case 0x4e010:
                    r2 = (r23&0xffffffffL) < (7&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e020;
                        continue;
                    }
                    r23 = r0 + 6;
                case 0x4e020:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    r2 = r23 + r0;
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e090;
                        continue;
                    }
                case 0x4e030:
                    r8 = 5 << 16;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r30 = r8 + 18332;
                    /* Next insn is delay slot */ 
                    pc=0x4d388;
                    run_4d200(); return;
                case 0x4e048:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x4d470;
                    run_4d400(); return;
                case 0x4e058:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    pc=0x4da28;
                    run_4da00(); return;
                case 0x4e068:
                    r4 = 5 << 16;
                    r20 = r4 + 22612;
                    /* Next insn is delay slot */ 
                    pc=0x4dc74;
                    run_4dc00(); return;
                case 0x4e078:
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r23;
                    addr=r29+134;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r20;
                    r23 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d2c8;
                    run_4d200(); return;
                case 0x4e090:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e030;
                    continue;
                case 0x4e09c:
                    r4 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    r23 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r4 + 4;
                    if(r23 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4de3c;
                        run_4de00(); return;
                    }
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    r23 = r0 + -1;
                    r2 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4d158;
                    run_4d000(); return;
                case 0x4e0c8:
                    r3 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4dad8;
                    run_4da00(); return;
                case 0x4e200:
                    pc=0x4e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e200() throws ExecutionException { /* 0x4e200 - 0x4e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e200:
                    r2 = r0 + -1;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e324;
                        continue;
                    }
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r29 + -32;
                    r2 = r2 & 65503;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r6+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff];
                    r16 = r5 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e2b0;
                        continue;
                    }
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = readPages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e288;
                        continue;
                    }
                case 0x4e24c:
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    r2 = r16 + r0;
                case 0x4e274:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e288:
                    r5 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x4e298;
                    pc=0x4f800;
                    run_4f800(); return;
                case 0x4e298:
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e24c;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4e274;
                    continue;
                case 0x4e2b0:
                    r2 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r3 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e2dc;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e2dc;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x4e330;
                        continue;
                    }
                case 0x4e2dc:
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    addr=r6+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r16&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r6+60)>>>12][((r6+60)>>>2)&0x3ff] = r2;
                    r2 = r6 + 64;
                    writePages[(r6+48)>>>12][((r6+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r6+52)>>>12][((r6+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r6 + 66;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r2;
                    writePages[(r6+56)>>>12][((r6+56)>>>2)&0x3ff] = r3;
                    r2 = r16 + r0;
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e324:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e330:
                    r3 = r3 + -1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e274;
                    continue;
                case 0x4e400:
                    pc=0x4e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e400() throws ExecutionException { /* 0x4e400 - 0x4e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e468;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e430;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x4e430;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x4e430:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e468;
                        continue;
                    }
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                case 0x4e454:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e468:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 32;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4e454;
                    continue;
                case 0x4e600:
                    pc=0x4e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e600() throws ExecutionException { /* 0x4e600 - 0x4e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e600:
                    { long hilo = (long)(r7) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -56;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r22;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    r22 = r6 + r0;
                    r21 = lo;
                    r23 = r7 + r0;
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e70c;
                        continue;
                    }
                    r20 = r4 + r0;
                    r19 = r5 + r0;
                    r18 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x4e694;
                    continue;
                case 0x4e658:
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e664;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x4e664:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r19 = r19 + r17;
                    r18 = r18 - r17;
                    /* Next insn is delay slot */ 
                    r31=0x4e68c;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4e68c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e718;
                        continue;
                    }
                case 0x4e694:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = ((r17 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e658;
                        continue;
                    }
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e6b8;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x4e6b8:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 - r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r18 = r2 + r18;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r18;
                    r2 = r23 + r0;
                case 0x4e6dc:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r19 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r18 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4e70c:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e6dc;
                    continue;
                case 0x4e718:
                    r2 = r21 - r18;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        if(r22!=0) {
                        hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                        }
                        pc=0x4e728;
                        continue;
                    }
                    if(r22!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r22 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r22 & 0xffffffffL));
                    }
                    throw new ExecutionException("Break");
                case 0x4e728:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x4e6dc;
                    continue;
                case 0x4e800:
                    pc=0x4e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4e800() throws ExecutionException { /* 0x4e800 - 0x4ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4e800:
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r29 = r29 + -416;
                    writePages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r2 & 8192;
                    writePages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff] = r30;
                    writePages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff] = r16;
                    writePages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff] = r31;
                    writePages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff] = r23;
                    writePages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff] = r22;
                    writePages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff] = r21;
                    writePages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff] = r20;
                    writePages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff] = r19;
                    writePages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff] = r18;
                    r30 = r5 + r0;
                    r16 = r6 + r0;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r7;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e864;
                        continue;
                    }
                    r2 = r2 | 8192;
                    r4 = readPages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff];
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -8193;
                    r2 = r4 & r2;
                    writePages[(r5+100)>>>12][((r5+100)>>>2)&0x3ff] = r2;
                case 0x4e864:
                    r19 = 5 << 16;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r0;
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r0;
                    r19 = r19 + 22644;
                case 0x4e87c:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea84;
                        run_4ea00(); return;
                    }
                case 0x4e890:
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r4 = r5 + r2;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e92c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e908;
                        continue;
                    }
                case 0x4e8c0:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r5 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e87c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    r23 = r23 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e8c0;
                        continue;
                    }
                case 0x4e908:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4e918;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4e918:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e87c;
                        continue;
                    }
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4e8c0;
                    continue;
                case 0x4e92c:
                    r4 = r0 + 37;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb00;
                        run_4ea00(); return;
                    }
                    r21 = r0 + r0;
                    r22 = r0 + r0;
                case 0x4e940:
                    r16 = r16 + 1;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r4 & 255;
                    r6 = (r2&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e974;
                        continue;
                    }
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4e974:
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 1;
                    r4 = r4 & 3;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4e990;
                        continue;
                    }
                case 0x4e98c:
                    r21 = r21 | 1;
                case 0x4e990:
                    r3 = 2 << 16;
                    r3 = r3 + 27648;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                case 0x4e9a4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb6c;
                        run_4ea00(); return;
                    }
                case 0x4e9b4:
                    r2 = r21 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eaa8;
                        run_4ea00(); return;
                    }
                case 0x4e9c0:
                    r2 = r0 + 2;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed14;
                        run_4ec00(); return;
                    }
                    r2 = r0 + 3;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4eca0;
                        run_4ec00(); return;
                    }
                    r2 = r0 + 1;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4ebe0;
                        run_4ea00(); return;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e9f0;
                        continue;
                    }
                    r22 = r0 + 1;
                case 0x4e9f0:
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f2d8;
                        run_4f200(); return;
                    }
                    r21 = r21 & 16;
                case 0x4ea00:
                    pc=0x4ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ea00() throws ExecutionException { /* 0x4ea00 - 0x4ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ea00:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f478;
                        run_4f400(); return;
                    }
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4ea40;
                    continue;
                case 0x4ea14:
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r2;
                    r22 = r22 - r2;
                    r2 = r4 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ea38;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4ea38:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f5a4;
                        run_4f400(); return;
                    }
                case 0x4ea40:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r2 < r22 ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea14;
                        continue;
                    }
                    r2 = r2 - r22;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r21 + r22;
                    r9 = r2 + r22;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r9;
                case 0x4ea6c:
                    r23 = r23 + r21;
                case 0x4ea70:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r16 + 1;
                    writePages[(r29+328)>>>12][((r29+328)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e890;
                        run_4e800(); return;
                    }
                case 0x4ea84:
                    r2 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4ebac;
                    continue;
                case 0x4ea90:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eaa0;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4eaa0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        continue;
                    }
                case 0x4eaa8:
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4eac0;
                    continue;
                case 0x4eab8:
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                case 0x4eac0:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e9c0;
                        run_4e800(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r23 = r23 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eab8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4ea90;
                    continue;
                case 0x4eb00:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f5b8;
                        run_4f400(); return;
                    }
                case 0x4eb10:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea84;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r23 = r23 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4e87c;
                    run_4e800(); return;
                case 0x4eb48:
                    r21 = r21 | 1;
                case 0x4eb4c:
                    r3 = 4 << 16;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r3 + 8704;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 8;
                    r20 = r0 + 3;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e9b4;
                        run_4e800(); return;
                    }
                case 0x4eb6c:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4eb7c;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4eb7c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e9b4;
                        run_4e800(); return;
                    }
                case 0x4eb84:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eba8;
                        continue;
                    }
                    addr=r30+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea84;
                        continue;
                    }
                case 0x4eba8:
                    r2 = r0 + -1;
                case 0x4ebac:
                    r31 = readPages[(r29+412)>>>12][((r29+412)>>>2)&0x3ff];
                    r30 = readPages[(r29+408)>>>12][((r29+408)>>>2)&0x3ff];
                    r23 = readPages[(r29+404)>>>12][((r29+404)>>>2)&0x3ff];
                    r22 = readPages[(r29+400)>>>12][((r29+400)>>>2)&0x3ff];
                    r21 = readPages[(r29+396)>>>12][((r29+396)>>>2)&0x3ff];
                    r20 = readPages[(r29+392)>>>12][((r29+392)>>>2)&0x3ff];
                    r19 = readPages[(r29+388)>>>12][((r29+388)>>>2)&0x3ff];
                    r18 = readPages[(r29+384)>>>12][((r29+384)>>>2)&0x3ff];
                    r17 = readPages[(r29+380)>>>12][((r29+380)>>>2)&0x3ff];
                    r16 = readPages[(r29+376)>>>12][((r29+376)>>>2)&0x3ff];
                    r29 = r29 + 416;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4ebe0:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ebec;
                        continue;
                    }
                    r22 = r0 + -1;
                case 0x4ebec:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f010;
                        run_4f000(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x4ec00:
                    pc=0x4ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ec00() throws ExecutionException { /* 0x4ec00 - 0x4ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ec00:
                    r10 = r29 + 24;
                case 0x4ec04:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec8c;
                        continue;
                    }
                case 0x4ec20:
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea6c;
                        run_4ea00(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec04;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x4ec5c;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4ec5c:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea6c;
                        run_4ea00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ec20;
                        continue;
                    }
                case 0x4ec8c:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea84;
                        run_4ea00(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x4ea70;
                    run_4ea00(); return;
                case 0x4eca0:
                    r2 = r22 + -1;
                    r2 = (r2&0xffffffffL) < (39&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f000;
                        run_4f000(); return;
                    }
                    r13 = r0 + r0;
                case 0x4ecb4:
                    r11 = r29 + 280;
                    r2 = 5 << 16;
                    r10 = r21 | 3456;
                    r12 = r0 + r0;
                    r21 = r11 + r0;
                    r14 = r0 + 512;
                    r7 = r2 + 23440;
                case 0x4ecd0:
                    r6 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r4 + -43;
                    r2 = r2 & 255;
                    r5 = (r2&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee98;
                        run_4ee00(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r2 << 2;
                    r3 = r3 + 23128;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x4ed14:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4edb0;
                        continue;
                    }
                    r2 = r21 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4edc0;
                        continue;
                    }
                case 0x4ed28:
                    r21 = r21 & 16;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f210;
                        run_4f200(); return;
                    }
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                case 0x4ed40:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea6c;
                        run_4ea00(); return;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    if(r22 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea6c;
                        run_4ea00(); return;
                    }
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed40;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4ed98;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4ed98:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea6c;
                        run_4ea00(); return;
                    }
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4ed40;
                    continue;
                case 0x4edb0:
                    r2 = r21 & 1;
                    r22 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ed28;
                        continue;
                    }
                case 0x4edc0:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r20 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x4edd8;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x4edd8:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4d0;
                        run_4f400(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x4edf4:
                    r6 = r0 + r0;
                case 0x4edf8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                case 0x4ee00:
                    pc=0x4ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4ee00() throws ExecutionException { /* 0x4ee00 - 0x4f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4ee00:
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r4 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee28;
                        continue;
                    }
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f5f0;
                        run_4f400(); return;
                    }
                case 0x4ee28:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e87c;
                        run_4e800(); return;
                    }
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                case 0x4ee34:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e87c;
                    run_4e800(); return;
                case 0x4ee4c:
                    r2 = r10 & 1536;
                    if(r2 != r14) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee98;
                        continue;
                    }
                    r2 = r0 + -513;
                    r10 = r10 & r2;
                    r10 = r10 | 1280;
                    r18 = r0 + 16;
                case 0x4ee68:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 + -1;
                    r21 = r21 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef94;
                        continue;
                    }
                case 0x4ee84:
                    r6 = r6 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r6;
                case 0x4ee8c:
                    r22 = r22 + -1;
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ecd0;
                        run_4ec00(); return;
                    }
                case 0x4ee98:
                    r2 = r10 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eeb8;
                        continue;
                    }
                    r2 = ((r11 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f53c;
                        run_4f400(); return;
                    }
                case 0x4eeb0:
                    if(r21 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea84;
                        run_4ea00(); return;
                    }
                case 0x4eeb8:
                    r2 = r10 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f404;
                        run_4f400(); return;
                    }
                case 0x4eec4:
                    r11 = r21 - r11;
                    r12 = r11 + r12;
                    r23 = r23 + r12;
                    /* Next insn is delay slot */ 
                    pc=0x4e87c;
                    run_4e800(); return;
                case 0x4eed8:
                    r2 = r18 < 11 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee98;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4ee68;
                    continue;
                case 0x4eef4:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r18 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee98;
                        continue;
                    }
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4ee68;
                    continue;
                case 0x4ef20:
                    r2 = r18 << 1;
                    r2 = r2 + r7;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r18 = tmp;
                    r2 = r0 + -2945;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4ee68;
                    continue;
                case 0x4ef3c:
                    r2 = r10 & 2048;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee68;
                        continue;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef58;
                        continue;
                    }
                    r10 = r10 | 512;
                    r18 = r0 + 8;
                case 0x4ef58:
                    r2 = r10 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4c0;
                        run_4f400(); return;
                    }
                    r2 = r0 + -897;
                    r10 = r10 & r2;
                    if(r13 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ef7c;
                        continue;
                    }
                    r13 = r13 + -1;
                    r22 = r22 + 1;
                case 0x4ef7c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r12 = r12 + 1;
                    r2 = r2 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee84;
                        continue;
                    }
                case 0x4ef94:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r13;
                    writePages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff] = r14;
                    /* Next insn is delay slot */ 
                    r31=0x4efbc;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4efbc:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r13 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    r14 = readPages[(r29+356)>>>12][((r29+356)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4ee98;
                    continue;
                case 0x4efe4:
                    r2 = r10 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee98;
                        continue;
                    }
                    r2 = r0 + -129;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4ee68;
                    continue;
                case 0x4f000:
                    pc=0x4f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f000() throws ExecutionException { /* 0x4f000 - 0x4f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f000:
                    r13 = r22 + -39;
                    r22 = r0 + 39;
                    /* Next insn is delay slot */ 
                    pc=0x4ecb4;
                    run_4ec00(); return;
                case 0x4f010:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r10 = r29 + 24;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r21 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r20 = r21 + r0;
                case 0x4f034:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r10 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0bc;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r20+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f0bc;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f034;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x4f0a8;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4f0a8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f034;
                        continue;
                    }
                    if(r21 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        run_4ea00(); return;
                    }
                case 0x4f0bc:
                    r21 = r20 - r21;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ea84;
                        run_4ea00(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r23 = r23 + r21;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4ea70;
                    run_4ea00(); return;
                case 0x4f0ec:
                    r3 = 4 << 16;
                    r3 = r3 + 8704;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 10;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x4e9a4;
                    run_4e800(); return;
                case 0x4f108:
                    r20 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x4e9a4;
                    run_4e800(); return;
                case 0x4f114:
                    r21 = r21 | 544;
                case 0x4f118:
                    r3 = 4 << 16;
                    r3 = r3 + 8704;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + 16;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x4e9a4;
                    run_4e800(); return;
                case 0x4f134:
                    r2 = r21 & 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4e87c;
                        run_4e800(); return;
                    }
                    r2 = r21 & 4;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f5d8;
                        run_4f400(); return;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r23&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e87c;
                    run_4e800(); return;
                case 0x4f168:
                    r21 = r21 | 1;
                    /* Next insn is delay slot */ 
                    pc=0x4e940;
                    run_4e800(); return;
                case 0x4f174:
                    r3 = 2 << 16;
                    r3 = r3 + 27648;
                    writePages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff] = r3;
                    r18 = r0 + r0;
                    r20 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x4e9a4;
                    run_4e800(); return;
                case 0x4f190:
                    r21 = r21 | 4;
                    /* Next insn is delay slot */ 
                    pc=0x4e940;
                    run_4e800(); return;
                case 0x4f19c:
                    r21 = r21 | 64;
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4e9a4;
                    run_4e800(); return;
                case 0x4f1ac:
                    r5 = r16 + r0;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r31=0x4f1bc;
                    pc=0x4a400;
                    run_4a400(); return;
                case 0x4f1bc:
                    r16 = r2 + r0;
                    r21 = r21 | 64;
                    r20 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x4e9a4;
                    run_4e800(); return;
                case 0x4f1d0:
                    r21 = r21 | 512;
                    /* Next insn is delay slot */ 
                    pc=0x4f118;
                    continue;
                case 0x4f1dc:
                    r21 = r21 | 2;
                    /* Next insn is delay slot */ 
                    pc=0x4e940;
                    run_4e800(); return;
                case 0x4f1e8:
                    r21 = r21 | 16;
                    /* Next insn is delay slot */ 
                    pc=0x4e940;
                    run_4e800(); return;
                case 0x4f1f4:
                    r2 = r22 << 1;
                    r9 = r22 << 3;
                    r2 = r2 + r9;
                case 0x4f200:
                    pc=0x4f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f200() throws ExecutionException { /* 0x4f200 - 0x4f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f200:
                    r4 = r4 + -48;
                    r22 = r4 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x4e940;
                    run_4e800(); return;
                case 0x4f210:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r20 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r21 = r20 + r0;
                case 0x4f234:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r5 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r5 + r4;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r4 & 8;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f2b0;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r4 = r4 + -1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r4 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + -1;
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f2b0;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f234;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f2a8;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4f2a8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f234;
                        continue;
                    }
                case 0x4f2b0:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r6 = r21 - r20;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r23 = r23 + r6;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e87c;
                    run_4e800(); return;
                case 0x4f2d8:
                    r4 = r29 + 320;
                    r5 = r0 + r0;
                    r6 = r0 + 8;
                    r21 = r21 & 16;
                    /* Next insn is delay slot */ 
                    r31=0x4f2f0;
                    pc=0x2adec;
                    run_2ac00(); return;
                case 0x4f2f0:
                    writePages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff] = r21;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f508;
                        run_4f400(); return;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x4f320:
                    r21 = r0 + r0;
                case 0x4f324:
                    /* Next insn is delay slot */ 
                    r31=0x4f32c;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x4f32c:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        run_4ea00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r6 = r3 + r21;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    r20 = r21 + 1;
                    r5 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r6 = r29 + 280;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f380;
                    pc=0x49c00;
                    run_49c00(); return;
                case 0x4f380:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        run_4ea00(); return;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f580;
                        run_4f400(); return;
                    }
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f3b0;
                        continue;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                case 0x4f3b0:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    r23 = r23 + r20;
                    r22 = r22 + -1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f598;
                        run_4f400(); return;
                    }
                    r3 = readPages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r3;
                case 0x4f3d4:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f514;
                        run_4f400(); return;
                    }
                case 0x4f3e4:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f324;
                        continue;
                    }
                case 0x4f3ec:
                    r3 = readPages[(r29+348)>>>12][((r29+348)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee34;
                        run_4ee00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4e87c;
                    run_4e800(); return;
                case 0x4f400:
                    pc=0x4f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f400() throws ExecutionException { /* 0x4f400 - 0x4f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f400:
                case 0x4f404:
                    r3 = readPages[(r29+344)>>>12][((r29+344)>>>2)&0x3ff];
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                    r5 = r11 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    r6 = r0 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x4f430;
                    return;
                case 0x4f430:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r4 = r10 & 32;
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f4dc;
                        continue;
                    }
                case 0x4f448:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                case 0x4f460:
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4eec4;
                    run_4ee00(); return;
                case 0x4f478:
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r7 = r22 + r0;
                    r21 = r3 + 4;
                    /* Next insn is delay slot */ 
                    r31=0x4f49c;
                    pc=0x4e600;
                    run_4e600(); return;
                case 0x4f49c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        run_4ea00(); return;
                    }
                    r3 = readPages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff];
                    r23 = r2 + r23;
                    r3 = r3 + 1;
                    writePages[(r29+340)>>>12][((r29+340)>>>2)&0x3ff] = r3;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    pc=0x4e87c;
                    run_4e800(); return;
                case 0x4f4c0:
                    r2 = r0 + -1409;
                    r10 = r10 & r2;
                    /* Next insn is delay slot */ 
                    pc=0x4ee68;
                    run_4ee00(); return;
                case 0x4f4d0:
                    r21 = r29 + 328;
                    /* Next insn is delay slot */ 
                    pc=0x4edf4;
                    run_4ec00(); return;
                case 0x4f4dc:
                    r4 = r10 & 4;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f448;
                        continue;
                    }
                    r3 = readPages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4f460;
                    continue;
                case 0x4f508:
                    writePages[(r29+336)>>>12][((r29+336)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f320;
                    run_4f200(); return;
                case 0x4f514:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f524;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4f524:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f3e4;
                        run_4f200(); return;
                    }
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f3ec;
                        run_4f200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4eb84;
                    run_4ea00(); return;
                case 0x4f53c:
                    addr=r21+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r7 = r21 + -1;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff] = r7;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    writePages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff] = r11;
                    writePages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff] = r12;
                    /* Next insn is delay slot */ 
                    r31=0x4f564;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x4f564:
                    r7 = readPages[(r29+360)>>>12][((r29+360)>>>2)&0x3ff];
                    r12 = readPages[(r29+364)>>>12][((r29+364)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    r11 = readPages[(r29+368)>>>12][((r29+368)>>>2)&0x3ff];
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4eeb0;
                    run_4ee00(); return;
                case 0x4f580:
                    r3 = r0 + -2;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4f3b0;
                        run_4f200(); return;
                    }
                    r21 = r20 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f3d4;
                    run_4f200(); return;
                case 0x4f598:
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f3d4;
                    run_4f200(); return;
                case 0x4f5a4:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        run_4ea00(); return;
                    }
                    r23 = r23 + r21;
                    /* Next insn is delay slot */ 
                    pc=0x4ea70;
                    run_4ea00(); return;
                case 0x4f5b8:
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f5c8;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4f5c8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb10;
                        run_4ea00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4eb84;
                    run_4ea00(); return;
                case 0x4f5d8:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r23;
                    writePages[(r29+428)>>>12][((r29+428)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4e87c;
                    run_4e800(); return;
                case 0x4f5f0:
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x4f5fc;
                    pc=0x3c800;
                    run_3c800(); return;
                case 0x4f5fc:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                case 0x4f600:
                    pc=0x4f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f600() throws ExecutionException { /* 0x4f600 - 0x4f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f600:
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        run_4ea00(); return;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r29 + 24;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r10 = r6 + 1;
                    r6 = r3 + r6;
                    addr=r6+256;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + -1;
                    r2 = r29 + 320;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r4;
                    r7 = r10 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r21 + r0;
                    r6 = r29 + 280;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x4f65c;
                    pc=0x49c00;
                    run_49c00(); return;
                case 0x4f65c:
                    r3 = r0 + -1;
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        run_4ea00(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6c4;
                        continue;
                    }
                    r3 = r0 + -2;
                    r6 = r10 + r0;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x4f754;
                        continue;
                    }
                case 0x4f684:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x4edf8;
                        run_4ec00(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r30 + r0;
                    writePages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x4f6a8;
                    pc=0x4e400;
                    run_4e400(); return;
                case 0x4f6a8:
                    r6 = readPages[(r29+352)>>>12][((r29+352)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4edf8;
                        run_4ec00(); return;
                    }
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4eb84;
                        run_4ea00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4ee28;
                    run_4ee00(); return;
                case 0x4f6c4:
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                    r4 = r0 + r0;
                case 0x4f6cc:
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x4f6d8;
                    pc=0x49a00;
                    run_49a00(); return;
                case 0x4f6d8:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f728;
                        continue;
                    }
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4ee28;
                        run_4ee00(); return;
                    }
                case 0x4f6ec:
                    r10 = r10 + -1;
                    r3 = r29 + 280;
                    r2 = r3 + r10;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r4 = r17 + r0;
                    r6 = r30 + r0;
                    writePages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    r31=0x4f710;
                    pc=0x4e200;
                    run_4e200(); return;
                case 0x4f710:
                    r10 = readPages[(r29+372)>>>12][((r29+372)>>>2)&0x3ff];
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f6ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x4ee28;
                    run_4ee00(); return;
                case 0x4f728:
                    r23 = r23 + r10;
                    r22 = r22 + -1;
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f748;
                        continue;
                    }
                    r21 = r21 + 4;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f684;
                    continue;
                case 0x4f748:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4f684;
                    continue;
                case 0x4f754:
                    r4 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4f6cc;
                    continue;
                case 0x4f800:
                    pc=0x4f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4f800() throws ExecutionException { /* 0x4f800 - 0x4fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4f800:
                    r29 = r29 + -40;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r2 = r16 + 64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4f8a0;
                        continue;
                    }
                    r18 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r19 = r18 << 1;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f848;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x4f848:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f90c;
                        continue;
                    }
                    r20 = r2 + r18;
                    r4 = r20 + r0;
                    r5 = r2 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4f86c;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x4f86c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r20;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r17;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r19;
                    r2 = r0 + r0;
                case 0x4f87c:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4f8a0:
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r31=0x4f8ac;
                    pc=0x20800;
                    run_20800(); return;
                case 0x4f8ac:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4f90c;
                        continue;
                    }
                    r3 = r0 + 1024;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r3;
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    addr=r2+1023;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+65;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1021;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r16+64;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4f90c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4f87c;
                    continue;
                case 0x4fa00:
                    pc=0x4fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fa00() throws ExecutionException { /* 0x4fa00 - 0x4fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fa00:
                    r29 = r29 + -32;
                    r2 = r0 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r5 + r0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb2c;
                        continue;
                    }
                    r17 = r4 + r0;
                    r16 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa44;
                        continue;
                    }
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb38;
                        continue;
                    }
                case 0x4fa44:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 & 8192;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fa6c;
                        continue;
                    }
                    r4 = readPages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff];
                    r3 = r0 + -8193;
                    r3 = r4 & r3;
                    r2 = r2 | 8192;
                    writePages[(r16+100)>>>12][((r16+100)>>>2)&0x3ff] = r3;
                case 0x4fa6c:
                    r3 = r0 + -33;
                    r2 = r2 & r3;
                    r3 = r2 & 65535;
                    r4 = r3 & 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4faa8;
                        continue;
                    }
                    r4 = r3 & 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb2c;
                        continue;
                    }
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb48;
                        continue;
                    }
                    r2 = r2 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4faa8:
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r18 = r18 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb88;
                        continue;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb14;
                        continue;
                    }
                case 0x4fad0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r18 + r0;
                case 0x4faf8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4fb14:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4fb24;
                    pc=0x4f800;
                    run_4f800(); return;
                case 0x4fb24:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fad0;
                        continue;
                    }
                case 0x4fb2c:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x4faf8;
                    continue;
                case 0x4fb38:
                    /* Next insn is delay slot */ 
                    r31=0x4fb40;
                    pc=0x1cc00;
                    run_1cc00(); return;
                case 0x4fb40:
                    /* Next insn is delay slot */ 
                    pc=0x4fa44;
                    continue;
                case 0x4fb48:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x4fb58;
                    pc=0x1ba00;
                    run_1ba00(); return;
                case 0x4fb58:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fb2c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r2 & 65527;
                    r2 = r2 << 16;
                    r2 = r2 >> 16;
                    r2 = r2 | 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x4faa8;
                    continue;
                case 0x4fb88:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fbb4;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4fbb4;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x4fc04;
                        run_4fc00(); return;
                    }
                case 0x4fbb4:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r16 + 66;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff] = r3;
                    r2 = r18 + r0;
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x4fc00:
                    pc=0x4fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fc00() throws ExecutionException { /* 0x4fc00 - 0x4fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fc00:
                case 0x4fc04:
                    r3 = r3 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x4faf8;
                    run_4fa00(); return;
                case 0x4fe00:
                    pc=0x4fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_4fe00() throws ExecutionException { /* 0x4fe00 - 0x50000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x4fe00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x4fa00;
                    run_4fa00(); return;
                case 0x50000:
                    pc=0x50000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50000() throws ExecutionException { /* 0x50000 - 0x50200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50000:
                    r29 = r29 + -64;
                case 0x50004:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = r7 + r0;
                    r18 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5008c;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x50038;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x50038:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x50054;
                    return;
                case 0x50054:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x50070;
                        continue;
                    }
                    r2 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                case 0x50070:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x5008c:
                    /* Next insn is delay slot */ 
                    r31=0x50094;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x50094:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r16 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r18;
                    r31=0x500b0;
                    return;
                case 0x500b0:
                    /* Next insn is delay slot */ 
                    pc=0x50054;
                    continue;
                case 0x50200:
                    pc=0x50200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50200() throws ExecutionException { /* 0x50200 - 0x50400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50200:
                    r29 = r29 + -64;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    r16 = r4 + r0;
                    r17 = r6 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x502a0;
                        continue;
                    }
                    r20 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r18 = r5 + r0;
                    r19 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x50240;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x50240:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r20 + r0;
                    r5 = r16 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    pc=r19;
                    r31=0x5025c;
                    return;
                case 0x5025c:
                    r3 = r0 + -1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x5027c;
                        continue;
                    }
                    r2 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r3 = r0 + 138;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x5027c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r29 = r29 + 64;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x502a0:
                    r18 = readPages[(r28+-32728)>>>12][((r28+-32728)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x502b0;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x502b0:
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r4 = r18 + r0;
                    r5 = r29 + 24;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x502cc;
                    return;
                case 0x502cc:
                    /* Next insn is delay slot */ 
                    pc=0x5025c;
                    continue;
                case 0x50400:
                    pc=0x50400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50400() throws ExecutionException { /* 0x50400 - 0x50600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50400:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50424;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50430;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50424:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50430:
                    r2 = r0 + 138;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50600:
                    pc=0x50600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50600() throws ExecutionException { /* 0x50600 - 0x50800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50600:
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r17;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                    r17 = r7 + r0;
                    r16 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x5062c;
                    pc=0x3c600;
                    run_3c600(); return;
                case 0x5062c:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r7 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=r16;
                    r31=0x50648;
                    return;
                case 0x50648:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r29 = r29 + 56;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50800:
                    pc=0x50800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50800() throws ExecutionException { /* 0x50800 - 0x50a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50800:
                    r7 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r5 >> 5;
                    r6 = r2 < r7 ? 1 : 0;
                    r3 = r4 + 20;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508bc;
                        continue;
                    }
                    r7 = r7 << 2;
                    r2 = r2 << 2;
                    r5 = r5 & 31;
                    r7 = r3 + r7;
                    r11 = r3 + r2;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508cc;
                        continue;
                    }
                    r2 = r11 + 4;
                    r8 = readPages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff];
                    r10 = r0 + 32;
                    r6 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r10 = r10 - r5;
                    r8 = r8 >>> (r5&0x1f);
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50924;
                        continue;
                    }
                    r6 = r3 + r0;
                case 0x50858:
                    r9 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r9 = r9 << (r10&0x1f);
                    r8 = r8 | r9;
                    r2 = r2 + 4;
                    writePages[(r6+-4)>>>12][((r6+-4)>>>2)&0x3ff] = r8;
                    r8 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r9 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 >>> (r5&0x1f);
                    if(r9 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50858;
                        continue;
                    }
                    r2 = r7 - r11;
                    r2 = r2 + -5;
                    r2 = r2 >>> 2;
                    r2 = r2 + 1;
                    r2 = r2 << 2;
                    r2 = r3 + r2;
                case 0x5089c:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r8;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508ac;
                        continue;
                    }
                    r2 = r2 + 4;
                case 0x508ac:
                    r3 = r2 - r3;
                    r3 = r3 >> 2;
                    /* Next insn is delay slot */ 
                    pc=0x50910;
                    continue;
                case 0x508bc:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r0;
                case 0x508c0:
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x508cc:
                    r2 = ((r11 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508bc;
                        continue;
                    }
                    r2 = r11 + r0;
                case 0x508dc:
                    r2 = r2 + 4;
                    r5 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r5;
                    r5 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508dc;
                        continue;
                    }
                    r3 = ~(r0 | r11);
                    r3 = r3 + r7;
                    r3 = r3 >>> 2;
                    r3 = r3 + 1;
                    r3 = r3 << 2;
                    r3 = r3 >> 2;
                case 0x50910:
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x508c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50924:
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5089c;
                    continue;
                case 0x50a00:
                    pc=0x50a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50a00() throws ExecutionException { /* 0x50a00 - 0x50c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50a00:
                    r5 = 5 << 16;
                    r2 = 6 << 16;
                    r5 = r5 + 23493;
                    r4 = r0 + 16;
                    r3 = r0 + 48;
                    r2 = r2 + -26316;
                case 0x50a18:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a18;
                        continue;
                    }
                    r5 = 5 << 16;
                    r5 = r5 + 23485;
                    r4 = r0 + 26;
                    r3 = r0 + 97;
                case 0x50a48:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a48;
                        continue;
                    }
                    r5 = 5 << 16;
                    r5 = r5 + 23477;
                    r4 = r0 + 26;
                    r3 = r0 + 65;
                case 0x50a78:
                    r3 = r2 + r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    r4 = r4 & 255;
                    r5 = r5 + 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50a78;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50c00:
                    pc=0x50c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50c00() throws ExecutionException { /* 0x50c00 - 0x50e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50c00:
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r6;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r7;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r31=0x50c44;
                    pc=0x3ce00;
                    run_3ce00(); return;
                case 0x50c44:
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x50c58;
                    pc=0x10ee4;
                    run_10e00(); return;
                case 0x50c58:
                    r9 = 6 << 16;
                    r18 = r2 + r0;
                    r20 = r9 + -26316;
                    r2 = r17 + r2;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                    addr=r20+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51130;
                        run_51000(); return;
                    }
                case 0x50c7c:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r0 + 48;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r23 = r3 + 2;
                    if(r8 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x51430;
                        run_51400(); return;
                    }
                    r3 = r3 + 3;
                    r22 = r0 + r0;
                case 0x50c9c:
                    r23 = r3 + r0;
                    r3 = r3 + 1;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r22 = r22 + 1;
                    if(r8 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x50c9c;
                        continue;
                    }
                case 0x50cb4:
                    r8 = r20 + r8;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x510ac;
                        run_51000(); return;
                    }
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r0 + r0;
                    r2 = r2 + r20;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r30 = r0 + r0;
                case 0x50cdc:
                    r16 = r23 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50d08;
                        continue;
                    }
                case 0x50ce8:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50ce8;
                        continue;
                    }
                case 0x50d08:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r31=0x50d20;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x50d20:
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50da8;
                        continue;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5146c;
                        run_51400(); return;
                    }
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x50d38:
                    r30 = r30 - r16;
                    r30 = r30 << 2;
                case 0x50d40:
                    r3 = r0 + 80;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x50dc0;
                        continue;
                    }
                case 0x50d4c:
                    r3 = r0 + 112;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x50dc0;
                        continue;
                    }
                case 0x50d58:
                    r2 = r16 + r0;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e68;
                        run_50e00(); return;
                    }
                case 0x50d68:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51374;
                        run_51200(); return;
                    }
                    r2 = r0 + 6;
                case 0x50d74:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r29 = r29 + 88;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x50da8:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50d38;
                        continue;
                    }
                    r3 = r0 + 80;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x50d4c;
                        continue;
                    }
                case 0x50dc0:
                    addr=r16+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 43;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x51380;
                        run_51200(); return;
                    }
                    r3 = r0 + 45;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x512fc;
                        run_51200(); return;
                    }
                    r4 = r16 + 1;
                    r6 = r0 + r0;
                case 0x50de4:
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 + -1;
                    r2 = (r2&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50d58;
                        continue;
                    }
                case 0x50e00:
                    pc=0x50e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_50e00() throws ExecutionException { /* 0x50e00 - 0x51000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x50e00:
                    r2 = r4 + 1;
                    r3 = r3 + -16;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x50e30;
                    continue;
                case 0x50e14:
                    r5 = r3 << 1;
                    r3 = r3 << 3;
                    r3 = r5 + r3;
                    r2 = r2 + 1;
                    r3 = r3 + r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r3 + -16;
                case 0x50e30:
                    r4 = r4 + r20;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r5 = r4 + -1;
                    r5 = (r5&0xffffffffL) < (25&0xffffffffL) ? 1 : 0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e14;
                        continue;
                    }
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e58;
                        continue;
                    }
                    r3 = r0 - r3;
                case 0x50e58:
                    r30 = r30 + r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50d68;
                        run_50c00(); return;
                    }
                case 0x50e68:
                    r2 = r16 - r23;
                    r2 = r2 + -1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e94;
                        continue;
                    }
                case 0x50e80:
                    r2 = r2 >> 1;
                    r3 = r2 < 8 ? 1 : 0;
                    r5 = r5 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50e80;
                        continue;
                    }
                case 0x50e94:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x50ea0;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x50ea0:
                    r19 = r2 + 20;
                    r22 = r2 + r0;
                    r2 = ((r23 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r11 = r19 + r0;
                    r8 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50fa0;
                        continue;
                    }
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r14 = r0 + 1;
                    r3 = r0 + r0;
                    r14 = r14 - r18;
                    r12 = r0 + 32;
                    r7 = r16 + -1;
                    if(r6 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x50f2c;
                        continue;
                    }
                case 0x50edc:
                    if(r3 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x51090;
                        run_51000(); return;
                    }
                    r2 = r3 + r0;
                    r3 = r3 + 4;
                case 0x50eec:
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r4 = r20 + r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r6 = r6 & 15;
                    r6 = r6 << (r2&0x1f);
                    r8 = r8 | r6;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50fa0;
                        continue;
                    }
                case 0x50f18:
                    r16 = r7 + r0;
                    addr=r16+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r7 = r16 + -1;
                    if(r6 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x50edc;
                        continue;
                    }
                case 0x50f2c:
                    r15 = r7 + r14;
                    r2 = ((r15 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50edc;
                        continue;
                    }
                    r4 = r15 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r7;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r8;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r11;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r12;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r14;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r15;
                    /* Next insn is delay slot */ 
                    r31=0x50f6c;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x50f6c:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r8 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r11 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r12 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r14 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r15 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50edc;
                        continue;
                    }
                    r7 = r15 + r0;
                    r6 = ((r23 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50f18;
                        continue;
                    }
                case 0x50fa0:
                    r2 = r11 + 4;
                    r2 = r2 - r19;
                    r2 = r2 >> 2;
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r4 = r8 + r0;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    r16 = r2 << 5;
                    /* Next insn is delay slot */ 
                    r31=0x50fc4;
                    pc=0x3e000;
                    run_3e000(); return;
                case 0x50fc4:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = r16 - r2;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r16 < r2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5138c;
                        run_51200(); return;
                    }
                    r3 = r2 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51400;
                        run_51400(); return;
                    }
                    r17 = r0 + r0;
                case 0x50ff0:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                case 0x51000:
                    pc=0x51000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51000() throws ExecutionException { /* 0x51000 - 0x51200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51000:
                    r3 = r3 < r30 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x512d4;
                        run_51200(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r3 = r30 < r2 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51328;
                        run_51200(); return;
                    }
                    r30 = r2 - r30;
                    r3 = r30 < r16 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51140;
                        continue;
                    }
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r4 = r0 + 2;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5151c;
                        run_51400(); return;
                    }
                    r4 = r0 + 3;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x514cc;
                        run_51400(); return;
                    }
                    r4 = r0 + 1;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x51534;
                        run_51400(); return;
                    }
                case 0x51068:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51078;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x51078:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 80;
                    /* Next insn is delay slot */ 
                    pc=0x50d74;
                    run_50c00(); return;
                case 0x51090:
                    writePages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff] = r8;
                    r3 = r0 + 4;
                    r11 = r11 + 4;
                    r8 = r0 + r0;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50eec;
                    run_50e00(); return;
                case 0x510ac:
                    r4 = r23 + r0;
                    r5 = r17 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x510c0;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x510c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51310;
                        run_51200(); return;
                    }
                    r16 = r23 + r18;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 + r20;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5143c;
                        run_51400(); return;
                    }
                    r4 = r0 + 48;
                    r23 = r16 + r0;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x5111c;
                        continue;
                    }
                    r3 = r0 + 48;
                case 0x510fc:
                    r23 = r23 + 1;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x510fc;
                        continue;
                    }
                    r2 = r20 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x5111c:
                    r7 = (r3&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r30 = r16 + r0;
                    r22 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x50cdc;
                    run_50c00(); return;
                case 0x51130:
                    /* Next insn is delay slot */ 
                    r31=0x51138;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x51138:
                    /* Next insn is delay slot */ 
                    pc=0x50c7c;
                    run_50c00(); return;
                case 0x51140:
                    r18 = r30 + -1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514c0;
                        run_51400(); return;
                    }
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x51168;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51164;
                    pc=0x3fe00;
                    run_3fe00(); return;
                case 0x51164:
                    r17 = r2 + r0;
                case 0x51168:
                    r2 = r18 >> 5;
                    r2 = r2 << 2;
                    r2 = r19 + r2;
                    r3 = r0 + 1;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r3 << (r18&0x1f);
                    r2 = r18 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51190;
                        continue;
                    }
                    r17 = r17 | 2;
                case 0x51190:
                    r5 = r30 + r0;
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x511a0;
                    pc=0x50800;
                    run_50800(); return;
                case 0x511a0:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r16 = r16 - r30;
                    r30 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r18 = r0 + 2;
                case 0x511b0:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51358;
                        run_51200(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x51334;
                        run_51200(); return;
                    }
                    r3 = r0 + 3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x51344;
                        run_51200(); return;
                    }
                    r3 = r0 + 1;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x51354;
                        run_51200(); return;
                    }
                    r2 = r17 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51354;
                        run_51200(); return;
                    }
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r2 = r17 | r2;
                case 0x51200:
                    pc=0x51200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51200() throws ExecutionException { /* 0x51200 - 0x51400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51200:
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51354;
                        continue;
                    }
                case 0x5120c:
                    r17 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r3 = r19 + r0;
                    r23 = r17 << 2;
                    r5 = r19 + r23;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x5123c;
                    continue;
                case 0x51228:
                    r3 = r3 + 4;
                    r4 = ((r3 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51574;
                        run_51400(); return;
                    }
                case 0x5123c:
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x51228;
                        continue;
                    }
                    r4 = r4 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r2 = r19 + r0;
                case 0x51258:
                    r3 = r0 + 2;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x515b4;
                        run_51400(); return;
                    }
                    r3 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r17 = r17 < r3 ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x512a8;
                        continue;
                    }
                    r16 = r16 & 31;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51504;
                        run_51400(); return;
                    }
                    r2 = r2 + r23;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x51294;
                    pc=0x3e000;
                    run_3e000(); return;
                case 0x51294:
                    r3 = r0 + 32;
                    r16 = r3 - r16;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51504;
                        run_51400(); return;
                    }
                case 0x512a8:
                    r4 = r22 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x512b8;
                    pc=0x50800;
                    run_50800(); return;
                case 0x512b8:
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r30 = r30 + 1;
                    r2 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    r2 = r2 < r30 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51504;
                        run_51400(); return;
                    }
                case 0x512d4:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x512e4;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x512e4:
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = r0 + 163;
                    /* Next insn is delay slot */ 
                    pc=0x50d74;
                    run_50c00(); return;
                case 0x512fc:
                    r6 = r0 + 1;
                case 0x51300:
                    r4 = r16 + 2;
                    addr=r16+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x50de4;
                    run_50c00(); return;
                case 0x51310:
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r23 + r0;
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x50d40;
                    run_50c00(); return;
                case 0x51328:
                    r18 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x511b0;
                    run_51000(); return;
                case 0x51334:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r4 = r2 - r4;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r4;
                case 0x51344:
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5120c;
                        continue;
                    }
                case 0x51354:
                    r18 = r18 | 16;
                case 0x51358:
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r18 + r0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    pc=0x50d74;
                    run_50c00(); return;
                case 0x51374:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50d74;
                    run_50c00(); return;
                case 0x51380:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51300;
                    continue;
                case 0x5138c:
                    r18 = r2 - r16;
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x513a0;
                    pc=0x3fe00;
                    run_3fe00(); return;
                case 0x513a0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5144c;
                        run_51400(); return;
                    }
                    r2 = r18 + -1;
                    r3 = r2 >> 5;
                    r3 = r3 << 2;
                    r3 = r19 + r3;
                    r4 = r0 + 1;
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 << (r2&0x1f);
                    r3 = r4 & r3;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514b4;
                        run_51400(); return;
                    }
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51510;
                        run_51400(); return;
                    }
                    r4 = r22 + r0;
                    r5 = r18 + -2;
                    /* Next insn is delay slot */ 
                    r31=0x513ec;
                    pc=0x3fe00;
                    run_3fe00(); return;
                case 0x513ec:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51510;
                        run_51400(); return;
                    }
                    r17 = r0 + 3;
                    /* Next insn is delay slot */ 
                    pc=0x51450;
                    run_51400(); return;
                case 0x51400:
                    pc=0x51400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51400() throws ExecutionException { /* 0x51400 - 0x51600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51400:
                    r17 = r16 - r2;
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51418;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x51418:
                    r30 = r30 - r17;
                    r22 = r2 + r0;
                    r19 = r2 + 20;
                    r17 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50ff0;
                    run_50e00(); return;
                case 0x51430:
                    r22 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x50cb4;
                    run_50c00(); return;
                case 0x5143c:
                    r30 = r0 + r0;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x50d40;
                    run_50c00(); return;
                case 0x5144c:
                    r17 = r0 + r0;
                case 0x51450:
                    r4 = r22 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51460;
                    pc=0x50800;
                    run_50800(); return;
                case 0x51460:
                    r30 = r30 + r18;
                    /* Next insn is delay slot */ 
                    pc=0x50ff0;
                    run_50e00(); return;
                case 0x5146c:
                    r30 = r16 + r18;
                    addr=r30+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r30 + r0;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x50d38;
                        run_50c00(); return;
                    }
                case 0x5148c:
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r20 + r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5148c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x50d38;
                    run_50c00(); return;
                case 0x514b4:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x51450;
                    continue;
                case 0x514c0:
                    r17 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x51168;
                    run_51000(); return;
                case 0x514cc:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51068;
                        run_51000(); return;
                    }
                case 0x514dc:
                    r3 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r2;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r22;
                    r2 = r0 + 98;
                    /* Next insn is delay slot */ 
                    pc=0x50d74;
                    run_50c00(); return;
                case 0x51504:
                    r18 = r0 + 33;
                    /* Next insn is delay slot */ 
                    pc=0x51358;
                    run_51200(); return;
                case 0x51510:
                    r17 = r0 + 2;
                    /* Next insn is delay slot */ 
                    pc=0x51450;
                    continue;
                case 0x5151c:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x51068;
                    run_51000(); return;
                case 0x51534:
                    if(r30 != r16) {
                        /* Next insn is delay slot */ 
                        pc=0x51068;
                        run_51000(); return;
                    }
                    r3 = r16 < 2 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x514dc;
                        continue;
                    }
                    r4 = r22 + r0;
                    r5 = r16 + -1;
                    /* Next insn is delay slot */ 
                    r31=0x51558;
                    pc=0x3fe00;
                    run_3fe00(); return;
                case 0x51558:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51068;
                        run_51000(); return;
                    }
                    r3 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x514dc;
                    continue;
                case 0x51574:
                    r2 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x515dc;
                        continue;
                    }
                    r2 = r19 + r0;
                    r3 = r17 + r0;
                case 0x51590:
                    r4 = r3 + 1;
                    r3 = r3 + 4;
                    r3 = r3 << 2;
                    writePages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff] = r4;
                    r3 = r22 + r3;
                    r4 = r0 + 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x51258;
                    run_51200(); return;
                case 0x515b4:
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + -1;
                    if(r3 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x51634;
                        run_51600(); return;
                    }
                    r18 = r0 + 34;
                    /* Next insn is delay slot */ 
                    pc=0x51358;
                    run_51200(); return;
                case 0x515dc:
                    r5 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    r31=0x515f0;
                    pc=0x3d800;
                    run_3d800(); return;
                case 0x515f0:
                    r6 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r5 = r22 + 12;
                    r6 = r6 + 2;
                    r4 = r2 + 12;
                case 0x51600:
                    pc=0x51600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51600() throws ExecutionException { /* 0x51600 - 0x51800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51600:
                    r6 = r6 << 2;
                    r19 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51610;
                    pc=0x2addc;
                    run_2ac00(); return;
                case 0x51610:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x51620;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x51620:
                    r22 = r19 + r0;
                    r3 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r2 = r19 + 20;
                    /* Next insn is delay slot */ 
                    pc=0x51590;
                    run_51400(); return;
                case 0x51634:
                    r3 = r16 >> 5;
                    r3 = r3 << 2;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r16 = r3 << (r16&0x1f);
                    r18 = r16 & r2;
                    r18 = ((r0 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 34;
                    r18 = r2 - r18;
                    /* Next insn is delay slot */ 
                    pc=0x51358;
                    run_51200(); return;
                case 0x51800:
                    pc=0x51800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51800() throws ExecutionException { /* 0x51800 - 0x51a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51800:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r16 = 6 << 16;
                    r16 = r16 + -26316;
                    addr=r16+48;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51ad8;
                        run_51a00(); return;
                    }
                case 0x51828:
                    r24 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r15 = r24 >> 5;
                    r15 = r15 << 2;
                    r24 = r24 & 31;
                    r15 = r6 + r15;
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5184c;
                        continue;
                    }
                    r15 = r15 + 4;
                case 0x5184c:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r0;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r10 = r15 + -4;
                    r12 = r10 + r0;
                    r5 = r10 + r0;
                    r8 = r0 + r0;
                    r14 = r0 + r0;
                    r11 = r0 + r0;
                    r17 = r0 + 8;
                    r25 = r0 + 32;
                    r9 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51934;
                        continue;
                    }
                case 0x51884:
                    r7 = r16 + r2;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a30;
                        run_51a00(); return;
                    }
                    r7 = (r2&0xffffffffL) < (33&0xffffffffL) ? 1 : 0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51aac;
                        run_51a00(); return;
                    }
                    r2 = r14 < r11 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51920;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51910;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51910;
                        continue;
                    }
                    r8 = r17 - r8;
                    r8 = r8 << 2;
                    r18 = r25 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x518e8;
                    continue;
                case 0x518e4:
                    r7 = r3 + r0;
                case 0x518e8:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r13 = r3 << (r18&0x1f);
                    r7 = r7 | r13;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r7;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r7 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x518e4;
                        continue;
                    }
                case 0x51910:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a8c;
                        run_51a00(); return;
                    }
                    r8 = r0 + 8;
                case 0x51920:
                    r3 = r9 + r0;
                case 0x51924:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r9 = r3 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51884;
                        continue;
                    }
                case 0x51934:
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51ab8;
                        run_51a00(); return;
                    }
                case 0x5193c:
                    r2 = ((r5 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x519a4;
                        continue;
                    }
                    r2 = r8 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x519a4;
                        continue;
                    }
                    r2 = r0 + 8;
                    r8 = r2 - r8;
                    r8 = r8 << 2;
                    r9 = r0 + 32;
                    r9 = r9 - r8;
                    r7 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x5197c;
                    continue;
                case 0x51978:
                    r7 = r3 + r0;
                case 0x5197c:
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r4 = r3 << (r9&0x1f);
                    r4 = r7 | r4;
                    r3 = r3 >>> (r8&0x1f);
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = ((r2 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51978;
                        continue;
                    }
                case 0x519a4:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51b00;
                        run_51a00(); return;
                    }
                    r2 = r6 + r0;
                case 0x519b4:
                    r5 = r5 + 4;
                    r3 = readPages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r3;
                    r3 = ((r10 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x519b4;
                        continue;
                    }
                case 0x519d0:
                    r2 = r2 + 4;
                    r3 = ((r10 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x519d0;
                        continue;
                    }
                case 0x519e4:
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                case 0x519ec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a10;
                        run_51a00(); return;
                    }
                case 0x519f4:
                    if(r6 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x51b28;
                        run_51a00(); return;
                    }
                    r10 = r10 + -4;
                case 0x51a00:
                    pc=0x51a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_51a00() throws ExecutionException { /* 0x51a00 - 0x51c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x51a00:
                    r2 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x519f4;
                        run_51800(); return;
                    }
                case 0x51a10:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51a30:
                    r8 = r8 + 1;
                    r2 = r8 < 9 ? 1 : 0;
                    r11 = r11 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51a68;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r2 << 4;
                case 0x51a50:
                    r7 = r7 & 15;
                    r7 = r2 | r7;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r7;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51924;
                    run_51800(); return;
                case 0x51a68:
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x51920;
                        run_51800(); return;
                    }
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r2 = r0 + r0;
                    r5 = r5 + -4;
                    r8 = r0 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x51a50;
                    continue;
                case 0x51a8c:
                    r12 = r5 + -4;
                    writePages[(r5+-4)>>>12][((r5+-4)>>>2)&0x3ff] = r0;
                    r14 = r11 + r0;
                    r5 = r12 + r0;
                    r8 = r0 + r0;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x51924;
                    run_51800(); return;
                case 0x51aac:
                    r7 = r0 + 41;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x51b50;
                        continue;
                    }
                case 0x51ab8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51ad8:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                    /* Next insn is delay slot */ 
                    r31=0x51aec;
                    pc=0x50a00;
                    run_50a00(); return;
                case 0x51aec:
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x51828;
                    run_51800(); return;
                case 0x51b00:
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x519e4;
                        run_51800(); return;
                    }
                    r2 = readPages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff];
                    r24 = r0 - r24;
                    r3 = r0 + -1;
                    r3 = r3 >>> (r24&0x1f);
                    r2 = r3 & r2;
                    writePages[(r15+-4)>>>12][((r15+-4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x519ec;
                    run_51800(); return;
                case 0x51b28:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r2;
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r29 = r29 + 48;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x51b50:
                    r3 = r3 + 2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x5193c;
                        run_51800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x51ab8;
                    continue;
                case 0x51bfc:
                case 0x51c00:
                    pc=0x51c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }

    private static final int[] _data1 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data2 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data3 = decodeData("*[M6s=nn\020\035\014\027\023\035Jt\020\034o\027\033QJm\020\030\004W\031\034\000\000*[N7+A`o9\035\014V!\001ha9\031lW!\001fy9]\014Vi\001@%9I`\000\002Ufa3Y'\"\001\025f -[n\007#%^n9W$\0063%Xe\005\024m\006{Ih 7\\\016FK=\\s\035\002D\002\0015,\011\004B*\007\023%\\t\020\035\r\006)\001le9\034m\026{8@n:[,&+H\024 \020\013-\000H$\022H2[\016\002\001!hh4\\d\007#\025pt\024BD\002\0015^ 7\030-V($\022N0[,R\003QPe\020\020d\006{Uhp:]\004\0063%Xe\005\010\004\002kL@n0[,PH%\034a6Y$\007#!J 0\\mR\003=jt8\035.B\003\031Rl2BD\002\0015h 9^.0H%&e:\010\016FC\024@t0\\Lv+P@s<\\nF+4\024\n&\033mf9\001^p:\032-vsLt\n\020\010\005Rk!Jl8\002!\024C\025Xp\020\n\016FC%f :\031/\007!$\024 \020\013%W#\005dg2]\004\007\033ef\011\004TlW!\001hh2H\016F\013INe:\010\0167KMhe6BD\002\0014Zv2\\N6K=\\\011\004T\016&K9h :\032\014R\003YJr9Z-vq\001\\u6XLW\020(\000\000\000\000\004W\031\001,%9B@\004\033\005\\':\010\rw\003\025\\ 3\032-F)\000Js\020\031Mw\021\001nr4]\r\026s\034t \022\\`\000\001\020`0\000\011\010d0\000X /Wh%\032M>S$VHUz|\000\000\035BG0JQPi9H\014fK1J ;X.2\003\035Jn2\\L\027#\025H 1\036$\007#!J #Q)u\031\001$e9[nW\023\rJ ![mW\003%Xe9\002G0Ql\022D'H\011dzP@E\"\022*B\011\001\002n<H\0146C\005\\g2\\d\007;%Xl\020\030LR\0031^s:\010!#X(v\011\"Y\r\027!\001`r7\\\014W\021\001de9[nW\023\rJ 3\032-F)\001Rn9]\014V\013\020\\\n\035BA \003l\000\000\000\023(Tj=$Y\020\031\014W\033\rdi8\035\r\026{8@h0\\d\006s<@o8\031-fK9N 1\034L\026\033-Jt\020@\000\007h\000\000\000*[M6s=nn\020\031M\026+1H \023I.29\001Rn\020\023(Tj=$Y\020\031\014W\033\rdi8\035\r\026{8\000\000\000\000\011w3\025dl0^$\006sUZb2\\D\002+$@i9H\rw+P@o3\010\016&\0139Ne\020\014\005S\011Hl\000']LW\0231By\020\033NVk\011Jr\020\011-\022\003%f 2\031,fK9Jd\020\035\016vK\rJ\000\000\025\r\006+IJ 6].7!\001De\020\030.B\0031Ja9]\004\006{9J 7]LW\0231By\020\033NVk\011Jr\000\000\000\005+9Vn7]mb\003YBl:Y$\0063=d \023XL\026\033-Du3\031LW\021\034\000\000\004B%g\033\025Nm2[NB\001\011$E!Sj$\"LD\n\005\000\000\000I9Dy:\031$\002+L\024\000\000\002!\022sMJg6Y-g!\000DV&\022*$J\0210%4HA P$\\i6\\\rw\023P@_/UIDJHJi/TjD\nI(_/K\004\005z},L$TDVJ}\030A)U\013uy\025f\n\005\002%g\023\025f \020\014FS((\022.1\036.F)\000\\l7XO\027#\024@(/Wjdb%$%4WiD\nM(_/H\005R\002}>V&\022*\"+%>S*\020*%\"}>%9J! I9de9H\004\003\021Tj\n\004KL'KQJ \027\032\r\026\023ehe\020\n\013uzY\030I)\011-\025z1\002S*\027kr\0014@_/UIDJHJi/TjD\nI(_/I.2H(\024\000\000\000\001\022s%Zp7\\NB\002}>V&\022*\"+%>S*\020*%\"}>,\020\027ku21\022R\022Z+tb\005&T/WdW\030(\000\000\000\002%f\023ehe\020\013MF{\011rt2H\005\002B}>V&\022*\"+%>L TjEz|@-\020\027ku21\022R\022Z+u\032Q\002R*\027kr+L@-\020\014%\022\001<@ \020\010\006#)PR \025H\006\020P$\\b<]\014R\0019Xo1\036.F)\000P(/Wjdb%$%4WiD\nM(_/H\005R\002}>V&\022*\"+%>S*\020*%\"}>%9H\005R\001DR \027\023)t!\000d5\032\n$\002Y\000d\n\000\000\001\022s\011rt2H\004C\001@\024\011\027\030O\027#\024@$#\021A \000\000^/\005\013epJQPi9H\014fK1J ;X.2\003\035Jn2\\L\027#\025H 1\036$\007#!J #Q)u\031\001$e9[nW\023\rJ ![mW\003%Xe9\002Erx(^/\004Q\011r\0029\036T\020\021(DJPB  [O\022\003\rPa7\031lW\031\001ni6\033\004\006\023\024@l7\\nB\010(^/\005\013epJ\025Hi:\010\016\007\023=`e9\010\016&+M^u9\030lR\003\031Rl2H\r\026sMhe0Y\005`Q<^\n\005\000\000\006+ahe9\033D\0073=Rd\020\027iu2\025$L V(\024\"\021$_/VkSX)Jx:\031.&q\001lo4Y\004\005z=,E)\023\010\025JM\022Z\"WkuZtv\n\005\010lF+\031Rn2H\011u2\025$L V+t\n\021\010R\020\n\0146C\005d*\024H\004\002\002}\036V\"TID\ne\002D\"\024Kux(Fd2YM\026s\024@O+\021*$b\0052_)R+$)\000Pu7\034m\026;9Jd\024Wiu2\025$L V*4Ji\n_/BA \000\001\nr9\033n\"\003\rXo9Z-f9\000Js\035\010\004W\030\000\000\000\000\002%f+a`o9\035\004\005z}&T Pi5\032%4E/Wd\003Q\001Bb9[mG+QJ \036H\004B)@hx\005\002@\000I9Jx8\033n'!\001>_'UHU\0221\002Y)R+$*}> \035\010\014\026\023M^l:]\014R\001t@$\022L\006G@(\024\000\000\000\001\022s\025pp7\\NB\002}>B Pi4\022U\014S$VHUz|@:\020\030,'\033=Xu:\031$\003i\000H%\030\r\017\000P(\000\000\000\023,VsT@'\022\\dr\003\021Js1\\M\027\003QRo7\010\r\006\013L@n7H\rw\003\025\\i7\031d\006\023IBc5Y.B\010\000\000\000&Y-g)\000N%9Id\006C\005f \030\010\r\027#\025Zs\020@\000\004k\025\\u\020\011dW\031\034@h0\\d\007#=^ 6X-gI\001Rt2[.2\010\000\000\000$\023j$Ji\036N*\020)@\000\001\032E'\025+t\n\r(I'S@\004\"e\034_)U(%z5\nN*@\000\000\000\001lo4Y\004\002+L@(;\033m\026!$v\n\000\000\000\000\000)Fo7\034nB\003Y^i2\010\004W\031\000z =BA\022C\rPa9\n$VI0@(1Z\014\027\021$Ji\026\002A\022C%\\t\024I-\022a\000Pi7\035\005\022+$X\n\004J\0146C\005d)\024\011-\022\003p@%9J%@P\000\000\000\004I.2a\000Pc4\030.\"I\025f,\020\n\r\026sPR\000\000\000\000\002+LX\n\000\000\000\000\003tv\n\005\000\000\000\000\001 r7Yn&\0134@c7[.\006K1Jd\020\035m\027# @c1MFR\003\005\\d\020\021hTzM\030i1\013@\006\033\014l5\000\000\000\000\002}>V&\022*#\002}\030A)U\013uy\000Z /Wjdb%$0/TjD\nI(_/H\005R\002}>B)Tku\032%4E/W`\006;IF6\032@\000\000\0029^ 4[N\007+P@f4[\014P\000\000\000.4\000\000\002sL\000\000!X-b;P@o8\031-b\003\031Rl2H\004W\031\001Lo9\010\016&+\005Hi7\031g\"\001\025f\000\000\025\r\006+IJ 0\\LR\003U\\c6\033n6+\020@b9\030,6[\025hs\020@\000\000\000\001\032o9\031$\007#!Bn\020\033mf)\001\020E Q\010U\021\001fe1]\r\026{8X 0XMw\023QRn3@\000\0043%Xe:\036.\006)\000N%9Id\006KL@n7]\004\007\033U`p7\\NF+\020@y2]\000\000\001\010\000\000\000\022\014V\013\021Jr\020\011dW\031\034@h0\\d\006s<@o8\031-fK9N 1\034L\026\033-Jt\020@\nVs-\\o;[D\0063%Jl2\010\004r+LN 4[D\006C\025Bd2\\D\0029\025f'\000\000\000\005+9Vn7]mb\003\021^s:\036.\006)\001Rn\020\032\014V\013\021Jr\020\011dW\031\034\000\000*[M6s=nn\020\033-v#\024@i7\010\r\006+\005He9\010\004r+LN\000:[M6s=nn\020\034nG\023UFt:\\LR\003Qrp2H\r\026q\001Pe0Y\014W\021\000N%9I`\000\000\000\022\011\027\034lV;5Jn:\010\004$\"%$E'\025\n%I\010\024\n\000\002%fK5`o9\035\004\005z},L$TF\005zM(A)\025\013uy0@_/UIDJH`_&\020*5\"}>,\020\027kt\022M&_)R+$*}>\n\005\000\000\000\000\000\022.1\036.F)\000Ji\020\017\007B\001P@|\020\011.PP\000\000\000\000\002%f\023ehe\020\010DW\031\010\024\000\000\000\000\000I9de9H\004\002A\025R \026H\004VI$X \022\\a \000\000\000\011\027\030O\027#\024@$\022L\006'@(\022.;[n&!\000`\n\004KNv{IH \030\002A\022s]^r2\010\004W\030(\022.1\036.F)\000`\n\004KNv{IH \022Z$\003ap@9\020\037\004\002+$@<\036\010\006R\003p@%4K\004\002+$@<\036\010\007\002\003p@%4BA\022s\011rt2H\006\000P$\\b<]\014R\001@\024\011\027\030O\027#\024@0\005\002%g;=dd\020\014\001 I9no9\031\004\002+$@<\036\010\007\022\003p@%4H\007Ca\000j >\010\004VI0@%4H\007Ca\000p >\010\004VH(\022.;[n&!\000`\n\005\000\000\000\000\000\022.1\036.F)\000Ji\005\002%g;=dd\020\014\001 \001\021B0\000\002%g;=dd\020\014\001 I9Dy:\031$\002+$\024\011\027\030O\027#\024@%4BA\022s\011rt2H\004VI0@%4K\004\002+$X \022Z%B\001\025R\n\005\002%g;=dd\020\014\001 I9Dy:\031$\002\022A$G\020\031Mw\0235Bt:\031,B\002\035\nO)H\014fK1J +\014%c\001\010\024\n\000\000\000\000\000$\022.9Y,vk\025\\t\020\010HdJ1\nI'\021Ir\020(\024\011\027\032-W\003=dt\020\027ku21\022R\030\027j5\"\005$T/WeB\002}>S*\020*%\"U _)\025)ez|\024\n\004KL'KQJ \031K\004\003\021DX \033\014d\007a\000H8\030\002@\000\000\000\022.4[L6\023%\\ \021\011.2\0210@0\026\010\006c\030(\000\000\000\002%f\023ehe\020\011$R+LX \022I$W\0310@%\022I.0P\000\000\000\000\002%f\023ehe\020\011-\022a\000Ji\026\010\004VH(\022.;[n&!\001>_+\023\011\025\021A>S*\020*%\"}>,\020\027ku21\022R\030\027j5\"\005$T/Wd\002i\000b,\020\027ku\032Q\002R*\025*\005zI*N/Wa P\000\000\000\000\011\006#\000\000\022.1\036.F)\000`,\020\014\005B\001@\024\011\027\030O\027#\024@%4BA \000\000\022.1\036.F)\000D%9HA I9Dy:\031$\003\000(\022.9\031.2\001\000P6\031H\005R\001\025R)\005\002@\000I9Dy:\031$\002\021\025f\"\005\002%f\023ehe\020\014\001 P\000\000M7\\LR\003QPa7\010\rvs\024@M\"S)u\022d@s2XnFK=\\,\020\030,&{Ihi7\031`\000\002U\\k7\033nvq\001fe1]\r\026{8@'\022\\dp\000\000\000\000\026K-\006+1`\000\000\013%W#\005dg2]\000\000\000\000\000-\026]LW\023MRo7\000\000\000\003Mha1Zn6KiJ\000\000\000\rw3\025dl0^.6KiJ\0007]LW\0231By7\035-W\030\001Da1Zl'+\031Le9\000\000\006\0139r\000\032\014\rvs1r\000\000\016\006\006{9Xy\000\000\01431Q^n6\036 \007\033\025b\000)Q*\020\003YXi9\000\000\000\000\001,L$T@\000\000\000\000p9\031`\005\002I\016\000:\\n \002U&R\000\030.W#!^r\000\000\r\026s\031^\000\000\000\000\006#\005he\000\000\000\000\003\021^s:\036.\006(\001Zo2\031 \000\000\000\000s:\034NV\033Qjr2@\000\000\003%Fo7\000\000\000\000\001\002P(\023\011\024\032\005(I'S@\004\nU(O/Q+\004*\014\000\000\000\021\010U\032->A!P`\000\000\000\000A)ThTj\011\030Y\000\000\000\000\002\021\022S%WhD*Y\022C\"@\n\005\022%\034T\"T@\005\032e&T\"S \000\003=Lf\000\033Mp\000\001^n\000\000\017\026+L\0001\000\000\000\004B\025\002D\"T@\000\002%\006O'\000\000\000\000\001\010I S\011t8\000\000M\"S)u\022d\000\000\000\000&p@\000\0024\020\000\000\023\034@\000\001\031d\000\000\011\\0\000\000NR@\000\004t|\000\000'\022@\000\0028L\000\000\023?\000\000\001\034y\000\000\011g\030\000\002K$\000\000\000\000\000\000\000\"@\000\000\n-\024\000\000\000\000\004\000\001\011\000\000\000)4h\000\000\000\000\000\000\004,\000\177\177\177x\000\000\003\000\000\0000\000\000\006\000\000\000`\000\000\014\000\000\001@\000\000\030\000\000\003\000\000\0000\000\000\006\000\000\000`\000\000\014\000\000\001@\000\000\030\000\000\003\000\000\0000\000\000\006\000\000\000`\000\000\017\177\177\177\000\000\000\000\000\000\000\000\000\001 \000\000\000\016\000\000\000\0010\000\000\000\021\000\000\000\0018\000\000\000\016@\000\000\001\014\000\000\000\011 \000\000\000R\000\000\000\005P\000\000\0003\000\000\000\003H\000\000\000\036\000\000\000\002\004\000\000\000\020`\000\000\001\024\000\000\000\011p\000\000\000R\000\000\000\0050\000\000\000-\000\000\000\002|\000\000\000\030`\000\000\001P\000\000\000\rP\000\000\000r\000\000\000\0078\000\000\000<@\000\000\003p\000\000\000 \000\000\000\002\010\000\000\000\021\000\000\000\001\016\000\000\000\011 \000\000\000M\000\000\000\004|\000\000\000)\000\000\000\002R\000\000\000\025P\000\000\0011\000\000\000\0130\000\000\000^\000\000\000\005x\000\000\0000@\000\000\003\020\000\000\000\031@\000\000\001T\000\000\000\rP\000\000\000p\000\000\000\007\024\000\000\000:`\000\000\003`\000\000\000\036P\000\000\001y\000\000\000\017p\000\000\001\002\000\000\000\0100\000\000\000D@\000\000\0040\000\000\000#`\000\000\002!\000\000\000\022H\000\000\001\026\000\000\000\011H\000\000\000N@\000\000\004|\000\000\000(0\000\000\002H\000\000\000\024h\000\000\001)\000\000\000\n\\\000\000\000V@\000\000\005>\000\000\000,@\000\000\002f\000\000\000\026@\000\000\0016@\000\000\013<\000\000\000]`\000\000\005x\000\000\0000 \000\000\003\007\000\000\000\030`\000\000\001G@\000\000\014L\000\000\000e@\000\000\0066\000\000\0004\020\000\000\003)\000\000\000\032x\000\000\001Z\000\000\000\rh\000\000\000o@\000\000\007\000\000\000\0008@\000\000\003J\000\000\000\035\020\000\000\001nI.3Q\000\000\000\000\000\0106\0139\\o:\010\rw\003\025\\ \021\011.2\021h@%9@\000\000\000\001*n5[Mw;8@o8\035\r\026{8t \022\\`\000\002=`t4[mb\003IJq:Z.&+L@a7\010\014\027\023\035jm2[NCQ\000Js\000\022-g3\005Xi2\010\014\027\023\035jm2[NB\003\031^r\020\011.3Q\001@%9I`\000\000\001\022n;\030-FK\020@d2YM\026s%hi7[G\"\003\000Js\023@\000\000\000\001(a9\031lW!\000|=\020\014\004\0021\030@T0\\Lv+P@<\020\025\010u\"}\006O*SJ@\000\000\000c7[-V{8^t0\\Lv+P\\c\000\033Mvs\024\000\000\000\000\000\000\000\000\000\000\000\000\000\020\010\000\000\000\000\001'\016C5^d:[\014P\000\000\000\000\000\000\000\000\000\000\002\002\000\000\000\000\000\024qh0]\014\027\023$\000\000\000\000\000\000\000\000\000\000\000\000 \020\000\000\000\000\002M}\006\013QBr4M&#\001@\000\000\000\000\000\000\000\004\002\000\000\000\000\000)_Pa:\030.&KaX\000\000\000\000\000\000\000\000\000\000@ \000\000\000\000\005\033z\016fK\014d0\000\000\000\000\000\000\000\000\000\000\000\000\010\004\000\000\000\000\000S/!F1\033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\000\000\n5t\030fc \000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\010\000\000\000\000\001&^C\014b2\034\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\024kh8\033\016W\031P\000\000\000\000\000\000\000\000\000\000\000\000 \020\000\000\000\000\002M=\006\033\011Z5\030L\000\000\000\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000)WPc1\033&c\011@\000\000\000\000\000\000\000\000\000\000\000@ \000\000\000\000\005\032z\rw\033%F18\000\000\000\000\000\000\000\000\000\000\000\010\004\000\000\000\000\000S7!`e:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\000\000\n5t\030L&\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\010\000\000\000\000\001'\016C\005`p6\031& \000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\024qh0\\\016\006c\024de7\032\000\000\000\000\000\000\000\001\000\020\000\000\000\000\002N\035\006;\025^s\026Xl&h\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000)cPg2[n2k\005`p6\031 \000\000\000\000\000\002\000 \000\000\000\000\005\034:\rG+9Rx\000\000\000\000\000\000\000\000\000\000\000\000\010\010\000\000\000\000\000SG!Bt6[n0\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\000\000\n8t\033LW\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\010\000\000\000\000\001'\016CMjp2\\NfKMRo7\000\000\000\000\000\006\001\000\000\000\000\000\024qh6\036-g@\000\000\000\000\000\000\000\000\000\000\000\000\000`\020\000\000\000\000\002N\035\007\033%Z6\032L\006 \000\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000)cPs4[&c+\014`2\000\000\000\000\000\000\000\000\002\000 \000\000\000\000\005\034:\016\006\033\024\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\004\000\000\000\000\000SG!Na6X.F(\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\000\000\n8t\030fc(\000\000\000\000\000\000\000\000\000\000\000\000\000\001\020\010\000\000\000\000\001&^C\005`p6\031& \000\000\000\000\000\000\000\000\000\000\036a8\034\rF)IJn4\000\000\000\000\000\000\000\010\030.F\013IR\000\000\000\000\000\000\000\000\000\000\000\000&\013QBr4M&#\001@\000\000\000\000\000\000\000\rBt0\\M\027C0\000\000\000\000\000\000\000\000\000\0040]\rV{L\000\000\000\000\000\000\000\000\000\000\000\005\014&\023\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000s\014b2\034\000\000\000\000\000\000\000\000\000\000\000\000\000\020c\030M@\000\000\000\000\000\000\000\000\000\000\000\000\000\003\030fc \000\000\000\000\000\000\000\000\000\000\000\000\000\000v\031Xj\000\000\000\000\000\000\000\000\000\000\000\000\000\000qFb6M&\023\000\000\000\000\000\000\000\000\000\000\000\n1XMS1D`\000\000\000\000\000\000\000\000\000\000\002lv\0135Bt2@\000\000\000\000\000\000\000\000\000\001[\035Jo9@\000\000\000\000\000\000\000\000\000\000\000\000\"g2[n2k\005`p6\031 \000\000\000\000\000\011\031lV{LZc1\033 \000\000\000\000\000\000\000\002\026cU\\i<\000\000\000\000\000\000\000\000\000\000\000\000MXy7\036\000\000\000\000\000\000\000\000\000\000\000\000\000\0276[lG+1J\000\000\000\000\000\000\000\000\000\000\000-f+L\000\000\000\000\000\000\000\000\000\000\000\000\000\001+9^n2@\000\000\000\000\000\000\000\000\000\000\000\000\000o9Z,3\013@\000\000\000\000\000\000\000\000\000\000\006\034\0146(\000\000\000\000\000\000\000\000\000\000\000\000\000\003'\003\025h\000\000\000\000\000\000\000\000\000\000\000\000\000\0005`l:\\f@\000\000\000\000\000\000\000\000\000\000\000\0119Z-S1T`2\000\000\000\000\000\000\000\000\000\006\0166K4l51L\006 \000\000\000\000\000\000\000\001KMjp2\\NfKMRo7\000\000\000\000\000,v4Xf#\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\020\020\014\010\005\003\001b@H4#\023\005\003Aq\000,$\023\004\005\"a8`2\032\rG\003Qp|@!\021\010dB)\030N(\024JE2a4\\/\030\014&#\031Pj6\033N\007\023Qlx=\037\017h\014\016\013\007DbqX|F'\025Kf39l~C#Riu\032]6_1Ym\026wujzI- PH4\"\025\014G$\022)$Z1\032N'T\n\025\022M(U+\025k\005Jjg]Ul;x\004\006\005\003B!0h<\"\023\nEc\021Xt>!\021I\003\022I,Z/\030LfS9dv=\037P(4*\035\022K&Sj\025\032U.Y-W+v\013\rJg4ZmV{Efu;^/7k{\001Bb1Y\014V3\035Pi5\032mFk9^p8\\N7#Ulw<\036/'[qz~?x\034\036\027\017Ies9}\016O+Wlv{]\177\007Gesz=>o?csz}\177\037_w|\000\001\001\000`@(\030\016\010\004BA0`4\034\017\010\004\"!\030P*\026\013F\003\021Pl8\035\017\007d\002\011\010F$\022IDrA$T+\026\013%by@b2\031M\006S1\\p9\035\016gCix~@ PH4\"\025\014G$\022)$Z1\032N'T\n\025\022M(U+\025k\005Ji6\\.WKv\003\005Dc2\031,f;!Rj5[\rVs=`q9\034nG+Ynx<^O7kq~~@ 0(\034\022\013\006Cb\021\030T.\031\rG#r\011\014J'\024JeRyDf5\033N'3i}\002C\"Qi\024Z5\036Q)U*uJm:_0XlV;%Vm7\\.7+]r{>_p\030\034\026\017\011Ec1y\014N+\027LfsY}\006G%Sj5:m>c3Zmw\033]v\177Aaq8|N/\033Ohtz]>g7]ox<>/\037Skv{~\037\037Woy}\177?`\000\010\010\006\004\002A_PC~6\013>C!`x@\"\022\011E\002Q0\\0\031\r\006cAhx> \020HD2!\024L'\024\n%\"Y0Z.\027L\006\023\021Lh5\033\rg\003Ihv<\036OGt\002\005\004C\"\021(d:!\022J%S\011Tr= Q)\024jE*Y.X,VK5bu<_0\030,&\033\021Jf3Z\r\026S-Xm7\033n\007\013Ift:]NwCet{>\037/g|\002\003\002Aa\020X4\036\021\011E\"qHl:\037\020HdR9$V-\027L&3)\\r;\036Oh\024\032\025\016I%S)u\nM*W,VkU{\005Fe3Z-6k=bs:]o\027[u\177\001Aa0xL.\033\017HdrY<f7\035Oh4:-\036S+Vkv\033\035Vo9]o7|\016\017\013Gdry\\~G'Ukv;=n\177Ccry}\036_7_qy}>\177Oo{~\000\000@@0 \024\014\007\004\002! X0\032\016\007D\002\021\020L(\025\013\005c\001Hh6\034\016GCr\001\004D#\022\011$b9 R*\025K\005Rq<`1\031\014fC)Xn8\034NG3at|? \020($\032\021\nF#R\011\024R-\030M'\023j\005\nI&T*UJuBe4[.\027+e{\001Bb1Y\014V3\035Pi5\032mFk9^p8\\N7#Ulw<\036/'[qz~?`\020\030\024\016\011\005C!q\010L*\027\014FcQy\004F%\023J%2i<b3\032Mg\023Yt~A!Q(tJ-\032O(TjU:e6]/X,6+\035Rk6[n\027\033Uny=_/x\014\016\013\007DbqX|F'\025Kf39l~C#Riu\032]6_1Ym6{Mn{?`px\\>'\027Mgt:=._3[nw|\036\037\027Oiu{=\177\017Okw|~\177_r+T\\%:@\000\000\002=jt\020\033lb\0035Jm7\\O\022\0014@r2\\.V+Mhe2\010\014&c=Fk\020\034m\027S\024@=\020\011-G(\000\000O:]\004\006{\030@m2[-w\023d@i7\010\016&+\005Xl7Xd\002i\001de8],W\033QJd\020\030MF{\rV 9Z/&)\000z \022[\016P\000\000\0000\030LF3!Tl7\034\016(\024\022\r\010E#\000\000\000\000\000`1\031\014fC)Xn8\034X,&\033\021Jf\000\000\000\000\002%\\v0[\r\026!\001hy8\031$\007\033%te\020\032-b\0029Jx:\025*f\0130\000\000\000\030mvk5^n\027^\0167\003IRn:\031Ef\030\000\000\000$[Nf\0131Rd\020\035\017\027\003\024@s4^LR\003%\\ '\031/\007\"%,a6\000\000\000\002M t9\010\004\023i\000`\000\000\000\n2\001\004z \030\000\000\004K9la6\032,B\003MRz2H\rV{\021Rf4Y.\"\003\031^r\020\011-b\003\031^r6X.B\003M`e1H\r\026q\001pv9[N\007\023%\\t3\000\000\004K9la6\032,B\003\031^r6X.B\003M`e1Z,fK\025d 4[D\007CYfn8\034M\026sQL\000\000\024LW\031\000|=\020\014\004\0021\030@(:[N6K\035\\e2\n$\002BIJs\025L%\022\001p@B:YJ6KiJ\000\000\000\000\000\000\006!8\000\0002\004`\000\003\020\026\000\000\031\0010\000\001H\033\000\000\014@X\000\000d\022@\000\006)P\000\0002N \000\003\024r\000\000\031%p\000\001J9\000\000\014SH\000\000e\034@\000\006)d\000\0002N \000\003\024r\000\000\031'\020\000\001J*\000\000\014SH\000\000e\022@\000\006)d\000\0002N \000\003\0236\000\000\03130\000\001J\024\000\000\014Q \000\000e\n\000\000\006(P\000\0002E\000\000\003\024(\000\000\031\"@\000\001J\024\000\000\014Q \000\000e\n\000\000\006(P\000\0002E\000\000\003\024(\000\000\031\"@\000\001J\024\000\000\014Q \000\000e\n\000\000\006(P\000\0002E\000\000\003\024(\000\000\031\"@\000\001J\024\000\000\014Q \000\000e\n\000\000\006(P\000\0002E\000\000\003\024(\000\000\0312\020\000\001J\024\000\000\014XP\000\000e\n\000\000\006,\000\000\0002E\000\000\003\024(\000\000\031\"@\000\001J\024\000\000\014Q \000\000e\n\000\000\006(P\000\0002^ \000\003\024(\000\000\031\"@\000\001J\024\000\000\014Q \000\000e\n\000\000\006*l\000\0002h@\000\003\030z\000\000\031GP\000\001L=\000\000\014ch\000\000f\036@\000\0061t\000\0003\017 \000\003\030z\000\000\031GP\000\001L=\000\000\014b@\000\000et\000\000\0061t\000\0003\017 \000\003\030z\000\000\031GP\000\001Kh\000\000\014ch\000\000f\036@\000\0061t\000\0002v \000\003\027:\000\000\031D0\000\001L\007\000\000\014ch\000\000f\036@\000\006/d\000\0003\017 \000\003\027h\000\000\031GP\000\001L=\000\000\014Z \000\000fc@\000\0065t\000\0003,`\000\003\032R\000\000\031S@\000\001LX\000\000\014j0\000\000ft@\000\0067\004\000\0003\036`\000\003\031v\000\000\031Z\000\000\001MZ\000\000\014gX%9I.2a\001Li6\031$\006\001\025f'\026\010\rFK9J \022] \000\000\000\000P9\033lw\023\005Z 0XMw\023QJd\035\010\000\000\000\001\006h2Xm2\003\031Bi6\031,CQ\000\000\000(\034LV\033=\\d4]\r\026{8@v4[mF\013QJd\035\010\000\004K9he9\033L\026a\001Jr9\033n#Q\000\000\000\000\000\000\000\010\010\004\003\001@`0 \020\010\004\002\001\000@ \024\n\005\002A P(\024\n\005\002A P(\024\n\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8 \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\000\000\000\003p\000\000\000\034\000\000\000\001x\000\000\000\017\000\000\000\000|\000\000\000\007@\000\000\000>\000\000\000\003p\000\000\000\036\000\000\000\001x\000\000\000\017\000\000\000\000|\000\000\000\007`\000\000\000:\000\000\000\003p\000\000\000\036\000\000\000\001x\000\000\000\017\000\000\000\000|\000\000\000\007`\000\000\000<\000\000\000\003p\000\000\000\036\000\000\000\001zMjc1Y.7\030\001\034o:\010\rw;9Jr\000\000\000\004s<@s:Xm\002\003\031Rl2H\rw\021\001Hi9\031,7#=dy\000\000\000\004s<@s:Xm\002\003Ado1Y.7\030\001\022n:\031.'\023U`t2Y\004\007\033eft2[$\006\033\005Xl\000\022%ty\001Jr9\033n \000\000\000N7H\0167+\rP 2\031.fK\rJ 7\\D\006\013\021Hr2\\n0\000\000\000A9\031d\006c%ft\020\035\rvy\001Xo7\031`\000\000\001\nx2Xd\0063=dm0]\004\006+Ido9\000\000\000\002M^c5Y.B\003\005Xr2X,GI\001Fo7\033LV\033QJd\000\000\000\000\002\011Bd\020\031M\026c\024@n:[,&+H\000N7H\0146C%Xd9\031-`\002\021Js:\032-f\013QRo7\010\014\026#\021de9\\d\007\023\025bu4\\LV \000\000\000\000\023Mr\0035^r2H\016\007\023=Fe9\\lW\030\000\000\000'\033nB\003\025\\o:Ym\002\003M`a1Y \000\000\000\000P2\\MVKMfi7[D\006#\025\\i2Y\000\000\000\001\004a2\010\014\026#\021de9\\`\004#\025li1Y$\006{H@r2\\mw+IFe\020\030NW\033d\000F4[\014R\003\025pi9]\0160\002\rdo9\\eV#\025li1Y$\006c%\\k\000\000\000\004s<@s:Xm\002\003\021Jv4XlP\000\001\034o:\010\014\022\003\021Rr2XnF{Ir\000$\033n7!\001Rs\020\031\rw;8\000\000\000\000\0106{9\\e1]\r\026{8@a6\034LV\013\021r 4[D\007\003I^g9\031.7\030\000\000I9H\014\022\003\021Rr2XnF{Ir\000\000\022-g3\005Xi2\010\014\027\023\035jm2[N@\000\000\000\000'\031.G;=dk\020\032-g#\025df0XlR\003%f 7\033nB\003\r^n3\032,w+IJd\000\025\rvy\001Za7\036$\006{AJn\020\031M\026c\025f 4[D\007\033eft2[ \000\000\001(o7H\rV\0139r 7\\\014Vq\001Li6\031.0\0029^t\020\030$\006\033!Br0XnF+H@d2]M\026\033\024\000\000*\031/\007!\001Li6\031$\006\023Ufy\000\000\010fK1J :\033mr\0031Br3Y \000\002!^s:\010\r\027\031\001jn9\031,\026\033!Bb6\031 \004s<@s8\030,6)\001Xe3\035\004\006{8@d2]M\026\033\024\000N7]\004\007\033U`p7\\NF+\020\000\000\000\022-Fc\025Na6\010\0166+\025V\000\000\000\000\005\023\025Bd\026[mfcd@f4[\014R\003Mrs:\031-P\000\000\000T7[d\006k\005\\y\020\033\r\026s-f\000\000\020N&{-Jn\020\034\r\027\003\024\000M0]\r\002\003\005dg:[,VsP\000\000\000\024LW\033UXt\020\035\rvy\001Xa9\031lP\000\000\000\000'\033d\006k\025fs0YlR\003=L 2\031.6KIJd\020\035\017\027\003\024\000\000$Y\014VsQRf4Y.\"\003IJm7]LV \000\000D2X,Fc=Fk\000\000\000\000\0029Jt;[n&Y\001Rs\020\035-g\023\025Bc4\030,&c\024\000\000'\033d\006c=Fk\000\023Mw!\001B 9]\016&+\005Z\000\000\000\000\005\033Qde0[$\006K=Ft6\010\016FK5Jo:]\000\000\000\000\000N7H\0167#IJa6H\016&+M^u9\030lW\030\001,i9\035\016V\0130@c4\\L7+%h 4\\d\006;=\\e\000\024\016&{Q^c7[\004\006+Ido9\000\000\005+9Vn7]mb\003Ado:\033l6{0\000\000\000\000\011W+1hi4\033n\002\003\005ht2[.\007#\025H\000\000\020L\026!\001Ze9\\l\026;\024\000F:[L7#%^n\020\033Mw!\001Rm8\033\014Vk\025\\t2Y\000\000\000\000\000D4\\LV\033Q^r<H\rf{P@e6\\\016GH\001\014i6\031$\006{H@p0]\r\002\0039Bm2H\016F{<@l7[Lp\000\001(o7H\rV\0139r 9^-V\023=Xi1H\rFK9Vs\000\023Mr\003\011jf3\031.\"\003M`a1Y$\006\013YBi6\030,&c\024\000\000\000\020,F#IJs9H\014f\0135Rl<H\rf{P@s:\\\016\006{Ihe2\010\014'I\001`r7]\rv\033=X 3\030-VK1r\000(\034Mw#=Fo6\010\016w\023=\\g\020\035\017\027\003\024@f7\\D\007\033=Fk2]\000\000\002M^c5Y.B\003=`e9\030.FK=\\ 7[D\006s=\\-9[l6[\025h\000\000\024\016&{Q^c7[\004\006s=h 0]L\026K1Bb6\031 \000\002\r^n7\031,7#%^n\020\034LV3Ufe2\000\000\004\013\021Hr2\\n2\003\005Xr2X,GI\001Rn\020\035.6(\000\000S7YNG;\005de\020\030l\027+MJd\020\030mvs9Jc:\032-vq\001Bb7\\N@\000\000\000\000)[l6[\025h 4\\d\006s=h 1[mfs\025Ft2Y\000\005\033=Fk2]\004\006KL@a6\034LV\013\021r 1[mfs\025Ft2Y\000\004{AJr0]\r\026{8@c0[L6+1Jd\000\000\n7#\005he\020\033Mw!\001de1[nf+IBb6\031 \000\000\001 r2]M\026{Uf 7]mf+H@d4Y,@\002=`e9\030.FK=\\ 7\033nB\003Mjp8\033n'#\025H 7[D\007\033=Fk2]\000\000\000\001\032e9\\l\026;\024@t7[d\006c=\\g\000\000\000\000\002\r^n7\031,7#%^n\020\035\r\026k\025H 7].@\000\000\000\000\000\000J\004`\000\004P\032\000\000%&0\000\002*/\000\000\022RX\000\001\025\023@\000\011)\014\000\000JG`\000\004T6\000\000%\"p\000\002*\023\000\000\022Px\000\001\025\005@\000\011(\034\000\000J@`\000\004Tn\000\000%\037p\000\002){\000\000\022O8\000\001\024y@\000\011'<\000\000J:`\000\004SN\000\000%\0340\000\002)_\000\000\022MX\000\001\024k@\000\011&L\000\000J3`\000\004S\026\000\000%\030p\000\002)C\000\000\022Kx\000\001\024]@\000\011%\\\000\000J,`\000\004R^\000\000%&p\000\002*7\000\000\022S8\000\001\025\033@\000\011)\\\000\000JM`\000\004Tn\000\000%&p\000\002)+\000\000\022J8\000\001\025\033@\000\011)\\\000\000JM`\000\004Tn\000\000%&p\000\002*7\000\000\022S8\000\001\025\033@\000\011)\\\000\000JM`\000\004Tn\000\000%&p\000\002*7\000\000\022J\030\000\001\025\033@\000\011$|\000\000J&`\000\004Tn\000\000%&p\000\002*7\000\000\022I8\000\001\025\033@\000\011)\\\000\000JM`\000\004R&\000\000%&p\000\002*7\000\000\022Hx\000\001\025\033@\000\011)\\\000\000J\"`\000\004Tn\000\000%&p\000\002*7\000\000\022S8\000\001\025\033@\000\011)\\\000\000JM`\000\004Tn\000\000%&p\000\002*7\000\000\022H8\000\001\025\033@\000\011$\014\000\000J\037`\000\004Qv\000\000%&p\000\002*7\000\000\022G8\000\001\025\033@\000\011)\\\000\000JM`\000\004Tn\000\000%&p\000\002*7\000\000\022S8\000\001\025\033@\000\011)\\\000\000J\034`\000\004Q^\000\000%\r0\000\002(g\000\000\022F\030\000\001\025\033@\000\011\"|\000\000J\026`\000\004Q.\000\000%\n0\000\002(O\000\000\022DX\000\001\024#@\000\011\"\014\000\000J\017`\000\004Pv\000\000%\006p\000\002(3\000\000\022Bx\000\001\025\033@\000\011)\\\000\000JM`\000\004PV\000\000%\004p\000\002*7\000\000\022S8\000\001\025\033@\000\011)\\\000\000JM`\000\004PF\000\000%&p\000\002*7\000\000\022S8\000\001\025\033@\000\011)\\\000\000J\007`\000\004P6\000\000%\002q\016M*\000\011\024r\030\000i7\031@\004r\005\034\0007\030-`\001!\\u6\033\005\020\000\000\000\002A,\000\000\024  \000\001\"\002\000\000\n\005H\000\000Q\001\000\000\005\010\010\000\000(@@\000\002D\004\000\000\024  \000\001\"\002\000\000\011x(\000\000O`\000\000\005\010\010\000\000'b \000\002A6\000\000\024  \000\001!\024@\000\n\010\030\000\000PA@\000\005\004\014\000\000( `\000\002B\006\000\000\024\0200\000\001!\003\000\000\n\010\030\000\000PA@\000\005\010\010\000\000(@@\000\002D\004\000\000\024  \000\001\"\002\000\000\n\020\020\000\000Q\001\000\000\005\010\010\000\000(@@\000\002D\004\000\000\024\032@\000\001!!\000\000\n\020\020\000\000PP@\000\005\010\010\000\000(@@\000\002D\004\000\000\024  \000\001!;\000\000\n\020\020\000\000Q\001\000\000\005\003\034\000\000(@@\000\002D\004\000\000\024  \000\001\"\002\000\000\n\020\020\000\000P=`\000\005\010\010\000\000(@@\000\002Bz\000\000\024  \000\001\"\002\000\000\n\020\020\000\000Q\001\000\000\005\010\010\000\000(@@\000\002D\004\000\000\024  \000\001\"\002\000\000\n\020\020\000\000Pe@\000\005\004(\000\000(( \000\002BB\000\000\024\024\020\000\001!\022@\000\n\010P\000\000Q\001\000\000\005\010\010\000\000'``\000\002D\004\000\000\024\034P\000\001!o\000\000\n\0114\000\000OA@\000\005\010\010\000\000'p@\000\002D\004\000\000\024\036x\000\001\"\002\000\000\n\020\020\000\000Pn\001@`0\030\014\006\003\001@`0\030\014\006\003\001@` \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\025h\025\0229\022N#ND\007\003\005hh1[mf1h@U7\032mf{]\\ \021\033L\026k\024D:\020\011,@P\000\000W TIdJ9\016:\020\034o\027\033\rhl\035\010\nVs-\\o;[D\006s\005Ze\035\010\004V (\000\000\027Y\014W1=Fo7\034mvc\024\000\000\000\000\004W)8Ju\027\011.Rq\025j\000*[M6s=nn\020\021.'\023=d\000\000\000\004W\031h@%9B@\002{\025hc\027Yn&{U`\000\000\011+5qi::\022VkcRtt%4\035 \002{\025hc\027\\\014\027\033Mnd\000\011+5qi::\022VkcRtt%2\016DV!hJ[/\016KSQ\0256^\035\027'\"+L\024\000\000\000\nU\032\025$\000\000\000\000\002x\000\000\000\027\000\000\000\001=He;\013mg+1X\000\000\000\011fy\001\nr9\033n \000\000\000\000*[M6s=nn\020\032\rw\033P\000\000\000\000\011\006{Mh 7\030-V)\001Xo7ZnW\001\001La4[\016W\023\024\000\000\000\000\nVs-\\o;[D\007\033\025dv2\\D\006+Ido9\000\000\000\000\001\034o\020\030,F#IJs9H\014\027\033M^c4X.F+\020@w4]\r\002\0039Bm2@\000\000*( \000\002RC@\000\025\024,\000\001)$@\000\nJ0\000\004\002\001\000@ \020\010\004\002\001 P(\024\n\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000A\010\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\001\000@ \020\010\004\002\001\000@ @ \020\010\004\002\001\002\005\002A P(\020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@\"\001\000@ \020\010\020H$\022\011\004B\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\020\010\004\002\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@ \020\010\004\002\001\000@(\024\n\005\002A\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\"\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\000 \020\010\004\002\001\000@ \020\010\020\010\004\002\001\000@ A P(\024\nf3%\\i:\036 \000\000\000\000N0S@\005\002=&I,\000\000\000\000\000\000\000\002@\000\000\000d\000\000\000\037 \000\000\000\000<N4V)>b\023<\034R>b\036VQ'\031LTP\177u\011tSO$U]h\021OF%sPV \014(2+\rt\032\r\003C<M|\010\000\001\r\023\\-6P+8.M\034\023`>I\177su- NtGd`\035\031\035\"T~u~s_O\007\177\000\000\000\000\000\000\000\004\001\020\000\000\000\000\000\000\002\0012\000\000\000\000\000\000\001\001\017 \000\000\000\000\000\000@ab\000\000\000\000\000\000 >\r \000\000\000\000\000\020%h$\000\000\000\000\000\010\026\030K \000\000\000\000\004\014_/\004\000\000\000\000\002\007\033M2@\000\000\000\001\004\002P\027d\000\000\000\000B\033R\016n@\000\000\000!\033#)%\010\000\000\000\020T#\004sJ@\000\000\010-5s\010\036H\000\000\004\0301Wu\023\r\000\000\002\r\003C<M|\010\000\001\006v\032\025p]E\000\000CUp-V:;\020\000!x+\016#\002\"=\000\021\002Zxuq5F\020\010DXkIVq;j\004$\003aO\003\023:Y\022\022j-\0011|\024WY\011j<\020o\035Lvh\000\002\013v\000\000\020j,\000\001\006R`\000\0102.\000\000C)0\000\004\032K\000\000!TX\000\002\r%@\000\020j,\000\001\006R`\000\010)j\000\000BU \000\004\032K\000\000!'h\000\002\013y\000\000\020j,\000\001\006\002@\000\0100\034\000\000C\001`\000\004\030\016\000\000!@p\000\002\014\007\000\000\020`8\000\001\006\003@\000\0100\034\000\000C\001`\000\004\032K\000\000!TX\000\002\r%@\000\020j,\000\001\006R`\000\0105\026\000\000C)0\000\004\032K\000\000!TX\000\002\r%@\000\020f\020\000\001\006; \000\0105\026\000\000C\035P\000\004\032K\000\000!TX\000\002\r%@\000\020j,\000\001\006H \000\0105\026\000\000C)0\000\004\030\034\000\000!TX\000\002\r%@\000\020j,\000\001\006R`\000\0105\026\000\000C\010P\000\004\032K\000\000!TX\000\002\014*\000\000\020j,\000\001\006R`\000\0105\026\000\000C)0\000\004\032K\000\000!TX\000\002\r%@\000\020j,\000\001\006R`\000\0105\026\000\000C\020P\000\004\030p\000\000!Nh\000\002\014v@\000\020g4\000\001\006  \000\0101`\000\000C)0\000\004\032K\000\000!'\010\000\002\r%@\000\020dl\000\001\006M@\000\0102^\000\000BN\020\000\004\032K\000\000!*p\000\002\r%@\000\020i\024\000\001\006R`\000\0105\026\000\000C\0330`0\030\014\006\003\001@`0\030\014\006\003\001@`0\020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\014R+1H\000\000\000\000\000\000\021\0370\000\001\011W`\000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\021\032|\000\001\011W`\000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\021\032|\000\001\011W`\000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\021\032|\000\001\011W`\000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\021\032|\000\001\011W`\000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\021\032|\000\001\011W`\000\010Nv\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\0213\\\000\001\011W`\000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\0268\000\000\0213@\000\001\013\034\000\000\010Y`\000\000EN\000\000\004,p\000\000\"g\000\000\002\0268\000\000\0213@\000\001\013\034\000\000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\021\032|\000\001\011W`\000\010M>\000\000Dkp\000\004&_\000\000\"6(\000\002\0266@\000\021\032|\000\001\013\033 \000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\0265\000\000\021\032|\000\001\011W`\000\010O&\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\021\032|\000\001\011W`\000\010M>\000\000Dkp\000\004,a\000\000\"5x\000\002\023/@\000\0212`\000\001\011W`\000\010M>\000\000Dkp\000\004&_\000\000\"5x\000\002\023/@\000\021\032|\000\001\013\025\000\000\010ML\000\000EMP\000\004,m\000\000\"fh\000\002\026(@\000\0212\034\000\001\011W`\000\010M>\000\000EI`\000\004&_\000\000\"h@\000\002\023j\000\000\0214\024\000\001\011W`\000\010M>\000\000EP \000\004&_\000\000\"gP\000\002\023/@\000\021\032|\000\001\013\030 \000\010U\024\000\000E\025P\000\004*J\000\000\"T\010\000\002\024V@\000\021(`\000\001\n&`\000\010R6\000\000E\0230\000\004)\033\000\000\"IX\000\002\024M@\000\021$l\000\001\n&`\000\010R6\000\000E\025P\000\004)-\000\000\"Jh\000\002\024V@\000\021%4\000\001\n+ \000\010RZ\000\000E3 \000\004)-\000\000\"Jh\000\002\024V@\000\021,\010\000\001\n_\000\000\010RZ\000\000E\025P\000\004*n\000\000\"Jh\000\002\024V@\000\021%4\000\001\n+ \000\010U:\000\000E\025P\000\004)-\000\000\"Jh\000\002\024V@\000\021%4\000\001\nU`\000\010RZ\000\000E\025P\000\004)-\000\000\"Jh\000\002\025(@\000\021%4\000\001\n+ \000\010RZ\000\000E\025P\000\004)-\000\000\"Jh\000\002\024V@\000\021,h\000\001\n+ \000\010RZ\000\000E\025P\000\004+\002\000\000\"W`\000\002\024V@\000\021%4\000\001\n[@\000\010RZ\000\000E\025P\000\004)-\000\000\"Jh\000\002\025.@\000\021%4\000\001\n+ \000\010RZ\000\000E\025P\000\004)-\000\000\"U8\000\002\024V@\000\021%4\000\001\n+ \000\010RZ\000\000E*\020\000\004+M\000\000\"[\030\000\002\025f@\000\021-L\000\001\nl`\000\010W6\000\000E:@\000\004+T\000\000\"] \000\002\025j\000\000\021.P\000\001\nu\000\000\010W(\000\000E@0\000\004,\003\000\000\"[\030\000\002\025Y@\000\021-L\000\001\nl`\000\010Vf\000\000E60\000\004+3\000\000\"\\0\000\002\025c\000\000\021.\030\000\001\nq@\000\010W\014\000\000E8`\000\004+3\000\000\"[\030\000\002\025Y@\000\021-L\000\001\nl`\000\010Vf\000\000E60\000\004+3\000\000\"[\030\000\002\025Y@\000\021-L\000\001\nl`\000\010Vf\000\000E60\000\004+3\000\000\"[\030\000\002\025Y@\000\021-\000\000\001\nl`\000\010Vf\000\000E60\000\004+3\000\000\"[\030\000\002\025Y@\000\021-L\000\001\nl`\000\010W\014\000\000E8`\000\004+F\000\000\"\\0\000\002\025c\000\000\021.\030\000\001\nl`\000\010Vf\000\000E60\000\004+3\000\000\"[\030\000\002\025Y@\000\021-L\000\001\nl`\000\010Vf\000\000E60\000\004+3\000\000\"[\030\000\002\025Y@\000\021-L\000\001\nl`\000\010Vf\000\000E60\000\004+ \000\000P\000\002\000\001\000\0000\000\020\000\005\000\001@\0008\000\020\000\004@\001 \000,\000\014\000\003 \000p\000\036\000\010\000\000\000\000\021xL\000\001\017W`\000\010}>\000\000Gc\020\000\004>_\000\000#ux\000\002\037/@\000\021z|\000\001\017W`\000\010}>\000\000GLp\000\004<s\000\000#ux\000\002\0367@\000\021u\010\000\001\017W`\000\010{\n\000\000GY\020\000\004=I\000\000#lH\000\002\036d@\000\021v$\000\001\0172 \000\010{\022\000\000GY\020\000\004=I\000\000#ux\000\002\037/@\000\021z|\000\001\017W`\000\010}>\000\000Gkp\000\004>_\000\000#ux\000\002\037/@\000\021z|\000\001\0175`\000\010}>\000\000Gkp\000\004>_\000\000#ux\000\002\037/@\000\021z|\000\001\017W`\000\010}>\000\000Gkp\000\004>_\000\000#A@\000\002\037/@\000\021z|\000\001\017W`\000\010}>\000\000Gkp\000\0048\n\000\000#ux\000\002\037/@\000\021w,\000\001\017W`\000\010}>\000\000Gkp\000\004>_\000\000#ux\000\002\037/@\000\021z|\000\001\017W`\000\010}>\000\000Gkp\000\004={\000\000#p@\000\002\037/@\000\021z|\000\001\017W`\000\010z<\000\000Ga\000\000\004>_\000\000#ux\000\002\034\003\000\000\021z|\000\001\017\035`\000\010p2\000\000Gfp\000\0048\006\000\000#ux\000\002\037\016@\000\021z|\000\001\016\002`\000\010}>\000\000Gkp\000\004=\006\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@n3\000\000\006K9Rt<@\000\000\003\005\\\000\000\000\000Jf \000\004X\000\000\000%@\000\000\002,\000\000\000\022`\000\000\001\026\000\000\000\0110\000\000\000K\000\000\000\004X\000\000\000%?@\000\002+|\000\000\022_`\000\001\025~\000\000\011/p\000\000K\000\000\000\004X\000\000\000%@\000\000\002,\000\000\000\022`\000\000\001\026\000\000\000\0110\000\000\000K\000\000\000\004X\000\000\000%@\000\000\002,\000\000\000\022`\000\000\001\026\000\000\000\0110\000\000\000K\000\000\000\004X\000\000\000%@\000\000\002,\000\000\000\022_`\000\001\026\000\000\000\0110\000\000\000K\000\000\000\004X\000\000\000%@\000\000\002,\000\000\000\022`\000\000\001\026\000\000\000\0110\000\000\000K\000\000\000\004V^\000\000%@\000\000\002,\014@\000\023\010L\000\001\030@\000\000\011Ct\000\000K\024p\000\004b\014\000\000&\020\000\000\0021\011Cds%2Kv\021\033ae\023v\021u5\n9Le%\007\177(O%\034z%-nA\014|2/\035\007\006\000bC\022Xo!@\000M+`\000\004k7\000\000&[8\000\0025p\000\000\023-\\\000\001\032m`\000\011Vn\000\000M6p\000\004k7\000\000&[8\000\00244\000\000\023#P\000\001\032m`\000\011Q`\000\000M9\000\000\004k7\000\000&\\ \000\0025S@\000\023-\034\000\001\032i`\000\011VN\000\000M4p\000\004k'\000\000&Z8\000\0025S@\000\023-\034\000\001\032m`\000\011Vn\000\000M6p\000\004k7\000\000&[8\000\0025[@\000\023-\\\000\001\032m`\000\011Vn\000\000M6p\000\004k\017\000\000&[8\000\0025[@\000\023-\\\000\001\032m`\000\011Vn\000\000M6p\000\004k7\000\000&[8\000\0025[@\000\023-\\\000\001\032P\000\000\011Vn\000\000M6p\000\004k7\000\000&[8\000\0025[@\000\023)$\000\001\032m`\000\011Vn\000\000M'\020\000\004k7\000\000&[8\000\0025[@\000\023-\\\000\001\032m`\000\011Vn\000\000M6p\000\004k7\000\000&[8\000\0025[@\000\023&X\000\001\0321 \000\011Vn\000\000M6p\000\004k7\000\000&L\010\000\0024b@\000\023-\\\000\001\032m`\000\011QH\000\000M6p\000\004hx\000\000&^ \000\0025&@\000\023#\020\000\001\032m`\000\011Ud\000\000M6p\000\004jd\000\000&[8\000\0025[@\000\023$\034\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\000\000\011kT\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011i:\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011i:\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011i:\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011i:\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011i:\000\000NKP\000\004u@\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011qt\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\036\037 \000\011qz\000\000O\017P\000\004x}\000\000'Gh\000\002<>@\000\023ct\000\001\036\037 \000\011qz\000\000O\017P\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011i:\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023S\014\000\001\035\027 \000\011i:\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\036\035`\000\011i:\000\000NKP\000\004uR\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011i:\000\000NKP\000\004t]\000\000'%h\000\002<:\000\000\023Rt\000\001\035\027 \000\011qV\000\000NKP\000\004t]\000\000'%h\000\002:.@\000\023Rt\000\001\035\027 \000\011i:\000\000O\014p\000\004td\000\000'%h\000\002:.@\000\023Rt\000\001\036\031\000\000\011q:\000\000NKP\000\004t]\000\000'EP\000\002:.@\000\023b4\000\001\0354`\000\011q\n\000\000NKP\000\004t]\000\000'D\020\000\002:.@\000\023al\000\001\035\027 \000\011i:\000\000O\016@\000\004wy\000\000':0\000\002;|@\000\023]\030\000\001\035i@\000\011o\036\000\000Ny\000\000\004wH\000\000'<@\000\002;d\000\000\023^ \000\001\035r\000\000\011o\020\000\000NwP\000\004w=\000\000':0\000\002;S\000\000\023]\030\000\001\035i@\000\011nL\000\000Nt`\000\004w&\000\000';0\000\002;[\000\000\023]X\000\001\035m@\000\011nl\000\000Nv`\000\004w&\000\000':0\000\002;S\000\000\023]\030\000\001\035i@\000\011nL\000\000Nt`\000\004w&\000\000':0\000\002;S\000\000\023]\030\000\001\035i@\000\011nL\000\000Nt`\000\004w&\000\000':0\000\002;S\000\000\023\\L\000\001\035i@\000\011nL\000\000Nt`\000\004w&\000\000':0\000\002;S\000\000\023]\030\000\001\035i@\000\011nl\000\000Nv`\000\004w6\000\000';0\000\002;[\000\000\023]X\000\001\035i@\000\011nL\000\000Nt`\000\004w&\000\000':0\000\002;S\000\000\023]\030\000\001\035i@\000\011nL\000\000Nt`\000\004w&\000\000':0\000\002;S\000\000\023]\030\000\001\035i@\000\011nL\000\000Nt`\000\004w\023\000\000P\000\002\000\001\000\0000\000\020\000\005\000\001@\0008\000\020\000\004@\001 \000,\000\014\000\003 \000p\000\036\000\010\000\000\004\n\011\006D\"Q@\000\003\005Dc2\031,`\000\000`1\031\014fC)Xn8\034@\000\000\000\000\000\000\000\000\000\000\000\004\002\001",0xef6);
    private static final int[] _data4 = decodeData("\000\001%T\000\000\n-&\000\000Rj`\000\005\026Y\000\000).0\000\002K.\000\000\024Zt\000\001%W`\000\n-B\000\000R\\`\000\005\026c\000\000)6 \000\002K2@\000\024[\034\000\001%9@\000\n-F\000\000Rl@\000\005\026i\000\000)6P\000\002K5@\000\024[0\000\001%9@\000\n-Z\000\000Rmp\000\005\026q\000\000)7\030\000\002K:@\000\024[\\\000\001%^@\000\n+L\000\000Ro@\000\005\026\177\000\000)8\020\000\002KB@\000\024\\ \000\001%b`\000\n.\032\000\000R\\`\000\005\027\017\000\000)9\000\000\002N[\000\000\024\\D\000\001%d@\000\n.&\000\000R\\`\000\005\023]\000\000)9 \000\002KK\000\000\024\\`\000\001%f@\000\n+L\000\000\000\000\000\000\000\000\000\000\000*~(\000\002W\177@\000\025@d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000RpyQ\021SLmor@\000\n`l\000\000V\007\000\000\00508\000\000+\003P\000\002X\035\000\000\025Ap\000\001,\017\000\000\n`|\000\000V\007`\000\0050@\000\000+\004\000\000\002X!\000\000\025B\010\000\001,\021\000\000\na\010\000\000V\010`\000\0050F\000\000+\004@\000\002X$\000\000\025B(\000\001,\022@\000\na\030\000\000V\011@\000\0050N\000\000+\004p\000\002X(\000\000\025B@\000\001,\024@\000\na$\000\000V\n@\000\0050T\000\000+\0050\000\002X+\000\000\025B`\000\001,\026\000\000\na4\000\000V\013 \000\0050\\\000\000+\005`\000\002X/\000\000\025Bx\000\001,\030\000\000\na@\000\000V\014 \000\0050b\000\000+\006 \000\002X2\000\000\025C\030\000\001,\031@\000\naP\000\000V\r\000\000\0050j\000\000+\006P\000\002X6\000\000\025C0\000\001,\033@\000\na\\\000\000V\016\000\000\0050p\000\000+\007\020\000\002X9\000\000\025CP\000\001,\035\000\000\nal\000\000V\016`\000\0050x\000\000+\007@\000\002X=\000\000\025Ch\000\001,\037\000\000\nax\000\000V\017`\000\0050~\000\000+\010\000\000\002X@\000\000\025D\010\000\001, @\000\nb\010\000\000V\020@\000\0051\006\000\000+\0100\000\002XD\000\000\025D \000\001,\"@\000\nb\024\000\000V\021@\000\0051\014\000\000+\010p\000\002XG\000\000\025D@\000\001,$\000\000\nb$\000\000V\022 \000\0051\024\000\000+\011 \000\002XK\000\000\025DX\000\001,&\000\000\nb0\000\000V\023 \000\0051\032\000\000+\011`\000\002XN\000\000\025Dx\000\001,'@\000\nb@\000\000V\024\000\000\0051\"\000\000+\n\020\000\002XR\000\000\025E\020\000\001,)@\000\nbL\000\000V\025\000\000\0051(\000\000+\nP\000\002XU\000\000\025E0\000\001,+\000\000\nb\\\000\000V\025`\000\00510\000\000+\013\000\000\002XY\000\000\025EH\000\001,-\000\000\nbh\000\000V\026`\000\00516\000\000+\013@\000\002X\\\000\000\025Eh\000\001,.@\000\nbx\000\000V\027@\000\0051>\000\000+\013p\000\002X`\000\000\025F\000\000\001,0@\000\nc\004\000\000V\030@\000\0051D\000\000+\0140\000\002Xc\000\000\025F \000\001,2\000\000\nc\024\000\000V\031 \000\0051L\000\000+\014`\000\002Xg\000\000\025F8\000\001,4\000\000\nc \000\000V\032 \000\0051R\000\000+\r \000\002Xj\000\000\025FX\000\001,5@\000\nc0\000\000V\033\000\000\0051Z\000\000+\rP\000\002Xn\000\000\025Fp\000\001,7@\000\nc<\000\000V\034\000\000\0051`\000\000+\016\020\000\002Xq\000\000\025G\020\000\001,9\000\000\ncL\000\000V\034`\000\0051h\000\000+\016@\000\002Xu\000\000\025G(\000\001,;\000\000\ncX\000\000V\035`\000\0051n\000\000+\017\000\000\002Xx\000\000\025GH\000\001,<@\000\nch\000\000V\036@\000\0051v\000\000+\0170\000\002X|\000\000\025G`\000\001,>@\000\nct\000\000V\037@\000\0051|\000\000+\017p\000\002X\177\000\000\025H\000\000\001,@\000\000\nd\004\000\000V  \000\0052\004\000\000+\020 \000\002Y\003\000\000\025H\030\000\001,B\000\000\nd\020\000\000V! \000\0052\n\000\000+\020`\000\002Y\006\000\000\025H8\000\001,C@\000\nd \000\000V\"\000\000\0052\022\000\000+\021\020\000\002Y\n\000\000\025HP\000\001,E@\000\nd,\000\000V#\000\000\0052\030\000\000+\021P\000\002Y\r\000\000\025Hp\000\001,G\000\000\nd<\000\000V#`\000\0052 \000\000+\022\000\000\002Y\021\000\000\025I\010\000\001,I\000\000\ndH\000\000V$`\000\0052&\000\000+\022@\000\002Y\024\000\000\025I(\000\001,J@\000\ndX\000\000V%@\000\0052.\000\000+\022p\000\002Y\030\000\000\025I@\000\001,L@\000\ndd\000\000\000\000\004\000\000\000\000\011 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\025\032\r\022I\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A)Pi\024H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\024\000\000\001%9@\000\n+L\000\000R\\`\000\005\025f\000\000).0\000\002Js\000\000\024W\030\000\001%9@\000\n+L\037ow{}~\177?_ow{}~\177?@\000\000\000\000\0004\177\177\177<p\000\000\003e@\000\000\000\004\000\000\000\000\000\000\000\000k\177\177~y`\000\000\007K\000\000\000\000\010\000\000\000\000\000 \020\010\004\002\001",0x278);
    private static final int[] _data5 = decodeData("\000\000\000\000\003\\\000\000\000\035`\000\000\000\000\001R\000\000\000)uH\000\002O/\000\000\024{\010\000\001'Z\000\000\nfz\000\000Ue \000\005.*\037\177\177\177~\000\001\000\000\000\000\000\002m\000\000\000\026p\000\nGD\000\000T< \000\005&\005h\037\000\000\000\000\000\000\000\003\177`\000\000\000\000\000\000\001\177%\007SXmt\033\004\177FE\n\0216\006\"f?iQ\0025\004}s{\037|\000\000\000\000\000\000\000\020\004@\000\000\000\000\000\000\010\001`\000\000\000\000\000\000\004\000P\000\000\000\000\000\000\001\177@\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000?x\000\000\000\000\000\000\000 \011\000\000\000\000\000\000\000\000\000J\000\001\177@\000\000\027~\000\000\000\000\000\000\000\003\177\000\000\000\000\000\000\000\001\177`\000\000\000\000\000\000\001\003p\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000_|\000\000\000\000\000\000\000\020;\177\177\177\177@\000\000\010\036\000\000\000\000\000\000\000\003~\177\177\177J(\006Y)\177@\000\000\r5~)T\177O\177\177rJ\001V*\000\002A\000\000\010\004\002\001",0x45);


    private final void trampoline() throws ExecutionException {
        while(state == RUNNING) {
            switch(pc>>>9) {
                case 0x80: run_10000(); break; 
                case 0x81: run_10200(); break; 
                case 0x82: run_10400(); break; 
                case 0x83: run_10600(); break; 
                case 0x84: run_10800(); break; 
                case 0x85: run_10a00(); break; 
                case 0x86: run_10c00(); break; 
                case 0x87: run_10e00(); break; 
                case 0x88: run_11000(); break; 
                case 0x89: run_11200(); break; 
                case 0x8a: run_11400(); break; 
                case 0x8b: run_11600(); break; 
                case 0x8c: run_11800(); break; 
                case 0x8d: run_11a00(); break; 
                case 0x8e: run_11c00(); break; 
                case 0x8f: run_11e00(); break; 
                case 0x90: run_12000(); break; 
                case 0x91: run_12200(); break; 
                case 0x92: run_12400(); break; 
                case 0x93: run_12600(); break; 
                case 0x94: run_12800(); break; 
                case 0x95: run_12a00(); break; 
                case 0x96: run_12c00(); break; 
                case 0x97: run_12e00(); break; 
                case 0x98: run_13000(); break; 
                case 0x99: run_13200(); break; 
                case 0x9a: run_13400(); break; 
                case 0x9b: run_13600(); break; 
                case 0x9c: run_13800(); break; 
                case 0x9d: run_13a00(); break; 
                case 0x9e: run_13c00(); break; 
                case 0x9f: run_13e00(); break; 
                case 0xa0: run_14000(); break; 
                case 0xa1: run_14200(); break; 
                case 0xa2: run_14400(); break; 
                case 0xa3: run_14600(); break; 
                case 0xa4: run_14800(); break; 
                case 0xa5: run_14a00(); break; 
                case 0xa6: run_14c00(); break; 
                case 0xa7: run_14e00(); break; 
                case 0xa8: run_15000(); break; 
                case 0xa9: run_15200(); break; 
                case 0xaa: run_15400(); break; 
                case 0xab: run_15600(); break; 
                case 0xac: run_15800(); break; 
                case 0xad: run_15a00(); break; 
                case 0xae: run_15c00(); break; 
                case 0xaf: run_15e00(); break; 
                case 0xb0: run_16000(); break; 
                case 0xb1: run_16200(); break; 
                case 0xb2: run_16400(); break; 
                case 0xb3: run_16600(); break; 
                case 0xb4: run_16800(); break; 
                case 0xb5: run_16a00(); break; 
                case 0xb6: run_16c00(); break; 
                case 0xb7: run_16e00(); break; 
                case 0xb8: run_17000(); break; 
                case 0xb9: run_17200(); break; 
                case 0xba: run_17400(); break; 
                case 0xbb: run_17600(); break; 
                case 0xbc: run_17800(); break; 
                case 0xbd: run_17a00(); break; 
                case 0xbe: run_17c00(); break; 
                case 0xbf: run_17e00(); break; 
                case 0xc0: run_18000(); break; 
                case 0xc1: run_18200(); break; 
                case 0xc2: run_18400(); break; 
                case 0xc3: run_18600(); break; 
                case 0xc4: run_18800(); break; 
                case 0xc5: run_18a00(); break; 
                case 0xc6: run_18c00(); break; 
                case 0xc7: run_18e00(); break; 
                case 0xc8: run_19000(); break; 
                case 0xc9: run_19200(); break; 
                case 0xca: run_19400(); break; 
                case 0xcb: run_19600(); break; 
                case 0xcc: run_19800(); break; 
                case 0xcd: run_19a00(); break; 
                case 0xce: run_19c00(); break; 
                case 0xcf: run_19e00(); break; 
                case 0xd0: run_1a000(); break; 
                case 0xd1: run_1a200(); break; 
                case 0xd2: run_1a400(); break; 
                case 0xd3: run_1a600(); break; 
                case 0xd4: run_1a800(); break; 
                case 0xd5: run_1aa00(); break; 
                case 0xd6: run_1ac00(); break; 
                case 0xd7: run_1ae00(); break; 
                case 0xd8: run_1b000(); break; 
                case 0xd9: run_1b200(); break; 
                case 0xda: run_1b400(); break; 
                case 0xdb: run_1b600(); break; 
                case 0xdc: run_1b800(); break; 
                case 0xdd: run_1ba00(); break; 
                case 0xde: run_1bc00(); break; 
                case 0xdf: run_1be00(); break; 
                case 0xe0: run_1c000(); break; 
                case 0xe1: run_1c200(); break; 
                case 0xe2: run_1c400(); break; 
                case 0xe3: run_1c600(); break; 
                case 0xe4: run_1c800(); break; 
                case 0xe5: run_1ca00(); break; 
                case 0xe6: run_1cc00(); break; 
                case 0xe7: run_1ce00(); break; 
                case 0xe8: run_1d000(); break; 
                case 0xe9: run_1d200(); break; 
                case 0xea: run_1d400(); break; 
                case 0xeb: run_1d600(); break; 
                case 0xec: run_1d800(); break; 
                case 0xed: run_1da00(); break; 
                case 0xee: run_1dc00(); break; 
                case 0xef: run_1de00(); break; 
                case 0xf0: run_1e000(); break; 
                case 0xf1: run_1e200(); break; 
                case 0xf2: run_1e400(); break; 
                case 0xf3: run_1e600(); break; 
                case 0xf4: run_1e800(); break; 
                case 0xf5: run_1ea00(); break; 
                case 0xf6: run_1ec00(); break; 
                case 0xf7: run_1ee00(); break; 
                case 0xf8: run_1f000(); break; 
                case 0xf9: run_1f200(); break; 
                case 0xfa: run_1f400(); break; 
                case 0xfb: run_1f600(); break; 
                case 0xfc: run_1f800(); break; 
                case 0xfd: run_1fa00(); break; 
                case 0xfe: run_1fc00(); break; 
                case 0xff: run_1fe00(); break; 
                case 0x100: run_20000(); break; 
                case 0x101: run_20200(); break; 
                case 0x102: run_20400(); break; 
                case 0x103: run_20600(); break; 
                case 0x104: run_20800(); break; 
                case 0x105: run_20a00(); break; 
                case 0x106: run_20c00(); break; 
                case 0x107: run_20e00(); break; 
                case 0x108: run_21000(); break; 
                case 0x109: run_21200(); break; 
                case 0x10a: run_21400(); break; 
                case 0x10b: run_21600(); break; 
                case 0x10c: run_21800(); break; 
                case 0x10d: run_21a00(); break; 
                case 0x10e: run_21c00(); break; 
                case 0x10f: run_21e00(); break; 
                case 0x110: run_22000(); break; 
                case 0x111: run_22200(); break; 
                case 0x112: run_22400(); break; 
                case 0x113: run_22600(); break; 
                case 0x114: run_22800(); break; 
                case 0x115: run_22a00(); break; 
                case 0x116: run_22c00(); break; 
                case 0x117: run_22e00(); break; 
                case 0x118: run_23000(); break; 
                case 0x119: run_23200(); break; 
                case 0x11a: run_23400(); break; 
                case 0x11b: run_23600(); break; 
                case 0x11c: run_23800(); break; 
                case 0x11d: run_23a00(); break; 
                case 0x11e: run_23c00(); break; 
                case 0x11f: run_23e00(); break; 
                case 0x120: run_24000(); break; 
                case 0x121: run_24200(); break; 
                case 0x122: run_24400(); break; 
                case 0x123: run_24600(); break; 
                case 0x124: run_24800(); break; 
                case 0x125: run_24a00(); break; 
                case 0x126: run_24c00(); break; 
                case 0x127: run_24e00(); break; 
                case 0x128: run_25000(); break; 
                case 0x129: run_25200(); break; 
                case 0x12a: run_25400(); break; 
                case 0x12b: run_25600(); break; 
                case 0x12c: run_25800(); break; 
                case 0x12d: run_25a00(); break; 
                case 0x12e: run_25c00(); break; 
                case 0x12f: run_25e00(); break; 
                case 0x130: run_26000(); break; 
                case 0x131: run_26200(); break; 
                case 0x132: run_26400(); break; 
                case 0x133: run_26600(); break; 
                case 0x134: run_26800(); break; 
                case 0x135: run_26a00(); break; 
                case 0x136: run_26c00(); break; 
                case 0x137: run_26e00(); break; 
                case 0x138: run_27000(); break; 
                case 0x139: run_27200(); break; 
                case 0x13a: run_27400(); break; 
                case 0x13b: run_27600(); break; 
                case 0x13c: run_27800(); break; 
                case 0x13d: run_27a00(); break; 
                case 0x13e: run_27c00(); break; 
                case 0x13f: run_27e00(); break; 
                case 0x140: run_28000(); break; 
                case 0x141: run_28200(); break; 
                case 0x142: run_28400(); break; 
                case 0x143: run_28600(); break; 
                case 0x144: run_28800(); break; 
                case 0x145: run_28a00(); break; 
                case 0x146: run_28c00(); break; 
                case 0x147: run_28e00(); break; 
                case 0x148: run_29000(); break; 
                case 0x149: run_29200(); break; 
                case 0x14a: run_29400(); break; 
                case 0x14b: run_29600(); break; 
                case 0x14c: run_29800(); break; 
                case 0x14d: run_29a00(); break; 
                case 0x14e: run_29c00(); break; 
                case 0x14f: run_29e00(); break; 
                case 0x150: run_2a000(); break; 
                case 0x151: run_2a200(); break; 
                case 0x152: run_2a400(); break; 
                case 0x153: run_2a600(); break; 
                case 0x154: run_2a800(); break; 
                case 0x155: run_2aa00(); break; 
                case 0x156: run_2ac00(); break; 
                case 0x157: run_2ae00(); break; 
                case 0x158: run_2b000(); break; 
                case 0x159: run_2b200(); break; 
                case 0x15a: run_2b400(); break; 
                case 0x15b: run_2b600(); break; 
                case 0x15c: run_2b800(); break; 
                case 0x15d: run_2ba00(); break; 
                case 0x15e: run_2bc00(); break; 
                case 0x15f: run_2be00(); break; 
                case 0x160: run_2c000(); break; 
                case 0x161: run_2c200(); break; 
                case 0x162: run_2c400(); break; 
                case 0x163: run_2c600(); break; 
                case 0x164: run_2c800(); break; 
                case 0x165: run_2ca00(); break; 
                case 0x166: run_2cc00(); break; 
                case 0x167: run_2ce00(); break; 
                case 0x168: run_2d000(); break; 
                case 0x169: run_2d200(); break; 
                case 0x16a: run_2d400(); break; 
                case 0x16b: run_2d600(); break; 
                case 0x16c: run_2d800(); break; 
                case 0x16d: run_2da00(); break; 
                case 0x16e: run_2dc00(); break; 
                case 0x16f: run_2de00(); break; 
                case 0x170: run_2e000(); break; 
                case 0x171: run_2e200(); break; 
                case 0x172: run_2e400(); break; 
                case 0x173: run_2e600(); break; 
                case 0x174: run_2e800(); break; 
                case 0x175: run_2ea00(); break; 
                case 0x176: run_2ec00(); break; 
                case 0x177: run_2ee00(); break; 
                case 0x178: run_2f000(); break; 
                case 0x179: run_2f200(); break; 
                case 0x17a: run_2f400(); break; 
                case 0x17b: run_2f600(); break; 
                case 0x17c: run_2f800(); break; 
                case 0x17d: run_2fa00(); break; 
                case 0x17e: run_2fc00(); break; 
                case 0x17f: run_2fe00(); break; 
                case 0x180: run_30000(); break; 
                case 0x181: run_30200(); break; 
                case 0x182: run_30400(); break; 
                case 0x183: run_30600(); break; 
                case 0x184: run_30800(); break; 
                case 0x185: run_30a00(); break; 
                case 0x186: run_30c00(); break; 
                case 0x187: run_30e00(); break; 
                case 0x188: run_31000(); break; 
                case 0x189: run_31200(); break; 
                case 0x18a: run_31400(); break; 
                case 0x18b: run_31600(); break; 
                case 0x18c: run_31800(); break; 
                case 0x18d: run_31a00(); break; 
                case 0x18e: run_31c00(); break; 
                case 0x18f: run_31e00(); break; 
                case 0x190: run_32000(); break; 
                case 0x191: run_32200(); break; 
                case 0x192: run_32400(); break; 
                case 0x193: run_32600(); break; 
                case 0x194: run_32800(); break; 
                case 0x195: run_32a00(); break; 
                case 0x196: run_32c00(); break; 
                case 0x197: run_32e00(); break; 
                case 0x198: run_33000(); break; 
                case 0x199: run_33200(); break; 
                case 0x19a: run_33400(); break; 
                case 0x19b: run_33600(); break; 
                case 0x19c: run_33800(); break; 
                case 0x19d: run_33a00(); break; 
                case 0x19e: run_33c00(); break; 
                case 0x19f: run_33e00(); break; 
                case 0x1a0: run_34000(); break; 
                case 0x1a1: run_34200(); break; 
                case 0x1a2: run_34400(); break; 
                case 0x1a3: run_34600(); break; 
                case 0x1a4: run_34800(); break; 
                case 0x1a5: run_34a00(); break; 
                case 0x1a6: run_34c00(); break; 
                case 0x1a7: run_34e00(); break; 
                case 0x1a8: run_35000(); break; 
                case 0x1a9: run_35200(); break; 
                case 0x1aa: run_35400(); break; 
                case 0x1ab: run_35600(); break; 
                case 0x1ac: run_35800(); break; 
                case 0x1ad: run_35a00(); break; 
                case 0x1ae: run_35c00(); break; 
                case 0x1af: run_35e00(); break; 
                case 0x1b0: run_36000(); break; 
                case 0x1b1: run_36200(); break; 
                case 0x1b2: run_36400(); break; 
                case 0x1b3: run_36600(); break; 
                case 0x1b4: run_36800(); break; 
                case 0x1b5: run_36a00(); break; 
                case 0x1b6: run_36c00(); break; 
                case 0x1b7: run_36e00(); break; 
                case 0x1b8: run_37000(); break; 
                case 0x1b9: run_37200(); break; 
                case 0x1ba: run_37400(); break; 
                case 0x1bb: run_37600(); break; 
                case 0x1bc: run_37800(); break; 
                case 0x1bd: run_37a00(); break; 
                case 0x1be: run_37c00(); break; 
                case 0x1bf: run_37e00(); break; 
                case 0x1c0: run_38000(); break; 
                case 0x1c1: run_38200(); break; 
                case 0x1c2: run_38400(); break; 
                case 0x1c3: run_38600(); break; 
                case 0x1c4: run_38800(); break; 
                case 0x1c5: run_38a00(); break; 
                case 0x1c6: run_38c00(); break; 
                case 0x1c7: run_38e00(); break; 
                case 0x1c8: run_39000(); break; 
                case 0x1c9: run_39200(); break; 
                case 0x1ca: run_39400(); break; 
                case 0x1cb: run_39600(); break; 
                case 0x1cc: run_39800(); break; 
                case 0x1cd: run_39a00(); break; 
                case 0x1ce: run_39c00(); break; 
                case 0x1cf: run_39e00(); break; 
                case 0x1d0: run_3a000(); break; 
                case 0x1d1: run_3a200(); break; 
                case 0x1d2: run_3a400(); break; 
                case 0x1d3: run_3a600(); break; 
                case 0x1d4: run_3a800(); break; 
                case 0x1d5: run_3aa00(); break; 
                case 0x1d6: run_3ac00(); break; 
                case 0x1d7: run_3ae00(); break; 
                case 0x1d8: run_3b000(); break; 
                case 0x1d9: run_3b200(); break; 
                case 0x1da: run_3b400(); break; 
                case 0x1db: run_3b600(); break; 
                case 0x1dc: run_3b800(); break; 
                case 0x1dd: run_3ba00(); break; 
                case 0x1de: run_3bc00(); break; 
                case 0x1df: run_3be00(); break; 
                case 0x1e0: run_3c000(); break; 
                case 0x1e1: run_3c200(); break; 
                case 0x1e2: run_3c400(); break; 
                case 0x1e3: run_3c600(); break; 
                case 0x1e4: run_3c800(); break; 
                case 0x1e5: run_3ca00(); break; 
                case 0x1e6: run_3cc00(); break; 
                case 0x1e7: run_3ce00(); break; 
                case 0x1e8: run_3d000(); break; 
                case 0x1e9: run_3d200(); break; 
                case 0x1ea: run_3d400(); break; 
                case 0x1eb: run_3d600(); break; 
                case 0x1ec: run_3d800(); break; 
                case 0x1ed: run_3da00(); break; 
                case 0x1ee: run_3dc00(); break; 
                case 0x1ef: run_3de00(); break; 
                case 0x1f0: run_3e000(); break; 
                case 0x1f1: run_3e200(); break; 
                case 0x1f2: run_3e400(); break; 
                case 0x1f3: run_3e600(); break; 
                case 0x1f4: run_3e800(); break; 
                case 0x1f5: run_3ea00(); break; 
                case 0x1f6: run_3ec00(); break; 
                case 0x1f7: run_3ee00(); break; 
                case 0x1f8: run_3f000(); break; 
                case 0x1f9: run_3f200(); break; 
                case 0x1fa: run_3f400(); break; 
                case 0x1fb: run_3f600(); break; 
                case 0x1fc: run_3f800(); break; 
                case 0x1fd: run_3fa00(); break; 
                case 0x1fe: run_3fc00(); break; 
                case 0x1ff: run_3fe00(); break; 
                case 0x200: run_40000(); break; 
                case 0x201: run_40200(); break; 
                case 0x202: run_40400(); break; 
                case 0x203: run_40600(); break; 
                case 0x204: run_40800(); break; 
                case 0x205: run_40a00(); break; 
                case 0x206: run_40c00(); break; 
                case 0x207: run_40e00(); break; 
                case 0x208: run_41000(); break; 
                case 0x209: run_41200(); break; 
                case 0x20a: run_41400(); break; 
                case 0x20b: run_41600(); break; 
                case 0x20c: run_41800(); break; 
                case 0x20d: run_41a00(); break; 
                case 0x20e: run_41c00(); break; 
                case 0x20f: run_41e00(); break; 
                case 0x210: run_42000(); break; 
                case 0x211: run_42200(); break; 
                case 0x212: run_42400(); break; 
                case 0x213: run_42600(); break; 
                case 0x214: run_42800(); break; 
                case 0x215: run_42a00(); break; 
                case 0x216: run_42c00(); break; 
                case 0x217: run_42e00(); break; 
                case 0x218: run_43000(); break; 
                case 0x219: run_43200(); break; 
                case 0x21a: run_43400(); break; 
                case 0x21b: run_43600(); break; 
                case 0x21c: run_43800(); break; 
                case 0x21d: run_43a00(); break; 
                case 0x21e: run_43c00(); break; 
                case 0x21f: run_43e00(); break; 
                case 0x220: run_44000(); break; 
                case 0x221: run_44200(); break; 
                case 0x222: run_44400(); break; 
                case 0x223: run_44600(); break; 
                case 0x224: run_44800(); break; 
                case 0x225: run_44a00(); break; 
                case 0x226: run_44c00(); break; 
                case 0x227: run_44e00(); break; 
                case 0x228: run_45000(); break; 
                case 0x229: run_45200(); break; 
                case 0x22a: run_45400(); break; 
                case 0x22b: run_45600(); break; 
                case 0x22c: run_45800(); break; 
                case 0x22d: run_45a00(); break; 
                case 0x22e: run_45c00(); break; 
                case 0x22f: run_45e00(); break; 
                case 0x230: run_46000(); break; 
                case 0x231: run_46200(); break; 
                case 0x232: run_46400(); break; 
                case 0x233: run_46600(); break; 
                case 0x234: run_46800(); break; 
                case 0x235: run_46a00(); break; 
                case 0x236: run_46c00(); break; 
                case 0x237: run_46e00(); break; 
                case 0x238: run_47000(); break; 
                case 0x239: run_47200(); break; 
                case 0x23a: run_47400(); break; 
                case 0x23b: run_47600(); break; 
                case 0x23c: run_47800(); break; 
                case 0x23d: run_47a00(); break; 
                case 0x23e: run_47c00(); break; 
                case 0x23f: run_47e00(); break; 
                case 0x240: run_48000(); break; 
                case 0x241: run_48200(); break; 
                case 0x242: run_48400(); break; 
                case 0x243: run_48600(); break; 
                case 0x244: run_48800(); break; 
                case 0x245: run_48a00(); break; 
                case 0x246: run_48c00(); break; 
                case 0x247: run_48e00(); break; 
                case 0x248: run_49000(); break; 
                case 0x249: run_49200(); break; 
                case 0x24a: run_49400(); break; 
                case 0x24b: run_49600(); break; 
                case 0x24c: run_49800(); break; 
                case 0x24d: run_49a00(); break; 
                case 0x24e: run_49c00(); break; 
                case 0x24f: run_49e00(); break; 
                case 0x250: run_4a000(); break; 
                case 0x251: run_4a200(); break; 
                case 0x252: run_4a400(); break; 
                case 0x253: run_4a600(); break; 
                case 0x254: run_4a800(); break; 
                case 0x255: run_4aa00(); break; 
                case 0x256: run_4ac00(); break; 
                case 0x257: run_4ae00(); break; 
                case 0x258: run_4b000(); break; 
                case 0x259: run_4b200(); break; 
                case 0x25a: run_4b400(); break; 
                case 0x25b: run_4b600(); break; 
                case 0x25c: run_4b800(); break; 
                case 0x25d: run_4ba00(); break; 
                case 0x25e: run_4bc00(); break; 
                case 0x25f: run_4be00(); break; 
                case 0x260: run_4c000(); break; 
                case 0x261: run_4c200(); break; 
                case 0x262: run_4c400(); break; 
                case 0x263: run_4c600(); break; 
                case 0x264: run_4c800(); break; 
                case 0x265: run_4ca00(); break; 
                case 0x266: run_4cc00(); break; 
                case 0x267: run_4ce00(); break; 
                case 0x268: run_4d000(); break; 
                case 0x269: run_4d200(); break; 
                case 0x26a: run_4d400(); break; 
                case 0x26b: run_4d600(); break; 
                case 0x26c: run_4d800(); break; 
                case 0x26d: run_4da00(); break; 
                case 0x26e: run_4dc00(); break; 
                case 0x26f: run_4de00(); break; 
                case 0x270: run_4e000(); break; 
                case 0x271: run_4e200(); break; 
                case 0x272: run_4e400(); break; 
                case 0x273: run_4e600(); break; 
                case 0x274: run_4e800(); break; 
                case 0x275: run_4ea00(); break; 
                case 0x276: run_4ec00(); break; 
                case 0x277: run_4ee00(); break; 
                case 0x278: run_4f000(); break; 
                case 0x279: run_4f200(); break; 
                case 0x27a: run_4f400(); break; 
                case 0x27b: run_4f600(); break; 
                case 0x27c: run_4f800(); break; 
                case 0x27d: run_4fa00(); break; 
                case 0x27e: run_4fc00(); break; 
                case 0x27f: run_4fe00(); break; 
                case 0x280: run_50000(); break; 
                case 0x281: run_50200(); break; 
                case 0x282: run_50400(); break; 
                case 0x283: run_50600(); break; 
                case 0x284: run_50800(); break; 
                case 0x285: run_50a00(); break; 
                case 0x286: run_50c00(); break; 
                case 0x287: run_50e00(); break; 
                case 0x288: run_51000(); break; 
                case 0x289: run_51200(); break; 
                case 0x28a: run_51400(); break; 
                case 0x28b: run_51600(); break; 
                case 0x28c: run_51800(); break; 
                case 0x28d: run_51a00(); break; 
                default: throw new ExecutionException("invalid address 0x" + Long.toString(this.pc&0xffffffffL,16) + ": r2: " + r2);
            }
        }
    }

    public grc65() {
        super(4096,65536);
        initPages(_data1,0x51c00,false);
        initPages(_data2,0x51c08,false);
        initPages(_data3,0x52000,true);
        initPages(_data4,0x55bd8,false);
        initPages(_data5,0x565c0,false);
        clearPages(0x566d4,0x1c);
        clearPages(0x56744,0xcbc);
    }

    protected int entryPoint() { return 0x11000; }
    protected int heapStart() { return 0x59a34; }
    protected int gp() { return 0x5e5c0; }
    public static void main(String[] args) throws Exception {
        grc65 me = new grc65();
        int status = me.run("org.badvision.grc65",args);
        System.exit(status);
    }

    protected void _execute() throws ExecutionException { trampoline(); }

    protected void setCPUState(CPUState state) {
        r1=state.r[1];
        r2=state.r[2];
        r3=state.r[3];
        r4=state.r[4];
        r5=state.r[5];
        r6=state.r[6];
        r7=state.r[7];
        r8=state.r[8];
        r9=state.r[9];
        r10=state.r[10];
        r11=state.r[11];
        r12=state.r[12];
        r13=state.r[13];
        r14=state.r[14];
        r15=state.r[15];
        r16=state.r[16];
        r17=state.r[17];
        r18=state.r[18];
        r19=state.r[19];
        r20=state.r[20];
        r21=state.r[21];
        r22=state.r[22];
        r23=state.r[23];
        r24=state.r[24];
        r25=state.r[25];
        r26=state.r[26];
        r27=state.r[27];
        r28=state.r[28];
        r29=state.r[29];
        r30=state.r[30];
        r31=state.r[31];
        f0=state.f[0];
        f1=state.f[1];
        f2=state.f[2];
        f3=state.f[3];
        f4=state.f[4];
        f5=state.f[5];
        f6=state.f[6];
        f7=state.f[7];
        f8=state.f[8];
        f9=state.f[9];
        f10=state.f[10];
        f11=state.f[11];
        f12=state.f[12];
        f13=state.f[13];
        f14=state.f[14];
        f15=state.f[15];
        f16=state.f[16];
        f17=state.f[17];
        f18=state.f[18];
        f19=state.f[19];
        f20=state.f[20];
        f21=state.f[21];
        f22=state.f[22];
        f23=state.f[23];
        f24=state.f[24];
        f25=state.f[25];
        f26=state.f[26];
        f27=state.f[27];
        f28=state.f[28];
        f29=state.f[29];
        f30=state.f[30];
        f31=state.f[31];
        hi=state.hi; lo=state.lo; fcsr=state.fcsr;
        pc=state.pc;
    }
    protected void getCPUState(CPUState state) {
        state.r[1]=r1;
        state.r[2]=r2;
        state.r[3]=r3;
        state.r[4]=r4;
        state.r[5]=r5;
        state.r[6]=r6;
        state.r[7]=r7;
        state.r[8]=r8;
        state.r[9]=r9;
        state.r[10]=r10;
        state.r[11]=r11;
        state.r[12]=r12;
        state.r[13]=r13;
        state.r[14]=r14;
        state.r[15]=r15;
        state.r[16]=r16;
        state.r[17]=r17;
        state.r[18]=r18;
        state.r[19]=r19;
        state.r[20]=r20;
        state.r[21]=r21;
        state.r[22]=r22;
        state.r[23]=r23;
        state.r[24]=r24;
        state.r[25]=r25;
        state.r[26]=r26;
        state.r[27]=r27;
        state.r[28]=r28;
        state.r[29]=r29;
        state.r[30]=r30;
        state.r[31]=r31;
        state.f[0]=f0;
        state.f[1]=f1;
        state.f[2]=f2;
        state.f[3]=f3;
        state.f[4]=f4;
        state.f[5]=f5;
        state.f[6]=f6;
        state.f[7]=f7;
        state.f[8]=f8;
        state.f[9]=f9;
        state.f[10]=f10;
        state.f[11]=f11;
        state.f[12]=f12;
        state.f[13]=f13;
        state.f[14]=f14;
        state.f[15]=f15;
        state.f[16]=f16;
        state.f[17]=f17;
        state.f[18]=f18;
        state.f[19]=f19;
        state.f[20]=f20;
        state.f[21]=f21;
        state.f[22]=f22;
        state.f[23]=f23;
        state.f[24]=f24;
        state.f[25]=f25;
        state.f[26]=f26;
        state.f[27]=f27;
        state.f[28]=f28;
        state.f[29]=f29;
        state.f[30]=f30;
        state.f[31]=f31;
        state.hi=hi; state.lo=lo; state.fcsr=fcsr;
        state.pc=pc;
    }

    private static final java.util.Hashtable symbols = new java.util.Hashtable();
    static {
        symbols.put("stpcpy",new Integer(0x24a00));
        symbols.put("xmalloc",new Integer(0x17e00));
        symbols.put("setgrent",new Integer(0x35a00));
        symbols.put("chroot",new Integer(0x2ea00));
        symbols.put("strcpy",new Integer(0x24e00));
        symbols.put("xfree",new Integer(0x18200));
        symbols.put("waitpid",new Integer(0x2cc00));
        symbols.put("strtok_r",new Integer(0x26a00));
        symbols.put("getgid",new Integer(0x2b4c4));
        symbols.put("sysconf",new Integer(0x2c200));
        symbols.put("printf",new Integer(0x22600));
        symbols.put("vsprintf",new Integer(0x48a00));
        symbols.put("utime",new Integer(0x2c600));
        symbols.put("getlogin",new Integer(0x36c00));
        symbols.put("recv",new Integer(0x31c00));
        symbols.put("connect",new Integer(0x30000));
        symbols.put("IsBDigit",new Integer(0x15400));
        symbols.put("GetVersionAsNumber",new Integer(0x17c00));
        symbols.put("ungetc",new Integer(0x4fe00));
        symbols.put("strerror",new Integer(0x25600));
        symbols.put("geteuid",new Integer(0x2b4b4));
        symbols.put("memmove",new Integer(0x3d600));
        symbols.put("snprintf",new Integer(0x41400));
        symbols.put("IsDigit",new Integer(0x14e00));
        symbols.put("pathconf",new Integer(0x2e600));
        symbols.put("FindExt",new Integer(0x16c00));
        symbols.put("mknod",new Integer(0x2ec00));
        symbols.put("getgrgid",new Integer(0x35600));
        symbols.put("IsBlank",new Integer(0x14a00));
        symbols.put("getenv",new Integer(0x3ba00));
        symbols.put("fchmod",new Integer(0x2de00));
        symbols.put("IsUpper",new Integer(0x15200));
        symbols.put("getegid",new Integer(0x2b4d4));
        symbols.put("setpriority",new Integer(0x2fe00));
        symbols.put("getpriority",new Integer(0x2fc00));
        symbols.put("bsearch",new Integer(0x1ac00));
        symbols.put("usleep",new Integer(0x2f000));
        symbols.put("IsQuote",new Integer(0x15a00));
        symbols.put("getpagesize",new Integer(0x2a980));
        symbols.put("fchown",new Integer(0x2d800));
        symbols.put("fgets",new Integer(0x1c000));
        symbols.put("dirname",new Integer(0x36e00));
        symbols.put("memcpy",new Integer(0x2addc));
        symbols.put("readlink",new Integer(0x2d400));
        symbols.put("dup2",new Integer(0x2ca00));
        symbols.put("mbrtowc",new Integer(0x49e00));
        symbols.put("getpass",new Integer(0x36800));
        symbols.put("getuid",new Integer(0x2b4a4));
        symbols.put("malloc",new Integer(0x20400));
        symbols.put("isatty",new Integer(0x3c200));
        symbols.put("iswspace",new Integer(0x49a00));
        symbols.put("endpwent",new Integer(0x36600));
        symbols.put("sleep",new Integer(0x2a8f0));
        symbols.put("vsnprintf",new Integer(0x48600));
        symbols.put("IsODigit",new Integer(0x15600));
        symbols.put("recvfrom",new Integer(0x31600));
        symbols.put("UnknownOption",new Integer(0x16000));
        symbols.put("strtoul",new Integer(0x42600));
        symbols.put("gethostbyaddr",new Integer(0x35000));
        symbols.put("rmdir",new Integer(0x2c000));
        symbols.put("InitCmdLine",new Integer(0x15e00));
        symbols.put("socket",new Integer(0x30200));
        symbols.put("select",new Integer(0x31800));
        symbols.put("readdir",new Integer(0x34400));
        symbols.put("lchown",new Integer(0x2da00));
        symbols.put("setgroups",new Integer(0x32c00));
        symbols.put("fflush",new Integer(0x1bc00));
        symbols.put("ftruncate",new Integer(0x2ee00));
        symbols.put("FindTarget",new Integer(0x17400));
        symbols.put("realpath",new Integer(0x2f600));
        symbols.put("chown",new Integer(0x2d600));
        symbols.put("send",new Integer(0x31a00));
        symbols.put("chmod",new Integer(0x2dc00));
        symbols.put("alarm",new Integer(0x2b864));
        symbols.put("strtol",new Integer(0x27000));
        symbols.put("pipe",new Integer(0x2c800));
        symbols.put("uname",new Integer(0x37200));
        symbols.put("accept",new Integer(0x30800));
        symbols.put("NeedArg",new Integer(0x16200));
        symbols.put("basename",new Integer(0x37000));
        symbols.put("strtod",new Integer(0x4c800));
        symbols.put("xdup",new Integer(0x18600));
        symbols.put("sysctl",new Integer(0x2fa00));
        symbols.put("fstat",new Integer(0x46600));
        symbols.put("fprintf",new Integer(0x1e200));
        symbols.put("setpwent",new Integer(0x36400));
        symbols.put("xstrdup",new Integer(0x18400));
        symbols.put("bind",new Integer(0x30e00));
        symbols.put("InvDef",new Integer(0x16600));
        symbols.put("inet_addr",new Integer(0x38000));
        symbols.put("mkfifo",new Integer(0x2f200));
        symbols.put("chdir",new Integer(0x2c400));
        symbols.put("initgroups",new Integer(0x38400));
        symbols.put("endgrent",new Integer(0x35c00));
        symbols.put("setsockopt",new Integer(0x30c00));
        symbols.put("fseek",new Integer(0x1f400));
        symbols.put("GetVersionAsString",new Integer(0x17a00));
        symbols.put("memchr",new Integer(0x21200));
        symbols.put("GetTargetName",new Integer(0x17800));
        symbols.put("umask",new Integer(0x2b494));
        symbols.put("lstat",new Integer(0x2e000));
        symbols.put("IsAlpha",new Integer(0x14400));
        symbols.put("strstr",new Integer(0x26000));
        symbols.put("setgid",new Integer(0x32800));
        symbols.put("signal",new Integer(0x40c00));
        symbols.put("strncmp",new Integer(0x41c00));
        symbols.put("strncpy",new Integer(0x41e00));
        symbols.put("sync",new Integer(0x33c00));
        symbols.put("sendto",new Integer(0x31400));
        symbols.put("IsAlNum",new Integer(0x14600));
        symbols.put("realloc",new Integer(0x22c00));
        symbols.put("strtok",new Integer(0x26600));
        symbols.put("memcmp",new Integer(0x3d400));
        symbols.put("listen",new Integer(0x31000));
        symbols.put("xrealloc",new Integer(0x18000));
        symbols.put("fork",new Integer(0x46400));
        symbols.put("sscanf",new Integer(0x41600));
        symbols.put("getgrent",new Integer(0x35800));
        symbols.put("sigaction",new Integer(0x34000));
        symbols.put("inet_aton",new Integer(0x37c00));
        symbols.put("IsSpace",new Integer(0x14c00));
        symbols.put("symlink",new Integer(0x2d200));
        symbols.put("fopen",new Integer(0x1de00));
        symbols.put("localtime",new Integer(0x1fe00));
        symbols.put("memset",new Integer(0x2adec));
        symbols.put("main",new Integer(0x12c00));
        symbols.put("GetTargetProperties",new Integer(0x17600));
        symbols.put("fclose",new Integer(0x1b400));
        symbols.put("inet_ntoa",new Integer(0x34800));
        symbols.put("getppid",new Integer(0x2afbc));
        symbols.put("time",new Integer(0x27200));
        symbols.put("opendir",new Integer(0x34200));
        symbols.put("getgroups",new Integer(0x31e00));
        symbols.put("getgrouplist",new Integer(0x38200));
        symbols.put("seteuid",new Integer(0x32600));
        symbols.put("putc",new Integer(0x22a00));
        symbols.put("herror",new Integer(0x34e00));
        symbols.put("strcmp",new Integer(0x24c00));
        symbols.put("shutdown",new Integer(0x31200));
        symbols.put("ttyname",new Integer(0x33e00));
        symbols.put("vfiprintf",new Integer(0x48200));
        symbols.put("getpwuid",new Integer(0x36000));
        symbols.put("dup",new Integer(0x2e400));
        symbols.put("InvArg",new Integer(0x16400));
        symbols.put("getcwd",new Integer(0x2ce00));
        symbols.put("gethostbyname",new Integer(0x35200));
        symbols.put("getpwnam",new Integer(0x35e00));
        symbols.put("getservbyname",new Integer(0x34a00));
        symbols.put("gethostname",new Integer(0x37800));
        symbols.put("sprintf",new Integer(0x4aa00));
        symbols.put("strtof",new Integer(0x4ca00));
        symbols.put("atexit",new Integer(0x1a600));
        symbols.put("setlocale",new Integer(0x3d000));
        symbols.put("getpeername",new Integer(0x32200));
        symbols.put("nanf",new Integer(0x4a600));
        symbols.put("vfork",new Integer(0x2e800));
        symbols.put("fsync",new Integer(0x33000));
        symbols.put("fputc",new Integer(0x1e600));
        symbols.put("getsockopt",new Integer(0x30a00));
        symbols.put("hstrerror",new Integer(0x34c00));
        symbols.put("localtime_r",new Integer(0x20000));
        symbols.put("localeconv",new Integer(0x3d200));
        symbols.put("LongOption",new Integer(0x16a00));
        symbols.put("fwrite",new Integer(0x1fc00));
        symbols.put("xvsprintf",new Integer(0x1a200));
        symbols.put("access",new Integer(0x2be00));
        symbols.put("MakeFilename",new Integer(0x17000));
        symbols.put("getdents",new Integer(0x2e200));
        symbols.put("exit",new Integer(0x1b000));
        symbols.put("klogctl",new Integer(0x2f400));
        symbols.put("getgrnam",new Integer(0x35400));
        symbols.put("atoi",new Integer(0x1a800));
        symbols.put("GetArg",new Integer(0x16800));
        symbols.put("AbEnd",new Integer(0x14200));
        symbols.put("getpwent",new Integer(0x36200));
        symbols.put("xsprintf",new Integer(0x1a000));
        symbols.put("daemon",new Integer(0x37a00));
        symbols.put("strlen",new Integer(0x10ee4));
        symbols.put("open",new Integer(0x46800));
        symbols.put("IsAscii",new Integer(0x14800));
        symbols.put("xvsnprintf",new Integer(0x19200));
        symbols.put("strchr",new Integer(0x41a00));
        symbols.put("IsXDigit",new Integer(0x15800));
        symbols.put("fputs",new Integer(0x3b000));
        symbols.put("setsid",new Integer(0x32e00));
        symbols.put("setegid",new Integer(0x32a00));
        symbols.put("closedir",new Integer(0x34600));
        symbols.put("vasprintf",new Integer(0x36a00));
        symbols.put("xsnprintf",new Integer(0x19e00));
        symbols.put("setuid",new Integer(0x32400));
        symbols.put("mkdir",new Integer(0x2bc00));
        symbols.put("wcrtomb",new Integer(0x50200));
        symbols.put("close",new Integer(0x46200));
        symbols.put("_call_helper",new Integer(0x10f00));
        symbols.put("vfprintf",new Integer(0x29e00));
        symbols.put("IsLower",new Integer(0x15000));
        symbols.put("fputwc",new Integer(0x49800));
        symbols.put("raise",new Integer(0x40a00));
        symbols.put("free",new Integer(0x20600));
        symbols.put("FindName",new Integer(0x16e00));
        symbols.put("getsockname",new Integer(0x32000));
    }
    public int lookupSymbol(String symbol) { Integer i = (Integer) symbols.get(symbol); return i==null ? -1 : i.intValue(); }

}
